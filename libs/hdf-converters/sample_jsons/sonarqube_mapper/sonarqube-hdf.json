{"platform":{"name":"Heimdall Tools","release":"2.5.0","target_id":""},"version":"2.5.0","statistics":{"duration":null},"profiles":[{"name":"Sonarqube Scan","version":"","title":"SonarQube Scan of Project ","maintainer":null,"summary":"SonarQube Scan of Project ","license":null,"copyright":null,"copyright_email":null,"supports":[],"attributes":[],"depends":[],"groups":[],"status":"loaded","controls":[{"desc":"<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>","descriptions":[],"refs":[],"source_location":{},"id":"typescript:S3776","title":"Refactor this function to reduce its Cognitive Complexity from 23 to the 15 allowed.","impact":0,"tags":{},"results":[{"status":"failed","code_desc":"Path:test:apps/frontend/src/components/cards/controltable/ControlTable.vue:353:353 StartLine: 353, EndLine: 353<br>Code:<pre>\n  /** Return items sorted and filters out viewed controls */\n  get items(): ListElt[] {\n    // Controls ascending/descending\n    let factor = 1;\n    // Whether or not we need to sort</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/hdf-converters/src/base-converter.ts:195:195 StartLine: 195, EndLine: 195<br>Code:<pre>  }\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  handleArray<T extends object>(\n    file: Record<string, unknown>,\n    v: Array<T & ILookupPath>\n  ): Array<T> {</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-json.ts:228:228 StartLine: 228, EndLine: 228<br>Code:<pre>}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-jsonmin.ts:90:90 StartLine: 90, EndLine: 90<br>Code:<pre>}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/profile-json.ts:147:147 StartLine: 147, EndLine: 147<br>Code:<pre>}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:apps/frontend/src/components/cards/treemap/Treemap.vue:71:71 StartLine: 71, EndLine: 71<br>Code:<pre>\n  /** The currently selected treemap node. Wrapped to avoid initialization woes */\n  get selected_node(): d3.HierarchyRectangularNode<TreemapNode> {\n    // Get typed versions of the curr state\n    // Set curr to root\n    let curr = this.treemap_layout;</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/context.ts:153:153 StartLine: 153, EndLine: 153<br>Code:<pre>}\n\nexport function contextualizeEvaluation(\n  evaluation: AnyEval\n): ContextualizedEvaluation {\n  // To begin, create basic context for profiles and evaluation</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/nist.ts:126:126 StartLine: 126, EndLine: 126<br>Code:<pre>   * Avoid repeating this if possible.\n   */\n  canonize(config: CanonizationConfig): string {\n    config = default_partial_config(config);\n    const ss = this.subSpecifiers;\n</pre>","run_time":0,"start_time":""}]},{"desc":"<p>By convention, a file that exports only one class, function, or constant should be named for that class, function or constant. Anything else may\nconfuse maintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// file path: myclass.js  -- Noncompliant\nclass MyClass {\n  // ...\n}\nexport default MyClass;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// file path: MyClass.js\nclass MyClass {\n  // ...\n}\nexport default MyClass;\n</pre>\n<h2>Exceptions</h2>\n<p>Case, underscores ( <code>_</code> ) and dashes (<code>-</code>) are ignored from the name comparison.</p>","descriptions":[],"refs":[],"source_location":{},"id":"typescript:S3317","title":"Rename this file to \"S3Reader\"","impact":0,"tags":{},"results":[{"status":"failed","code_desc":"","run_time":0,"start_time":""},{"status":"failed","code_desc":"","run_time":0,"start_time":""}]},{"desc":"<p>Overriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of\ncode. Further, it could lead maintainers to introduce bugs because they think theyâ€™re using one variable but are really using another.</p>","descriptions":[],"refs":[],"source_location":{},"id":"typescript:S1117","title":"'typ' is already declared in the upper scope.","impact":0,"tags":{},"results":[{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-json.ts:238:238 StartLine: 238, EndLine: 238<br>Code:<pre>        const l = typs.length;\n        for (let i = 0; i < l; i++) {\n            const typ = typs[i];\n            try {\n                return transform(val, typ, getProps);\n            } catch (_) {}</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-json.ts:268:268 StartLine: 268, EndLine: 268<br>Code:<pre>    }\n\n    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n        if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n            return invalidValue(\"object\", val);\n        }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-json.ts:273:273 StartLine: 273, EndLine: 273<br>Code:<pre>        }\n        const result: any = {};\n        Object.getOwnPropertyNames(props).forEach(key => {\n            const prop = props[key];\n            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n            result[prop.key] = transform(v, prop.typ, getProps, prop.key);</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-json.ts:278:278 StartLine: 278, EndLine: 278<br>Code:<pre>            result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n        });\n        Object.getOwnPropertyNames(val).forEach(key => {\n            if (!Object.prototype.hasOwnProperty.call(props, key)) {\n                result[key] = transform(val[key], additional, getProps, key);\n            }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-jsonmin.ts:130:130 StartLine: 130, EndLine: 130<br>Code:<pre>    }\n\n    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n        if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n            return invalidValue(\"object\", val);\n        }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-jsonmin.ts:135:135 StartLine: 135, EndLine: 135<br>Code:<pre>        }\n        const result: any = {};\n        Object.getOwnPropertyNames(props).forEach(key => {\n            const prop = props[key];\n            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n            result[prop.key] = transform(v, prop.typ, getProps, prop.key);</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-jsonmin.ts:140:140 StartLine: 140, EndLine: 140<br>Code:<pre>            result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n        });\n        Object.getOwnPropertyNames(val).forEach(key => {\n            if (!Object.prototype.hasOwnProperty.call(props, key)) {\n                result[key] = transform(val[key], additional, getProps, key);\n            }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/profile-json.ts:157:157 StartLine: 157, EndLine: 157<br>Code:<pre>        const l = typs.length;\n        for (let i = 0; i < l; i++) {\n            const typ = typs[i];\n            try {\n                return transform(val, typ, getProps);\n            } catch (_) {}</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/profile-json.ts:187:187 StartLine: 187, EndLine: 187<br>Code:<pre>    }\n\n    function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n        if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n            return invalidValue(\"object\", val);\n        }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/profile-json.ts:192:192 StartLine: 192, EndLine: 192<br>Code:<pre>        }\n        const result: any = {};\n        Object.getOwnPropertyNames(props).forEach(key => {\n            const prop = props[key];\n            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n            result[prop.key] = transform(v, prop.typ, getProps, prop.key);</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/profile-json.ts:197:197 StartLine: 197, EndLine: 197<br>Code:<pre>            result[prop.key] = transform(v, prop.typ, getProps, prop.key);\n        });\n        Object.getOwnPropertyNames(val).forEach(key => {\n            if (!Object.prototype.hasOwnProperty.call(props, key)) {\n                result[key] = transform(val[key], additional, getProps, key);\n            }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-json.ts:257:257 StartLine: 257, EndLine: 257<br>Code:<pre>    }\n\n    function transformDate(val: any): any {\n        if (val === null) {\n            return null;\n        }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-jsonmin.ts:119:119 StartLine: 119, EndLine: 119<br>Code:<pre>    }\n\n    function transformDate(val: any): any {\n        if (val === null) {\n            return null;\n        }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/profile-json.ts:176:176 StartLine: 176, EndLine: 176<br>Code:<pre>    }\n\n    function transformDate(val: any): any {\n        if (val === null) {\n            return null;\n        }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-jsonmin.ts:100:100 StartLine: 100, EndLine: 100<br>Code:<pre>        const l = typs.length;\n        for (let i = 0; i < l; i++) {\n            const typ = typs[i];\n            try {\n                return transform(val, typ, getProps);\n            } catch (_) {}</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-json.ts:229:229 StartLine: 229, EndLine: 229<br>Code:<pre>\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);\n    }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-json.ts:229:229 StartLine: 229, EndLine: 229<br>Code:<pre>\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);\n    }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-json.ts:234:234 StartLine: 234, EndLine: 234<br>Code:<pre>    }\n\n    function transformUnion(typs: any[], val: any): any {\n        // val must validate against one typ in typs\n        const l = typs.length;\n        for (let i = 0; i < l; i++) {</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-json.ts:246:246 StartLine: 246, EndLine: 246<br>Code:<pre>    }\n\n    function transformEnum(cases: string[], val: any): any {\n        if (cases.indexOf(val) !== -1) return val;\n        return invalidValue(cases, val);\n    }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-json.ts:251:251 StartLine: 251, EndLine: 251<br>Code:<pre>    }\n\n    function transformArray(typ: any, val: any): any {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(\"array\", val);\n        return val.map(el => transform(el, typ, getProps));</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-json.ts:251:251 StartLine: 251, EndLine: 251<br>Code:<pre>    }\n\n    function transformArray(typ: any, val: any): any {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(\"array\", val);\n        return val.map(el => transform(el, typ, getProps));</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-jsonmin.ts:91:91 StartLine: 91, EndLine: 91<br>Code:<pre>\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);\n    }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-jsonmin.ts:91:91 StartLine: 91, EndLine: 91<br>Code:<pre>\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);\n    }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-jsonmin.ts:96:96 StartLine: 96, EndLine: 96<br>Code:<pre>    }\n\n    function transformUnion(typs: any[], val: any): any {\n        // val must validate against one typ in typs\n        const l = typs.length;\n        for (let i = 0; i < l; i++) {</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-jsonmin.ts:108:108 StartLine: 108, EndLine: 108<br>Code:<pre>    }\n\n    function transformEnum(cases: string[], val: any): any {\n        if (cases.indexOf(val) !== -1) return val;\n        return invalidValue(cases, val);\n    }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-jsonmin.ts:113:113 StartLine: 113, EndLine: 113<br>Code:<pre>    }\n\n    function transformArray(typ: any, val: any): any {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(\"array\", val);\n        return val.map(el => transform(el, typ, getProps));</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-jsonmin.ts:113:113 StartLine: 113, EndLine: 113<br>Code:<pre>    }\n\n    function transformArray(typ: any, val: any): any {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(\"array\", val);\n        return val.map(el => transform(el, typ, getProps));</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/profile-json.ts:148:148 StartLine: 148, EndLine: 148<br>Code:<pre>\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);\n    }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/profile-json.ts:148:148 StartLine: 148, EndLine: 148<br>Code:<pre>\nfunction transform(val: any, typ: any, getProps: any, key: any = ''): any {\n    function transformPrimitive(typ: string, val: any): any {\n        if (typeof typ === typeof val) return val;\n        return invalidValue(typ, val, key);\n    }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/profile-json.ts:153:153 StartLine: 153, EndLine: 153<br>Code:<pre>    }\n\n    function transformUnion(typs: any[], val: any): any {\n        // val must validate against one typ in typs\n        const l = typs.length;\n        for (let i = 0; i < l; i++) {</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/profile-json.ts:165:165 StartLine: 165, EndLine: 165<br>Code:<pre>    }\n\n    function transformEnum(cases: string[], val: any): any {\n        if (cases.indexOf(val) !== -1) return val;\n        return invalidValue(cases, val);\n    }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/profile-json.ts:170:170 StartLine: 170, EndLine: 170<br>Code:<pre>    }\n\n    function transformArray(typ: any, val: any): any {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(\"array\", val);\n        return val.map(el => transform(el, typ, getProps));</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/profile-json.ts:170:170 StartLine: 170, EndLine: 170<br>Code:<pre>    }\n\n    function transformArray(typ: any, val: any): any {\n        // val must be an array with no invalid elements\n        if (!Array.isArray(val)) return invalidValue(\"array\", val);\n        return val.map(el => transform(el, typ, getProps));</pre>","run_time":0,"start_time":""}]},{"desc":"<p>Just because you <em>can</em> do something, doesnâ€™t mean you should, and thatâ€™s the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction getReadableStatus(job) {\n  return job.isRunning() ? \"Running\" : job.hasErrors() ? \"Failed\" : \"Succeeded \";  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction getReadableStatus(job) {\n  if (job.isRunning()) {\n    return \"Running\";\n  }\n  return job.hasErrors() ? \"Failed\" : \"Succeeded\";\n}\n</pre>","descriptions":[],"refs":[],"source_location":{},"id":"typescript:S3358","title":"Extract this nested ternary operation into an independent statement.","impact":0,"tags":{},"results":[{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-json.ts:298:300 StartLine: 298, EndLine: 300<br>Code:<pre>    if (typeof typ === \"object\") {\n        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\")    ? transformArray(typ.arrayItems, val)\n            : typ.hasOwnProperty(\"props\")         ? transformObject(getProps(typ), typ.additional, val)\n            : invalidValue(typ, val);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-json.ts:299:300 StartLine: 299, EndLine: 300<br>Code:<pre>        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\")    ? transformArray(typ.arrayItems, val)\n            : typ.hasOwnProperty(\"props\")         ? transformObject(getProps(typ), typ.additional, val)\n            : invalidValue(typ, val);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-jsonmin.ts:160:162 StartLine: 160, EndLine: 162<br>Code:<pre>    if (typeof typ === \"object\") {\n        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\")    ? transformArray(typ.arrayItems, val)\n            : typ.hasOwnProperty(\"props\")         ? transformObject(getProps(typ), typ.additional, val)\n            : invalidValue(typ, val);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/exec-jsonmin.ts:161:162 StartLine: 161, EndLine: 162<br>Code:<pre>        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\")    ? transformArray(typ.arrayItems, val)\n            : typ.hasOwnProperty(\"props\")         ? transformObject(getProps(typ), typ.additional, val)\n            : invalidValue(typ, val);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/profile-json.ts:217:219 StartLine: 217, EndLine: 219<br>Code:<pre>    if (typeof typ === \"object\") {\n        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\")    ? transformArray(typ.arrayItems, val)\n            : typ.hasOwnProperty(\"props\")         ? transformObject(getProps(typ), typ.additional, val)\n            : invalidValue(typ, val);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:libs/inspecjs/src/generated_parsers/v_1_0/profile-json.ts:218:219 StartLine: 218, EndLine: 219<br>Code:<pre>        return typ.hasOwnProperty(\"unionMembers\") ? transformUnion(typ.unionMembers, val)\n            : typ.hasOwnProperty(\"arrayItems\")    ? transformArray(typ.arrayItems, val)\n            : typ.hasOwnProperty(\"props\")         ? transformObject(getProps(typ), typ.additional, val)\n            : invalidValue(typ, val);\n    }\n    // Numbers can be parsed by Date but shouldn't be.\n    if (typ === Date && typeof val !== \"number\") return transformDate(val);</pre>","run_time":0,"start_time":""}]},{"desc":"<p>The TypeScript compiler automatically casts a variable to the relevant type inside conditionals where it is possible to infer the type (because\n<code>typeof</code>, <code>instanceof</code>, etc was used). This compiler feature makes casts and not-<code>null</code> assertions unnecessary.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction getName(x?: string | UserName) {\n  if (x) {\n    console.log(\"Getting name for \" + x!); // Noncompliant\n\n    if (typeof x === \"string\")\n      return (x as string); // Noncompliant\n    else\n      return (x as UserName).name; // Noncompliant\n  }\n  return \"NoName\";\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction getName(x?: string | UserName) {\n  if (x) {\n    console.log(\"Getting name for \" + x);\n\n    if (typeof x === \"string\")\n      return x;\n    else\n      return x.name;\n  }\n  return \"NoName\";\n}\n</pre>","descriptions":[],"refs":[],"source_location":{},"id":"typescript:S4325","title":"This assertion is unnecessary since it does not change the type of the expression.","impact":0,"tags":{},"results":[{"status":"failed","code_desc":"Path:test:apps/frontend/src/components/global/upload_tabs/aws/FileList.vue:79:79 StartLine: 79, EndLine: 79<br>Code:<pre>\n    // Fetch it from s3, and promise to submit it to be loaded afterwards\n    await fetch_s3_file(this.auth.creds, file.Key!, this.formBucketName).then(\n      (content) => {\n        InspecIntakeModule.loadText({\n          text: content,</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:apps/frontend/src/components/global/upload_tabs/aws/S3Reader.vue:184:184 StartLine: 184, EndLine: 184<br>Code:<pre>   */\n  async load_bucket(name: string) {\n    const s3 = new S3(this.assumedRole!.creds);\n    await s3\n      .listObjectsV2({\n        Bucket: name,</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:apps/frontend/src/store/data_filters.ts:96:103 StartLine: 96, EndLine: 103<br>Code:<pre>  const asHDF = contextControl.root.hdf;\n  // Get our (non-null) searchable data\n  const searchables: string[] = [\n    asHDF.wraps.id,\n    asHDF.wraps.title,\n    asHDF.wraps.code,\n    asHDF.severity,\n    asHDF.status,\n    asHDF.finding_details\n  ].filter((s) => s !== null) as string[];\n\n  // See if any contain term\n  return searchables.some((s) => s.toLowerCase().includes(term));</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:apps/frontend/src/utilities/format_util.ts:29:29 StartLine: 29, EndLine: 29<br>Code:<pre>  } else {\n    return `${execution_unique_key(\n      profile.sourcedFrom as SourcedContextualizedEvaluation\n    )}-${profile.data.name}`;\n  }\n}</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:apps/frontend/src/store/data_store.ts:81:83 StartLine: 81, EndLine: 83<br>Code:<pre>   */\n  get contextualExecutionProfiles(): readonly SourcedContextualizedProfile[] {\n    return this.contextualExecutions.flatMap(\n      (evaluation) => evaluation.contains\n    ) as SourcedContextualizedProfile[];\n  }\n\n  /**</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:apps/frontend/src/components/cards/treemap/Cell.vue:84:84 StartLine: 84, EndLine: 84<br>Code:<pre>    return (\n      this.is_control && // We are a control\n      (this.node.data as TreemapNodeLeaf).control.data.id ===\n        this.selectedControlId // Our control id matches\n    );\n  }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:apps/frontend/src/components/global/upload_tabs/aws/FileList.vue:83:83 StartLine: 83, EndLine: 83<br>Code:<pre>        InspecIntakeModule.loadText({\n          text: content,\n          filename: file.Key!\n        }).then((uniqueId) => this.$emit('got-files', [uniqueId]));\n      }\n    );</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:apps/frontend/src/utilities/delta_util.ts:158:158 StartLine: 158, EndLine: 158<br>Code:<pre>  for (const prof of ev.contains) {\n    for (const ctrl of prof.contains) {\n      if (ctrl.hdf.segments!.length) {\n        return ctrl.hdf.segments![0].start_time;\n      }\n    }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:apps/frontend/src/utilities/delta_util.ts:159:159 StartLine: 159, EndLine: 159<br>Code:<pre>    for (const ctrl of prof.contains) {\n      if (ctrl.hdf.segments!.length) {\n        return ctrl.hdf.segments![0].start_time;\n      }\n    }\n  }</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:apps/frontend/src/utilities/treemap_util.ts:222:222 StartLine: 222, EndLine: 222<br>Code:<pre>        }\n      } else if (root.parent !== null) {\n        return 1.0 / root.parent!.children.length;\n      }\n      return 0;\n    });</pre>","run_time":0,"start_time":""}]},{"desc":"<p>If you have an iterable, such as an array, set, or list, your best option for looping through its values is the <code>for of</code> syntax. Use a\ncounter, and â€¦â€‹ well youâ€™ll get the right behavior, but your code just isnâ€™t as clean or clear.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst arr = [4, 3, 2, 1];\n\nfor (let i = 0; i &lt; arr.length; i++) {  // Noncompliant\n  console.log(arr[i]);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconst arr = [4, 3, 2, 1];\n\nfor (let value of arr) {\n  console.log(value);\n}\n</pre>","descriptions":[],"refs":[],"source_location":{},"id":"typescript:S4138","title":"Expected a `for-of` loop instead of a `for` loop with this simple iteration.","impact":0,"tags":{},"results":[{"status":"failed","code_desc":"Path:test:apps/frontend/src/components/generic/ApexLineChart.vue:46:48 StartLine: 46, EndLine: 48<br>Code:<pre>  get label_colors(): string[] {\n    const colors = [];\n    for (let i = 0; i < this.categories.length; i++) {\n      colors.push('#FFFFFF');\n    }\n    return colors;\n  }\n</pre>","run_time":0,"start_time":""}]},{"desc":"<p>When two functions have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but\nmay be confusing to maintainers. In the latter case, the code should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction calculateCode() {\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n\nfunction getName() {  // Noncompliant\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction calculateCode() {\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n\nfunction getName() {\n  return calculateCode();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Functions with fewer than 3 lines are ignored.</p>","descriptions":[],"refs":[],"source_location":{},"id":"typescript:S4144","title":"Update this function so that its implementation is not identical to the one on line 38.","impact":0,"tags":{},"results":[{"status":"failed","code_desc":"Path:test:apps/frontend/tests/unit/Compare.spec.ts:46:46 StartLine: 46, EndLine: 46<br>Code:<pre>  });\n\n  it('does not recount same controls with 3 files', () => {\n    loadSample('NGINX With Failing Tests');\n    expect(\n      (wrapper.vm as Vue & {show_sets: [string, ControlSeries][]}).show_sets</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:apps/backend/src/evaluations/evaluations.service.spec.ts:293:293 StartLine: 293, EndLine: 293<br>Code:<pre>    });\n\n    it('should throw an error when the evaluation does not exist', async () => {\n      expect.assertions(1);\n      await expect(evaluationsService.findById('-1')).rejects.toThrow(\n        NotFoundException</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:apps/backend/src/pipes/password-complexity.pipe.spec.ts:141:141 StartLine: 141, EndLine: 141<br>Code:<pre>        )\n      ).toThrowError(BadRequestException);\n      expect(() =>\n        passwordComplexityPipe.transform(\n          CREATE_USER_DTO_TEST_OBJ_WITH_MISSING_PASSWORD_FIELD,\n          metaData</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:apps/backend/src/pipes/password-complexity.pipe.spec.ts:161:161 StartLine: 161, EndLine: 161<br>Code:<pre>        )\n      ).toThrowError(BadRequestException);\n      expect(() =>\n        passwordComplexityPipe.transform(\n          UPDATE_USER_DTO_TEST_WITHOUT_PASSWORD,\n          metaData</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:apps/backend/src/pipes/passwords-match.pipe.spec.ts:57:57 StartLine: 57, EndLine: 57<br>Code:<pre>        )\n      ).toThrowError(BadRequestException);\n      expect(() =>\n        passwordsMatchPipe.transform(\n          CREATE_USER_DTO_TEST_OBJ_WITH_UNMATCHING_PASSWORDS,\n          metaData</pre>","run_time":0,"start_time":""}]},{"desc":"<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething() {\n  // TODO\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>","descriptions":[],"refs":[],"source_location":{},"id":"typescript:S1135","title":"Complete the task associated to this \"TODO\" comment.","impact":0,"tags":{},"results":[{"status":"failed","code_desc":"Path:test:apps/frontend/src/utilities/splunk_util.ts:341:341 StartLine: 341, EndLine: 341<br>Code:<pre> * HDF heirarchy.\n *\n * TODO: Provide a mechanism for also returning orphaned items\n */\nexport function consolidate_payloads(\n  payloads: UnknownPayload[]</pre>","run_time":0,"start_time":""},{"status":"failed","code_desc":"Path:test:apps/frontend/src/components/cards/controltable/ControlRowDetails.vue:67:67 StartLine: 67, EndLine: 67<br>Code:<pre>import {ContextualizedControl} from 'inspecjs';\nimport _ from 'lodash';\n//TODO: add line numbers\nimport 'prismjs';\nimport 'prismjs/components/prism-makefile.js';\nimport 'prismjs/components/prism-ruby.js';</pre>","run_time":0,"start_time":""}]},{"desc":"<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could\nlead to an unexpected behavior in production.</p>\n<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate method and called\ndirectly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnew MyConstructor(); // Non-Compliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar something = new MyConstructor();  // Compliant\n</pre>\n<h2>Exceptions</h2>\n<p>Immediately dropped new objects inside <code>try</code>-statements are ignored.</p>\n<pre>\ntry {\n  new MyConstructor();\n} catch (e) {\n  /* ... */\n}\n</pre>","descriptions":[],"refs":[],"source_location":{},"id":"typescript:S1848","title":"Either remove this useless object instantiation of \"ConfigService\" or use it.","impact":0,"tags":{},"results":[{"status":"failed","code_desc":"Path:test:apps/backend/src/config/config.service.spec.ts:33:33 StartLine: 33, EndLine: 33<br>Code:<pre>      const consoleSpy = jest.spyOn(console, 'log');\n      // Used to make sure logs are outputted\n      new ConfigService();\n      expect(consoleSpy).toHaveBeenCalledWith(\n        'Unable to read configuration file `.env`!'\n      );</pre>","run_time":0,"start_time":""}]}],"sha256":"7b3a8227bf395fecf07c458671e90c3404de032ace6cab60b9b0043fb186ff5d"}]}
