{
  "platform": {
    "name": "Heimdall Tools",
    "release": "2.9.4"
  },
  "version": "2.9.4",
  "statistics": {},
  "profiles": [
    {
      "name": "BurpSuite Pro Scan",
      "version": "2020.1",
      "title": "BurpSuite Pro Scan",
      "summary": "BurpSuite Pro Scan",
      "supports": [],
      "attributes": [],
      "groups": [],
      "status": "loaded",
      "controls": [
        {
          "tags": {
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": "CWE-942: Overly Permissive Cross-domain Whitelist",
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "confidence": "Certain"
          },
          "refs": [],
          "source_location": {},
          "title": "Cross-origin resource sharing",
          "id": "2098688",
          "desc": "An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.\nEven if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.",
          "descriptions": [
            {
              "data": "An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.\nEven if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.",
              "label": "check"
            },
            {
              "data": "Any inappropriate domains should be removed from the CORS policy.",
              "label": "fix"
            }
          ],
          "impact": 0.3,
          "code": "{\n  \"serialNumber\": \"2940178995452886016\",\n  \"type\": \"2098688\",\n  \"name\": \"Cross-origin resource sharing\",\n  \"host\": {\n    \"text\": \"http://zero.webappsecurity.com\",\n    \"ip\": \"54.82.22.214\"\n  },\n  \"path\": \"/resources/js/jquery-1.8.2.min.js\",\n  \"location\": \"/resources/js/jquery-1.8.2.min.js\",\n  \"severity\": \"Information\",\n  \"confidence\": \"Certain\",\n  \"issueBackground\": \"<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.</p>\\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.</p>\",\n  \"remediationBackground\": \"<p>Any inappropriate domains should be removed from the CORS policy.</p>\",\n  \"references\": \"<ul>\\n  <li> <a href=\\\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\\\">Exploiting CORS Misconfigurations</a> </li>\\n</ul>\",\n  \"vulnerabilityClassifications\": \"<ul>\\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/942.html\\\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\\n</ul>\",\n  \"issueDetail\": \"The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.<br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/js/jquery-1.8.2.min.js\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/css/bootstrap.min.css\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/js/bootstrap.min.js\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/css/main.css\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/js/placeholders.min.js\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/css/font-awesome.css\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: https://zero.webappsecurity.com\nLocation: /robots.txt\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /search.html\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /index.html\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /robots.txt\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: https://zero.webappsecurity.com\nLocation: /\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": "CWE-942: Overly Permissive Cross-domain Whitelist",
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "confidence": "Certain"
          },
          "refs": [],
          "source_location": {},
          "title": "Cross-origin resource sharing: arbitrary origin trusted",
          "id": "2098689",
          "desc": "An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.\nIf the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.",
          "descriptions": [
            {
              "data": "An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.\nIf the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.",
              "label": "check"
            },
            {
              "data": "Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.",
              "label": "fix"
            }
          ],
          "impact": 0.3,
          "code": "{\n  \"serialNumber\": \"73318757634646016\",\n  \"type\": \"2098689\",\n  \"name\": \"Cross-origin resource sharing: arbitrary origin trusted\",\n  \"host\": {\n    \"text\": \"http://zero.webappsecurity.com\",\n    \"ip\": \"54.82.22.214\"\n  },\n  \"path\": \"/resources/js/jquery-1.8.2.min.js\",\n  \"location\": \"/resources/js/jquery-1.8.2.min.js\",\n  \"severity\": \"Information\",\n  \"confidence\": \"Certain\",\n  \"issueBackground\": \"<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>\\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.</p>\\n<p>If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>\",\n  \"remediationBackground\": \"<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>\",\n  \"references\": \"<ul>\\n  <li> <a href=\\\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\\\">Exploiting CORS Misconfigurations</a> </li>\\n</ul>\",\n  \"vulnerabilityClassifications\": \"<ul>\\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/942.html\\\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\\n</ul>\",\n  \"issueDetail\": \"The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.<br><br>The application allowed access from the requested origin <strong>http://hbofkpelsehu.com</strong><br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/js/jquery-1.8.2.min.js\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.The application allowed access from the requested origin http://hbofkpelsehu.comIf the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/css/bootstrap.min.css\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.The application allowed access from the requested origin http://mtpmzyfhccgq.comIf the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/js/bootstrap.min.js\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.The application allowed access from the requested origin http://fhizssbvwxlc.comIf the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/css/main.css\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.The application allowed access from the requested origin http://ysbwjdnoydae.comIf the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/js/placeholders.min.js\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.The application allowed access from the requested origin http://hgclyudnynwg.comIf the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/css/font-awesome.css\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.The application allowed access from the requested origin http://yxmzuemojsjs.comIf the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: https://zero.webappsecurity.com\nLocation: /robots.txt\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.The application allowed access from the requested origin https://odbifgfzjwxk.comIf the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /search.html\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.The application allowed access from the requested origin http://pllqapnqhuaw.comIf the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /index.html\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.The application allowed access from the requested origin http://yoejfhjmiyhp.comIf the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /robots.txt\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.The application allowed access from the requested origin http://ociuvmolpgqd.comIf the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: https://zero.webappsecurity.com\nLocation: /\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.The application allowed access from the requested origin https://rjjtexnikcnt.comIf the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /\nissueDetail: The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.The application allowed access from the requested origin http://wxzbifgnpfpf.comIf the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cweid": "CWE-20: Improper Input Validation\nCWE-116: Improper Encoding or Escaping of Output",
            "cci": [
              "CCI-001310"
            ],
            "confidence": "Certain"
          },
          "refs": [],
          "source_location": {},
          "title": "Input returned in response (reflected)",
          "id": "4197376",
          "desc": "Reflection of input arises when data is copied from a request and echoed into the application's immediate response.Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. ",
          "descriptions": [
            {
              "data": "Reflection of input arises when data is copied from a request and echoed into the application's immediate response.Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. ",
              "label": "check"
            },
            {
              "data": "",
              "label": "fix"
            }
          ],
          "impact": 0.3,
          "code": "{\n  \"serialNumber\": \"3738867435242687488\",\n  \"type\": \"4197376\",\n  \"name\": \"Input returned in response (reflected)\",\n  \"host\": {\n    \"text\": \"http://zero.webappsecurity.com\",\n    \"ip\": \"54.82.22.214\"\n  },\n  \"path\": \"/resources/js/jquery-1.8.2.min.js\",\n  \"location\": \"/resources/js/jquery-1.8.2.min.js [URL path folder 2]\",\n  \"severity\": \"Information\",\n  \"confidence\": \"Certain\",\n  \"issueBackground\": \"<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>\",\n  \"vulnerabilityClassifications\": \"<ul>\\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/20.html\\\">CWE-20: Improper Input Validation</a></li>\\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/116.html\\\">CWE-116: Improper Encoding or Escaping of Output</a></li>\\n</ul>\",\n  \"issueDetail\": \"The value of the URL path folder 2 is copied into the application's response.\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/js/jquery-1.8.2.min.js [URL path folder 2]\nissueDetail: The value of the URL path folder 2 is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/css/bootstrap.min.css [URL path filename]\nissueDetail: The value of the URL path filename is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/js/jquery-1.8.2.min.js [URL path folder 1]\nissueDetail: The value of the URL path folder 1 is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/js/bootstrap.min.js [URL path filename]\nissueDetail: The value of the URL path filename is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/css/main.css [URL path filename]\nissueDetail: The value of the URL path filename is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: https://zero.webappsecurity.com\nLocation: /robots.txt [URL path filename]\nissueDetail: The value of the URL path filename is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/css/bootstrap.min.css [URL path folder 2]\nissueDetail: The value of the URL path folder 2 is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/js/placeholders.min.js [URL path filename]\nissueDetail: The value of the URL path filename is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/css/font-awesome.css [URL path filename]\nissueDetail: The value of the URL path filename is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/js/bootstrap.min.js [URL path folder 2]\nissueDetail: The value of the URL path folder 2 is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/css/main.css [URL path folder 2]\nissueDetail: The value of the URL path folder 2 is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/css/bootstrap.min.css [URL path folder 1]\nissueDetail: The value of the URL path folder 1 is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/js/placeholders.min.js [URL path folder 2]\nissueDetail: The value of the URL path folder 2 is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/css/font-awesome.css [URL path folder 2]\nissueDetail: The value of the URL path folder 2 is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/js/bootstrap.min.js [URL path folder 1]\nissueDetail: The value of the URL path folder 1 is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /index.html [URL path filename]\nissueDetail: The value of the URL path filename is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/css/main.css [URL path folder 1]\nissueDetail: The value of the URL path folder 1 is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/js/placeholders.min.js [URL path folder 1]\nissueDetail: The value of the URL path folder 1 is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /robots.txt [URL path filename]\nissueDetail: The value of the URL path filename is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/css/font-awesome.css [URL path folder 1]\nissueDetail: The value of the URL path folder 1 is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /search.html [searchTerm parameter]\nissueDetail: The value of the searchTerm request parameter is copied into the application's response.\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": "CWE-530: Exposure of Backup File to an Unauthorized Control Sphere",
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "confidence": "Certain"
          },
          "refs": [],
          "source_location": {},
          "title": "Backup file",
          "id": "6291672",
          "desc": "Publicly accessible backups and outdated copies of files can provide attackers with extra attack surface. Depending on the server configuration and file type, they may also expose source code, configuration details, and other information intended to remain secret.",
          "descriptions": [
            {
              "data": "Publicly accessible backups and outdated copies of files can provide attackers with extra attack surface. Depending on the server configuration and file type, they may also expose source code, configuration details, and other information intended to remain secret.",
              "label": "check"
            },
            {
              "data": "Review the file to identify whether it's intended to be publicly accessible, and remove it from the server's web root if it isn't. It may also be worth auditing the server contents to find other outdated files, and taking measures to prevent the problem from recurring.",
              "label": "fix"
            }
          ],
          "impact": 0.3,
          "code": "{\n  \"serialNumber\": \"2086138921384538112\",\n  \"type\": \"6291672\",\n  \"name\": \"Backup file\",\n  \"host\": {\n    \"text\": \"http://zero.webappsecurity.com\",\n    \"ip\": \"54.82.22.214\"\n  },\n  \"path\": \"/index.html\",\n  \"location\": \"/index.old\",\n  \"severity\": \"Information\",\n  \"confidence\": \"Certain\",\n  \"issueBackground\": \"<p>Publicly accessible backups and outdated copies of files can provide attackers with extra attack surface. Depending on the server configuration and file type, they may also expose source code, configuration details, and other information intended to remain secret.</p>\",\n  \"remediationBackground\": \"<p>Review the file to identify whether it's intended to be publicly accessible, and remove it from the server's web root if it isn't. It may also be worth auditing the server contents to find other outdated files, and taking measures to prevent the problem from recurring.</p>\",\n  \"references\": \"<ul>\\n    <li><a href=\\\"https://www.owasp.org/index.php/Review_Old,_Backup_and_Unreferenced_Files_for_Sensitive_Information_(OTG-CONFIG-004)\\\">Review Old, Backup and Unreferenced Files for Sensitive Information</a></li>\\n</ul>\",\n  \"vulnerabilityClassifications\": \"<ul>\\n    <li><a href=\\\"https://cwe.mitre.org/data/definitions/530.html\\\">CWE-530: Exposure of Backup File to an Unauthorized Control Sphere</a></li>\\n</ul>\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /index.old\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /index.html.old\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": "CWE-16: Configuration",
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "confidence": "Certain"
          },
          "refs": [],
          "source_location": {},
          "title": "HTTP TRACE method is enabled",
          "id": "5245440",
          "desc": "The HTTP TRACE  method is designed for diagnostic purposes. If enabled, the web server will respond to requests that use the TRACE method by echoing in its response the exact request that was received.\nThis behavior is often harmless, but occasionally leads to the disclosure of sensitive information such as internal authentication headers appended by reverse proxies. This functionality could historically be used to bypass the HttpOnly cookie flag on cookies, but this is no longer possible in modern web browsers. ",
          "descriptions": [
            {
              "data": "The HTTP TRACE  method is designed for diagnostic purposes. If enabled, the web server will respond to requests that use the TRACE method by echoing in its response the exact request that was received.\nThis behavior is often harmless, but occasionally leads to the disclosure of sensitive information such as internal authentication headers appended by reverse proxies. This functionality could historically be used to bypass the HttpOnly cookie flag on cookies, but this is no longer possible in modern web browsers. ",
              "label": "check"
            },
            {
              "data": "The TRACE method should be disabled on production web servers.",
              "label": "fix"
            }
          ],
          "impact": 0.3,
          "code": "{\n  \"serialNumber\": \"4072491561500551168\",\n  \"type\": \"5245440\",\n  \"name\": \"HTTP TRACE method is enabled\",\n  \"host\": {\n    \"text\": \"https://zero.webappsecurity.com\",\n    \"ip\": \"54.82.22.214\"\n  },\n  \"path\": \"/\",\n  \"location\": \"/\",\n  \"severity\": \"Information\",\n  \"confidence\": \"Certain\",\n  \"issueBackground\": \"<p>The HTTP TRACE  method is designed for diagnostic purposes. If enabled, the web server will respond to requests that use the TRACE method by echoing in its response the exact request that was received.</p>\\n<p>This behavior is often harmless, but occasionally leads to the disclosure of sensitive information such as internal authentication headers appended by reverse proxies. This functionality could historically be used to bypass the HttpOnly cookie flag on cookies, but this is no longer possible in modern web browsers. </p>\",\n  \"remediationBackground\": \"<p>The TRACE method should be disabled on production web servers.</p>\",\n  \"vulnerabilityClassifications\": \"<ul>\\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/16.html\\\">CWE-16: Configuration</a></li>\\n</ul>\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: https://zero.webappsecurity.com\nLocation: /\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SC-12",
              "SC-13"
            ],
            "cweid": "CWE-295: Improper Certificate Validation\nCWE-326: Inadequate Encryption Strength\nCWE-327: Use of a Broken or Risky Cryptographic Algorithm",
            "cci": [
              "CCI-002438",
              "CCI-002450"
            ],
            "confidence": "Certain"
          },
          "refs": [],
          "source_location": {},
          "title": "TLS certificate",
          "id": "16777472",
          "desc": "TLS (or SSL) helps to protect the confidentiality and integrity of information in transit between the browser and server, and to provide authentication of the server's identity. To serve this purpose, the server must present an TLS certificate that is valid for the server's hostname, is issued by a trusted authority and is valid for the current date. If any one of these requirements is not met, TLS connections to the server will not provide the full protection for which TLS is designed.\nIt should be noted that various attacks exist against TLS in general, and in the context of HTTPS web connections in particular. It may be possible for a determined and suitably-positioned attacker to compromise TLS connections without user detection even when a valid TLS certificate is used. ",
          "descriptions": [
            {
              "data": "TLS (or SSL) helps to protect the confidentiality and integrity of information in transit between the browser and server, and to provide authentication of the server's identity. To serve this purpose, the server must present an TLS certificate that is valid for the server's hostname, is issued by a trusted authority and is valid for the current date. If any one of these requirements is not met, TLS connections to the server will not provide the full protection for which TLS is designed.\nIt should be noted that various attacks exist against TLS in general, and in the context of HTTPS web connections in particular. It may be possible for a determined and suitably-positioned attacker to compromise TLS connections without user detection even when a valid TLS certificate is used. ",
              "label": "check"
            },
            {
              "data": "",
              "label": "fix"
            }
          ],
          "impact": 0.5,
          "code": "{\n  \"serialNumber\": \"9081349603967592448\",\n  \"type\": \"16777472\",\n  \"name\": \"TLS certificate\",\n  \"host\": {\n    \"text\": \"https://zero.webappsecurity.com\",\n    \"ip\": \"54.82.22.214\"\n  },\n  \"path\": \"/\",\n  \"location\": \"/\",\n  \"severity\": \"Medium\",\n  \"confidence\": \"Certain\",\n  \"issueBackground\": \"<p>TLS (or SSL) helps to protect the confidentiality and integrity of information in transit between the browser and server, and to provide authentication of the server's identity. To serve this purpose, the server must present an TLS certificate that is valid for the server's hostname, is issued by a trusted authority and is valid for the current date. If any one of these requirements is not met, TLS connections to the server will not provide the full protection for which TLS is designed.</p>\\n<p>It should be noted that various attacks exist against TLS in general, and in the context of HTTPS web connections in particular. It may be possible for a determined and suitably-positioned attacker to compromise TLS connections without user detection even when a valid TLS certificate is used. </p>\",\n  \"references\": \"<ul><li><a href=\\\"https://wiki.mozilla.org/Security/Server_Side_TLS\\\">SSL/TLS Configuration Guide</a></li></ul>\",\n  \"vulnerabilityClassifications\": \"<ul>\\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/295.html\\\">CWE-295: Improper Certificate Validation</a></li>\\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/326.html\\\">CWE-326: Inadequate Encryption Strength</a></li>\\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/327.html\\\">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a></li>\\n</ul>\",\n  \"issueDetail\": \"The following problem was identified with the server's TLS certificate:<ul><li>The server's certificate is not trusted.</li></ul><b>Note:</b> Burp relies on the Java trust store to determine whether certificates are trusted. The Java trust store does not include every root CA certificate that is included within browser trust stores. Burp might incorrectly report that a certificate is not trusted, if a valid root CA certificate is being used that is not included in the Java trust store.<br><br>The server presented the following certificate:<br><br><table><tr><td><b>Issued to:</b>&nbsp;&nbsp;</td><td>zero.webappsecurity.com</td></tr><tr><td><b>Issued by:</b>&nbsp;&nbsp;</td><td>DigiCert SHA2 Secure Server CA</td></tr><tr><td><b>Valid from:</b>&nbsp;&nbsp;</td><td>Tue Jan 14 19:00:00 EST 2020</td></tr><tr><td><b>Valid to:</b>&nbsp;&nbsp;</td><td>Thu Jan 21 07:00:00 EST 2021</td></tr></table>\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: https://zero.webappsecurity.com\nLocation: /\nissueDetail: The following problem was identified with the server's TLS certificate:The server's certificate is not trusted.Note: Burp relies on the Java trust store to determine whether certificates are trusted. The Java trust store does not include every root CA certificate that is included within browser trust stores. Burp might incorrectly report that a certificate is not trusted, if a valid root CA certificate is being used that is not included in the Java trust store.The server presented the following certificate:Issued to:  zero.webappsecurity.comIssued by:  DigiCert SHA2 Secure Server CAValid from:  Tue Jan 14 19:00:00 EST 2020Valid to:  Thu Jan 21 07:00:00 EST 2021\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": "CWE-16: Configuration\nCWE-436: Interpretation Conflict",
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "confidence": "Certain"
          },
          "refs": [],
          "source_location": {},
          "title": "HTML does not specify charset",
          "id": "8389120",
          "desc": "If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.\nIn most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. ",
          "descriptions": [
            {
              "data": "If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.\nIn most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. ",
              "label": "check"
            },
            {
              "data": "For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example charset=ISO-8859-1.\n",
              "label": "fix"
            }
          ],
          "impact": 0.3,
          "code": "{\n  \"serialNumber\": \"8932774056862235648\",\n  \"type\": \"8389120\",\n  \"name\": \"HTML does not specify charset\",\n  \"host\": {\n    \"text\": \"https://zero.webappsecurity.com\",\n    \"ip\": \"54.82.22.214\"\n  },\n  \"path\": \"/\",\n  \"location\": \"/\",\n  \"severity\": \"Information\",\n  \"confidence\": \"Certain\",\n  \"issueBackground\": \"<p>If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.</p>\\n<p>In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>\",\n  \"remediationBackground\": \"<p>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example <b>charset=ISO-8859-1</b>.\\n</p>\",\n  \"vulnerabilityClassifications\": \"<ul>\\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/16.html\\\">CWE-16: Configuration</a></li>\\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/436.html\\\">CWE-436: Interpretation Conflict</a></li>\\n</ul>\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: https://zero.webappsecurity.com\nLocation: /\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": "CWE-524: Information Exposure Through Caching\nCWE-525: Information Exposure Through Browser Caching",
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "confidence": "Certain"
          },
          "refs": [],
          "source_location": {},
          "title": "Cacheable HTTPS response",
          "id": "7340288",
          "desc": "Unless directed otherwise, browsers may store a local cached copy of content received from web servers. Some browsers, including Internet Explorer, cache content accessed via HTTPS. If sensitive information in application responses is stored in the local cache, then this may be retrieved by other users who have access to the same computer at a future time.",
          "descriptions": [
            {
              "data": "Unless directed otherwise, browsers may store a local cached copy of content received from web servers. Some browsers, including Internet Explorer, cache content accessed via HTTPS. If sensitive information in application responses is stored in the local cache, then this may be retrieved by other users who have access to the same computer at a future time.",
              "label": "check"
            },
            {
              "data": "Applications should return caching directives instructing browsers not to store local copies of any sensitive data. Often, this can be achieved by configuring the web server to prevent caching for relevant paths within the web root. Alternatively, most web development platforms allow you to control the server's caching directives from within individual scripts. Ideally, the web server should return the following HTTP headers in all responses containing sensitive content:\n\nCache-control: no-storePragma: no-cache",
              "label": "fix"
            }
          ],
          "impact": 0.3,
          "code": "{\n  \"serialNumber\": \"4805429072249862144\",\n  \"type\": \"7340288\",\n  \"name\": \"Cacheable HTTPS response\",\n  \"host\": {\n    \"text\": \"https://zero.webappsecurity.com\",\n    \"ip\": \"54.82.22.214\"\n  },\n  \"path\": \"/\",\n  \"location\": \"/\",\n  \"severity\": \"Information\",\n  \"confidence\": \"Certain\",\n  \"issueBackground\": \"<p>Unless directed otherwise, browsers may store a local cached copy of content received from web servers. Some browsers, including Internet Explorer, cache content accessed via HTTPS. If sensitive information in application responses is stored in the local cache, then this may be retrieved by other users who have access to the same computer at a future time.</p>\",\n  \"remediationBackground\": \"<p>Applications should return caching directives instructing browsers not to store local copies of any sensitive data. Often, this can be achieved by configuring the web server to prevent caching for relevant paths within the web root. Alternatively, most web development platforms allow you to control the server's caching directives from within individual scripts. Ideally, the web server should return the following HTTP headers in all responses containing sensitive content:</p>\\n<ul>\\n<li>Cache-control: no-store</li><li>Pragma: no-cache</li></ul>\",\n  \"vulnerabilityClassifications\": \"<ul>\\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/524.html\\\">CWE-524: Information Exposure Through Caching</a></li>\\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/525.html\\\">CWE-525: Information Exposure Through Browser Caching</a></li>\\n</ul>\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: https://zero.webappsecurity.com\nLocation: /\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SC-8"
            ],
            "cweid": "CWE-200: Information Exposure",
            "cci": [
              "CCI-002418"
            ],
            "confidence": "Certain"
          },
          "refs": [],
          "source_location": {},
          "title": "Cross-domain Referer leakage",
          "id": "5243904",
          "desc": "When a web browser makes a request for a resource, it typically adds an HTTP header, called the \"Referer\" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.\nIf the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.\nYou should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.\nToday's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.\nNote also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application. ",
          "descriptions": [
            {
              "data": "When a web browser makes a request for a resource, it typically adds an HTTP header, called the \"Referer\" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.\nIf the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.\nYou should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.\nToday's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.\nNote also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application. ",
              "label": "check"
            },
            {
              "data": "Applications should never transmit any sensitive information within the URL query string. In addition to being leaked in the Referer header, such information may be logged in various locations and may be visible on-screen to untrusted parties. If placing sensitive information in the URL is unavoidable, consider using the Referer-Policy HTTP header to reduce the chance of it being disclosed to third parties.\n",
              "label": "fix"
            }
          ],
          "impact": 0.3,
          "code": "{\n  \"serialNumber\": \"3412709707490384896\",\n  \"type\": \"5243904\",\n  \"name\": \"Cross-domain Referer leakage\",\n  \"host\": {\n    \"text\": \"http://zero.webappsecurity.com\",\n    \"ip\": \"54.82.22.214\"\n  },\n  \"path\": \"/search.html\",\n  \"location\": \"/search.html\",\n  \"severity\": \"Information\",\n  \"confidence\": \"Certain\",\n  \"issueBackground\": \"<p>When a web browser makes a request for a resource, it typically adds an HTTP header, called the \\\"Referer\\\" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.</p>\\n<p>If the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.</p>\\n<p>You should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.</p>\\n<p>Today's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.</p>\\n<p>Note also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application. </p>\",\n  \"remediationBackground\": \"<p>Applications should never transmit any sensitive information within the URL query string. In addition to being leaked in the Referer header, such information may be logged in various locations and may be visible on-screen to untrusted parties. If placing sensitive information in the URL is unavoidable, consider using the Referer-Policy HTTP header to reduce the chance of it being disclosed to third parties.\\n</p>\",\n  \"references\": \"<ul>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\\\">Referer Policy</a></li>\\n</ul>\",\n  \"vulnerabilityClassifications\": \"<ul>\\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/200.html\\\">CWE-200: Information Exposure</a></li>\\n</ul>\",\n  \"issueDetail\": \"The page was loaded from a URL containing a query string:<ul><li>http://zero.webappsecurity.com/search.html</li></ul>The response contains the following link to another domain:<ul><li>https://www.microfocus.com/about/legal/</li></ul>\",\n  \"issueDetailItems\": {\n    \"issueDetailItem\": \"https://www.microfocus.com/about/legal/\"\n  }\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /search.html\nissueDetail: The page was loaded from a URL containing a query string:http://zero.webappsecurity.com/search.htmlThe response contains the following link to another domain:https://www.microfocus.com/about/legal/\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": "CWE-523: Unprotected Transport of Credentials",
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "confidence": "Certain"
          },
          "refs": [],
          "source_location": {},
          "title": "Strict transport security not enforced",
          "id": "16777984",
          "desc": " The application fails to prevent users from connecting  to it over unencrypted connections.  An attacker able to modify a legitimate user's network traffic could bypass the application's use of SSL/TLS encryption, and use the application as a platform for attacks against its users. This attack is performed by rewriting HTTPS links as HTTP, so that if a targeted user follows a link to the site from an HTTP page, their browser never attempts to use an encrypted connection. The sslstrip tool  automates this process. \n\nTo exploit this vulnerability, an attacker must be suitably positioned to intercept and modify the victim's network traffic.This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure. ",
          "descriptions": [
            {
              "data": " The application fails to prevent users from connecting  to it over unencrypted connections.  An attacker able to modify a legitimate user's network traffic could bypass the application's use of SSL/TLS encryption, and use the application as a platform for attacks against its users. This attack is performed by rewriting HTTPS links as HTTP, so that if a targeted user follows a link to the site from an HTTP page, their browser never attempts to use an encrypted connection. The sslstrip tool  automates this process. \n\nTo exploit this vulnerability, an attacker must be suitably positioned to intercept and modify the victim's network traffic.This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure. ",
              "label": "check"
            },
            {
              "data": "The application should instruct web browsers to only access the application using HTTPS. To do this, enable HTTP Strict Transport Security (HSTS) by adding a response header with the name 'Strict-Transport-Security' and the value 'max-age=expireTime', where expireTime is the time in seconds that browsers should remember that the site should only be accessed using HTTPS. Consider adding the 'includeSubDomains' flag if appropriate.\nNote that because HSTS is a \"trust on first use\" (TOFU) protocol, a user who has never accessed the application will never have seen the HSTS header, and will therefore still be vulnerable to SSL stripping attacks. To mitigate this risk, you can optionally add the 'preload' flag to the HSTS header, and submit the domain for review by browser vendors.",
              "label": "fix"
            }
          ],
          "impact": 0.3,
          "code": "{\n  \"serialNumber\": \"3606840263549464576\",\n  \"type\": \"16777984\",\n  \"name\": \"Strict transport security not enforced\",\n  \"host\": {\n    \"text\": \"https://zero.webappsecurity.com\",\n    \"ip\": \"54.82.22.214\"\n  },\n  \"path\": \"/\",\n  \"location\": \"/\",\n  \"severity\": \"Low\",\n  \"confidence\": \"Certain\",\n  \"issueBackground\": \"<p> The application fails to prevent users from connecting  to it over unencrypted connections.  An attacker able to modify a legitimate user's network traffic could bypass the application's use of SSL/TLS encryption, and use the application as a platform for attacks against its users. This attack is performed by rewriting HTTPS links as HTTP, so that if a targeted user follows a link to the site from an HTTP page, their browser never attempts to use an encrypted connection. The sslstrip tool  automates this process. </p>\\n<p>\\nTo exploit this vulnerability, an attacker must be suitably positioned to intercept and modify the victim's network traffic.This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure. </p>\",\n  \"remediationBackground\": \"<p>The application should instruct web browsers to only access the application using HTTPS. To do this, enable HTTP Strict Transport Security (HSTS) by adding a response header with the name 'Strict-Transport-Security' and the value 'max-age=expireTime', where expireTime is the time in seconds that browsers should remember that the site should only be accessed using HTTPS. Consider adding the 'includeSubDomains' flag if appropriate.</p>\\n<p>Note that because HSTS is a &quot;trust on first use&quot; (TOFU) protocol, a user who has never accessed the application will never have seen the HSTS header, and will therefore still be vulnerable to SSL stripping attacks. To mitigate this risk, you can optionally add the 'preload' flag to the HSTS header, and submit the domain for review by browser vendors.</p>\",\n  \"references\": \"<ul>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security\\\">HTTP Strict Transport Security</a></li>\\n<li><a href=\\\"http://www.thoughtcrime.org/software/sslstrip/\\\">sslstrip</a></li>\\n<li><a href=\\\"https://hstspreload.appspot.com/\\\">HSTS Preload Form</a></li>\\n</ul>\",\n  \"vulnerabilityClassifications\": \"<ul>\\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/523.html\\\">CWE-523: Unprotected Transport of Credentials</a></li>\\n</ul>\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: https://zero.webappsecurity.com\nLocation: /\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: https://zero.webappsecurity.com\nLocation: /robots.txt\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SC-8"
            ],
            "cweid": "CWE-200: Information Exposure",
            "cci": [
              "CCI-002418"
            ],
            "confidence": "Certain"
          },
          "refs": [],
          "source_location": {},
          "title": "Email addresses disclosed",
          "id": "6291968",
          "desc": "The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.\nHowever, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.",
          "descriptions": [
            {
              "data": "The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.\nHowever, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.",
              "label": "check"
            },
            {
              "data": "Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).\nTo reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. ",
              "label": "fix"
            }
          ],
          "impact": 0.3,
          "code": "{\n  \"serialNumber\": \"1110068754573238272\",\n  \"type\": \"6291968\",\n  \"name\": \"Email addresses disclosed\",\n  \"host\": {\n    \"text\": \"http://zero.webappsecurity.com\",\n    \"ip\": \"54.82.22.214\"\n  },\n  \"path\": \"/resources/css/font-awesome.css\",\n  \"location\": \"/resources/css/font-awesome.css\",\n  \"severity\": \"Information\",\n  \"confidence\": \"Certain\",\n  \"issueBackground\": \"<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>\\n<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>\",\n  \"remediationBackground\": \"<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>\\n<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>\",\n  \"vulnerabilityClassifications\": \"<ul>\\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/200.html\\\">CWE-200: Information Exposure</a></li>\\n</ul>\",\n  \"issueDetail\": \"The following email address was disclosed in the response:<ul><li>dave@davegandy.com</li></ul>\",\n  \"issueDetailItems\": {\n    \"issueDetailItem\": \"dave@davegandy.com\"\n  }\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/css/font-awesome.css\nissueDetail: The following email address was disclosed in the response:dave@davegandy.com\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "IA-5"
            ],
            "cweid": "CWE-693: Protection Mechanism Failure",
            "cci": [
              "CCI-001544",
              "CCI-000183",
              "CCI-002042"
            ],
            "confidence": "Firm"
          },
          "refs": [],
          "source_location": {},
          "title": "Frameable response (potential Clickjacking)",
          "id": "5245344",
          "desc": "If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.\nNote that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.\nYou should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. ",
          "descriptions": [
            {
              "data": "If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.\nNote that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.\nYou should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. ",
              "label": "check"
            },
            {
              "data": "To effectively prevent framing attacks, the application should return a response header with the name X-Frame-Options and the value DENY to prevent framing altogether, or the value SAMEORIGIN to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.",
              "label": "fix"
            }
          ],
          "impact": 0.3,
          "code": "{\n  \"serialNumber\": \"1025974633351801856\",\n  \"type\": \"5245344\",\n  \"name\": \"Frameable response (potential Clickjacking)\",\n  \"host\": {\n    \"text\": \"http://zero.webappsecurity.com\",\n    \"ip\": \"54.82.22.214\"\n  },\n  \"path\": \"/index.html\",\n  \"location\": \"/index.html\",\n  \"severity\": \"Information\",\n  \"confidence\": \"Firm\",\n  \"issueBackground\": \"<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \\\"framebusting\\\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>\",\n  \"remediationBackground\": \"<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>\",\n  \"references\": \"<ul><li><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options\\\">X-Frame-Options</a></li></ul>\",\n  \"vulnerabilityClassifications\": \"<ul>\\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/693.html\\\">CWE-693: Protection Mechanism Failure</a></li>\\n</ul>\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /index.html\nconfidence: Firm\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /search.html\nconfidence: Firm\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            },
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /\nconfidence: Firm\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SC-8",
              "SI-11"
            ],
            "cweid": "CWE-200: Information Exposure\nCWE-388: Error Handling",
            "cci": [
              "CCI-002418",
              "CCI-001312"
            ],
            "confidence": "Certain"
          },
          "refs": [],
          "source_location": {},
          "title": "Credit card numbers disclosed",
          "id": "6292736",
          "desc": "Applications sometimes disclose sensitive financial information such as credit card numbers. Responses containing credit card numbers may not represent any security vulnerability - for example, a number may belong to the logged-in user to whom it is displayed. If a credit card number is identified during a security assessment it should be verified, then application logic reviewed to identify whether its disclosure within the application is necessary and appropriate.",
          "descriptions": [
            {
              "data": "Applications sometimes disclose sensitive financial information such as credit card numbers. Responses containing credit card numbers may not represent any security vulnerability - for example, a number may belong to the logged-in user to whom it is displayed. If a credit card number is identified during a security assessment it should be verified, then application logic reviewed to identify whether its disclosure within the application is necessary and appropriate.",
              "label": "check"
            },
            {
              "data": "",
              "label": "fix"
            }
          ],
          "impact": 0.3,
          "code": "{\n  \"serialNumber\": \"4688026072250441728\",\n  \"type\": \"6292736\",\n  \"name\": \"Credit card numbers disclosed\",\n  \"host\": {\n    \"text\": \"http://zero.webappsecurity.com\",\n    \"ip\": \"54.82.22.214\"\n  },\n  \"path\": \"/resources/css/bootstrap.min.css\",\n  \"location\": \"/resources/css/bootstrap.min.css\",\n  \"severity\": \"Information\",\n  \"confidence\": \"Certain\",\n  \"issueBackground\": \"<p>Applications sometimes disclose sensitive financial information such as credit card numbers. Responses containing credit card numbers may not represent any security vulnerability - for example, a number may belong to the logged-in user to whom it is displayed. If a credit card number is identified during a security assessment it should be verified, then application logic reviewed to identify whether its disclosure within the application is necessary and appropriate.</p>\",\n  \"vulnerabilityClassifications\": \"<ul>\\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/200.html\\\">CWE-200: Information Exposure</a></li>\\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/312.html\\\">CWE-388: Error Handling</a></li>\\n</ul>\",\n  \"issueDetail\": \"The following credit card number was disclosed in the response:<ul><li>36370249136206</li></ul>\",\n  \"issueDetailItems\": {\n    \"issueDetailItem\": \"36370249136206\"\n  }\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /resources/css/bootstrap.min.css\nissueDetail: The following credit card number was disclosed in the response:36370249136206\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SC-12"
            ],
            "cweid": "CWE-326: Inadequate Encryption Strength",
            "cci": [
              "CCI-002438"
            ],
            "confidence": "Certain"
          },
          "refs": [],
          "source_location": {},
          "title": "Unencrypted communications",
          "id": "16777728",
          "desc": "The application allows users to connect to it over unencrypted connections.  An attacker suitably positioned to view a legitimate user's network traffic could record and monitor their interactions with the application and obtain any information the user supplies. Furthermore, an attacker able to modify traffic could use the application as a platform for attacks against its users and third-party websites. Unencrypted connections have been exploited by ISPs and governments to track users, and to inject adverts and malicious JavaScript. Due to these concerns, web browser vendors are planning to visually flag unencrypted connections as hazardous.\n\nTo exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.\n\nPlease note that using a mixture of encrypted and unencrypted communications is an ineffective defense against active attackers, because they can easily remove references to encrypted resources when these references are transmitted over an unencrypted connection.",
          "descriptions": [
            {
              "data": "The application allows users to connect to it over unencrypted connections.  An attacker suitably positioned to view a legitimate user's network traffic could record and monitor their interactions with the application and obtain any information the user supplies. Furthermore, an attacker able to modify traffic could use the application as a platform for attacks against its users and third-party websites. Unencrypted connections have been exploited by ISPs and governments to track users, and to inject adverts and malicious JavaScript. Due to these concerns, web browser vendors are planning to visually flag unencrypted connections as hazardous.\n\nTo exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.\n\nPlease note that using a mixture of encrypted and unencrypted communications is an ineffective defense against active attackers, because they can easily remove references to encrypted resources when these references are transmitted over an unencrypted connection.",
              "label": "check"
            },
            {
              "data": "Applications should use transport-level encryption (SSL/TLS) to protect all communications passing between the client and the server. The Strict-Transport-Security HTTP header should be used to ensure that clients refuse to access the server over an insecure connection.",
              "label": "fix"
            }
          ],
          "impact": 0.3,
          "code": "{\n  \"serialNumber\": \"3538900631563274240\",\n  \"type\": \"16777728\",\n  \"name\": \"Unencrypted communications\",\n  \"host\": {\n    \"text\": \"http://zero.webappsecurity.com\",\n    \"ip\": \"54.82.22.214\"\n  },\n  \"path\": \"/\",\n  \"location\": \"/\",\n  \"severity\": \"Low\",\n  \"confidence\": \"Certain\",\n  \"issueBackground\": \"<p>The application allows users to connect to it over unencrypted connections.  An attacker suitably positioned to view a legitimate user's network traffic could record and monitor their interactions with the application and obtain any information the user supplies. Furthermore, an attacker able to modify traffic could use the application as a platform for attacks against its users and third-party websites. Unencrypted connections have been exploited by ISPs and governments to track users, and to inject adverts and malicious JavaScript. Due to these concerns, web browser vendors are planning to visually flag unencrypted connections as hazardous.</p>\\n<p>\\nTo exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.\\n</p>\\n<p>Please note that using a mixture of encrypted and unencrypted communications is an ineffective defense against active attackers, because they can easily remove references to encrypted resources when these references are transmitted over an unencrypted connection.</p>\",\n  \"remediationBackground\": \"<p>Applications should use transport-level encryption (SSL/TLS) to protect all communications passing between the client and the server. The Strict-Transport-Security HTTP header should be used to ensure that clients refuse to access the server over an insecure connection.</p>\",\n  \"references\": \"<ul>\\n<li><a href=\\\"https://www.chromium.org/Home/chromium-security/marking-http-as-non-secure\\\">Marking HTTP as non-secure</a></li>\\n<li><a href=\\\"https://wiki.mozilla.org/Security/Server_Side_TLS\\\">Configuring Server-Side SSL/TLS</a></li>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security\\\">HTTP Strict Transport Security</a></li>\\n</ul>\",\n  \"vulnerabilityClassifications\": \"<ul>\\n<li><a href=\\\"https://cwe.mitre.org/data/definitions/326.html\\\">CWE-326: Inadequate Encryption Strength</a></li>\\n</ul>\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Host: ip: 54.82.22.214, url: http://zero.webappsecurity.com\nLocation: /\nconfidence: Certain\n",
              "start_time": "Thu Feb 27 09:28:17 EST 2020"
            }
          ]
        }
      ],
      "sha256": "a1cd7af5e46b87a9384c3893c9ffcc4520ae69bf79212548caa7b61a0e18977e"
    }
  ],
  "passthrough": {
    "raw": {
      "issues": {
        "issue": [
          {
            "serialNumber": "2940178995452886016",
            "type": "2098688",
            "name": "Cross-origin resource sharing",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/js/jquery-1.8.2.min.js",
            "location": "/resources/js/jquery-1.8.2.min.js",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.</p>\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.</p>",
            "remediationBackground": "<p>Any inappropriate domains should be removed from the CORS policy.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.<br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "73318757634646016",
            "type": "2098689",
            "name": "Cross-origin resource sharing: arbitrary origin trusted",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/js/jquery-1.8.2.min.js",
            "location": "/resources/js/jquery-1.8.2.min.js",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.</p>\n<p>If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>",
            "remediationBackground": "<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.<br><br>The application allowed access from the requested origin <strong>http://hbofkpelsehu.com</strong><br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "2442711658753214464",
            "type": "2098688",
            "name": "Cross-origin resource sharing",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/css/bootstrap.min.css",
            "location": "/resources/css/bootstrap.min.css",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.</p>\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.</p>",
            "remediationBackground": "<p>Any inappropriate domains should be removed from the CORS policy.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.<br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "4745285924683321344",
            "type": "2098689",
            "name": "Cross-origin resource sharing: arbitrary origin trusted",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/css/bootstrap.min.css",
            "location": "/resources/css/bootstrap.min.css",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.</p>\n<p>If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>",
            "remediationBackground": "<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.<br><br>The application allowed access from the requested origin <strong>http://mtpmzyfhccgq.com</strong><br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "3738867435242687488",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/js/jquery-1.8.2.min.js",
            "location": "/resources/js/jquery-1.8.2.min.js [URL path folder 2]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path folder 2 is copied into the application's response."
          },
          {
            "serialNumber": "5300842030998605824",
            "type": "2098688",
            "name": "Cross-origin resource sharing",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/js/bootstrap.min.js",
            "location": "/resources/js/bootstrap.min.js",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.</p>\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.</p>",
            "remediationBackground": "<p>Any inappropriate domains should be removed from the CORS policy.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.<br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "1147659541251509248",
            "type": "2098689",
            "name": "Cross-origin resource sharing: arbitrary origin trusted",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/js/bootstrap.min.js",
            "location": "/resources/js/bootstrap.min.js",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.</p>\n<p>If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>",
            "remediationBackground": "<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.<br><br>The application allowed access from the requested origin <strong>http://fhizssbvwxlc.com</strong><br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "3354796224612840448",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/css/bootstrap.min.css",
            "location": "/resources/css/bootstrap.min.css [URL path filename]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path filename is copied into the application's response."
          },
          {
            "serialNumber": "5623766247314630656",
            "type": "2098688",
            "name": "Cross-origin resource sharing",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/css/main.css",
            "location": "/resources/css/main.css",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.</p>\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.</p>",
            "remediationBackground": "<p>Any inappropriate domains should be removed from the CORS policy.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.<br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "6190937006628923392",
            "type": "2098689",
            "name": "Cross-origin resource sharing: arbitrary origin trusted",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/css/main.css",
            "location": "/resources/css/main.css",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.</p>\n<p>If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>",
            "remediationBackground": "<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.<br><br>The application allowed access from the requested origin <strong>http://ysbwjdnoydae.com</strong><br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "9100790078355865600",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/js/jquery-1.8.2.min.js",
            "location": "/resources/js/jquery-1.8.2.min.js [URL path folder 1]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path folder 1 is copied into the application's response."
          },
          {
            "serialNumber": "33899988560175104",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/js/bootstrap.min.js",
            "location": "/resources/js/bootstrap.min.js [URL path filename]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path filename is copied into the application's response."
          },
          {
            "serialNumber": "238448804500111360",
            "type": "2098688",
            "name": "Cross-origin resource sharing",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/js/placeholders.min.js",
            "location": "/resources/js/placeholders.min.js",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.</p>\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.</p>",
            "remediationBackground": "<p>Any inappropriate domains should be removed from the CORS policy.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.<br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "1366404713564922880",
            "type": "2098689",
            "name": "Cross-origin resource sharing: arbitrary origin trusted",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/js/placeholders.min.js",
            "location": "/resources/js/placeholders.min.js",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.</p>\n<p>If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>",
            "remediationBackground": "<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.<br><br>The application allowed access from the requested origin <strong>http://hgclyudnynwg.com</strong><br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "3338101363203485696",
            "type": "2098688",
            "name": "Cross-origin resource sharing",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/css/font-awesome.css",
            "location": "/resources/css/font-awesome.css",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.</p>\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.</p>",
            "remediationBackground": "<p>Any inappropriate domains should be removed from the CORS policy.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.<br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "4551230416629878784",
            "type": "2098689",
            "name": "Cross-origin resource sharing: arbitrary origin trusted",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/css/font-awesome.css",
            "location": "/resources/css/font-awesome.css",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.</p>\n<p>If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>",
            "remediationBackground": "<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.<br><br>The application allowed access from the requested origin <strong>http://yxmzuemojsjs.com</strong><br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "112368733979138048",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/css/main.css",
            "location": "/resources/css/main.css [URL path filename]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path filename is copied into the application's response."
          },
          {
            "serialNumber": "5584346772758687744",
            "type": "2098688",
            "name": "Cross-origin resource sharing",
            "host": {
              "text": "https://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/robots.txt",
            "location": "/robots.txt",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.</p>\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.</p>",
            "remediationBackground": "<p>Any inappropriate domains should be removed from the CORS policy.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.<br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "2961783037719462912",
            "type": "2098689",
            "name": "Cross-origin resource sharing: arbitrary origin trusted",
            "host": {
              "text": "https://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/robots.txt",
            "location": "/robots.txt",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.</p>\n<p>If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>",
            "remediationBackground": "<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.<br><br>The application allowed access from the requested origin <strong>https://odbifgfzjwxk.com</strong><br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "1766511686590886912",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "https://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/robots.txt",
            "location": "/robots.txt [URL path filename]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path filename is copied into the application's response."
          },
          {
            "serialNumber": "8145043936972713984",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/css/bootstrap.min.css",
            "location": "/resources/css/bootstrap.min.css [URL path folder 2]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path folder 2 is copied into the application's response."
          },
          {
            "serialNumber": "3527171805474259968",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/js/placeholders.min.js",
            "location": "/resources/js/placeholders.min.js [URL path filename]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path filename is copied into the application's response."
          },
          {
            "serialNumber": "3778037316999380992",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/css/font-awesome.css",
            "location": "/resources/css/font-awesome.css [URL path filename]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path filename is copied into the application's response."
          },
          {
            "serialNumber": "2086138921384538112",
            "type": "6291672",
            "name": "Backup file",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/index.html",
            "location": "/index.old",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Publicly accessible backups and outdated copies of files can provide attackers with extra attack surface. Depending on the server configuration and file type, they may also expose source code, configuration details, and other information intended to remain secret.</p>",
            "remediationBackground": "<p>Review the file to identify whether it's intended to be publicly accessible, and remove it from the server's web root if it isn't. It may also be worth auditing the server contents to find other outdated files, and taking measures to prevent the problem from recurring.</p>",
            "references": "<ul>\n    <li><a href=\"https://www.owasp.org/index.php/Review_Old,_Backup_and_Unreferenced_Files_for_Sensitive_Information_(OTG-CONFIG-004)\">Review Old, Backup and Unreferenced Files for Sensitive Information</a></li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n    <li><a href=\"https://cwe.mitre.org/data/definitions/530.html\">CWE-530: Exposure of Backup File to an Unauthorized Control Sphere</a></li>\n</ul>"
          },
          {
            "serialNumber": "5561032861276991488",
            "type": "6291672",
            "name": "Backup file",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/index.html",
            "location": "/index.html.old",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Publicly accessible backups and outdated copies of files can provide attackers with extra attack surface. Depending on the server configuration and file type, they may also expose source code, configuration details, and other information intended to remain secret.</p>",
            "remediationBackground": "<p>Review the file to identify whether it's intended to be publicly accessible, and remove it from the server's web root if it isn't. It may also be worth auditing the server contents to find other outdated files, and taking measures to prevent the problem from recurring.</p>",
            "references": "<ul>\n    <li><a href=\"https://www.owasp.org/index.php/Review_Old,_Backup_and_Unreferenced_Files_for_Sensitive_Information_(OTG-CONFIG-004)\">Review Old, Backup and Unreferenced Files for Sensitive Information</a></li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n    <li><a href=\"https://cwe.mitre.org/data/definitions/530.html\">CWE-530: Exposure of Backup File to an Unauthorized Control Sphere</a></li>\n</ul>"
          },
          {
            "serialNumber": "2926479322350655488",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/js/bootstrap.min.js",
            "location": "/resources/js/bootstrap.min.js [URL path folder 2]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path folder 2 is copied into the application's response."
          },
          {
            "serialNumber": "3754735938768996352",
            "type": "2098688",
            "name": "Cross-origin resource sharing",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/search.html",
            "location": "/search.html",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.</p>\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.</p>",
            "remediationBackground": "<p>Any inappropriate domains should be removed from the CORS policy.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.<br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "8663190234480773120",
            "type": "2098689",
            "name": "Cross-origin resource sharing: arbitrary origin trusted",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/search.html",
            "location": "/search.html",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.</p>\n<p>If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>",
            "remediationBackground": "<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.<br><br>The application allowed access from the requested origin <strong>http://pllqapnqhuaw.com</strong><br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "8188856999390383104",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/css/main.css",
            "location": "/resources/css/main.css [URL path folder 2]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path folder 2 is copied into the application's response."
          },
          {
            "serialNumber": "6648484343887012864",
            "type": "2098688",
            "name": "Cross-origin resource sharing",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/index.html",
            "location": "/index.html",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.</p>\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.</p>",
            "remediationBackground": "<p>Any inappropriate domains should be removed from the CORS policy.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.<br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "6051823964003025920",
            "type": "2098689",
            "name": "Cross-origin resource sharing: arbitrary origin trusted",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/index.html",
            "location": "/index.html",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.</p>\n<p>If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>",
            "remediationBackground": "<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.<br><br>The application allowed access from the requested origin <strong>http://yoejfhjmiyhp.com</strong><br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "3541760279623340032",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/css/bootstrap.min.css",
            "location": "/resources/css/bootstrap.min.css [URL path folder 1]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path folder 1 is copied into the application's response."
          },
          {
            "serialNumber": "4826284254894727168",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/js/placeholders.min.js",
            "location": "/resources/js/placeholders.min.js [URL path folder 2]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path folder 2 is copied into the application's response."
          },
          {
            "serialNumber": "1014155734636866560",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/css/font-awesome.css",
            "location": "/resources/css/font-awesome.css [URL path folder 2]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path folder 2 is copied into the application's response."
          },
          {
            "serialNumber": "6993732453229620224",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/js/bootstrap.min.js",
            "location": "/resources/js/bootstrap.min.js [URL path folder 1]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path folder 1 is copied into the application's response."
          },
          {
            "serialNumber": "896201266083430400",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/index.html",
            "location": "/index.html [URL path filename]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path filename is copied into the application's response."
          },
          {
            "serialNumber": "8632071190579211264",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/css/main.css",
            "location": "/resources/css/main.css [URL path folder 1]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path folder 1 is copied into the application's response."
          },
          {
            "serialNumber": "1042070090361299968",
            "type": "2098688",
            "name": "Cross-origin resource sharing",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/robots.txt",
            "location": "/robots.txt",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.</p>\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.</p>",
            "remediationBackground": "<p>Any inappropriate domains should be removed from the CORS policy.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.<br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "5193482920563265536",
            "type": "2098689",
            "name": "Cross-origin resource sharing: arbitrary origin trusted",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/robots.txt",
            "location": "/robots.txt",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.</p>\n<p>If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>",
            "remediationBackground": "<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.<br><br>The application allowed access from the requested origin <strong>http://ociuvmolpgqd.com</strong><br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "8728787048225505280",
            "type": "2098688",
            "name": "Cross-origin resource sharing",
            "host": {
              "text": "https://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/",
            "location": "/",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.</p>\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.</p>",
            "remediationBackground": "<p>Any inappropriate domains should be removed from the CORS policy.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.<br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "5522515541732094976",
            "type": "2098689",
            "name": "Cross-origin resource sharing: arbitrary origin trusted",
            "host": {
              "text": "https://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/",
            "location": "/",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.</p>\n<p>If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>",
            "remediationBackground": "<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.<br><br>The application allowed access from the requested origin <strong>https://rjjtexnikcnt.com</strong><br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "6472199652951183360",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/js/placeholders.min.js",
            "location": "/resources/js/placeholders.min.js [URL path folder 1]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path folder 1 is copied into the application's response."
          },
          {
            "serialNumber": "6947069679041048576",
            "type": "2098688",
            "name": "Cross-origin resource sharing",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/",
            "location": "/",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.</p>\n<p>Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.</p>",
            "remediationBackground": "<p>Any inappropriate domains should be removed from the CORS policy.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.<br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "317548753529023488",
            "type": "2098689",
            "name": "Cross-origin resource sharing: arbitrary origin trusted",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/",
            "location": "/",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.</p><p>\nTrusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.</p>\n<p>If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.</p>",
            "remediationBackground": "<p>Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.</p>",
            "references": "<ul>\n  <li> <a href=\"http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html\">Exploiting CORS Misconfigurations</a> </li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/942.html\">CWE-942: Overly Permissive Cross-domain Whitelist</a></li>\n</ul>",
            "issueDetail": "The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.<br><br>The application allowed access from the requested origin <strong>http://wxzbifgnpfpf.com</strong><br><br>If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.<br><br>Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks."
          },
          {
            "serialNumber": "8878171851535439872",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/robots.txt",
            "location": "/robots.txt [URL path filename]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path filename is copied into the application's response."
          },
          {
            "serialNumber": "4398094954162855936",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/css/font-awesome.css",
            "location": "/resources/css/font-awesome.css [URL path folder 1]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the URL path folder 1 is copied into the application's response."
          },
          {
            "serialNumber": "4136989263186441216",
            "type": "4197376",
            "name": "Input returned in response (reflected)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/search.html",
            "location": "/search.html [searchTerm parameter]",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Reflection of input arises when data is copied from a request and echoed into the application's immediate response.</p><p>Input being returned in application responses is not a vulnerability in its own right. However, it is a prerequisite for many client-side vulnerabilities, including cross-site scripting, open redirection, content spoofing, and response header injection. Additionally, some server-side vulnerabilities such as SQL injection are often easier to identify and exploit when input is returned in responses. In applications where input retrieval is rare and the environment is resistant to automated testing (for example, due to a web application firewall), it might be worth subjecting instances of it to focused manual testing. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/20.html\">CWE-20: Improper Input Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/116.html\">CWE-116: Improper Encoding or Escaping of Output</a></li>\n</ul>",
            "issueDetail": "The value of the <b>searchTerm</b> request parameter is copied into the application's response."
          },
          {
            "serialNumber": "4072491561500551168",
            "type": "5245440",
            "name": "HTTP TRACE method is enabled",
            "host": {
              "text": "https://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/",
            "location": "/",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>The HTTP TRACE  method is designed for diagnostic purposes. If enabled, the web server will respond to requests that use the TRACE method by echoing in its response the exact request that was received.</p>\n<p>This behavior is often harmless, but occasionally leads to the disclosure of sensitive information such as internal authentication headers appended by reverse proxies. This functionality could historically be used to bypass the HttpOnly cookie flag on cookies, but this is no longer possible in modern web browsers. </p>",
            "remediationBackground": "<p>The TRACE method should be disabled on production web servers.</p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\n</ul>"
          },
          {
            "serialNumber": "9081349603967592448",
            "type": "16777472",
            "name": "TLS certificate",
            "host": {
              "text": "https://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/",
            "location": "/",
            "severity": "Medium",
            "confidence": "Certain",
            "issueBackground": "<p>TLS (or SSL) helps to protect the confidentiality and integrity of information in transit between the browser and server, and to provide authentication of the server's identity. To serve this purpose, the server must present an TLS certificate that is valid for the server's hostname, is issued by a trusted authority and is valid for the current date. If any one of these requirements is not met, TLS connections to the server will not provide the full protection for which TLS is designed.</p>\n<p>It should be noted that various attacks exist against TLS in general, and in the context of HTTPS web connections in particular. It may be possible for a determined and suitably-positioned attacker to compromise TLS connections without user detection even when a valid TLS certificate is used. </p>",
            "references": "<ul><li><a href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">SSL/TLS Configuration Guide</a></li></ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/295.html\">CWE-295: Improper Certificate Validation</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/327.html\">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a></li>\n</ul>",
            "issueDetail": "The following problem was identified with the server's TLS certificate:<ul><li>The server's certificate is not trusted.</li></ul><b>Note:</b> Burp relies on the Java trust store to determine whether certificates are trusted. The Java trust store does not include every root CA certificate that is included within browser trust stores. Burp might incorrectly report that a certificate is not trusted, if a valid root CA certificate is being used that is not included in the Java trust store.<br><br>The server presented the following certificate:<br><br><table><tr><td><b>Issued to:</b>&nbsp;&nbsp;</td><td>zero.webappsecurity.com</td></tr><tr><td><b>Issued by:</b>&nbsp;&nbsp;</td><td>DigiCert SHA2 Secure Server CA</td></tr><tr><td><b>Valid from:</b>&nbsp;&nbsp;</td><td>Tue Jan 14 19:00:00 EST 2020</td></tr><tr><td><b>Valid to:</b>&nbsp;&nbsp;</td><td>Thu Jan 21 07:00:00 EST 2021</td></tr></table>"
          },
          {
            "serialNumber": "8932774056862235648",
            "type": "8389120",
            "name": "HTML does not specify charset",
            "host": {
              "text": "https://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/",
            "location": "/",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.</p>\n<p>In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. </p>",
            "remediationBackground": "<p>For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example <b>charset=ISO-8859-1</b>.\n</p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/16.html\">CWE-16: Configuration</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/436.html\">CWE-436: Interpretation Conflict</a></li>\n</ul>"
          },
          {
            "serialNumber": "4805429072249862144",
            "type": "7340288",
            "name": "Cacheable HTTPS response",
            "host": {
              "text": "https://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/",
            "location": "/",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Unless directed otherwise, browsers may store a local cached copy of content received from web servers. Some browsers, including Internet Explorer, cache content accessed via HTTPS. If sensitive information in application responses is stored in the local cache, then this may be retrieved by other users who have access to the same computer at a future time.</p>",
            "remediationBackground": "<p>Applications should return caching directives instructing browsers not to store local copies of any sensitive data. Often, this can be achieved by configuring the web server to prevent caching for relevant paths within the web root. Alternatively, most web development platforms allow you to control the server's caching directives from within individual scripts. Ideally, the web server should return the following HTTP headers in all responses containing sensitive content:</p>\n<ul>\n<li>Cache-control: no-store</li><li>Pragma: no-cache</li></ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/524.html\">CWE-524: Information Exposure Through Caching</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/525.html\">CWE-525: Information Exposure Through Browser Caching</a></li>\n</ul>"
          },
          {
            "serialNumber": "3412709707490384896",
            "type": "5243904",
            "name": "Cross-domain Referer leakage",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/search.html",
            "location": "/search.html",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>When a web browser makes a request for a resource, it typically adds an HTTP header, called the \"Referer\" header, indicating the URL of the resource from which the request originated. This occurs in numerous situations, for example when a web page loads an image or script, or when a user clicks on a link or submits a form.</p>\n<p>If the resource being requested resides on a different domain, then the Referer header is still generally included in the cross-domain request. If the originating URL contains any sensitive information within its query string, such as a session token, then this information will be transmitted to the other domain. If the other domain is not fully trusted by the application, then this may lead to a security compromise.</p>\n<p>You should review the contents of the information being transmitted to other domains, and also determine whether those domains are fully trusted by the originating application.</p>\n<p>Today's browsers may withhold the Referer header in some situations (for example, when loading a non-HTTPS resource from a page that was loaded over HTTPS, or when a Refresh directive is issued), but this behavior should not be relied upon to protect the originating URL from disclosure.</p>\n<p>Note also that if users can author content within the application then an attacker may be able to inject links referring to a domain they control in order to capture data from URLs used within the application. </p>",
            "remediationBackground": "<p>Applications should never transmit any sensitive information within the URL query string. In addition to being leaked in the Referer header, such information may be logged in various locations and may be visible on-screen to untrusted parties. If placing sensitive information in the URL is unavoidable, consider using the Referer-Policy HTTP header to reduce the chance of it being disclosed to third parties.\n</p>",
            "references": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\">Referer Policy</a></li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/200.html\">CWE-200: Information Exposure</a></li>\n</ul>",
            "issueDetail": "The page was loaded from a URL containing a query string:<ul><li>http://zero.webappsecurity.com/search.html</li></ul>The response contains the following link to another domain:<ul><li>https://www.microfocus.com/about/legal/</li></ul>",
            "issueDetailItems": {
              "issueDetailItem": "https://www.microfocus.com/about/legal/"
            }
          },
          {
            "serialNumber": "3606840263549464576",
            "type": "16777984",
            "name": "Strict transport security not enforced",
            "host": {
              "text": "https://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/",
            "location": "/",
            "severity": "Low",
            "confidence": "Certain",
            "issueBackground": "<p> The application fails to prevent users from connecting  to it over unencrypted connections.  An attacker able to modify a legitimate user's network traffic could bypass the application's use of SSL/TLS encryption, and use the application as a platform for attacks against its users. This attack is performed by rewriting HTTPS links as HTTP, so that if a targeted user follows a link to the site from an HTTP page, their browser never attempts to use an encrypted connection. The sslstrip tool  automates this process. </p>\n<p>\nTo exploit this vulnerability, an attacker must be suitably positioned to intercept and modify the victim's network traffic.This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure. </p>",
            "remediationBackground": "<p>The application should instruct web browsers to only access the application using HTTPS. To do this, enable HTTP Strict Transport Security (HSTS) by adding a response header with the name 'Strict-Transport-Security' and the value 'max-age=expireTime', where expireTime is the time in seconds that browsers should remember that the site should only be accessed using HTTPS. Consider adding the 'includeSubDomains' flag if appropriate.</p>\n<p>Note that because HSTS is a &quot;trust on first use&quot; (TOFU) protocol, a user who has never accessed the application will never have seen the HSTS header, and will therefore still be vulnerable to SSL stripping attacks. To mitigate this risk, you can optionally add the 'preload' flag to the HSTS header, and submit the domain for review by browser vendors.</p>",
            "references": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security\">HTTP Strict Transport Security</a></li>\n<li><a href=\"http://www.thoughtcrime.org/software/sslstrip/\">sslstrip</a></li>\n<li><a href=\"https://hstspreload.appspot.com/\">HSTS Preload Form</a></li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/523.html\">CWE-523: Unprotected Transport of Credentials</a></li>\n</ul>"
          },
          {
            "serialNumber": "1110068754573238272",
            "type": "6291968",
            "name": "Email addresses disclosed",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/css/font-awesome.css",
            "location": "/resources/css/font-awesome.css",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p>\n<p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>",
            "remediationBackground": "<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p>\n<p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/200.html\">CWE-200: Information Exposure</a></li>\n</ul>",
            "issueDetail": "The following email address was disclosed in the response:<ul><li>dave@davegandy.com</li></ul>",
            "issueDetailItems": {
              "issueDetailItem": "dave@davegandy.com"
            }
          },
          {
            "serialNumber": "7117585126555197440",
            "type": "16777984",
            "name": "Strict transport security not enforced",
            "host": {
              "text": "https://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/robots.txt",
            "location": "/robots.txt",
            "severity": "Low",
            "confidence": "Certain",
            "issueBackground": "<p> The application fails to prevent users from connecting  to it over unencrypted connections.  An attacker able to modify a legitimate user's network traffic could bypass the application's use of SSL/TLS encryption, and use the application as a platform for attacks against its users. This attack is performed by rewriting HTTPS links as HTTP, so that if a targeted user follows a link to the site from an HTTP page, their browser never attempts to use an encrypted connection. The sslstrip tool  automates this process. </p>\n<p>\nTo exploit this vulnerability, an attacker must be suitably positioned to intercept and modify the victim's network traffic.This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure. </p>",
            "remediationBackground": "<p>The application should instruct web browsers to only access the application using HTTPS. To do this, enable HTTP Strict Transport Security (HSTS) by adding a response header with the name 'Strict-Transport-Security' and the value 'max-age=expireTime', where expireTime is the time in seconds that browsers should remember that the site should only be accessed using HTTPS. Consider adding the 'includeSubDomains' flag if appropriate.</p>\n<p>Note that because HSTS is a &quot;trust on first use&quot; (TOFU) protocol, a user who has never accessed the application will never have seen the HSTS header, and will therefore still be vulnerable to SSL stripping attacks. To mitigate this risk, you can optionally add the 'preload' flag to the HSTS header, and submit the domain for review by browser vendors.</p>",
            "references": "<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security\">HTTP Strict Transport Security</a></li>\n<li><a href=\"http://www.thoughtcrime.org/software/sslstrip/\">sslstrip</a></li>\n<li><a href=\"https://hstspreload.appspot.com/\">HSTS Preload Form</a></li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/523.html\">CWE-523: Unprotected Transport of Credentials</a></li>\n</ul>"
          },
          {
            "serialNumber": "1025974633351801856",
            "type": "5245344",
            "name": "Frameable response (potential Clickjacking)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/index.html",
            "location": "/index.html",
            "severity": "Information",
            "confidence": "Firm",
            "issueBackground": "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
            "remediationBackground": "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
            "references": "<ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options\">X-Frame-Options</a></li></ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/693.html\">CWE-693: Protection Mechanism Failure</a></li>\n</ul>"
          },
          {
            "serialNumber": "513463620804661248",
            "type": "5245344",
            "name": "Frameable response (potential Clickjacking)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/search.html",
            "location": "/search.html",
            "severity": "Information",
            "confidence": "Firm",
            "issueBackground": "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
            "remediationBackground": "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
            "references": "<ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options\">X-Frame-Options</a></li></ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/693.html\">CWE-693: Protection Mechanism Failure</a></li>\n</ul>"
          },
          {
            "serialNumber": "1634316606940611584",
            "type": "5245344",
            "name": "Frameable response (potential Clickjacking)",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/",
            "location": "/",
            "severity": "Information",
            "confidence": "Firm",
            "issueBackground": "<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p>\n<p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using \"framebusting\" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p>\n<p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>",
            "remediationBackground": "<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>",
            "references": "<ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/X-Frame-Options\">X-Frame-Options</a></li></ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/693.html\">CWE-693: Protection Mechanism Failure</a></li>\n</ul>"
          },
          {
            "serialNumber": "4688026072250441728",
            "type": "6292736",
            "name": "Credit card numbers disclosed",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/resources/css/bootstrap.min.css",
            "location": "/resources/css/bootstrap.min.css",
            "severity": "Information",
            "confidence": "Certain",
            "issueBackground": "<p>Applications sometimes disclose sensitive financial information such as credit card numbers. Responses containing credit card numbers may not represent any security vulnerability - for example, a number may belong to the logged-in user to whom it is displayed. If a credit card number is identified during a security assessment it should be verified, then application logic reviewed to identify whether its disclosure within the application is necessary and appropriate.</p>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/200.html\">CWE-200: Information Exposure</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/312.html\">CWE-388: Error Handling</a></li>\n</ul>",
            "issueDetail": "The following credit card number was disclosed in the response:<ul><li>36370249136206</li></ul>",
            "issueDetailItems": {
              "issueDetailItem": "36370249136206"
            }
          },
          {
            "serialNumber": "3538900631563274240",
            "type": "16777728",
            "name": "Unencrypted communications",
            "host": {
              "text": "http://zero.webappsecurity.com",
              "ip": "54.82.22.214"
            },
            "path": "/",
            "location": "/",
            "severity": "Low",
            "confidence": "Certain",
            "issueBackground": "<p>The application allows users to connect to it over unencrypted connections.  An attacker suitably positioned to view a legitimate user's network traffic could record and monitor their interactions with the application and obtain any information the user supplies. Furthermore, an attacker able to modify traffic could use the application as a platform for attacks against its users and third-party websites. Unencrypted connections have been exploited by ISPs and governments to track users, and to inject adverts and malicious JavaScript. Due to these concerns, web browser vendors are planning to visually flag unencrypted connections as hazardous.</p>\n<p>\nTo exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.\n</p>\n<p>Please note that using a mixture of encrypted and unencrypted communications is an ineffective defense against active attackers, because they can easily remove references to encrypted resources when these references are transmitted over an unencrypted connection.</p>",
            "remediationBackground": "<p>Applications should use transport-level encryption (SSL/TLS) to protect all communications passing between the client and the server. The Strict-Transport-Security HTTP header should be used to ensure that clients refuse to access the server over an insecure connection.</p>",
            "references": "<ul>\n<li><a href=\"https://www.chromium.org/Home/chromium-security/marking-http-as-non-secure\">Marking HTTP as non-secure</a></li>\n<li><a href=\"https://wiki.mozilla.org/Security/Server_Side_TLS\">Configuring Server-Side SSL/TLS</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security\">HTTP Strict Transport Security</a></li>\n</ul>",
            "vulnerabilityClassifications": "<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/326.html\">CWE-326: Inadequate Encryption Strength</a></li>\n</ul>"
          }
        ],
        "burpVersion": "2020.1",
        "exportTime": "Thu Feb 27 09:28:17 EST 2020"
      }
    }
  }
}