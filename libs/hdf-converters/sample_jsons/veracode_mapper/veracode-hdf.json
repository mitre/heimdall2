{"platform":{"name":"Heimdall Tools","release":"2.6.24","target_id":""},"version":"2.6.24","statistics":{"duration":0},"profiles":[{"name":"Veracode Recommended Medium","version":"4 Nov 2021 Static","title":"Python files within homoglyph.tar","maintainer":null,"summary":null,"license":null,"copyright":"Copyright Veracode, Inc., 2014.","copyright_email":null,"supports":[],"attributes":[],"depends":[],"groups":[],"status":"loaded","controls":[{"id":"21","title":"CRLF Injection","desc":"The acronym CRLF stands for &#x22;Carriage Return, Line Feed&#x22; and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.","descriptions":[{"data":"Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents.","label":"fix"}],"impact":0.5,"refs":[],"tags":{"cweid":"CWE-117: Improper Output Neutralization for Logs; pcirelated: true; owasp: 1027; certjava: 1134","cweDescription":"CWE-117: Improper Output Neutralization for Logs: A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.","nist":["SA-11","RA-5","Rev_4"]},"code":"","source_location":{"ref":"test_homoglyph.py\ntest_homoglyph.py\ntest_homoglyph.py\ntest_homoglyph.py\ntest_homoglyph.py\ntest_homoglyph.py","line":0},"results":[{"status":"failed","code_desc":"Sourcefile Path: &#x2f;homoglyph&#x2f;tests&#x2f;;Line Number: 448;Affect Policy Compliance: false;Remediation Effort: 2;Exploit Level: 1;Issue ID: 6;Module: Python files within homoglyph.tar;Type: log_forging_python_117;CWE ID: 117;Date First Occurrence: 2021-11-04 18&#x3a;39&#x3a;01 UTC;CIA Impact: npp;Description: This call to logging.Logger.info&#x28;&#x29; could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only create a custom blocklist when absolutely necessary. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29;&#xd;&#xa;&#xd;&#xa;","run_time":0,"start_time":"2021-11-04 18&#x3a;43&#x3a;13 UTC","message":"exploitability_adjustments.exploitability_adjustment.note","resource":""},{"status":"failed","code_desc":"Sourcefile Path: &#x2f;homoglyph&#x2f;tests&#x2f;;Line Number: 449;Affect Policy Compliance: false;Remediation Effort: 2;Exploit Level: 1;Issue ID: 1;Module: Python files within homoglyph.tar;Type: log_forging_python_117;CWE ID: 117;Date First Occurrence: 2021-11-04 18&#x3a;39&#x3a;01 UTC;CIA Impact: npp;Description: This call to logging.Logger.info&#x28;&#x29; could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only create a custom blocklist when absolutely necessary. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29;&#xd;&#xa;&#xd;&#xa;","run_time":0,"start_time":"2021-11-04 18&#x3a;43&#x3a;13 UTC","message":"exploitability_adjustments.exploitability_adjustment.note","resource":""},{"status":"failed","code_desc":"Sourcefile Path: &#x2f;homoglyph&#x2f;tests&#x2f;;Line Number: 450;Affect Policy Compliance: false;Remediation Effort: 2;Exploit Level: 1;Issue ID: 10;Module: Python files within homoglyph.tar;Type: log_forging_python_117;CWE ID: 117;Date First Occurrence: 2021-11-04 18&#x3a;39&#x3a;01 UTC;CIA Impact: npp;Description: This call to logging.Logger.info&#x28;&#x29; could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only create a custom blocklist when absolutely necessary. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29;&#xd;&#xa;&#xd;&#xa;","run_time":0,"start_time":"2021-11-04 18&#x3a;43&#x3a;13 UTC","message":"exploitability_adjustments.exploitability_adjustment.note","resource":""},{"status":"failed","code_desc":"Sourcefile Path: &#x2f;homoglyph&#x2f;tests&#x2f;;Line Number: 453;Affect Policy Compliance: false;Remediation Effort: 2;Exploit Level: 1;Issue ID: 2;Module: Python files within homoglyph.tar;Type: log_forging_python_117;CWE ID: 117;Date First Occurrence: 2021-11-04 18&#x3a;39&#x3a;01 UTC;CIA Impact: npp;Description: This call to logging.Logger.info&#x28;&#x29; could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only create a custom blocklist when absolutely necessary. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29;&#xd;&#xa;&#xd;&#xa;","run_time":0,"start_time":"2021-11-04 18&#x3a;43&#x3a;13 UTC","message":"exploitability_adjustments.exploitability_adjustment.note","resource":""},{"status":"failed","code_desc":"Sourcefile Path: &#x2f;homoglyph&#x2f;tests&#x2f;;Line Number: 464;Affect Policy Compliance: false;Remediation Effort: 2;Exploit Level: 1;Issue ID: 4;Module: Python files within homoglyph.tar;Type: log_forging_python_117;CWE ID: 117;Date First Occurrence: 2021-11-04 18&#x3a;39&#x3a;01 UTC;CIA Impact: npp;Description: This call to logging.Logger.info&#x28;&#x29; could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only create a custom blocklist when absolutely necessary. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29;&#xd;&#xa;&#xd;&#xa;","run_time":0,"start_time":"2021-11-04 18&#x3a;43&#x3a;13 UTC","message":"exploitability_adjustments.exploitability_adjustment.note","resource":""},{"status":"failed","code_desc":"Sourcefile Path: &#x2f;homoglyph&#x2f;tests&#x2f;;Line Number: 501;Affect Policy Compliance: false;Remediation Effort: 2;Exploit Level: 1;Issue ID: 5;Module: Python files within homoglyph.tar;Type: log_forging_python_117;CWE ID: 117;Date First Occurrence: 2021-11-04 18&#x3a;39&#x3a;01 UTC;CIA Impact: npp;Description: This call to logging.Logger.warning&#x28;&#x29; could result in a log forging attack. Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Only create a custom blocklist when absolutely necessary. Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29;&#xd;&#xa;&#xd;&#xa;","run_time":0,"start_time":"2021-11-04 18&#x3a;43&#x3a;13 UTC","message":"exploitability_adjustments.exploitability_adjustment.note","resource":""}]},{"id":"12","title":"Cryptographic Issues","desc":"Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack.\nCommon cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.\nDevelopers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm&#x3b; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.","descriptions":[{"data":"Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &#x22;security through obscurity&#x22; rather than sound mathematics.  Select key sizes appropriate for the data being protected&#x3b; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed.","label":"fix"}],"impact":0.5,"refs":[],"tags":{"cweid":"CWE-331: Insufficient Entropy; pcirelated: false; sans: 327; certc: 1170","cweDescription":"CWE-331: Insufficient Entropy: Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand&#x28;&#x29;.","nist":["SA-11","RA-5","Rev_4"]},"code":"","source_location":{"ref":"SortedCollection.py","line":0},"results":[{"status":"failed","code_desc":"Sourcefile Path: &#x2f;homoglyph&#x2f;tests&#x2f;;Line Number: 258;Affect Policy Compliance: false;Remediation Effort: 2;Exploit Level: -1;Issue ID: 3;Module: Python files within homoglyph.tar;Type: RANDMSG_python_331;CWE ID: 331;Date First Occurrence: 2021-11-04 18&#x3a;39&#x3a;01 UTC;CIA Impact: ppn;Description: Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;If this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.&#xd;&#xa;&#xd;&#xa;References&#x3a;&#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;331.html&#x29; &#xd;&#xa;secrets module &#x28;https&#x3a;&#x2f;&#x2f;docs.python.org&#x2f;3&#x2f;library&#x2f;secrets.html&#x23;module-secrets&#x29;&#xd;&#xa;cryptography.io &#x28;https&#x3a;&#x2f;&#x2f;cryptography.io&#x2f;en&#x2f;latest&#x2f;&#x29;&#xd;&#xa;&#xd;&#xa;","run_time":0,"start_time":"2021-11-04 18&#x3a;43&#x3a;13 UTC","message":"exploitability_adjustments.exploitability_adjustment.note","resource":""}]},{"id":"1","title":"Directory Traversal","desc":"Allowing user input to control paths used in filesystem operations may enable an attacker to access or modify otherwise protected system resources that would normally be inaccessible to end users.  In some cases, the user-provided input may be passed directly to the filesystem operation, or it may be concatenated to one or more fixed strings to construct a fully-qualified path.\nWhen an application improperly cleanses special character sequences in user-supplied filenames, a path traversal &#x28;or directory traversal&#x29; vulnerability may occur.  For example, an attacker could specify a filename such as &#x22;..&#x2f;..&#x2f;etc&#x2f;passwd&#x22;, which resolves to a file outside of the intended directory that the attacker would not normally be authorized to view.","descriptions":[{"data":"Assume all user-supplied input is malicious.  Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters and ensure that the end result is not dangerous.","label":"fix"}],"impact":0.5,"refs":[],"tags":{"cweid":"CWE-73: External Control of File Name or Path; pcirelated: false; sans: 22; certcpp: 877","cweDescription":"CWE-73: External Control of File Name or Path: This call contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any.","nist":["SA-11","RA-5","Rev_4"]},"code":"","source_location":{"ref":"test_homoglyph.py\ntest_homoglyph.py\numbrella.py\numbrella.py","line":0},"results":[{"status":"failed","code_desc":"Sourcefile Path: &#x2f;homoglyph&#x2f;tests&#x2f;;Line Number: 457;Affect Policy Compliance: false;Remediation Effort: 2;Exploit Level: 1;Issue ID: 8;Module: Python files within homoglyph.tar;Type: path_manip_python_73;CWE ID: 73;Date First Occurrence: 2021-11-04 18&#x3a;39&#x3a;01 UTC;CIA Impact: ppn;Description: This call to open&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any.&#xd;&#xa;&#xd;&#xa;Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;","run_time":0,"start_time":"2021-11-04 18&#x3a;43&#x3a;13 UTC","message":"exploitability_adjustments.exploitability_adjustment.note","resource":""},{"status":"failed","code_desc":"Sourcefile Path: &#x2f;homoglyph&#x2f;tests&#x2f;;Line Number: 468;Affect Policy Compliance: false;Remediation Effort: 2;Exploit Level: 1;Issue ID: 7;Module: Python files within homoglyph.tar;Type: path_manip_python_73;CWE ID: 73;Date First Occurrence: 2021-11-04 18&#x3a;39&#x3a;01 UTC;CIA Impact: ppn;Description: This call to open&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any.&#xd;&#xa;&#xd;&#xa;Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;","run_time":0,"start_time":"2021-11-04 18&#x3a;43&#x3a;13 UTC","message":"exploitability_adjustments.exploitability_adjustment.note","resource":""},{"status":"failed","code_desc":"Sourcefile Path: &#x2f;homoglyph&#x2f;homoglyph&#x2f;;Line Number: 49;Affect Policy Compliance: false;Remediation Effort: 2;Exploit Level: 1;Issue ID: 11;Module: Python files within homoglyph.tar;Type: path_manip_python_73;CWE ID: 73;Date First Occurrence: 2021-11-04 18&#x3a;39&#x3a;01 UTC;CIA Impact: ppn;Description: This call to open&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any.&#xd;&#xa;&#xd;&#xa;Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;","run_time":0,"start_time":"2021-11-04 18&#x3a;43&#x3a;13 UTC","message":"exploitability_adjustments.exploitability_adjustment.note","resource":""},{"status":"failed","code_desc":"Sourcefile Path: &#x2f;homoglyph&#x2f;homoglyph&#x2f;;Line Number: 79;Affect Policy Compliance: false;Remediation Effort: 2;Exploit Level: 1;Issue ID: 9;Module: Python files within homoglyph.tar;Type: path_manip_python_73;CWE ID: 73;Date First Occurrence: 2021-11-04 18&#x3a;39&#x3a;01 UTC;CIA Impact: ppn;Description: This call to open&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using user-supplied input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any.&#xd;&#xa;&#xd;&#xa;Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;","run_time":0,"start_time":"2021-11-04 18&#x3a;43&#x3a;13 UTC","message":"exploitability_adjustments.exploitability_adjustment.note","resource":""}]}],"sha256":"681f591eba6059111dabf93303562ecd45c7eaf163abc2865c1229e14d8711cf"}]}