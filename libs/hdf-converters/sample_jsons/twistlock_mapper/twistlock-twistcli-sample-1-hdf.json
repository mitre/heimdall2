{
    "platform": {
      "name": "Heimdall Tools",
      "release": "2.6.23",
      "target_id": "goof"
    },
    "version": "2.6.23",
    "statistics": {
      "duration": null
    },
    "profiles": [
      {
        "name": "Twistcli Scan",
        "title": "Twistcli Project: registry.io:test",
        "maintainer": null,
        "summary": "Twistcli Summary: {\n\t\"critical\": \"5\",\n\t\"high\": \"1\",\n\t\"medium\": \"86\",\n\t\"low\": \"5\",\n\t\"total\": \"97\"}",
        "license": null,
        "copyright": null,
        "copyright_email": null,
        "supports": [],
        "attributes": [],
        "depends": [],
        "groups": [],
        "status": "loaded",
        "controls": [
            {
                "tags": {
                 
                  "cveid": [
                    "2021-43529"
                  ]
                },
                "descriptions": [],
                "refs": [],
                "source_location": {},
                "title": "nss-util",
                "id": "CVE-2021-43529",
                "desc": "DOCUMENTATION: A remote code execution flaw was found in the way NSS verifies certificates. This flaw allows an attacker posing as an SSL/TLS server to trigger this issue in a client application compiled with NSS when it tries to initiate an SSL/TLS connection.  Similarly, a server application compiled with NSS, which processes client certificates, can receive a malicious certificate via a client, triggering the flaw. The highest threat to this vulnerability is confidentiality, integrity, as well as system availability.              STATEMENT: The issue is not limited to TLS. Any applications that use NSS certificate verification are vulnerable; S/MIME is impacted as well.  Similarly, a server application compiled with NSS, which processes client certificates, can receive a malicious certificate via a client.  Firefox is not vulnerable to this flaw as it uses the mozilla::pkix for certificate verification. Thunderbird is affected when parsing email with the S/MIME signature.  Thunderbird on Red Hat Enterprise Linux 8.4 and later does not need to be updated since it uses the system NSS library, but earlier Red Hat Enterprise Linux 8 extended life streams will need to update Thunderbird as well as NSS.             MITIGATION: Red Hat has investigated whether a possible mitigation exists for this issue, and has not been able to identify a practical example. Please update the affec",
                "impact": 1,
                "code": "{\"id\":\"CVE-2021-43529\",\"status\":\"affected\",\"cvss\":9.8,\"description\":\"DOCUMENTATION: A remote code execution flaw was found in the way NSS verifies certificates. This flaw allows an attacker posing as an SSL\/TLS server to trigger this issue in a client application compiled with NSS when it tries to initiate an SSL\/TLS connection.  Similarly, a server application compiled with NSS, which processes client certificates, can receive a malicious certificate via a client, triggering the flaw. The highest threat to this vulnerability is confidentiality, integrity, as well as system availability.              STATEMENT: The issue is not limited to TLS. Any applications that use NSS certificate verification are vulnerable; S\/MIME is impacted as well.  Similarly, a server application compiled with NSS, which processes client certificates, can receive a malicious certificate via a client.  Firefox is not vulnerable to this flaw as it uses the mozilla::pkix for certificate verification. Thunderbird is affected when parsing email with the S\/MIME signature.  Thunderbird on Red Hat Enterprise Linux 8.4 and later does not need to be updated since it uses the system NSS library, but earlier Red Hat Enterprise Linux 8 extended life streams will need to update Thunderbird as well as NSS.             MITIGATION: Red Hat has investigated whether a possible mitigation exists for this issue, and has not been able to identify a practical example. Please update the affec\",\"severity\":\"critical\",\"packageName\":\"nss-util\",\"packageVersion\":\"3.67.0-7.el8_5\",\"link\":\"https:\/\/access.redhat.com\/security\/cve\/CVE-2021-43529\",\"riskFactors\":[\"Remote execution\",\"Attack complexity: low\",\"Attack vector: network\",\"Critical severity\",\"Recent vulnerability\"],\"impactedVersions\":[\"*\"],\"publishedDate\":\"2021-12-01T00:00:00Z\",\"discoveredDate\":\"2022-05-18T12:24:22Z\",\"layerTime\":\"2022-05-16T23:12:25Z\"}",
                "results": [
                  {
                    "status": "failed",
                    "code_desc": "",
                    "run_time": 0,
                    "start_time": ""
                  }
                ]
              }
        ],
        "sha256": "ad6bc463bb37093dbb9b02e19c0cc6f28a5bac49a4bcdc941393b1af56ac4870"
      }
    ],
    "passthrough": {
      "snyk_metadata": {
        "ok": false,
        "dependencyCount": 565,
        "org": "ejaronne",
        "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.22.1\nignore: {}\npatch: {}\n",
        "isPrivate": true,
        "licensesPolicy": {
          "severities": {},
          "orgLicenseRules": {
            "AGPL-1.0": {
              "licenseType": "AGPL-1.0",
              "severity": "high",
              "instructions": ""
            },
            "AGPL-3.0": {
              "licenseType": "AGPL-3.0",
              "severity": "high",
              "instructions": ""
            },
            "Artistic-1.0": {
              "licenseType": "Artistic-1.0",
              "severity": "medium",
              "instructions": ""
            },
            "Artistic-2.0": {
              "licenseType": "Artistic-2.0",
              "severity": "medium",
              "instructions": ""
            },
            "CDDL-1.0": {
              "licenseType": "CDDL-1.0",
              "severity": "medium",
              "instructions": ""
            },
            "CPOL-1.02": {
              "licenseType": "CPOL-1.02",
              "severity": "high",
              "instructions": ""
            },
            "EPL-1.0": {
              "licenseType": "EPL-1.0",
              "severity": "medium",
              "instructions": ""
            },
            "GPL-2.0": {
              "licenseType": "GPL-2.0",
              "severity": "high",
              "instructions": ""
            },
            "GPL-3.0": {
              "licenseType": "GPL-3.0",
              "severity": "high",
              "instructions": ""
            },
            "LGPL-2.0": {
              "licenseType": "LGPL-2.0",
              "severity": "medium",
              "instructions": ""
            },
            "LGPL-2.1": {
              "licenseType": "LGPL-2.1",
              "severity": "medium",
              "instructions": ""
            },
            "LGPL-3.0": {
              "licenseType": "LGPL-3.0",
              "severity": "medium",
              "instructions": ""
            },
            "MPL-1.1": {
              "licenseType": "MPL-1.1",
              "severity": "medium",
              "instructions": ""
            },
            "MPL-2.0": {
              "licenseType": "MPL-2.0",
              "severity": "medium",
              "instructions": ""
            },
            "MS-RL": {
              "licenseType": "MS-RL",
              "severity": "medium",
              "instructions": ""
            },
            "SimPL-2.0": {
              "licenseType": "SimPL-2.0",
              "severity": "high",
              "instructions": ""
            }
          }
        },
        "packageManager": "npm",
        "ignoreSettings": null,
        "summary": "379 vulnerable dependency paths",
        "remediation": {
          "unresolved": [
            {
              "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
              "alternativeIds": [],
              "creationTime": "2020-07-16T08:19:48.462528Z",
              "credit": [
                "Unknown"
              ],
              "cvssScore": 8.1,
              "description": "## Overview\n[ajv](https://www.npmjs.com/package/ajv) is an Another JSON Schema Validator\n\nAffected versions of this package are vulnerable to Prototype Pollution. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ajv` to version 6.12.3 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/bugs?subject=user&report_id=894259)\n",
              "disclosureTime": "2020-07-16T08:14:41Z",
              "exploit": "Not Defined",
              "fixedIn": [
                "6.12.3"
              ],
              "functions": [],
              "functions_new": [],
              "id": "SNYK-JS-AJV-584908",
              "identifiers": {
                "CVE": [
                  "CVE-2020-15366"
                ],
                "CWE": [
                  "CWE-400"
                ]
              },
              "language": "js",
              "malicious": false,
              "modificationTime": "2020-07-20T12:40:09.463832Z",
              "moduleName": "ajv",
              "packageManager": "npm",
              "packageName": "ajv",
              "patches": [],
              "proprietary": false,
              "publicationTime": "2020-07-16T13:58:04Z",
              "references": [
                {
                  "title": "HackerOne Report",
                  "url": "https://hackerone.com/bugs?subject=user&report_id=894259"
                }
              ],
              "semver": {
                "vulnerable": [
                  "<6.12.3"
                ]
              },
              "severity": "high",
              "socialTrendAlert": false,
              "title": "Prototype Pollution",
              "from": [
                "goof@1.0.1",
                "tap@11.1.5",
                "coveralls@3.0.9",
                "request@2.88.0",
                "har-validator@5.1.3",
                "ajv@6.10.2"
              ],
              "upgradePath": [
                false,
                "tap@11.1.5",
                "coveralls@3.0.9",
                "request@2.88.0",
                "har-validator@5.1.3",
                "ajv@6.12.3"
              ],
              "isUpgradable": true,
              "isPatchable": false,
              "isPinnable": false,
              "isRuntime": false,
              "name": "ajv",
              "version": "6.10.2",
              "severityWithCritical": "high"
            },
            {
              "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:L/A:L/E:P",
              "alternativeIds": [],
              "creationTime": "2020-08-28T12:18:44.906258Z",
              "credit": [
                "chalker"
              ],
              "cvssScore": 7.7,
              "description": "## Overview\n[bl](https://github.com/rvagg/bl) is a library that allows you to collect buffers and access with a standard readable buffer interface.\n\nAffected versions of this package are vulnerable to Remote Memory Exposure. If user input ends up in `consume()` argument and can become negative, BufferList state can be corrupted, tricking it into exposing uninitialized memory via regular `.slice()` calls.\r\n\r\n### PoC by chalker\r\n```\r\nconst { BufferList } = require('bl')\r\nconst secret = require('crypto').randomBytes(256)\r\nfor (let i = 0; i < 1e6; i++) {\r\n  const clone = Buffer.from(secret)\r\n  const bl = new BufferList()\r\n  bl.append(Buffer.from('a'))\r\n  bl.consume(-1024)\r\n  const buf = bl.slice(1)\r\n  if (buf.indexOf(clone) !== -1) {\r\n    console.error(`Match (at ${i})`, buf)\r\n  }\r\n}\r\n```\n## Remediation\nUpgrade `bl` to version 2.2.1, 3.0.1, 4.0.3, 1.2.3 or higher.\n## References\n- [Github Commit](https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e)\n- [Github Commit](https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190)\n- [Github Commit](https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466)\n- [GitHub Commit](https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00)\n- [HackerOne Report](https://hackerone.com/reports/966347)\n",
              "disclosureTime": "2020-08-27T15:16:42Z",
              "exploit": "Proof of Concept",
              "fixedIn": [
                "2.2.1",
                "3.0.1",
                "4.0.3",
                "1.2.3"
              ],
              "functions": [],
              "functions_new": [],
              "id": "SNYK-JS-BL-608877",
              "identifiers": {
                "CVE": [
                  "CVE-2020-8244"
                ],
                "CWE": [
                  "CWE-9"
                ],
                "GHSA": [
                  "GHSA-pp7h-53gx-mx7r"
                ],
                "NSP": [
                  "1555"
                ]
              },
              "language": "js",
              "malicious": false,
              "modificationTime": "2021-08-08T13:56:54.899052Z",
              "moduleName": "bl",
              "packageManager": "npm",
              "packageName": "bl",
              "patches": [],
              "proprietary": false,
              "publicationTime": "2020-08-28T12:18:48Z",
              "references": [
                {
                  "title": "Github Commit",
                  "url": "https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e"
                },
                {
                  "title": "Github Commit",
                  "url": "https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190"
                },
                {
                  "title": "Github Commit",
                  "url": "https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466"
                },
                {
                  "title": "GitHub Commit",
                  "url": "https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00"
                },
                {
                  "title": "HackerOne Report",
                  "url": "https://hackerone.com/reports/966347"
                }
              ],
              "semver": {
                "vulnerable": [
                  ">=2.2.0 <2.2.1",
                  ">=3.0.0 <3.0.1",
                  ">=4.0.0 <4.0.3",
                  "<1.2.3"
                ]
              },
              "severity": "high",
              "socialTrendAlert": false,
              "title": "Remote Memory Exposure",
              "from": [
                "goof@1.0.1",
                "mongodb@3.5.9",
                "bl@2.2.0"
              ],
              "upgradePath": [
                false,
                "mongodb@3.5.9",
                "bl@2.2.1"
              ],
              "isUpgradable": true,
              "isPatchable": false,
              "isPinnable": false,
              "isRuntime": false,
              "name": "bl",
              "version": "2.2.0",
              "severityWithCritical": "high"
            },
            {
              "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
              "alternativeIds": [],
              "creationTime": "2019-02-14T16:46:18.024227Z",
              "credit": [
                "Mahmoud Gamal",
                "Matias Lang"
              ],
              "cvssScore": 7.3,
              "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Prototype Pollution. Templates may alter an Objects' prototype, thus allowing an attacker to execute arbitrary code on the server.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `handlebars` to version 4.0.14, 4.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/7372d4e9dffc9d70c09671aa28b9392a1577fd86)\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1495)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/755)\n",
              "disclosureTime": "2018-12-28T20:34:57Z",
              "exploit": "Not Defined",
              "fixedIn": [
                "4.0.14",
                "4.1.2"
              ],
              "functions": [
                {
                  "functionId": {
                    "className": null,
                    "filePath": "dist/amd/handlebars/compiler/javascript-compiler.js",
                    "functionName": "JavaScriptCompiler.prototype.nameLookup"
                  },
                  "version": [
                    ">1.0.12 <4.0.13"
                  ]
                },
                {
                  "functionId": {
                    "className": null,
                    "filePath": "dist/handlebars.js",
                    "functionName": "JavaScriptCompiler.Handlebars.JavaScriptCompiler"
                  },
                  "version": [
                    ">=1.0.6 <=1.0.12"
                  ]
                }
              ],
              "functions_new": [
                {
                  "functionId": {
                    "filePath": "dist/amd/handlebars/compiler/javascript-compiler.js",
                    "functionName": "JavaScriptCompiler.prototype.nameLookup"
                  },
                  "version": [
                    ">1.0.12 <4.0.13"
                  ]
                },
                {
                  "functionId": {
                    "filePath": "dist/handlebars.js",
                    "functionName": "JavaScriptCompiler.Handlebars.JavaScriptCompiler"
                  },
                  "version": [
                    ">=1.0.6 <=1.0.12"
                  ]
                }
              ],
              "id": "SNYK-JS-HANDLEBARS-173692",
              "identifiers": {
                "CVE": [],
                "CWE": [
                  "CWE-471"
                ],
                "GHSA": [
                  "GHSA-6r5x-hmgg-7h53"
                ],
                "NSP": [
                  "755"
                ]
              },
              "language": "js",
              "malicious": false,
              "modificationTime": "2020-12-14T14:40:53.284737Z",
              "moduleName": "handlebars",
              "packageManager": "npm",
              "packageName": "handlebars",
              "patches": [],
              "proprietary": false,
              "publicationTime": "2019-02-14T17:52:50Z",
              "references": [
                {
                  "title": "GitHub Commit",
                  "url": "https://github.com/wycats/handlebars.js/commit/7372d4e9dffc9d70c09671aa28b9392a1577fd86"
                },
                {
                  "title": "GitHub Issue",
                  "url": "https://github.com/wycats/handlebars.js/issues/1495"
                },
                {
                  "title": "NPM Security Advisory",
                  "url": "https://www.npmjs.com/advisories/755"
                }
              ],
              "semver": {
                "vulnerable": [
                  "<4.0.14",
                  ">=4.1.0 <4.1.2"
                ]
              },
              "severity": "high",
              "socialTrendAlert": false,
              "title": "Prototype Pollution",
              "from": [
                "goof@1.0.1",
                "tap@11.1.5",
                "nyc@11.9.0",
                "istanbul-reports@1.4.0",
                "handlebars@4.0.11"
              ],
              "upgradePath": [
                false,
                "tap@11.1.5",
                "nyc@11.9.0",
                "istanbul-reports@1.4.0",
                "handlebars@4.0.14"
              ],
              "isUpgradable": true,
              "isPatchable": false,
              "isPinnable": false,
              "isRuntime": false,
              "name": "handlebars",
              "version": "4.0.11",
              "severityWithCritical": "high"
            },
            {
              "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
              "alternativeIds": [],
              "creationTime": "2019-04-14T11:55:45.212136Z",
              "credit": [
                "Nils Knappmeier"
              ],
              "cvssScore": 7.3,
              "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A Prototype Pollution allowing Remote Code Execution can be exploited using the constructor, via the 'lookup' helper.\r\nThis vulnerability is due to an incomplete fix for: `SNYK-JS-HANDLEBARS-173692`\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `handlebars` to version 3.0.7, 4.1.2, 4.0.14 or higher.\n## References\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/cd38583216dce3252831916323202749431c773e)\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1495)\n- [SNYK-JS-HANDLEBARS-173692](https://snyk.io/vuln/SNYK-JS-HANDLEBARS-173692)\n",
              "disclosureTime": "2019-04-13T06:31:34Z",
              "exploit": "Not Defined",
              "fixedIn": [
                "3.0.7",
                "4.1.2",
                "4.0.14"
              ],
              "functions": [
                {
                  "functionId": {
                    "className": null,
                    "filePath": "lib/handlebars/helpers/lookup.js",
                    "functionName": "module.exports"
                  },
                  "version": [
                    ">3.0.6 <4.1.2"
                  ]
                }
              ],
              "functions_new": [
                {
                  "functionId": {
                    "filePath": "lib/handlebars/helpers/lookup.js",
                    "functionName": "module.exports"
                  },
                  "version": [
                    ">3.0.6 <4.1.2"
                  ]
                }
              ],
              "id": "SNYK-JS-HANDLEBARS-174183",
              "identifiers": {
                "CVE": [],
                "CWE": [
                  "CWE-471"
                ],
                "GHSA": [
                  "GHSA-q42p-pg8m-cqh6"
                ]
              },
              "language": "js",
              "malicious": false,
              "modificationTime": "2021-02-07T10:35:57.706044Z",
              "moduleName": "handlebars",
              "packageManager": "npm",
              "packageName": "handlebars",
              "patches": [],
              "proprietary": false,
              "publicationTime": "2019-04-14T06:31:34Z",
              "references": [
                {
                  "title": "GitHub Commit",
                  "url": "https://github.com/wycats/handlebars.js/commit/cd38583216dce3252831916323202749431c773e"
                },
                {
                  "title": "GitHub Issue",
                  "url": "https://github.com/wycats/handlebars.js/issues/1495"
                },
                {
                  "title": "SNYK-JS-HANDLEBARS-173692",
                  "url": "https://snyk.io/vuln/SNYK-JS-HANDLEBARS-173692"
                }
              ],
              "semver": {
                "vulnerable": [
                  ">=3.0.0 <3.0.7",
                  ">=4.1.0 <4.1.2",
                  ">=4.0.0 <4.0.14"
                ]
              },
              "severity": "high",
              "socialTrendAlert": false,
              "title": "Prototype Pollution",
              "from": [
                "goof@1.0.1",
                "tap@11.1.5",
                "nyc@11.9.0",
                "istanbul-reports@1.4.0",
                "handlebars@4.0.11"
              ],
              "upgradePath": [
                false,
                "tap@11.1.5",
                "nyc@11.9.0",
                "istanbul-reports@1.4.0",
                "handlebars@4.0.14"
              ],
              "isUpgradable": true,
              "isPatchable": false,
              "isPinnable": false,
              "isRuntime": false,
              "name": "handlebars",
              "version": "4.0.11",
              "severityWithCritical": "high"
            },
            {
              "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:N/A:N/E:P",
              "alternativeIds": [],
              "creationTime": "2021-08-17T11:02:48.815315Z",
              "credit": [
                "Agustin Gianni"
              ],
              "cvssScore": 3.4,
              "description": "## Overview\n[hbs](https://www.npmjs.org/package/hbs) is an Express.js template engine plugin for Handlebars\n\nAffected versions of this package are vulnerable to Information Exposure. `hbs` mixes pure template data with engine configuration options through the `Express` render API. By overwriting internal configuration options a file disclosure vulnerability may be triggered in downstream applications.\n## Remediation\nThere is no fixed version for `hbs`.\n## References\n- [PoC and Explanation](https://securitylab.github.com/advisories/GHSL-2021-020-pillarjs-hbs/)\n",
              "disclosureTime": "2021-08-17T10:50:41Z",
              "exploit": "Proof of Concept",
              "fixedIn": [],
              "functions": [],
              "functions_new": [],
              "id": "SNYK-JS-HBS-1566555",
              "identifiers": {
                "CVE": [
                  "CVE-2021-32822"
                ],
                "CWE": [
                  "CWE-200"
                ],
                "GHSL": [
                  "GHSL-2021-020"
                ]
              },
              "language": "js",
              "malicious": false,
              "modificationTime": "2021-08-17T14:14:00.467905Z",
              "moduleName": "hbs",
              "packageManager": "npm",
              "packageName": "hbs",
              "patches": [],
              "proprietary": false,
              "publicationTime": "2021-08-17T14:14:00.465869Z",
              "references": [
                {
                  "title": "PoC and Explanation",
                  "url": "https://securitylab.github.com/advisories/GHSL-2021-020-pillarjs-hbs/"
                }
              ],
              "semver": {
                "vulnerable": [
                  "*"
                ]
              },
              "severity": "low",
              "socialTrendAlert": false,
              "title": "Information Exposure",
              "from": [
                "goof@1.0.1",
                "hbs@4.0.4"
              ],
              "upgradePath": [],
              "isUpgradable": false,
              "isPatchable": false,
              "isPinnable": false,
              "isRuntime": false,
              "name": "hbs",
              "version": "4.0.4",
              "severityWithCritical": "low"
            },
            {
              "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:N/I:N/A:H",
              "alternativeIds": [],
              "creationTime": "2020-11-25T12:50:16.634305Z",
              "credit": [
                "Vladimir Jimenez",
                "Josh Goebel",
                "Travis Ralston"
              ],
              "cvssScore": 5.8,
              "description": "## Overview\n[highlight.js](https://www.npmjs.com/package/highlight.js) is a syntax highlighter written in JavaScript. It works in the browser as well as on the server. It works with pretty much any markup, doesn’t depend on any framework, and has automatic language detection.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A malicious HTML code block can be crafted that will result in prototype pollution of the base object's prototype during highlighting. If you allow users to insert custom HTML code blocks into your page/app via parsing Markdown code blocks (or similar) and do not filter the language names the user can provide you may be vulnerable.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `highlight.js` to version 9.18.2, 10.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/highlightjs/highlight.js/commit/7241013ae011a585983e176ddc0489a7a52f6bb0)\n- [GitHub PR](https://github.com/highlightjs/highlight.js/pull/2636)\n",
              "disclosureTime": "2020-11-24T22:58:41Z",
              "exploit": "Not Defined",
              "fixedIn": [
                "9.18.2",
                "10.1.2"
              ],
              "functions": [],
              "functions_new": [],
              "id": "SNYK-JS-HIGHLIGHTJS-1045326",
              "identifiers": {
                "CVE": [
                  "CVE-2020-26237"
                ],
                "CWE": [
                  "CWE-400"
                ],
                "GHSA": [
                  "GHSA-vfrc-7r7c-w9mx"
                ]
              },
              "language": "js",
              "malicious": false,
              "modificationTime": "2020-11-25T17:05:14.721131Z",
              "moduleName": "highlight.js",
              "packageManager": "npm",
              "packageName": "highlight.js",
              "patches": [],
              "proprietary": false,
              "publicationTime": "2020-11-25T17:05:14.497065Z",
              "references": [
                {
                  "title": "GitHub Commit",
                  "url": "https://github.com/highlightjs/highlight.js/commit/7241013ae011a585983e176ddc0489a7a52f6bb0"
                },
                {
                  "title": "GitHub PR",
                  "url": "https://github.com/highlightjs/highlight.js/pull/2636"
                }
              ],
              "semver": {
                "vulnerable": [
                  ">=7.2.0 <9.18.2",
                  ">=10.0.0 <10.1.2"
                ]
              },
              "severity": "medium",
              "socialTrendAlert": false,
              "title": "Prototype Pollution",
              "from": [
                "goof@1.0.1",
                "typeorm@0.2.24",
                "cli-highlight@2.1.4",
                "highlight.js@9.18.1"
              ],
              "upgradePath": [
                false,
                "typeorm@0.2.24",
                "cli-highlight@2.1.4",
                "highlight.js@9.18.2"
              ],
              "isUpgradable": true,
              "isPatchable": false,
              "isPinnable": false,
              "isRuntime": false,
              "name": "highlight.js",
              "version": "9.18.1",
              "severityWithCritical": "medium"
            },
            {
              "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
              "alternativeIds": [],
              "creationTime": "2020-12-06T09:34:39.383236Z",
              "credit": [
                "Unknown"
              ],
              "cvssScore": 5.3,
              "description": "## Overview\n[highlight.js](https://www.npmjs.com/package/highlight.js) is a syntax highlighter written in JavaScript. It works in the browser as well as on the server. It works with pretty much any markup, doesn’t depend on any framework, and has automatic language detection.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via Exponential and Polynomial catastrophic backtracking in multiple language highlighting.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `highlight.js` to version 10.4.1 or higher.\n## References\n- [GitHub Commit](https://github.com/highlightjs/highlight.js/commit/373b9d862401162e832ce77305e49b859e110f9c)\n",
              "disclosureTime": "2020-12-04T16:47:20Z",
              "exploit": "Not Defined",
              "fixedIn": [
                "10.4.1"
              ],
              "functions": [],
              "functions_new": [],
              "id": "SNYK-JS-HIGHLIGHTJS-1048676",
              "identifiers": {
                "CVE": [],
                "CWE": [
                  "CWE-400"
                ],
                "GHSA": [
                  "GHSA-7wwv-vh3v-89cq"
                ]
              },
              "language": "js",
              "malicious": false,
              "modificationTime": "2020-12-06T16:34:07.402949Z",
              "moduleName": "highlight.js",
              "packageManager": "npm",
              "packageName": "highlight.js",
              "patches": [],
              "proprietary": false,
              "publicationTime": "2020-12-06T16:34:07.195287Z",
              "references": [
                {
                  "title": "GitHub Commit",
                  "url": "https://github.com/highlightjs/highlight.js/commit/373b9d862401162e832ce77305e49b859e110f9c"
                }
              ],
              "semver": {
                "vulnerable": [
                  ">=9.0.0 <10.4.1"
                ]
              },
              "severity": "medium",
              "socialTrendAlert": false,
              "title": "Regular Expression Denial of Service (ReDoS)",
              "from": [
                "goof@1.0.1",
                "typeorm@0.2.24",
                "cli-highlight@2.1.4",
                "highlight.js@9.18.1"
              ],
              "upgradePath": [
                false,
                "typeorm@0.2.24",
                "cli-highlight@2.1.6",
                "highlight.js@10.4.1"
              ],
              "isUpgradable": true,
              "isPatchable": false,
              "isPinnable": false,
              "isRuntime": false,
              "name": "highlight.js",
              "version": "9.18.1",
              "severityWithCritical": "medium"
            },
            {
              "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
              "alternativeIds": [],
              "creationTime": "2021-03-23T16:13:42.109692Z",
              "credit": [
                "Yeting Li"
              ],
              "cvssScore": 5.3,
              "description": "## Overview\n[hosted-git-info](https://www.npmjs.org/package/hosted-git-info) is a Provides metadata and conversions from repository urls for Github, Bitbucket and Gitlab\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression `shortcutMatch ` in the `fromUrl` function in index.js. The affected regular expression exhibits polynomial worst-case time complexity.\r\n\r\n### PoC by Yeting Li\r\n```\r\nvar hostedGitInfo = require(\"hosted-git-info\")\r\nfunction build_attack(n) {\r\n    var ret = \"a:\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"a\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n   if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       var parsedInfo = hostedGitInfo.fromUrl(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hosted-git-info` to version 3.0.8, 2.8.9 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3)\n",
              "disclosureTime": "2020-11-28T00:00:00Z",
              "exploit": "Proof of Concept",
              "fixedIn": [
                "3.0.8",
                "2.8.9"
              ],
              "functions": [],
              "functions_new": [],
              "id": "SNYK-JS-HOSTEDGITINFO-1088355",
              "identifiers": {
                "CVE": [
                  "CVE-2021-23362"
                ],
                "CWE": [
                  "CWE-400"
                ],
                "GHSA": [
                  "GHSA-43f8-2h32-f4cj"
                ]
              },
              "language": "js",
              "malicious": false,
              "modificationTime": "2021-07-06T14:08:10.106189Z",
              "moduleName": "hosted-git-info",
              "packageManager": "npm",
              "packageName": "hosted-git-info",
              "patches": [],
              "proprietary": true,
              "publicationTime": "2021-03-23T17:13:24Z",
              "references": [
                {
                  "title": "GitHub Commit",
                  "url": "https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3"
                }
              ],
              "semver": {
                "vulnerable": [
                  ">=3.0.0 <3.0.8",
                  "<2.8.9"
                ]
              },
              "severity": "medium",
              "socialTrendAlert": false,
              "title": "Regular Expression Denial of Service (ReDoS)",
              "from": [
                "goof@1.0.1",
                "tap@11.1.5",
                "nyc@11.9.0",
                "test-exclude@4.2.1",
                "read-pkg-up@1.0.1",
                "read-pkg@1.1.0",
                "normalize-package-data@2.4.0",
                "hosted-git-info@2.6.0"
              ],
              "upgradePath": [],
              "isUpgradable": false,
              "isPatchable": false,
              "isPinnable": false,
              "isRuntime": false,
              "name": "hosted-git-info",
              "version": "2.6.0",
              "severityWithCritical": "medium"
            },
            {
              "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H",
              "alternativeIds": [],
              "creationTime": "2021-11-14T15:11:37.579980Z",
              "credit": [
                "Yoshino-s"
              ],
              "cvssScore": 8.6,
              "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `validate` function, which when given a special payload will pollute `Object` with undesired attributes.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `json-schema` to version 0.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741)\n",
              "disclosureTime": "2021-11-14T15:05:57Z",
              "exploit": "Not Defined",
              "fixedIn": [
                "0.4.0"
              ],
              "functions": [],
              "functions_new": [],
              "id": "SNYK-JS-JSONSCHEMA-1920922",
              "identifiers": {
                "CVE": [
                  "CVE-2021-3918"
                ],
                "CWE": [
                  "CWE-1321"
                ]
              },
              "language": "js",
              "malicious": false,
              "modificationTime": "2021-12-17T15:25:44.736835Z",
              "moduleName": "json-schema",
              "packageManager": "npm",
              "packageName": "json-schema",
              "patches": [],
              "proprietary": false,
              "publicationTime": "2021-11-14T16:49:43.070251Z",
              "references": [
                {
                  "title": "GitHub Commit",
                  "url": "https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741"
                }
              ],
              "semver": {
                "vulnerable": [
                  "<0.4.0"
                ]
              },
              "severity": "high",
              "socialTrendAlert": false,
              "title": "Prototype Pollution",
              "from": [
                "goof@1.0.1",
                "tap@11.1.5",
                "coveralls@3.0.9",
                "request@2.88.0",
                "http-signature@1.2.0",
                "jsprim@1.4.1",
                "json-schema@0.2.3"
              ],
              "upgradePath": [
                false,
                "tap@11.1.5",
                "coveralls@3.0.9",
                "request@2.88.0",
                "http-signature@1.2.0",
                "jsprim@1.4.2",
                "json-schema@0.4.0"
              ],
              "isUpgradable": true,
              "isPatchable": false,
              "isPinnable": false,
              "isRuntime": false,
              "name": "json-schema",
              "version": "0.2.3",
              "severityWithCritical": "high"
            },
            {
              "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
              "alternativeIds": [],
              "creationTime": "2019-12-16T14:21:14.675101Z",
              "credit": [
                "Feng Xiao"
              ],
              "cvssScore": 3.7,
              "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
              "disclosureTime": "2019-12-16T14:31:14Z",
              "exploit": "Proof of Concept",
              "fixedIn": [
                "6.0.3"
              ],
              "functions": [
                {
                  "functionId": {
                    "className": null,
                    "filePath": "index.js",
                    "functionName": "ctorName"
                  },
                  "version": [
                    ">=6.0.0 <6.0.3"
                  ]
                }
              ],
              "functions_new": [
                {
                  "functionId": {
                    "filePath": "index.js",
                    "functionName": "ctorName"
                  },
                  "version": [
                    ">=6.0.0 <6.0.3"
                  ]
                }
              ],
              "id": "SNYK-JS-KINDOF-537849",
              "identifiers": {
                "CVE": [
                  "CVE-2019-20149"
                ],
                "CWE": [
                  "CWE-20"
                ],
                "GHSA": [
                  "GHSA-6c8f-qphg-qjgp"
                ],
                "NSP": [
                  "1490"
                ]
              },
              "language": "js",
              "malicious": false,
              "modificationTime": "2020-12-17T13:54:54.804808Z",
              "moduleName": "kind-of",
              "packageManager": "npm",
              "packageName": "kind-of",
              "patches": [],
              "proprietary": false,
              "publicationTime": "2020-01-19T14:31:13Z",
              "references": [
                {
                  "title": "GitHub Issue",
                  "url": "https://github.com/jonschlinkert/kind-of/issues/30"
                },
                {
                  "title": "GitHub PR",
                  "url": "https://github.com/jonschlinkert/kind-of/pull/31"
                }
              ],
              "semver": {
                "vulnerable": [
                  ">=6.0.0 <6.0.3"
                ]
              },
              "severity": "low",
              "socialTrendAlert": false,
              "title": "Validation Bypass",
              "from": [
                "goof@1.0.1",
                "tap@11.1.5",
                "nyc@11.9.0",
                "test-exclude@4.2.1",
                "micromatch@3.1.10",
                "extglob@2.0.4",
                "expand-brackets@2.1.4",
                "snapdragon@0.8.2",
                "base@0.11.2",
                "define-property@1.0.0",
                "is-descriptor@1.0.2",
                "is-data-descriptor@1.0.0",
                "kind-of@6.0.2"
              ],
              "upgradePath": [
                false,
                "tap@11.1.5",
                "nyc@11.9.0",
                "test-exclude@4.2.1",
                "micromatch@3.1.10",
                "extglob@2.0.4",
                "expand-brackets@2.1.4",
                "snapdragon@0.8.2",
                "base@0.11.2",
                "define-property@1.0.0",
                "is-descriptor@1.0.2",
                "is-data-descriptor@1.0.0",
                "kind-of@6.0.3"
              ],
              "isUpgradable": true,
              "isPatchable": false,
              "isPinnable": false,
              "isRuntime": false,
              "name": "kind-of",
              "version": "6.0.2",
              "severityWithCritical": "low"
            },
            {
              "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
              "alternativeIds": [],
              "creationTime": "2022-03-18T13:02:08.840039Z",
              "credit": [
                "Unknown"
              ],
              "cvssScore": 3.7,
              "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
              "disclosureTime": "2022-03-18T12:24:05Z",
              "exploit": "Not Defined",
              "fixedIn": [
                "1.2.6"
              ],
              "functions": [],
              "functions_new": [],
              "id": "SNYK-JS-MINIMIST-2429795",
              "identifiers": {
                "CVE": [
                  "CVE-2021-44906"
                ],
                "CWE": [
                  "CWE-1321"
                ],
                "SNYK": [
                  "SNYK-JS-MINIMIST-559764"
                ]
              },
              "language": "js",
              "malicious": false,
              "modificationTime": "2022-03-22T13:31:59.687436Z",
              "moduleName": "minimist",
              "packageManager": "npm",
              "packageName": "minimist",
              "patches": [],
              "proprietary": false,
              "publicationTime": "2022-03-21T12:09:35Z",
              "references": [
                {
                  "title": "Fix Commit",
                  "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
                },
                {
                  "title": "GitHub Issue",
                  "url": "https://github.com/substack/minimist/issues/164"
                },
                {
                  "title": "Vulnerable Code",
                  "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
                }
              ],
              "semver": {
                "vulnerable": [
                  "<1.2.6"
                ]
              },
              "severity": "low",
              "socialTrendAlert": false,
              "title": "Prototype Pollution",
              "from": [
                "goof@1.0.1",
                "typeorm@0.2.24",
                "mkdirp@0.5.5",
                "minimist@1.2.5"
              ],
              "upgradePath": [
                false,
                "typeorm@0.2.24",
                "mkdirp@0.5.5",
                "minimist@1.2.6"
              ],
              "isUpgradable": true,
              "isPatchable": false,
              "isPinnable": false,
              "isRuntime": false,
              "name": "minimist",
              "version": "1.2.5",
              "severityWithCritical": "low"
            },
            {
              "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
              "alternativeIds": [],
              "creationTime": "2020-03-11T08:25:47.093051Z",
              "credit": [
                "Snyk Security Team"
              ],
              "cvssScore": 5.6,
              "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
              "disclosureTime": "2020-03-10T08:22:24Z",
              "exploit": "Proof of Concept",
              "fixedIn": [
                "0.2.1",
                "1.2.3"
              ],
              "functions": [
                {
                  "functionId": {
                    "className": null,
                    "filePath": "index.js",
                    "functionName": "setKey"
                  },
                  "version": [
                    "<0.2.1",
                    ">=1.0.0 <1.1.1"
                  ]
                },
                {
                  "functionId": {
                    "className": null,
                    "filePath": "index.js",
                    "functionName": "module.exports.setKey"
                  },
                  "version": [
                    "<0.2.1",
                    ">=1.1.1 <1.2.3"
                  ]
                }
              ],
              "functions_new": [
                {
                  "functionId": {
                    "filePath": "index.js",
                    "functionName": "setKey"
                  },
                  "version": [
                    "<0.2.1",
                    ">=1.0.0 <1.1.1"
                  ]
                },
                {
                  "functionId": {
                    "filePath": "index.js",
                    "functionName": "module.exports.setKey"
                  },
                  "version": [
                    "<0.2.1",
                    ">=1.1.1 <1.2.3"
                  ]
                }
              ],
              "id": "SNYK-JS-MINIMIST-559764",
              "identifiers": {
                "CVE": [
                  "CVE-2020-7598"
                ],
                "CWE": [
                  "CWE-400"
                ],
                "GHSA": [
                  "GHSA-vh95-rmgr-6w4m"
                ],
                "NSP": [
                  "1179"
                ]
              },
              "language": "js",
              "malicious": false,
              "modificationTime": "2020-12-20T09:48:43.878574Z",
              "moduleName": "minimist",
              "packageManager": "npm",
              "packageName": "minimist",
              "patches": [],
              "proprietary": true,
              "publicationTime": "2020-03-11T08:22:19Z",
              "references": [
                {
                  "title": "Command Injection PoC",
                  "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
                },
                {
                  "title": "GitHub Fix Commit #1",
                  "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
                },
                {
                  "title": "GitHub Fix Commit #2",
                  "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
                },
                {
                  "title": "Snyk Research Blog",
                  "url": "https://snyk.io/blog/prototype-pollution-minimist/"
                }
              ],
              "semver": {
                "vulnerable": [
                  "<0.2.1",
                  ">=1.0.0 <1.2.3"
                ]
              },
              "severity": "medium",
              "socialTrendAlert": false,
              "title": "Prototype Pollution",
              "from": [
                "goof@1.0.1",
                "tap@11.1.5",
                "nyc@11.9.0",
                "istanbul-reports@1.4.0",
                "handlebars@4.0.11",
                "optimist@0.6.1",
                "minimist@0.0.8"
              ],
              "upgradePath": [],
              "isUpgradable": false,
              "isPatchable": false,
              "isPinnable": false,
              "isRuntime": false,
              "name": "minimist",
              "version": "0.0.8",
              "severityWithCritical": "medium"
            },
            {
              "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
              "alternativeIds": [],
              "creationTime": "2019-06-20T09:34:56.241544Z",
              "credit": [
                "Snyk Security Team"
              ],
              "cvssScore": 7.3,
              "description": "## Overview\n[mixin-deep](https://www.npmjs.com/package/mixin-deep) is a package that deeply mixes the properties of objects into the first object.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `mixin-deep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mixin = require('mixin-deep');\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mixin({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n          console.log(`Vulnerable to Prototype Pollution via ${payload}`)\r\n  }\r\n}\r\n\r\ncheck();\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mixin-deep` to version 2.0.1, 1.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9)\n",
              "disclosureTime": "2019-06-19T09:34:10Z",
              "exploit": "Proof of Concept",
              "fixedIn": [
                "2.0.1",
                "1.3.2"
              ],
              "functions": [
                {
                  "functionId": {
                    "className": null,
                    "filePath": "index.js",
                    "functionName": "module.exports.copy"
                  },
                  "version": [
                    "<1.1.1"
                  ]
                },
                {
                  "functionId": {
                    "className": null,
                    "filePath": "index.js",
                    "functionName": "copy"
                  },
                  "version": [
                    ">=1.1.1 <2.0.0"
                  ]
                },
                {
                  "functionId": {
                    "className": null,
                    "filePath": "index.js",
                    "functionName": "mixinDeep"
                  },
                  "version": [
                    ">=2.0.0 <2.0.1"
                  ]
                }
              ],
              "functions_new": [
                {
                  "functionId": {
                    "filePath": "index.js",
                    "functionName": "module.exports.copy"
                  },
                  "version": [
                    "<1.1.1"
                  ]
                },
                {
                  "functionId": {
                    "filePath": "index.js",
                    "functionName": "copy"
                  },
                  "version": [
                    ">=1.1.1 <2.0.0"
                  ]
                },
                {
                  "functionId": {
                    "filePath": "index.js",
                    "functionName": "mixinDeep"
                  },
                  "version": [
                    ">=2.0.0 <2.0.1"
                  ]
                }
              ],
              "id": "SNYK-JS-MIXINDEEP-450212",
              "identifiers": {
                "CVE": [
                  "CVE-2019-10746"
                ],
                "CWE": [
                  "CWE-400"
                ],
                "GHSA": [
                  "GHSA-fhjf-83wg-r2j9"
                ],
                "NSP": [
                  "1013"
                ]
              },
              "language": "js",
              "malicious": false,
              "modificationTime": "2020-12-22T17:02:13.112544Z",
              "moduleName": "mixin-deep",
              "packageManager": "npm",
              "packageName": "mixin-deep",
              "patches": [],
              "proprietary": true,
              "publicationTime": "2019-06-20T09:34:08Z",
              "references": [
                {
                  "title": "GitHub Commit",
                  "url": "https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9"
                }
              ],
              "semver": {
                "vulnerable": [
                  ">=2.0.0 <2.0.1",
                  "<1.3.2"
                ]
              },
              "severity": "high",
              "socialTrendAlert": false,
              "title": "Prototype Pollution",
              "from": [
                "goof@1.0.1",
                "tap@11.1.5",
                "nyc@11.9.0",
                "test-exclude@4.2.1",
                "micromatch@3.1.10",
                "extglob@2.0.4",
                "expand-brackets@2.1.4",
                "snapdragon@0.8.2",
                "base@0.11.2",
                "mixin-deep@1.3.1"
              ],
              "upgradePath": [
                false,
                "tap@11.1.5",
                "nyc@11.9.0",
                "test-exclude@4.2.1",
                "micromatch@3.1.10",
                "extglob@2.0.4",
                "expand-brackets@2.1.4",
                "snapdragon@0.8.2",
                "base@0.11.2",
                "mixin-deep@1.3.2"
              ],
              "isUpgradable": true,
              "isPatchable": false,
              "isPinnable": false,
              "isRuntime": false,
              "name": "mixin-deep",
              "version": "1.3.1",
              "severityWithCritical": "high"
            },
            {
              "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
              "alternativeIds": [],
              "creationTime": "2021-02-19T16:00:22.449519Z",
              "credit": [
                "Yeting Li"
              ],
              "cvssScore": 5.3,
              "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
              "disclosureTime": "2021-02-19T15:54:01Z",
              "exploit": "Proof of Concept",
              "fixedIn": [
                "1.0.7"
              ],
              "functions": [],
              "functions_new": [],
              "id": "SNYK-JS-PATHPARSE-1077067",
              "identifiers": {
                "CVE": [
                  "CVE-2021-23343"
                ],
                "CWE": [
                  "CWE-400"
                ]
              },
              "language": "js",
              "malicious": false,
              "modificationTime": "2021-08-08T13:56:55.024375Z",
              "moduleName": "path-parse",
              "packageManager": "npm",
              "packageName": "path-parse",
              "patches": [],
              "proprietary": true,
              "publicationTime": "2021-05-04T08:38:49Z",
              "references": [
                {
                  "title": "GitHub Issue 1",
                  "url": "https://github.com/jbgutierrez/path-parse/issues/8"
                },
                {
                  "title": "GitHub PR",
                  "url": "https://github.com/jbgutierrez/path-parse/pull/10"
                }
              ],
              "semver": {
                "vulnerable": [
                  "<1.0.7"
                ]
              },
              "severity": "medium",
              "socialTrendAlert": false,
              "title": "Regular Expression Denial of Service (ReDoS)",
              "from": [
                "goof@1.0.1",
                "tap@11.1.5",
                "nyc@11.9.0",
                "istanbul-lib-report@1.1.3",
                "path-parse@1.0.5"
              ],
              "upgradePath": [
                false,
                "tap@11.1.5",
                "nyc@11.9.0",
                "istanbul-lib-report@1.1.3",
                "path-parse@1.0.7"
              ],
              "isUpgradable": true,
              "isPatchable": false,
              "isPinnable": false,
              "isRuntime": false,
              "name": "path-parse",
              "version": "1.0.5",
              "severityWithCritical": "medium"
            },
            {
              "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
              "alternativeIds": [],
              "creationTime": "2021-08-12T16:49:06.015288Z",
              "credit": [
                "Alessio Della Libera",
                "ready-research"
              ],
              "cvssScore": 7.3,
              "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2019-10747 when the user-provided keys used in the `path` parameter are arrays.\r\n\r\n\r\n### PoC\r\n```\r\nconst set = require(\"set-value\")\r\n\r\n// set({}, ['__proto__','polluted'], 'yes');\r\n// console.log(polluted); // Error: Cannot set unsafe key: \"__proto__\"\r\n\r\nset({}, [['__proto__'],'polluted'], 'yes');\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `set-value` to version 4.0.1, 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452)\n- [GitHub PR](https://github.com/jonschlinkert/set-value/pull/33)\n- [Huntr Bounty Report](https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
              "disclosureTime": "2021-08-12T16:49:03Z",
              "exploit": "Not Defined",
              "fixedIn": [
                "4.0.1",
                "2.0.1"
              ],
              "functions": [],
              "functions_new": [],
              "id": "SNYK-JS-SETVALUE-1540541",
              "identifiers": {
                "CVE": [
                  "CVE-2021-23440"
                ],
                "CWE": [
                  "CWE-1321"
                ]
              },
              "language": "js",
              "malicious": false,
              "modificationTime": "2021-11-05T14:27:18.657314Z",
              "moduleName": "set-value",
              "packageManager": "npm",
              "packageName": "set-value",
              "patches": [],
              "proprietary": true,
              "publicationTime": "2021-09-12T12:24:31Z",
              "references": [
                {
                  "title": "GitHub Commit",
                  "url": "https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452"
                },
                {
                  "title": "GitHub PR",
                  "url": "https://github.com/jonschlinkert/set-value/pull/33"
                },
                {
                  "title": "Huntr Bounty Report",
                  "url": "https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/"
                },
                {
                  "title": "Snyk Blog",
                  "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/"
                }
              ],
              "semver": {
                "vulnerable": [
                  ">=3.0.0 <4.0.1",
                  "<2.0.1"
                ]
              },
              "severity": "high",
              "socialTrendAlert": false,
              "title": "Prototype Pollution",
              "from": [
                "goof@1.0.1",
                "tap@11.1.5",
                "nyc@11.9.0",
                "test-exclude@4.2.1",
                "micromatch@3.1.10",
                "extglob@2.0.4",
                "expand-brackets@2.1.4",
                "snapdragon@0.8.2",
                "base@0.11.2",
                "cache-base@1.0.1",
                "union-value@1.0.0",
                "set-value@0.4.3"
              ],
              "upgradePath": [],
              "isUpgradable": false,
              "isPatchable": false,
              "isPinnable": false,
              "isRuntime": false,
              "name": "set-value",
              "version": "0.4.3",
              "severityWithCritical": "high"
            },
            {
              "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
              "alternativeIds": [],
              "creationTime": "2019-06-20T09:40:41.272349Z",
              "credit": [
                "Jon Schlinkert"
              ],
              "cvssScore": 7.3,
              "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `set-value` could be tricked into adding or modifying properties of `Object.prototype` using any of the `constructor`, `prototype` and `_proto_` payloads.\r\n\r\n## PoC by Snyk\r\n```\r\nconst setFn = require('set-value');\r\nconst paths = [\r\n  'constructor.prototype.a0',\r\n  '__proto__.a1',\r\n];\r\n\r\nfunction check() {\r\n  for (const p of paths) {\r\n      setFn({}, p, true);\r\n  }\r\n  for (let i = 0; i < paths.length; i++) {\r\n      if (({})[`a${i}`] === true) {\r\n          console.log(`Yes with ${paths[i]}`);\r\n      }\r\n  }\r\n}\r\n\r\ncheck();\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `set-value` to version 2.0.1, 3.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f)\n- [NPM Security Advisory](https://nodesecurity.io/advisories/1012)\n",
              "disclosureTime": "2019-06-19T09:38:54Z",
              "exploit": "Proof of Concept",
              "fixedIn": [
                "2.0.1",
                "3.0.1"
              ],
              "functions": [
                {
                  "functionId": {
                    "className": null,
                    "filePath": "index.js",
                    "functionName": "create"
                  },
                  "version": [
                    "<0.3.0"
                  ]
                },
                {
                  "functionId": {
                    "className": null,
                    "filePath": "index.js",
                    "functionName": "module.exports"
                  },
                  "version": [
                    ">=0.3.0 <3.0.0"
                  ]
                },
                {
                  "functionId": {
                    "className": null,
                    "filePath": "index.js",
                    "functionName": "set"
                  },
                  "version": [
                    ">=3.0.0 <3.0.1"
                  ]
                }
              ],
              "functions_new": [
                {
                  "functionId": {
                    "filePath": "index.js",
                    "functionName": "create"
                  },
                  "version": [
                    "<0.3.0"
                  ]
                },
                {
                  "functionId": {
                    "filePath": "index.js",
                    "functionName": "module.exports"
                  },
                  "version": [
                    ">=0.3.0 <3.0.0"
                  ]
                },
                {
                  "functionId": {
                    "filePath": "index.js",
                    "functionName": "set"
                  },
                  "version": [
                    ">=3.0.0 <3.0.1"
                  ]
                }
              ],
              "id": "SNYK-JS-SETVALUE-450213",
              "identifiers": {
                "CVE": [
                  "CVE-2019-10747"
                ],
                "CWE": [
                  "CWE-400"
                ],
                "GHSA": [
                  "GHSA-4g88-fppr-53pp"
                ],
                "NSP": [
                  "1012"
                ]
              },
              "language": "js",
              "malicious": false,
              "modificationTime": "2020-12-22T17:02:13.120091Z",
              "moduleName": "set-value",
              "packageManager": "npm",
              "packageName": "set-value",
              "patches": [],
              "proprietary": true,
              "publicationTime": "2019-06-20T09:38:53Z",
              "references": [
                {
                  "title": "GitHub Commit",
                  "url": "https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f"
                },
                {
                  "title": "NPM Security Advisory",
                  "url": "https://nodesecurity.io/advisories/1012"
                }
              ],
              "semver": {
                "vulnerable": [
                  "<2.0.1",
                  ">=3.0.0 <3.0.1"
                ]
              },
              "severity": "high",
              "socialTrendAlert": false,
              "title": "Prototype Pollution",
              "from": [
                "goof@1.0.1",
                "tap@11.1.5",
                "nyc@11.9.0",
                "test-exclude@4.2.1",
                "micromatch@3.1.10",
                "extglob@2.0.4",
                "expand-brackets@2.1.4",
                "snapdragon@0.8.2",
                "base@0.11.2",
                "cache-base@1.0.1",
                "union-value@1.0.0",
                "set-value@0.4.3"
              ],
              "upgradePath": [],
              "isUpgradable": false,
              "isPatchable": false,
              "isPinnable": false,
              "isRuntime": false,
              "name": "set-value",
              "version": "0.4.3",
              "severityWithCritical": "high"
            },
            {
              "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
              "alternativeIds": [],
              "creationTime": "2021-09-30T14:25:50.130236Z",
              "credit": [
                "ready-research"
              ],
              "cvssScore": 5.3,
              "description": "## Overview\n[uglify-js](http://npmjs.com/package/uglify-js) is a JavaScript parser, minifier, compressor and beautifier toolkit.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `string_template` and the `decode_template` functions.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `uglify-js` to version 3.14.3 or higher.\n## References\n- [GitHub Commit](https://github.com/mishoo/UglifyJS/commit/157521066fc43cff2feab7ffc1ecea603617606b)\n- [GitHub Issue](https://github.com/mishoo/UglifyJS/issues/5133)\n- [GitHub PR](https://github.com/mishoo/UglifyJS/pull/5134)\n- [GitHub PR](https://github.com/mishoo/UglifyJS/pull/5135)\n",
              "disclosureTime": "2021-09-30T14:22:21Z",
              "exploit": "Not Defined",
              "fixedIn": [
                "3.14.3"
              ],
              "functions": [],
              "functions_new": [],
              "id": "SNYK-JS-UGLIFYJS-1727251",
              "identifiers": {
                "CVE": [],
                "CWE": [
                  "CWE-1333"
                ]
              },
              "language": "js",
              "malicious": false,
              "modificationTime": "2021-11-09T18:42:15.332622Z",
              "moduleName": "uglify-js",
              "packageManager": "npm",
              "packageName": "uglify-js",
              "patches": [],
              "proprietary": false,
              "publicationTime": "2021-11-09T18:42:15.313328Z",
              "references": [
                {
                  "title": "GitHub Commit",
                  "url": "https://github.com/mishoo/UglifyJS/commit/157521066fc43cff2feab7ffc1ecea603617606b"
                },
                {
                  "title": "GitHub Issue",
                  "url": "https://github.com/mishoo/UglifyJS/issues/5133"
                },
                {
                  "title": "GitHub PR",
                  "url": "https://github.com/mishoo/UglifyJS/pull/5134"
                },
                {
                  "title": "GitHub PR",
                  "url": "https://github.com/mishoo/UglifyJS/pull/5135"
                }
              ],
              "semver": {
                "vulnerable": [
                  "<3.14.3"
                ]
              },
              "severity": "medium",
              "socialTrendAlert": false,
              "title": "Regular Expression Denial of Service (ReDoS)",
              "from": [
                "goof@1.0.1",
                "tap@11.1.5",
                "nyc@11.9.0",
                "istanbul-reports@1.4.0",
                "handlebars@4.0.11",
                "uglify-js@2.8.29"
              ],
              "upgradePath": [
                false,
                "tap@11.1.5",
                "nyc@11.9.0",
                "istanbul-reports@1.4.0",
                "handlebars@4.0.12",
                "uglify-js@3.14.3"
              ],
              "isUpgradable": true,
              "isPatchable": false,
              "isPinnable": false,
              "isRuntime": false,
              "name": "uglify-js",
              "version": "2.8.29",
              "severityWithCritical": "medium"
            },
            {
              "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "alternativeIds": [],
              "creationTime": "2022-02-13T14:46:07.185334Z",
              "credit": [
                "khizar"
              ],
              "cvssScore": 7.5,
              "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `unset-value` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\n",
              "disclosureTime": "2022-02-13T14:44:04Z",
              "exploit": "Not Defined",
              "fixedIn": [
                "2.0.1"
              ],
              "functions": [],
              "functions_new": [],
              "id": "SNYK-JS-UNSETVALUE-2400660",
              "identifiers": {
                "CVE": [],
                "CWE": [
                  "CWE-1321"
                ]
              },
              "language": "js",
              "malicious": false,
              "modificationTime": "2022-02-13T15:26:38.065734Z",
              "moduleName": "unset-value",
              "packageManager": "npm",
              "packageName": "unset-value",
              "patches": [],
              "proprietary": false,
              "publicationTime": "2022-02-13T15:26:38.063549Z",
              "references": [
                {
                  "title": "GitHub Commit",
                  "url": "https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561"
                },
                {
                  "title": "GitHub Issue",
                  "url": "https://github.com/jonschlinkert/unset-value/issues/11"
                },
                {
                  "title": "GitHub PR",
                  "url": "https://github.com/jonschlinkert/unset-value/pull/12"
                },
                {
                  "title": "GitHub Release",
                  "url": "https://github.com/jonschlinkert/unset-value/releases"
                }
              ],
              "semver": {
                "vulnerable": [
                  "<2.0.1"
                ]
              },
              "severity": "high",
              "socialTrendAlert": false,
              "title": "Prototype Pollution",
              "from": [
                "goof@1.0.1",
                "tap@11.1.5",
                "nyc@11.9.0",
                "test-exclude@4.2.1",
                "micromatch@3.1.10",
                "extglob@2.0.4",
                "expand-brackets@2.1.4",
                "snapdragon@0.8.2",
                "base@0.11.2",
                "cache-base@1.0.1",
                "unset-value@1.0.0"
              ],
              "upgradePath": [],
              "isUpgradable": false,
              "isPatchable": false,
              "isPinnable": false,
              "isRuntime": false,
              "name": "unset-value",
              "version": "1.0.0",
              "severityWithCritical": "high"
            },
            {
              "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
              "alternativeIds": [],
              "creationTime": "2020-10-25T14:27:16.715665Z",
              "credit": [
                "po6ix"
              ],
              "cvssScore": 7.3,
              "description": "## Overview\n[y18n](https://www.npmjs.com/package/y18n) is a the bare-bones internationalization library used by yargs\n\nAffected versions of this package are vulnerable to Prototype Pollution. PoC by po6ix:\r\n```\r\nconst y18n = require('y18n')();\r\n \r\ny18n.setLocale('__proto__');\r\ny18n.updateLocale({polluted: true});\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `y18n` to version 3.2.2, 4.0.1, 5.0.5 or higher.\n## References\n- [GitHub Issue](https://github.com/yargs/y18n/issues/96)\n- [GitHub PR](https://github.com/yargs/y18n/pull/108)\n",
              "disclosureTime": "2020-10-25T14:24:22Z",
              "exploit": "Proof of Concept",
              "fixedIn": [
                "3.2.2",
                "4.0.1",
                "5.0.5"
              ],
              "functions": [],
              "functions_new": [],
              "id": "SNYK-JS-Y18N-1021887",
              "identifiers": {
                "CVE": [
                  "CVE-2020-7774"
                ],
                "CWE": [
                  "CWE-400"
                ],
                "GHSA": [
                  "GHSA-c4w7-xm78-47vh"
                ]
              },
              "language": "js",
              "malicious": false,
              "modificationTime": "2021-05-02T13:23:15.353267Z",
              "moduleName": "y18n",
              "packageManager": "npm",
              "packageName": "y18n",
              "patches": [],
              "proprietary": false,
              "publicationTime": "2020-11-10T15:27:28Z",
              "references": [
                {
                  "title": "GitHub Issue",
                  "url": "https://github.com/yargs/y18n/issues/96"
                },
                {
                  "title": "GitHub PR",
                  "url": "https://github.com/yargs/y18n/pull/108"
                }
              ],
              "semver": {
                "vulnerable": [
                  "<3.2.2",
                  ">=4.0.0 <4.0.1",
                  ">=5.0.0 <5.0.5"
                ]
              },
              "severity": "high",
              "socialTrendAlert": false,
              "title": "Prototype Pollution",
              "from": [
                "goof@1.0.1",
                "typeorm@0.2.24",
                "cli-highlight@2.1.4",
                "yargs@15.4.1",
                "y18n@4.0.0"
              ],
              "upgradePath": [
                false,
                "typeorm@0.2.24",
                "cli-highlight@2.1.4",
                "yargs@15.4.1",
                "y18n@4.0.1"
              ],
              "isUpgradable": true,
              "isPatchable": false,
              "isPinnable": false,
              "isRuntime": false,
              "name": "y18n",
              "version": "4.0.0",
              "severityWithCritical": "high"
            }
          ],
          "upgrade": {
            "adm-zip@0.4.7": {
              "upgradeTo": "adm-zip@0.5.2",
              "upgrades": [
                "adm-zip@0.4.7",
                "adm-zip@0.4.7"
              ],
              "vulns": [
                "SNYK-JS-ADMZIP-1065796",
                "npm:adm-zip:20180415"
              ]
            },
            "body-parser@1.9.0": {
              "upgradeTo": "body-parser@1.17.1",
              "upgrades": [
                "qs@2.2.4"
              ],
              "vulns": [
                "npm:qs:20170213"
              ]
            },
            "cfenv@1.2.2": {
              "upgradeTo": "cfenv@1.2.4",
              "upgrades": [
                "underscore@1.9.1"
              ],
              "vulns": [
                "SNYK-JS-UNDERSCORE-1080984"
              ]
            },
            "dustjs-linkedin@2.5.0": {
              "upgradeTo": "dustjs-linkedin@3.0.0",
              "upgrades": [
                "dustjs-linkedin@2.5.0",
                "dustjs-linkedin@2.5.0"
              ],
              "vulns": [
                "SNYK-JS-DUSTJSLINKEDIN-1089257",
                "npm:dustjs-linkedin:20160819"
              ]
            },
            "ejs@1.0.0": {
              "upgradeTo": "ejs@3.1.7",
              "upgrades": [
                "ejs@1.0.0",
                "ejs@1.0.0",
                "ejs@1.0.0",
                "ejs@1.0.0",
                "ejs@1.0.0"
              ],
              "vulns": [
                "SNYK-JS-EJS-2803307",
                "SNYK-JS-EJS-1049328",
                "npm:ejs:20161130",
                "npm:ejs:20161130-1",
                "npm:ejs:20161128"
              ]
            },
            "errorhandler@1.2.0": {
              "upgradeTo": "errorhandler@1.4.3",
              "upgrades": [
                "negotiator@0.4.9"
              ],
              "vulns": [
                "npm:negotiator:20160616"
              ]
            },
            "express@4.12.4": {
              "upgradeTo": "express@4.16.0",
              "upgrades": [
                "mime@1.3.4",
                "debug@2.2.0",
                "fresh@0.2.4",
                "ms@0.7.1",
                "qs@2.4.2",
                "negotiator@0.5.3"
              ],
              "vulns": [
                "npm:mime:20170907",
                "npm:debug:20170905",
                "npm:fresh:20170908",
                "npm:ms:20170412",
                "npm:qs:20170213",
                "npm:negotiator:20160616"
              ]
            },
            "express-fileupload@0.0.5": {
              "upgradeTo": "express-fileupload@1.1.10",
              "upgrades": [
                "express-fileupload@0.0.5",
                "express-fileupload@0.0.5"
              ],
              "vulns": [
                "SNYK-JS-EXPRESSFILEUPLOAD-595969",
                "SNYK-JS-EXPRESSFILEUPLOAD-473997"
              ]
            },
            "hbs@4.0.4": {
              "upgradeTo": "hbs@4.1.2",
              "upgrades": [
                "handlebars@4.0.14",
                "handlebars@4.0.14",
                "handlebars@4.0.14",
                "handlebars@4.0.14",
                "handlebars@4.0.14",
                "handlebars@4.0.14",
                "handlebars@4.0.14"
              ],
              "vulns": [
                "SNYK-JS-HANDLEBARS-1056767",
                "SNYK-JS-HANDLEBARS-1279029",
                "SNYK-JS-HANDLEBARS-567742",
                "SNYK-JS-HANDLEBARS-480388",
                "SNYK-JS-HANDLEBARS-534478",
                "SNYK-JS-HANDLEBARS-534988",
                "SNYK-JS-HANDLEBARS-469063"
              ]
            },
            "jquery@2.2.4": {
              "upgradeTo": "jquery@3.5.0",
              "upgrades": [
                "jquery@2.2.4",
                "jquery@2.2.4",
                "jquery@2.2.4",
                "jquery@2.2.4"
              ],
              "vulns": [
                "SNYK-JS-JQUERY-565129",
                "SNYK-JS-JQUERY-567880",
                "SNYK-JS-JQUERY-174006",
                "npm:jquery:20150627"
              ]
            },
            "lodash@4.17.4": {
              "upgradeTo": "lodash@4.17.21",
              "upgrades": [
                "lodash@4.17.4",
                "lodash@4.17.4",
                "lodash@4.17.4",
                "lodash@4.17.4",
                "lodash@4.17.4",
                "lodash@4.17.4",
                "lodash@4.17.4",
                "lodash@4.17.4"
              ],
              "vulns": [
                "SNYK-JS-LODASH-1018905",
                "SNYK-JS-LODASH-1040724",
                "SNYK-JS-LODASH-567746",
                "SNYK-JS-LODASH-608086",
                "SNYK-JS-LODASH-450202",
                "SNYK-JS-LODASH-73638",
                "SNYK-JS-LODASH-73639",
                "npm:lodash:20180130"
              ]
            },
            "marked@0.3.5": {
              "upgradeTo": "marked@4.0.10",
              "upgrades": [
                "marked@0.3.5",
                "marked@0.3.5",
                "marked@0.3.5",
                "marked@0.3.5",
                "marked@0.3.5",
                "marked@0.3.5",
                "marked@0.3.5",
                "marked@0.3.5",
                "marked@0.3.5",
                "marked@0.3.5",
                "marked@0.3.5"
              ],
              "vulns": [
                "SNYK-JS-MARKED-2342073",
                "SNYK-JS-MARKED-2342082",
                "SNYK-JS-MARKED-584281",
                "SNYK-JS-MARKED-174116",
                "SNYK-JS-MARKED-451540",
                "npm:marked:20180225",
                "npm:marked:20170815",
                "npm:marked:20170815-1",
                "npm:marked:20170907",
                "npm:marked:20170112",
                "npm:marked:20150520"
              ]
            },
            "moment@2.15.1": {
              "upgradeTo": "moment@2.29.2",
              "upgrades": [
                "moment@2.15.1",
                "moment@2.15.1",
                "moment@2.15.1"
              ],
              "vulns": [
                "SNYK-JS-MOMENT-2440688",
                "npm:moment:20170905",
                "npm:moment:20161019"
              ]
            },
            "mongoose@4.2.4": {
              "upgradeTo": "mongoose@5.13.9",
              "upgrades": [
                "mpath@0.1.1",
                "mquery@1.6.3",
                "mongoose@4.2.4",
                "mquery@1.6.3",
                "async@0.9.0",
                "mongodb@2.0.46",
                "mongoose@4.2.4",
                "debug@2.2.0",
                "ms@0.7.1",
                "mongoose@4.2.4",
                "kerberos@0.0.24"
              ],
              "vulns": [
                "SNYK-JS-MPATH-1577289",
                "SNYK-JS-MQUERY-1089718",
                "SNYK-JS-MONGOOSE-1086688",
                "SNYK-JS-MQUERY-1050858",
                "SNYK-JS-ASYNC-2441827",
                "SNYK-JS-MONGODB-473855",
                "SNYK-JS-MONGOOSE-472486",
                "npm:debug:20170905",
                "npm:ms:20170412",
                "npm:mongoose:20160116",
                "SNYK-JS-KERBEROS-568900"
              ]
            },
            "ms@0.7.3": {
              "upgradeTo": "ms@2.0.0",
              "upgrades": [
                "ms@0.7.3"
              ],
              "vulns": [
                "npm:ms:20170412"
              ]
            },
            "npmconf@0.0.24": {
              "upgradeTo": "npmconf@2.1.3",
              "upgrades": [
                "npmconf@0.0.24",
                "semver@1.1.4",
                "ini@1.1.0"
              ],
              "vulns": [
                "npm:npmconf:20180512",
                "npm:semver:20150403",
                "SNYK-JS-INI-1048974"
              ]
            },
            "st@0.2.4": {
              "upgradeTo": "st@1.2.2",
              "upgrades": [
                "st@0.2.4",
                "mime@1.2.11",
                "negotiator@0.2.8",
                "st@0.2.4"
              ],
              "vulns": [
                "npm:st:20171013",
                "npm:mime:20170907",
                "npm:negotiator:20160616",
                "npm:st:20140206"
              ]
            },
            "tap@11.1.5": {
              "upgradeTo": "tap@15.0.0",
              "upgrades": [
                "ansi-regex@3.0.0",
                "istanbul-reports@1.4.0",
                "yargs-parser@9.0.2",
                "mem@1.1.0"
              ],
              "vulns": [
                "SNYK-JS-ANSIREGEX-1583908",
                "SNYK-JS-ISTANBULREPORTS-2328088",
                "SNYK-JS-YARGSPARSER-560381",
                "npm:mem:20180117"
              ]
            },
            "typeorm@0.2.24": {
              "upgradeTo": "typeorm@0.2.27",
              "upgrades": [
                "ansi-regex@4.1.0",
                "typeorm@0.2.24"
              ],
              "vulns": [
                "SNYK-JS-ANSIREGEX-1583908",
                "SNYK-JS-TYPEORM-590152"
              ]
            },
            "validator@13.5.2": {
              "upgradeTo": "validator@13.7.0",
              "upgrades": [
                "validator@13.5.2",
                "validator@13.5.2",
                "validator@13.5.2",
                "validator@13.5.2"
              ],
              "vulns": [
                "SNYK-JS-VALIDATOR-1090600",
                "SNYK-JS-VALIDATOR-1090599",
                "SNYK-JS-VALIDATOR-1090601",
                "SNYK-JS-VALIDATOR-1090602"
              ]
            }
          },
          "patch": {
            "SNYK-JS-LODASH-567746": {
              "paths": [
                {
                  "tap > nyc > istanbul-lib-instrument > babel-types > lodash": {
                    "patched": "2022-04-26T21:30:36.264Z"
                  }
                },
                {
                  "tap > nyc > istanbul-lib-instrument > babel-generator > lodash": {
                    "patched": "2022-04-26T21:30:36.264Z"
                  }
                },
                {
                  "tap > nyc > istanbul-lib-instrument > babel-traverse > lodash": {
                    "patched": "2022-04-26T21:30:36.264Z"
                  }
                },
                {
                  "tap > nyc > istanbul-lib-instrument > babel-template > lodash": {
                    "patched": "2022-04-26T21:30:36.264Z"
                  }
                },
                {
                  "tap > nyc > istanbul-lib-instrument > babel-generator > babel-types > lodash": {
                    "patched": "2022-04-26T21:30:36.264Z"
                  }
                },
                {
                  "tap > nyc > istanbul-lib-instrument > babel-traverse > babel-types > lodash": {
                    "patched": "2022-04-26T21:30:36.264Z"
                  }
                },
                {
                  "tap > nyc > istanbul-lib-instrument > babel-template > babel-types > lodash": {
                    "patched": "2022-04-26T21:30:36.264Z"
                  }
                },
                {
                  "tap > nyc > istanbul-lib-instrument > babel-template > babel-traverse > lodash": {
                    "patched": "2022-04-26T21:30:36.264Z"
                  }
                },
                {
                  "tap > nyc > istanbul-lib-instrument > babel-template > babel-traverse > babel-types > lodash": {
                    "patched": "2022-04-26T21:30:36.264Z"
                  }
                }
              ]
            },
            "npm:ms:20151024": {
              "paths": [
                {
                  "humanize-ms > ms": {
                    "patched": "2022-04-26T21:30:36.264Z"
                  }
                }
              ]
            }
          },
          "ignore": {},
          "pin": {}
        },
        "filesystemPolicy": false,
        "filtered": {
          "ignore": [],
          "patch": []
        },
        "uniqueCount": 94,
        "projectName": "goof",
        "displayTargetFile": "package-lock.json",
        "path": ".\\nodejs-goof\\"
      }
    }
  }
  