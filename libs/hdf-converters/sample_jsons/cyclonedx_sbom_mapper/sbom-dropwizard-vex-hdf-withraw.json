{
  "platform": {
    "name": "Heimdall Tools",
    "release": "2.10.15"
  },
  "version": "2.10.15",
  "statistics": {},
  "profiles": [
    {
      "name": "CycloneDX BOM Report: application/602de70a-7107-4ac8-9ad2-3c1c816892a7",
      "title": "test 9 CycloneDX BOM Report",
      "version": "SNAPSHOT",
      "summary": "This is the project I want to use to generate data to understand the schema a bit better",
      "supports": [],
      "attributes": [],
      "groups": [],
      "status": "loaded",
      "controls": [
        {
          "tags": {
            "nist": [
              "SC-8",
              "AC-3"
            ],
            "cci": [
              "CCI-002418",
              "CCI-000213"
            ],
            "cwe": [
              "CWE-173",
              "CWE-200",
              "CWE-378",
              "CWE-732"
            ],
            "bom-ref": "b7a12947-7a8d-4031-b59d-640d33dbad6a",
            "ratings": "GITHUB - low",
            "published": "2021-03-25T17:04:19Z",
            "updated": "2023-11-09T18:44:38Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "A temp directory creation vulnerability exists in Guava prior to version 32.0.0 allowing an attacker with access to the machine to potentially access data in a temporary directory created by the Guava `com.google.common.io.Files.createTempDir()`. The permissions granted to the directory created default to the standard unix-like /tmp ones, leaving the files open. Maintainers recommend explicitly changing the permissions after the creation of the directory, or removing uses of the vulnerable method.",
          "id": "GHSA-5mg8-w23w-74h3",
          "desc": "Description: A temp directory creation vulnerability exists in Guava prior to version 32.0.0 allowing an attacker with access to the machine to potentially access data in a temporary directory created by the Guava `com.google.common.io.Files.createTempDir()`. The permissions granted to the directory created default to the standard unix-like /tmp ones, leaving the files open. Maintainers recommend explicitly changing the permissions after the creation of the directory, or removing uses of the vulnerable method.",
          "impact": 0.3,
          "code": "{\n  \"bom-ref\": \"b7a12947-7a8d-4031-b59d-640d33dbad6a\",\n  \"id\": \"GHSA-5mg8-w23w-74h3\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"low\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    173,\n    200,\n    378,\n    732\n  ],\n  \"description\": \"A temp directory creation vulnerability exists in Guava prior to version 32.0.0 allowing an attacker with access to the machine to potentially access data in a temporary directory created by the Guava `com.google.common.io.Files.createTempDir()`. The permissions granted to the directory created default to the standard unix-like /tmp ones, leaving the files open. Maintainers recommend explicitly changing the permissions after the creation of the directory, or removing uses of the vulnerable method.\",\n  \"published\": \"2021-03-25T17:04:19Z\",\n  \"updated\": \"2023-11-09T18:44:38Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-2",
              "RA-5"
            ],
            "cci": [
              "CCI-002605",
              "CCI-001643"
            ],
            "cwe": [
              "CWE-379",
              "CWE-552"
            ],
            "bom-ref": "bb03c210-ea12-450d-85df-17d81a75ede2",
            "ratings": "GITHUB - medium",
            "published": "2023-06-14T18:30:38Z",
            "updated": "2024-02-13T21:49:15Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "Use of Java's default temporary directory for file creation in `FileBackedOutputStream` in Google Guava versions 1.0 to 31.1 on Unix systems and Android Ice Cream Sandwich allows other users and apps on the machine with access to the default Java temporary directory to be able to access the files created by the class. Even though the security vulnerability is fixed in version 32.0.0, maintainers recommend using version 32.0.1 as version 32.0.0 breaks some functionality under Windows.",
          "id": "GHSA-7g45-4rm6-3mm3",
          "desc": "Description: Use of Java's default temporary directory for file creation in `FileBackedOutputStream` in Google Guava versions 1.0 to 31.1 on Unix systems and Android Ice Cream Sandwich allows other users and apps on the machine with access to the default Java temporary directory to be able to access the files created by the class. Even though the security vulnerability is fixed in version 32.0.0, maintainers recommend using version 32.0.1 as version 32.0.0 breaks some functionality under Windows.",
          "impact": 0.5,
          "code": "{\n  \"bom-ref\": \"bb03c210-ea12-450d-85df-17d81a75ede2\",\n  \"id\": \"GHSA-7g45-4rm6-3mm3\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"medium\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    379,\n    552\n  ],\n  \"description\": \"Use of Java's default temporary directory for file creation in `FileBackedOutputStream` in Google Guava versions 1.0 to 31.1 on Unix systems and Android Ice Cream Sandwich allows other users and apps on the machine with access to the default Java temporary directory to be able to access the files created by the class. Even though the security vulnerability is fixed in version 32.0.0, maintainers recommend using version 32.0.1 as version 32.0.0 breaks some functionality under Windows.\",\n  \"published\": \"2023-06-14T18:30:38Z\",\n  \"updated\": \"2024-02-13T21:49:15Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "d097e083-0b0a-4e3c-9f29-fc936f27ec6f",
            "ratings": "GITHUB - critical",
            "published": "2020-04-23T21:08:40Z",
            "updated": "2023-02-01T05:02:59Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig (aka shaded hikari-config).",
          "id": "GHSA-5p34-5m6p-p58g",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig (aka shaded hikari-config).",
          "impact": 1,
          "code": "{\n  \"bom-ref\": \"d097e083-0b0a-4e3c-9f29-fc936f27ec6f\",\n  \"id\": \"GHSA-5p34-5m6p-p58g\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"critical\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig (aka shaded hikari-config).\",\n  \"published\": \"2020-04-23T21:08:40Z\",\n  \"updated\": \"2023-02-01T05:02:59Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "f57dc81d-6b2d-4060-8c15-7613c1a37981",
            "ratings": "GITHUB - high",
            "published": "2020-05-15T18:58:44Z",
            "updated": "2023-02-01T05:02:59Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.springframework.aop.config.MethodLocatingFactoryBean (aka spring-aop).",
          "id": "GHSA-27xj-rqx5-2255",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.springframework.aop.config.MethodLocatingFactoryBean (aka spring-aop).",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"f57dc81d-6b2d-4060-8c15-7613c1a37981\",\n  \"id\": \"GHSA-27xj-rqx5-2255\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.springframework.aop.config.MethodLocatingFactoryBean (aka spring-aop).\",\n  \"published\": \"2020-05-15T18:58:44Z\",\n  \"updated\": \"2023-02-01T05:02:59Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "600ecfb9-66c7-4fc2-88e8-2bf9efe40628",
            "ratings": "GITHUB - high",
            "published": "2020-06-10T21:12:41Z",
            "updated": "2023-02-01T05:03:03Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.proxy.provider.remoting.RmiProvider (aka apache/commons-proxy).",
          "id": "GHSA-58pp-9c76-5625",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.proxy.provider.remoting.RmiProvider (aka apache/commons-proxy).",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"600ecfb9-66c7-4fc2-88e8-2bf9efe40628\",\n  \"id\": \"GHSA-58pp-9c76-5625\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.proxy.provider.remoting.RmiProvider (aka apache/commons-proxy).\",\n  \"published\": \"2020-06-10T21:12:41Z\",\n  \"updated\": \"2023-02-01T05:03:03Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "36dba0ba-dc6c-4f8a-822c-e51ca444d1bf",
            "ratings": "GITHUB - high",
            "published": "2020-05-15T18:58:50Z",
            "updated": "2023-02-01T05:03:05Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.activemq.* (aka activemq-jms, activemq-core, activemq-pool, and activemq-pool-jms).",
          "id": "GHSA-v3xw-c963-f5hc",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.activemq.* (aka activemq-jms, activemq-core, activemq-pool, and activemq-pool-jms).",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"36dba0ba-dc6c-4f8a-822c-e51ca444d1bf\",\n  \"id\": \"GHSA-v3xw-c963-f5hc\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.activemq.* (aka activemq-jms, activemq-core, activemq-pool, and activemq-pool-jms).\",\n  \"published\": \"2020-05-15T18:58:50Z\",\n  \"updated\": \"2023-02-01T05:03:05Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "e5cba611-d1ce-48a5-8fc2-ac68ba133947",
            "ratings": "GITHUB - high",
            "published": "2020-04-23T20:19:02Z",
            "updated": "2024-03-15T00:41:35Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.jelly.impl.Embedded (aka commons-jelly).",
          "id": "GHSA-h4rc-386g-6m85",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.jelly.impl.Embedded (aka commons-jelly).",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"e5cba611-d1ce-48a5-8fc2-ac68ba133947\",\n  \"id\": \"GHSA-h4rc-386g-6m85\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.jelly.impl.Embedded (aka commons-jelly).\",\n  \"published\": \"2020-04-23T20:19:02Z\",\n  \"updated\": \"2024-03-15T00:41:35Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "9e292de9-f4f7-4d45-9ecb-846c4b972f6f",
            "ratings": "GITHUB - high",
            "published": "2020-05-15T18:58:47Z",
            "updated": "2024-03-15T00:48:55Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.openjpa.ee.WASRegistryManagedRuntime (aka openjpa).",
          "id": "GHSA-9vvp-fxw6-jcxr",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.openjpa.ee.WASRegistryManagedRuntime (aka openjpa).",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"9e292de9-f4f7-4d45-9ecb-846c4b972f6f\",\n  \"id\": \"GHSA-9vvp-fxw6-jcxr\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.openjpa.ee.WASRegistryManagedRuntime (aka openjpa).\",\n  \"published\": \"2020-05-15T18:58:47Z\",\n  \"updated\": \"2024-03-15T00:48:55Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "343cd240-f667-4770-aecf-ddc11f9d0172",
            "ratings": "GITHUB - high",
            "published": "2020-05-15T18:58:54Z",
            "updated": "2024-03-15T00:50:18Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.aoju.bus.proxy.provider.remoting.RmiProvider (aka bus-proxy).",
          "id": "GHSA-rf6r-2c4q-2vwg",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.aoju.bus.proxy.provider.remoting.RmiProvider (aka bus-proxy).",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"343cd240-f667-4770-aecf-ddc11f9d0172\",\n  \"id\": \"GHSA-rf6r-2c4q-2vwg\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.aoju.bus.proxy.provider.remoting.RmiProvider (aka bus-proxy).\",\n  \"published\": \"2020-05-15T18:58:54Z\",\n  \"updated\": \"2024-03-15T00:50:18Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "0f7e16f6-f01e-4cc0-a835-08f3ba72625f",
            "ratings": "GITHUB - high",
            "published": "2020-04-23T21:36:03Z",
            "updated": "2024-06-25T13:46:45Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to javax.swing.JEditorPane.",
          "id": "GHSA-758m-v56v-grj4",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to javax.swing.JEditorPane.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"0f7e16f6-f01e-4cc0-a835-08f3ba72625f\",\n  \"id\": \"GHSA-758m-v56v-grj4\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to javax.swing.JEditorPane.\",\n  \"published\": \"2020-04-23T21:36:03Z\",\n  \"updated\": \"2024-06-25T13:46:45Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "c2e5f22d-f91f-4689-bdb1-782974d6fa7a",
            "ratings": "GITHUB - high",
            "published": "2020-04-23T16:32:59Z",
            "updated": "2024-07-03T21:10:50Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.aries.transaction.jms.internal.XaPooledConnectionFactory (aka aries.transaction.jms).",
          "id": "GHSA-95cm-88f5-f2c7",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.aries.transaction.jms.internal.XaPooledConnectionFactory (aka aries.transaction.jms).",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"c2e5f22d-f91f-4689-bdb1-782974d6fa7a\",\n  \"id\": \"GHSA-95cm-88f5-f2c7\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.aries.transaction.jms.internal.XaPooledConnectionFactory (aka aries.transaction.jms).\",\n  \"published\": \"2020-04-23T16:32:59Z\",\n  \"updated\": \"2024-07-03T21:10:50Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "49fa1888-bfa1-480a-8564-3b62b8bf5c3c",
            "ratings": "GITHUB - high",
            "published": "2020-06-18T14:44:50Z",
            "updated": "2023-02-01T05:04:14Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to oracle.jms.AQjmsQueueConnectionFactory, oracle.jms.AQjmsXATopicConnectionFactory, oracle.jms.AQjmsTopicConnectionFactory, oracle.jms.AQjmsXAQueueConnectionFactory, and oracle.jms.AQjmsXAConnectionFactory (aka weblogic/oracle-aqjms).",
          "id": "GHSA-c2q3-4qrh-fm48",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to oracle.jms.AQjmsQueueConnectionFactory, oracle.jms.AQjmsXATopicConnectionFactory, oracle.jms.AQjmsTopicConnectionFactory, oracle.jms.AQjmsXAQueueConnectionFactory, and oracle.jms.AQjmsXAConnectionFactory (aka weblogic/oracle-aqjms).",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"49fa1888-bfa1-480a-8564-3b62b8bf5c3c\",\n  \"id\": \"GHSA-c2q3-4qrh-fm48\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to oracle.jms.AQjmsQueueConnectionFactory, oracle.jms.AQjmsXATopicConnectionFactory, oracle.jms.AQjmsTopicConnectionFactory, oracle.jms.AQjmsXAQueueConnectionFactory, and oracle.jms.AQjmsXAConnectionFactory (aka weblogic/oracle-aqjms).\",\n  \"published\": \"2020-06-18T14:44:50Z\",\n  \"updated\": \"2023-02-01T05:04:14Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "97981cb2-9228-4b8b-a172-ad12f550a19f",
            "ratings": "GITHUB - high",
            "published": "2020-06-18T14:44:43Z",
            "updated": "2024-03-15T00:37:17Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to org.jsecurity.realm.jndi.JndiRealmFactory (aka org.jsecurity).",
          "id": "GHSA-mc6h-4qgp-37qh",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to org.jsecurity.realm.jndi.JndiRealmFactory (aka org.jsecurity).",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"97981cb2-9228-4b8b-a172-ad12f550a19f\",\n  \"id\": \"GHSA-mc6h-4qgp-37qh\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to org.jsecurity.realm.jndi.JndiRealmFactory (aka org.jsecurity).\",\n  \"published\": \"2020-06-18T14:44:43Z\",\n  \"updated\": \"2024-03-15T00:37:17Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "941d2fac-724b-4a2c-a8ba-c5a434fa3bf7",
            "ratings": "GITHUB - high",
            "published": "2020-06-18T14:44:46Z",
            "updated": "2024-03-15T00:39:55Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to oadd.org.apache.xalan.lib.sql.JNDIConnectionPool (aka apache/drill).",
          "id": "GHSA-j823-4qch-3rgm",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to oadd.org.apache.xalan.lib.sql.JNDIConnectionPool (aka apache/drill).",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"941d2fac-724b-4a2c-a8ba-c5a434fa3bf7\",\n  \"id\": \"GHSA-j823-4qch-3rgm\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to oadd.org.apache.xalan.lib.sql.JNDIConnectionPool (aka apache/drill).\",\n  \"published\": \"2020-06-18T14:44:46Z\",\n  \"updated\": \"2024-03-15T00:39:55Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "7e3a7481-266e-4cb7-af3b-94dcaf462942",
            "ratings": "GITHUB - high",
            "published": "2020-06-18T14:44:48Z",
            "updated": "2024-06-25T13:46:04Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool (aka xalan2).",
          "id": "GHSA-c265-37vj-cwcc",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool (aka xalan2).",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"7e3a7481-266e-4cb7-af3b-94dcaf462942\",\n  \"id\": \"GHSA-c265-37vj-cwcc\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool (aka xalan2).\",\n  \"published\": \"2020-06-18T14:44:48Z\",\n  \"updated\": \"2024-06-25T13:46:04Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "db7cfe67-0b1d-4504-af8b-da26e12af73a",
            "ratings": "GITHUB - critical",
            "published": "2020-03-04T20:52:14Z",
            "updated": "2023-06-08T19:02:12Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.6.7.4, 2.7.x before 2.7.9.7, 2.8.x before 2.8.11.5 and 2.9.x before 2.9.10.2 lacks certain xbean-reflect/JNDI blocking, as demonstrated by org.apache.xbean.propertyeditor.JndiConverter.",
          "id": "GHSA-4w82-r329-3q67",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.6.7.4, 2.7.x before 2.7.9.7, 2.8.x before 2.8.11.5 and 2.9.x before 2.9.10.2 lacks certain xbean-reflect/JNDI blocking, as demonstrated by org.apache.xbean.propertyeditor.JndiConverter.",
          "impact": 1,
          "code": "{\n  \"bom-ref\": \"db7cfe67-0b1d-4504-af8b-da26e12af73a\",\n  \"id\": \"GHSA-4w82-r329-3q67\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"critical\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.6.7.4, 2.7.x before 2.7.9.7, 2.8.x before 2.8.11.5 and 2.9.x before 2.9.10.2 lacks certain xbean-reflect/JNDI blocking, as demonstrated by org.apache.xbean.propertyeditor.JndiConverter.\",\n  \"published\": \"2020-03-04T20:52:14Z\",\n  \"updated\": \"2023-06-08T19:02:12Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "7c0af63e-ef57-43aa-9c91-d79c7e37ab20",
            "ratings": "GITHUB - high",
            "published": "2022-07-15T19:41:47Z",
            "updated": "2023-08-18T15:45:27Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "The com.fasterxml.jackson.core:jackson-databind library before version 2.9.10.4 is vulnerable to an Unsafe Deserialization vulnerability when handling interactions related to the class `ignite-jta`.",
          "id": "GHSA-rpr3-cw39-3pxh",
          "desc": "Description: The com.fasterxml.jackson.core:jackson-databind library before version 2.9.10.4 is vulnerable to an Unsafe Deserialization vulnerability when handling interactions related to the class `ignite-jta`.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"7c0af63e-ef57-43aa-9c91-d79c7e37ab20\",\n  \"id\": \"GHSA-rpr3-cw39-3pxh\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"The com.fasterxml.jackson.core:jackson-databind library before version 2.9.10.4 is vulnerable to an Unsafe Deserialization vulnerability when handling interactions related to the class `ignite-jta`.\",\n  \"published\": \"2022-07-15T19:41:47Z\",\n  \"updated\": \"2023-08-18T15:45:27Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "c037af59-a132-4727-8cc3-c6095c490df7",
            "ratings": "GITHUB - critical",
            "published": "2019-11-13T00:32:27Z",
            "updated": "2023-09-14T14:55:20Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 prior to 2.9.10.1, 2.8.11.5, and 2.6.7.3. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the p6spy (3.8.6) jar in the classpath, and an attacker can find an RMI service endpoint to access, it is possible to make the service execute a malicious payload. This issue exists because of com.p6spy.engine.spy.P6DataSource mishandling.",
          "id": "GHSA-fmmc-742q-jg75",
          "desc": "Description: A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 prior to 2.9.10.1, 2.8.11.5, and 2.6.7.3. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the p6spy (3.8.6) jar in the classpath, and an attacker can find an RMI service endpoint to access, it is possible to make the service execute a malicious payload. This issue exists because of com.p6spy.engine.spy.P6DataSource mishandling.",
          "impact": 1,
          "code": "{\n  \"bom-ref\": \"c037af59-a132-4727-8cc3-c6095c490df7\",\n  \"id\": \"GHSA-fmmc-742q-jg75\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"critical\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 prior to 2.9.10.1, 2.8.11.5, and 2.6.7.3. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the p6spy (3.8.6) jar in the classpath, and an attacker can find an RMI service endpoint to access, it is possible to make the service execute a malicious payload. This issue exists because of com.p6spy.engine.spy.P6DataSource mishandling.\",\n  \"published\": \"2019-11-13T00:32:27Z\",\n  \"updated\": \"2023-09-14T14:55:20Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "0b8d112a-b683-414d-93b6-48fa2cabb7c9",
            "ratings": "GITHUB - critical",
            "published": "2019-11-13T00:32:38Z",
            "updated": "2023-09-14T14:55:25Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 prior to 2.9.10.1, 2.8.11.5, and 2.6.7.3. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the apache-log4j-extra (version 1.2.x) jar in the classpath, and an attacker can provide a JNDI service to access, it is possible to make the service execute a malicious payload.",
          "id": "GHSA-gjmw-vf9h-g25v",
          "desc": "Description: A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 prior to 2.9.10.1, 2.8.11.5, and 2.6.7.3. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the apache-log4j-extra (version 1.2.x) jar in the classpath, and an attacker can provide a JNDI service to access, it is possible to make the service execute a malicious payload.",
          "impact": 1,
          "code": "{\n  \"bom-ref\": \"0b8d112a-b683-414d-93b6-48fa2cabb7c9\",\n  \"id\": \"GHSA-gjmw-vf9h-g25v\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"critical\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 prior to 2.9.10.1, 2.8.11.5, and 2.6.7.3. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the apache-log4j-extra (version 1.2.x) jar in the classpath, and an attacker can provide a JNDI service to access, it is possible to make the service execute a malicious payload.\",\n  \"published\": \"2019-11-13T00:32:38Z\",\n  \"updated\": \"2023-09-14T14:55:25Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "e8b21aeb-ce1d-4df2-8102-577b813e712f",
            "ratings": "GITHUB - critical",
            "published": "2019-10-28T20:51:15Z",
            "updated": "2024-03-15T00:57:37Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 through 2.9.10. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the commons-dbcp (1.4) jar in the classpath, and an attacker can find an RMI service endpoint to access, it is possible to make the service execute a malicious payload. This issue exists because of org.apache.commons.dbcp.datasources.SharedPoolDataSource and org.apache.commons.dbcp.datasources.PerUserPoolDataSource mishandling.",
          "id": "GHSA-mx7p-6679-8g3q",
          "desc": "Description: A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 through 2.9.10. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the commons-dbcp (1.4) jar in the classpath, and an attacker can find an RMI service endpoint to access, it is possible to make the service execute a malicious payload. This issue exists because of org.apache.commons.dbcp.datasources.SharedPoolDataSource and org.apache.commons.dbcp.datasources.PerUserPoolDataSource mishandling.",
          "impact": 1,
          "code": "{\n  \"bom-ref\": \"e8b21aeb-ce1d-4df2-8102-577b813e712f\",\n  \"id\": \"GHSA-mx7p-6679-8g3q\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"critical\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 through 2.9.10. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the commons-dbcp (1.4) jar in the classpath, and an attacker can find an RMI service endpoint to access, it is possible to make the service execute a malicious payload. This issue exists because of org.apache.commons.dbcp.datasources.SharedPoolDataSource and org.apache.commons.dbcp.datasources.PerUserPoolDataSource mishandling.\",\n  \"published\": \"2019-10-28T20:51:15Z\",\n  \"updated\": \"2024-03-15T00:57:37Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "e141c668-bc18-4738-b3b6-e7ba1057d124",
            "ratings": "GITHUB - critical",
            "published": "2020-05-15T18:59:10Z",
            "updated": "2023-09-14T15:09:40Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.4, 2.8.11.6, and 2.7.9.7 mishandles the interaction between serialization gadgets and typing, related to `com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig` (aka `ibatis-sqlmap`).",
          "id": "GHSA-q93h-jc49-78gg",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.4, 2.8.11.6, and 2.7.9.7 mishandles the interaction between serialization gadgets and typing, related to `com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig` (aka `ibatis-sqlmap`).",
          "impact": 1,
          "code": "{\n  \"bom-ref\": \"e141c668-bc18-4738-b3b6-e7ba1057d124\",\n  \"id\": \"GHSA-q93h-jc49-78gg\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"critical\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.4, 2.8.11.6, and 2.7.9.7 mishandles the interaction between serialization gadgets and typing, related to `com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig` (aka `ibatis-sqlmap`).\",\n  \"published\": \"2020-05-15T18:59:10Z\",\n  \"updated\": \"2023-09-14T15:09:40Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "7aec5714-d04e-4e86-8f4c-51f5cf2568d9",
            "ratings": "GITHUB - critical",
            "published": "2020-05-15T18:59:01Z",
            "updated": "2024-03-15T00:20:09Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.4, 2.8.11.6, and 2.7.9.7 mishandles the interaction between serialization gadgets and typing, related to br.com.anteros.dbcp.AnterosDBCPConfig (aka anteros-core).",
          "id": "GHSA-p43x-xfjf-5jhr",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.4, 2.8.11.6, and 2.7.9.7 mishandles the interaction between serialization gadgets and typing, related to br.com.anteros.dbcp.AnterosDBCPConfig (aka anteros-core).",
          "impact": 1,
          "code": "{\n  \"bom-ref\": \"7aec5714-d04e-4e86-8f4c-51f5cf2568d9\",\n  \"id\": \"GHSA-p43x-xfjf-5jhr\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"critical\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.4, 2.8.11.6, and 2.7.9.7 mishandles the interaction between serialization gadgets and typing, related to br.com.anteros.dbcp.AnterosDBCPConfig (aka anteros-core).\",\n  \"published\": \"2020-05-15T18:59:01Z\",\n  \"updated\": \"2024-03-15T00:20:09Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-94",
              "CWE-502"
            ],
            "bom-ref": "6af6635c-bedd-40e5-88b8-324d3a80a33e",
            "ratings": "GITHUB - high",
            "published": "2021-12-09T19:14:51Z",
            "updated": "2023-09-14T15:44:55Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "This project contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor. FasterXML jackson-databind 2.x before 2.9.10.6 mishandles the interaction between serialization gadgets and typing, related to br.com.anteros.dbcp.AnterosDBCPDataSource (aka Anteros-DBCP).",
          "id": "GHSA-h3cw-g4mq-c5x2",
          "desc": "Description: This project contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor. FasterXML jackson-databind 2.x before 2.9.10.6 mishandles the interaction between serialization gadgets and typing, related to br.com.anteros.dbcp.AnterosDBCPDataSource (aka Anteros-DBCP).",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"6af6635c-bedd-40e5-88b8-324d3a80a33e\",\n  \"id\": \"GHSA-h3cw-g4mq-c5x2\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    94,\n    502\n  ],\n  \"description\": \"This project contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor. FasterXML jackson-databind 2.x before 2.9.10.6 mishandles the interaction between serialization gadgets and typing, related to br.com.anteros.dbcp.AnterosDBCPDataSource (aka Anteros-DBCP).\",\n  \"published\": \"2021-12-09T19:14:51Z\",\n  \"updated\": \"2023-09-14T15:44:55Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "3ad04380-a25c-41d8-8fad-259c2561795b",
            "ratings": "GITHUB - high",
            "published": "2021-12-09T19:15:36Z",
            "updated": "2023-09-14T15:47:50Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.6.7.5 and from 2.7.x before 2.9.10.6 mishandles the interaction between serialization gadgets and typing, related to com.pastdev.httpcomponents.configuration.JndiConfiguration.",
          "id": "GHSA-qjw2-hr98-qgfh",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.6.7.5 and from 2.7.x before 2.9.10.6 mishandles the interaction between serialization gadgets and typing, related to com.pastdev.httpcomponents.configuration.JndiConfiguration.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"3ad04380-a25c-41d8-8fad-259c2561795b\",\n  \"id\": \"GHSA-qjw2-hr98-qgfh\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.6.7.5 and from 2.7.x before 2.9.10.6 mishandles the interaction between serialization gadgets and typing, related to com.pastdev.httpcomponents.configuration.JndiConfiguration.\",\n  \"published\": \"2021-12-09T19:15:36Z\",\n  \"updated\": \"2023-09-14T15:47:50Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "86f78c35-adfb-48e4-9428-88084373e1c0",
            "ratings": "GITHUB - high",
            "published": "2021-12-09T19:16:02Z",
            "updated": "2023-09-14T15:52:49Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp2.datasources.SharedPoolDataSource`.",
          "id": "GHSA-8w26-6f25-cm9x",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp2.datasources.SharedPoolDataSource`.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"86f78c35-adfb-48e4-9428-88084373e1c0\",\n  \"id\": \"GHSA-8w26-6f25-cm9x\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp2.datasources.SharedPoolDataSource`.\",\n  \"published\": \"2021-12-09T19:16:02Z\",\n  \"updated\": \"2023-09-14T15:52:49Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "6d73d38a-3ff6-4fac-8c03-b09b64e9e537",
            "ratings": "GITHUB - high",
            "published": "2021-12-09T19:16:26Z",
            "updated": "2023-09-14T15:53:30Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp2.datasources.PerUserPoolDataSource.",
          "id": "GHSA-m6x4-97wx-4q27",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp2.datasources.PerUserPoolDataSource.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"6d73d38a-3ff6-4fac-8c03-b09b64e9e537\",\n  \"id\": \"GHSA-m6x4-97wx-4q27\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp2.datasources.PerUserPoolDataSource.\",\n  \"published\": \"2021-12-09T19:16:26Z\",\n  \"updated\": \"2023-09-14T15:53:30Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "00033bff-66dc-4a36-ab38-a10b0625409f",
            "ratings": "GITHUB - high",
            "published": "2021-11-19T20:13:06Z",
            "updated": "2023-09-14T15:59:33Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp.datasources.PerUserPoolDataSource`.",
          "id": "GHSA-v585-23hc-c647",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp.datasources.PerUserPoolDataSource`.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"00033bff-66dc-4a36-ab38-a10b0625409f\",\n  \"id\": \"GHSA-v585-23hc-c647\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp.datasources.PerUserPoolDataSource`.\",\n  \"published\": \"2021-11-19T20:13:06Z\",\n  \"updated\": \"2023-09-14T15:59:33Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "14e2856b-f78d-4a6d-99eb-470c8566df29",
            "ratings": "GITHUB - high",
            "published": "2021-12-09T19:16:51Z",
            "updated": "2023-09-14T16:01:31Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp.datasources.SharedPoolDataSource.",
          "id": "GHSA-r695-7vr9-jgc2",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp.datasources.SharedPoolDataSource.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"14e2856b-f78d-4a6d-99eb-470c8566df29\",\n  \"id\": \"GHSA-r695-7vr9-jgc2\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp.datasources.SharedPoolDataSource.\",\n  \"published\": \"2021-12-09T19:16:51Z\",\n  \"updated\": \"2023-09-14T16:01:31Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "c224f923-be9a-4faa-a930-ef4db611bc2b",
            "ratings": "GITHUB - high",
            "published": "2021-12-09T19:16:59Z",
            "updated": "2023-09-14T16:04:22Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.8 an 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to com.newrelic.agent.deps.ch.qos.logback.core.db.DriverManagerConnectionSource.",
          "id": "GHSA-vfqx-33qm-g869",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.8 an 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to com.newrelic.agent.deps.ch.qos.logback.core.db.DriverManagerConnectionSource.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"c224f923-be9a-4faa-a930-ef4db611bc2b\",\n  \"id\": \"GHSA-vfqx-33qm-g869\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.8 an 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to com.newrelic.agent.deps.ch.qos.logback.core.db.DriverManagerConnectionSource.\",\n  \"published\": \"2021-12-09T19:16:59Z\",\n  \"updated\": \"2023-09-14T16:04:22Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "5201940b-1f04-4668-ae86-8261448d817d",
            "ratings": "GITHUB - high",
            "published": "2021-12-09T19:16:42Z",
            "updated": "2023-09-14T16:04:22Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to `com.newrelic.agent.deps.ch.qos.logback.core.db.JNDIConnectionSource`.",
          "id": "GHSA-f9xh-2qgp-cq57",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to `com.newrelic.agent.deps.ch.qos.logback.core.db.JNDIConnectionSource`.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"5201940b-1f04-4668-ae86-8261448d817d\",\n  \"id\": \"GHSA-f9xh-2qgp-cq57\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to `com.newrelic.agent.deps.ch.qos.logback.core.db.JNDIConnectionSource`.\",\n  \"published\": \"2021-12-09T19:16:42Z\",\n  \"updated\": \"2023-09-14T16:04:22Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "b267fb08-27eb-4c71-a2a7-f17fe5fbf4fd",
            "ratings": "GITHUB - high",
            "published": "2021-12-09T19:16:10Z",
            "updated": "2023-09-14T16:07:00Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp.cpdsadapter.DriverAdapterCPDS`.",
          "id": "GHSA-cvm9-fjm9-3572",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp.cpdsadapter.DriverAdapterCPDS`.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"b267fb08-27eb-4c71-a2a7-f17fe5fbf4fd\",\n  \"id\": \"GHSA-cvm9-fjm9-3572\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp.cpdsadapter.DriverAdapterCPDS`.\",\n  \"published\": \"2021-12-09T19:16:10Z\",\n  \"updated\": \"2023-09-14T16:07:00Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "4fcb77a9-67b3-4b3f-bc01-684b8ba72294",
            "ratings": "GITHUB - high",
            "published": "2021-12-09T19:15:54Z",
            "updated": "2023-09-14T16:07:40Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to `oadd.org.apache.commons.dbcp.cpdsadapter.DriverAdapterCPDS`.",
          "id": "GHSA-9gph-22xh-8x98",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to `oadd.org.apache.commons.dbcp.cpdsadapter.DriverAdapterCPDS`.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"4fcb77a9-67b3-4b3f-bc01-684b8ba72294\",\n  \"id\": \"GHSA-9gph-22xh-8x98\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to `oadd.org.apache.commons.dbcp.cpdsadapter.DriverAdapterCPDS`.\",\n  \"published\": \"2021-12-09T19:15:54Z\",\n  \"updated\": \"2023-09-14T16:07:40Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "950cff67-088e-4f41-9818-25943c9e17c0",
            "ratings": "GITHUB - high",
            "published": "2021-12-09T19:15:46Z",
            "updated": "2023-09-14T16:08:37Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp2.cpdsadapter.DriverAdapterCPDS.",
          "id": "GHSA-89qr-369f-5m5x",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp2.cpdsadapter.DriverAdapterCPDS.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"950cff67-088e-4f41-9818-25943c9e17c0\",\n  \"id\": \"GHSA-89qr-369f-5m5x\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp2.cpdsadapter.DriverAdapterCPDS.\",\n  \"published\": \"2021-12-09T19:15:46Z\",\n  \"updated\": \"2023-09-14T16:08:37Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "53eda8c2-268a-4866-89ac-234bfe7f74ce",
            "ratings": "GITHUB - high",
            "published": "2021-12-09T19:16:18Z",
            "updated": "2023-09-14T16:13:01Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.cpdsadapter.DriverAdapterCPDS.",
          "id": "GHSA-8c4j-34r4-xr8g",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.cpdsadapter.DriverAdapterCPDS.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"53eda8c2-268a-4866-89ac-234bfe7f74ce\",\n  \"id\": \"GHSA-8c4j-34r4-xr8g\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.cpdsadapter.DriverAdapterCPDS.\",\n  \"published\": \"2021-12-09T19:16:18Z\",\n  \"updated\": \"2023-09-14T16:13:01Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "9edaa51d-929b-457e-aab5-0fffecdb4938",
            "ratings": "GITHUB - high",
            "published": "2021-12-09T19:16:34Z",
            "updated": "2023-09-14T16:15:44Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to org.docx4j.org.apache.xalan.lib.sql.JNDIConnectionPool.",
          "id": "GHSA-9m6f-7xcq-8vf8",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to org.docx4j.org.apache.xalan.lib.sql.JNDIConnectionPool.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"9edaa51d-929b-457e-aab5-0fffecdb4938\",\n  \"id\": \"GHSA-9m6f-7xcq-8vf8\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to org.docx4j.org.apache.xalan.lib.sql.JNDIConnectionPool.\",\n  \"published\": \"2021-12-09T19:16:34Z\",\n  \"updated\": \"2023-09-14T16:15:44Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "6d5189b4-d549-419a-b886-43a62cc43d40",
            "ratings": "GITHUB - high",
            "published": "2021-12-09T19:15:24Z",
            "updated": "2023-11-21T11:40:53Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to com.oracle.wls.shaded.org.apache.xalan.lib.sql.JNDIConnectionPool (aka embedded Xalan in org.glassfish.web/javax.servlet.jsp.jstl).",
          "id": "GHSA-5r5r-6hpj-8gg9",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to com.oracle.wls.shaded.org.apache.xalan.lib.sql.JNDIConnectionPool (aka embedded Xalan in org.glassfish.web/javax.servlet.jsp.jstl).",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"6d5189b4-d549-419a-b886-43a62cc43d40\",\n  \"id\": \"GHSA-5r5r-6hpj-8gg9\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to com.oracle.wls.shaded.org.apache.xalan.lib.sql.JNDIConnectionPool (aka embedded Xalan in org.glassfish.web/javax.servlet.jsp.jstl).\",\n  \"published\": \"2021-12-09T19:15:24Z\",\n  \"updated\": \"2023-11-21T11:40:53Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "135c6dab-529e-4855-ab72-a0138e2110c8",
            "ratings": "GITHUB - high",
            "published": "2021-12-09T19:15:00Z",
            "updated": "2024-03-15T00:28:08Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.datasources.PerUserPoolDataSource.",
          "id": "GHSA-wh8g-3j2c-rqj5",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.datasources.PerUserPoolDataSource.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"135c6dab-529e-4855-ab72-a0138e2110c8\",\n  \"id\": \"GHSA-wh8g-3j2c-rqj5\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.datasources.PerUserPoolDataSource.\",\n  \"published\": \"2021-12-09T19:15:00Z\",\n  \"updated\": \"2024-03-15T00:28:08Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502",
              "CWE-913"
            ],
            "bom-ref": "57f41366-73de-4a9c-ba15-4d09c9f60e33",
            "ratings": "GITHUB - high",
            "published": "2021-12-09T19:15:11Z",
            "updated": "2024-06-25T13:47:23Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.datasources.SharedPoolDataSource.",
          "id": "GHSA-r3gr-cxrf-hg25",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.datasources.SharedPoolDataSource.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"57f41366-73de-4a9c-ba15-4d09c9f60e33\",\n  \"id\": \"GHSA-r3gr-cxrf-hg25\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502,\n    913\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.datasources.SharedPoolDataSource.\",\n  \"published\": \"2021-12-09T19:15:11Z\",\n  \"updated\": \"2024-06-25T13:47:23Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-400",
              "CWE-502"
            ],
            "bom-ref": "ccd0ef88-c0fe-4a10-a648-c779ce82b888",
            "ratings": "GITHUB - high",
            "published": "2022-10-03T00:00:31Z",
            "updated": "2024-03-15T00:14:44Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "In FasterXML jackson-databind 2.4.0-rc1 until 2.12.7.1 and in 2.13.x before 2.13.4.2 resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled. This was patched in 2.12.7.1, 2.13.4.2, and 2.14.0. Commits that introduced vulnerable code are https://github.com/FasterXML/jackson-databind/commit/d499f2e7bbc5ebd63af11e1f5cf1989fa323aa45, https://github.com/FasterXML/jackson-databind/commit/0e37a39502439ecbaa1a5b5188387c01bf7f7fa1, and https://github.com/FasterXML/jackson-databind/commit/7ba9ac5b87a9d6ac0d2815158ecbeb315ad4dcdc. Fix commits are https://github.com/FasterXML/jackson-databind/commit/cd090979b7ea78c75e4de8a4aed04f7e9fa8deea and https://github.com/FasterXML/jackson-databind/commit/d78d00ee7b5245b93103fef3187f70543d67ca33.",
          "id": "GHSA-jjjh-jjxp-wpff",
          "desc": "Description: In FasterXML jackson-databind 2.4.0-rc1 until 2.12.7.1 and in 2.13.x before 2.13.4.2 resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled. This was patched in 2.12.7.1, 2.13.4.2, and 2.14.0. Commits that introduced vulnerable code are https://github.com/FasterXML/jackson-databind/commit/d499f2e7bbc5ebd63af11e1f5cf1989fa323aa45, https://github.com/FasterXML/jackson-databind/commit/0e37a39502439ecbaa1a5b5188387c01bf7f7fa1, and https://github.com/FasterXML/jackson-databind/commit/7ba9ac5b87a9d6ac0d2815158ecbeb315ad4dcdc. Fix commits are https://github.com/FasterXML/jackson-databind/commit/cd090979b7ea78c75e4de8a4aed04f7e9fa8deea and https://github.com/FasterXML/jackson-databind/commit/d78d00ee7b5245b93103fef3187f70543d67ca33.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"ccd0ef88-c0fe-4a10-a648-c779ce82b888\",\n  \"id\": \"GHSA-jjjh-jjxp-wpff\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    400,\n    502\n  ],\n  \"description\": \"In FasterXML jackson-databind 2.4.0-rc1 until 2.12.7.1 and in 2.13.x before 2.13.4.2 resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled. This was patched in 2.12.7.1, 2.13.4.2, and 2.14.0. Commits that introduced vulnerable code are https://github.com/FasterXML/jackson-databind/commit/d499f2e7bbc5ebd63af11e1f5cf1989fa323aa45, https://github.com/FasterXML/jackson-databind/commit/0e37a39502439ecbaa1a5b5188387c01bf7f7fa1, and https://github.com/FasterXML/jackson-databind/commit/7ba9ac5b87a9d6ac0d2815158ecbeb315ad4dcdc. Fix commits are https://github.com/FasterXML/jackson-databind/commit/cd090979b7ea78c75e4de8a4aed04f7e9fa8deea and https://github.com/FasterXML/jackson-databind/commit/d78d00ee7b5245b93103fef3187f70543d67ca33.\",\n  \"published\": \"2022-10-03T00:00:31Z\",\n  \"updated\": \"2024-03-15T00:14:44Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "726a055c-f364-4cb7-a75a-d3c541dad0fa",
            "ratings": "GITHUB - high",
            "published": "2021-01-20T21:20:15Z",
            "updated": "2024-03-15T00:16:04Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "A flaw was found in jackson-databind before 2.9.10.7 and 2.6.7.5. FasterXML mishandles the interaction between serialization gadgets and typing. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
          "id": "GHSA-5949-rw7g-wx7w",
          "desc": "Description: A flaw was found in jackson-databind before 2.9.10.7 and 2.6.7.5. FasterXML mishandles the interaction between serialization gadgets and typing. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"726a055c-f364-4cb7-a75a-d3c541dad0fa\",\n  \"id\": \"GHSA-5949-rw7g-wx7w\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"A flaw was found in jackson-databind before 2.9.10.7 and 2.6.7.5. FasterXML mishandles the interaction between serialization gadgets and typing. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.\",\n  \"published\": \"2021-01-20T21:20:15Z\",\n  \"updated\": \"2024-03-15T00:16:04Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-787"
            ],
            "bom-ref": "75d8b4d7-7c79-4627-b229-8d5e38fc5d8b",
            "ratings": "GITHUB - high",
            "published": "2022-03-12T00:00:36Z",
            "updated": "2024-03-15T00:24:56Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "jackson-databind is a data-binding package for the Jackson Data Processor. jackson-databind allows a Java stack overflow exception and denial of service via a large depth of nested objects.",
          "id": "GHSA-57j2-w4cx-62h2",
          "desc": "Description: jackson-databind is a data-binding package for the Jackson Data Processor. jackson-databind allows a Java stack overflow exception and denial of service via a large depth of nested objects.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"75d8b4d7-7c79-4627-b229-8d5e38fc5d8b\",\n  \"id\": \"GHSA-57j2-w4cx-62h2\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    787\n  ],\n  \"description\": \"jackson-databind is a data-binding package for the Jackson Data Processor. jackson-databind allows a Java stack overflow exception and denial of service via a large depth of nested objects.\",\n  \"published\": \"2022-03-12T00:00:36Z\",\n  \"updated\": \"2024-03-15T00:24:56Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-611"
            ],
            "bom-ref": "cc0ff323-0529-4064-8a2d-1f7a8e2a1332",
            "ratings": "GITHUB - high",
            "published": "2021-02-18T20:51:54Z",
            "updated": "2024-03-15T00:31:24Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "A flaw was found in FasterXML Jackson Databind, where it did not have entity expansion secured properly. This flaw allows vulnerability to XML external entity (XXE) attacks. The highest threat from this vulnerability is data integrity.",
          "id": "GHSA-288c-cq4h-88gq",
          "desc": "Description: A flaw was found in FasterXML Jackson Databind, where it did not have entity expansion secured properly. This flaw allows vulnerability to XML external entity (XXE) attacks. The highest threat from this vulnerability is data integrity.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"cc0ff323-0529-4064-8a2d-1f7a8e2a1332\",\n  \"id\": \"GHSA-288c-cq4h-88gq\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    611\n  ],\n  \"description\": \"A flaw was found in FasterXML Jackson Databind, where it did not have entity expansion secured properly. This flaw allows vulnerability to XML external entity (XXE) attacks. The highest threat from this vulnerability is data integrity.\",\n  \"published\": \"2021-02-18T20:51:54Z\",\n  \"updated\": \"2024-03-15T00:31:24Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "7c4227e3-a0a9-4361-8eab-6ab5fa9550b2",
            "ratings": "GITHUB - critical",
            "published": "2020-03-04T20:52:11Z",
            "updated": "2024-03-15T00:52:59Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.6.7.4, 2.7.x before 2.7.9.7, 2.8.x before 2.8.11.5, and 2.9.x before 2.9.10.2 lacks certain `net.sf.ehcache` blocking.",
          "id": "GHSA-gww7-p5w4-wrfv",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.6.7.4, 2.7.x before 2.7.9.7, 2.8.x before 2.8.11.5, and 2.9.x before 2.9.10.2 lacks certain `net.sf.ehcache` blocking.",
          "impact": 1,
          "code": "{\n  \"bom-ref\": \"7c4227e3-a0a9-4361-8eab-6ab5fa9550b2\",\n  \"id\": \"GHSA-gww7-p5w4-wrfv\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"critical\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.6.7.4, 2.7.x before 2.7.9.7, 2.8.x before 2.8.11.5, and 2.9.x before 2.9.10.2 lacks certain `net.sf.ehcache` blocking.\",\n  \"published\": \"2020-03-04T20:52:11Z\",\n  \"updated\": \"2024-03-15T00:52:59Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-400",
              "CWE-502"
            ],
            "bom-ref": "87742746-bd8b-423d-979d-d9aa81a8ccfd",
            "ratings": "GITHUB - high",
            "published": "2022-10-03T00:00:31Z",
            "updated": "2024-03-24T05:01:05Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "In FasterXML jackson-databind before 2.12.7.1 and in 2.13.x before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization.",
          "id": "GHSA-rgv9-q543-rqg4",
          "desc": "Description: In FasterXML jackson-databind before 2.12.7.1 and in 2.13.x before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"87742746-bd8b-423d-979d-d9aa81a8ccfd\",\n  \"id\": \"GHSA-rgv9-q543-rqg4\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    400,\n    502\n  ],\n  \"description\": \"In FasterXML jackson-databind before 2.12.7.1 and in 2.13.x before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization.\",\n  \"published\": \"2022-10-03T00:00:31Z\",\n  \"updated\": \"2024-03-24T05:01:05Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "5c0b94e1-0577-42c9-8028-f244d68f61da",
            "ratings": "GITHUB - high",
            "published": "2020-05-15T18:59:04Z",
            "updated": "2024-07-03T21:10:31Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "FasterXML jackson-databind 2.x before 2.9.10.4 and 2.6.7.4 mishandles the interaction between serialization gadgets and typing, related to com.caucho.config.types.ResourceRef (aka caucho-quercus).",
          "id": "GHSA-fqwf-pjwf-7vqv",
          "desc": "Description: FasterXML jackson-databind 2.x before 2.9.10.4 and 2.6.7.4 mishandles the interaction between serialization gadgets and typing, related to com.caucho.config.types.ResourceRef (aka caucho-quercus).",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"5c0b94e1-0577-42c9-8028-f244d68f61da\",\n  \"id\": \"GHSA-fqwf-pjwf-7vqv\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"FasterXML jackson-databind 2.x before 2.9.10.4 and 2.6.7.4 mishandles the interaction between serialization gadgets and typing, related to com.caucho.config.types.ResourceRef (aka caucho-quercus).\",\n  \"published\": \"2020-05-15T18:59:04Z\",\n  \"updated\": \"2024-07-03T21:10:31Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-2",
              "RA-5"
            ],
            "cci": [
              "CCI-002605",
              "CCI-001643"
            ],
            "cwe": [
              "CWE-74"
            ],
            "bom-ref": "f2fa9b19-418a-4901-9840-a8631227701e",
            "ratings": "GITHUB - high",
            "published": "2020-04-10T18:42:20Z",
            "updated": "2023-01-09T05:02:18Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "### Summary A server-side template injection was identified in the self-validating ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html)) feature of **dropwizard-validation** enabling attackers to inject arbitrary Java EL expressions, leading to Remote Code Execution (RCE) vulnerability. If you're using a self-validating bean (via [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html)), an upgrade to Dropwizard 1.3.21/2.0.3 or later is strongly recommended. The changes introduced in Dropwizard 1.3.19 and 2.0.2 (see [GHSA-3mcp-9wr4-cjqf](https://github.com/dropwizard/dropwizard/security/advisories/GHSA-3mcp-9wr4-cjqf)/[CVE-2020-5245](https://github.com/advisories/GHSA-3mcp-9wr4-cjqf)) unfortunately didn't fix the underlying issue completely. ### Impact This issue may allow Remote Code Execution (RCE), allowing to run arbitrary code on the host system (with the privileges of the Dropwizard service account privileges) by injecting arbitrary [Java Expression Language (EL)](https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-interpolation-with-message-expressions) expressions when using the self-validating feature ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html), [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidation.html)) in **dropwizard-validation**. ### Patches The issue has been fixed in **dropwizard-validation** **1.3.21** and **2.0.3** or later. We strongly recommend upgrading to one of these versions. The evaluation of EL expressions has been disabled by default now. In order to use some interpolation in the violation messages added to [`ViolationCollector`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html), it has to be explicitly allowed by setting [`SelfValidating#escapeExpressions()`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html#escapeExpressions--) to `false`. It is also recommended to use the `addViolation` methods supporting message parameters instead of EL expressions introduced in Dropwizard 1.3.21 and 2.0.3: * [`ViolationCollector#addViolation(String, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.util.Map-) * [`ViolationCollector#addViolation(String, String, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.lang.String-java.util.Map-) * [`ViolationCollector#addViolation(String, String, Integer, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.lang.Integer-java.lang.String-java.util.Map-) * [`ViolationCollector#addViolation(String, String, String, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.lang.String-java.lang.String-java.util.Map-) ### Workarounds If you are not able to upgrade to one of the aforementioned versions of **dropwizard-validation** but still want to use the [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html) feature, make sure to properly sanitize any message you're adding to the [`ViolationCollector`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html) in the method annotated with [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidation.html). Example: ```java @SelfValidation public void validateFullName(ViolationCollector col) { if (fullName.contains(\"_\")) { // Sanitize fullName variable by escaping relevant characters such as \"$\" col.addViolation(\"Full name contains invalid characters: \" + sanitizeJavaEl(fullName)); } } ``` See also: https://github.com/dropwizard/dropwizard/blob/v2.0.3/dropwizard-validation/src/main/java/io/dropwizard/validation/InterpolationHelper.java ### References * https://github.com/dropwizard/dropwizard/security/advisories/GHSA-3mcp-9wr4-cjqf * https://github.com/dropwizard/dropwizard/pull/3208 * https://github.com/dropwizard/dropwizard/pull/3209 * https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-hibernateconstraintvalidatorcontext ### For more information If you have any questions or comments about this advisory: * Open an issue in [dropwizard/dropwizard](https://github.com/dropwizard/dropwizard/issues/new) * Start a discussion on the [dropwizard-dev mailing list](https://groups.google.com/forum/#!forum/dropwizard-dev) ### Security contact If you want to responsibly disclose a security issue in Dropwizard or one of its official modules, please contact us via the published channels in our [security policy](https://github.com/dropwizard/dropwizard/security/policy): https://github.com/dropwizard/dropwizard/security/policy#reporting-a-vulnerability",
          "id": "GHSA-8jpx-m2wh-2v34",
          "desc": "Description: ### Summary A server-side template injection was identified in the self-validating ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html)) feature of **dropwizard-validation** enabling attackers to inject arbitrary Java EL expressions, leading to Remote Code Execution (RCE) vulnerability. If you're using a self-validating bean (via [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html)), an upgrade to Dropwizard 1.3.21/2.0.3 or later is strongly recommended. The changes introduced in Dropwizard 1.3.19 and 2.0.2 (see [GHSA-3mcp-9wr4-cjqf](https://github.com/dropwizard/dropwizard/security/advisories/GHSA-3mcp-9wr4-cjqf)/[CVE-2020-5245](https://github.com/advisories/GHSA-3mcp-9wr4-cjqf)) unfortunately didn't fix the underlying issue completely. ### Impact This issue may allow Remote Code Execution (RCE), allowing to run arbitrary code on the host system (with the privileges of the Dropwizard service account privileges) by injecting arbitrary [Java Expression Language (EL)](https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-interpolation-with-message-expressions) expressions when using the self-validating feature ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html), [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidation.html)) in **dropwizard-validation**. ### Patches The issue has been fixed in **dropwizard-validation** **1.3.21** and **2.0.3** or later. We strongly recommend upgrading to one of these versions. The evaluation of EL expressions has been disabled by default now. In order to use some interpolation in the violation messages added to [`ViolationCollector`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html), it has to be explicitly allowed by setting [`SelfValidating#escapeExpressions()`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html#escapeExpressions--) to `false`. It is also recommended to use the `addViolation` methods supporting message parameters instead of EL expressions introduced in Dropwizard 1.3.21 and 2.0.3: * [`ViolationCollector#addViolation(String, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.util.Map-) * [`ViolationCollector#addViolation(String, String, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.lang.String-java.util.Map-) * [`ViolationCollector#addViolation(String, String, Integer, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.lang.Integer-java.lang.String-java.util.Map-) * [`ViolationCollector#addViolation(String, String, String, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.lang.String-java.lang.String-java.util.Map-) ### Workarounds If you are not able to upgrade to one of the aforementioned versions of **dropwizard-validation** but still want to use the [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html) feature, make sure to properly sanitize any message you're adding to the [`ViolationCollector`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html) in the method annotated with [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidation.html). Example: ```java @SelfValidation public void validateFullName(ViolationCollector col) { if (fullName.contains(\"_\")) { // Sanitize fullName variable by escaping relevant characters such as \"$\" col.addViolation(\"Full name contains invalid characters: \" + sanitizeJavaEl(fullName)); } } ``` See also: https://github.com/dropwizard/dropwizard/blob/v2.0.3/dropwizard-validation/src/main/java/io/dropwizard/validation/InterpolationHelper.java ### References * https://github.com/dropwizard/dropwizard/security/advisories/GHSA-3mcp-9wr4-cjqf * https://github.com/dropwizard/dropwizard/pull/3208 * https://github.com/dropwizard/dropwizard/pull/3209 * https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-hibernateconstraintvalidatorcontext ### For more information If you have any questions or comments about this advisory: * Open an issue in [dropwizard/dropwizard](https://github.com/dropwizard/dropwizard/issues/new) * Start a discussion on the [dropwizard-dev mailing list](https://groups.google.com/forum/#!forum/dropwizard-dev) ### Security contact If you want to responsibly disclose a security issue in Dropwizard or one of its official modules, please contact us via the published channels in our [security policy](https://github.com/dropwizard/dropwizard/security/policy): https://github.com/dropwizard/dropwizard/security/policy#reporting-a-vulnerability",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"f2fa9b19-418a-4901-9840-a8631227701e\",\n  \"id\": \"GHSA-8jpx-m2wh-2v34\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    74\n  ],\n  \"description\": \"### Summary A server-side template injection was identified in the self-validating ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html)) feature of **dropwizard-validation** enabling attackers to inject arbitrary Java EL expressions, leading to Remote Code Execution (RCE) vulnerability. If you're using a self-validating bean (via [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html)), an upgrade to Dropwizard 1.3.21/2.0.3 or later is strongly recommended. The changes introduced in Dropwizard 1.3.19 and 2.0.2 (see [GHSA-3mcp-9wr4-cjqf](https://github.com/dropwizard/dropwizard/security/advisories/GHSA-3mcp-9wr4-cjqf)/[CVE-2020-5245](https://github.com/advisories/GHSA-3mcp-9wr4-cjqf)) unfortunately didn't fix the underlying issue completely. ### Impact This issue may allow Remote Code Execution (RCE), allowing to run arbitrary code on the host system (with the privileges of the Dropwizard service account privileges) by injecting arbitrary [Java Expression Language (EL)](https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-interpolation-with-message-expressions) expressions when using the self-validating feature ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html), [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidation.html)) in **dropwizard-validation**. ### Patches The issue has been fixed in **dropwizard-validation** **1.3.21** and **2.0.3** or later. We strongly recommend upgrading to one of these versions. The evaluation of EL expressions has been disabled by default now. In order to use some interpolation in the violation messages added to [`ViolationCollector`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html), it has to be explicitly allowed by setting [`SelfValidating#escapeExpressions()`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html#escapeExpressions--) to `false`. It is also recommended to use the `addViolation` methods supporting message parameters instead of EL expressions introduced in Dropwizard 1.3.21 and 2.0.3: * [`ViolationCollector#addViolation(String, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.util.Map-) * [`ViolationCollector#addViolation(String, String, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.lang.String-java.util.Map-) * [`ViolationCollector#addViolation(String, String, Integer, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.lang.Integer-java.lang.String-java.util.Map-) * [`ViolationCollector#addViolation(String, String, String, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.lang.String-java.lang.String-java.util.Map-) ### Workarounds If you are not able to upgrade to one of the aforementioned versions of **dropwizard-validation** but still want to use the [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html) feature, make sure to properly sanitize any message you're adding to the [`ViolationCollector`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html) in the method annotated with [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidation.html). Example: ```java @SelfValidation public void validateFullName(ViolationCollector col) { if (fullName.contains(\\\"_\\\")) { // Sanitize fullName variable by escaping relevant characters such as \\\"$\\\" col.addViolation(\\\"Full name contains invalid characters: \\\" + sanitizeJavaEl(fullName)); } } ``` See also: https://github.com/dropwizard/dropwizard/blob/v2.0.3/dropwizard-validation/src/main/java/io/dropwizard/validation/InterpolationHelper.java ### References * https://github.com/dropwizard/dropwizard/security/advisories/GHSA-3mcp-9wr4-cjqf * https://github.com/dropwizard/dropwizard/pull/3208 * https://github.com/dropwizard/dropwizard/pull/3209 * https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-hibernateconstraintvalidatorcontext ### For more information If you have any questions or comments about this advisory: * Open an issue in [dropwizard/dropwizard](https://github.com/dropwizard/dropwizard/issues/new) * Start a discussion on the [dropwizard-dev mailing list](https://groups.google.com/forum/#!forum/dropwizard-dev) ### Security contact If you want to responsibly disclose a security issue in Dropwizard or one of its official modules, please contact us via the published channels in our [security policy](https://github.com/dropwizard/dropwizard/security/policy): https://github.com/dropwizard/dropwizard/security/policy#reporting-a-vulnerability\",\n  \"published\": \"2020-04-10T18:42:20Z\",\n  \"updated\": \"2023-01-09T05:02:18Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-2",
              "RA-5"
            ],
            "cci": [
              "CCI-002605",
              "CCI-001643"
            ],
            "cwe": [
              "CWE-74"
            ],
            "bom-ref": "00bc944f-fead-400b-8bbd-0c5b56ba2b14",
            "ratings": "GITHUB - high",
            "published": "2020-02-24T17:27:27Z",
            "updated": "2024-06-05T16:42:03Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "Dropwizard-Validation before 1.3.19, and 2.0.2 may allow arbitrary code execution on the host system, with the privileges of the Dropwizard service account, by injecting arbitrary Java Expression Language expressions when using the self-validating feature. ### Summary A server-side template injection was identified in the self-validating ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html)) feature of **dropwizard-validation** enabling attackers to inject arbitrary Java EL expressions, leading to Remote Code Execution (RCE) vulnerability. If you're using a self-validating bean (via [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html)), an upgrade to Dropwizard 1.3.19 or 2.0.2 is strongly recommended. ### Impact This issue may allow Remote Code Execution (RCE), allowing to run arbitrary code on the host system (with the privileges of the Dropwizard service account privileges) by injecting arbitrary [Java Expression Language (EL)](https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-interpolation-with-message-expressions) expressions when using the self-validating feature ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html), [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidation.html)) in **dropwizard-validation**. ### Patches The issue has been fixed in **dropwizard-validation** **1.3.19** and **2.0.2**. We strongly recommend upgrading to one of these versions. ### Workarounds If you are not able to upgrade to one of the aforementioned versions of **dropwizard-validation** but still want to use the [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html) feature, make sure to properly sanitize any message you're adding to the [`ViolationCollector`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/ViolationCollector.html) in the method annotated with [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidation.html). Example: ```java @SelfValidation public void validateFullName(ViolationCollector col) { if (fullName.contains(\"_\")) { // Sanitize fullName variable by escaping relevant characters such as \"$\" col.addViolation(\"Full name contains invalid characters: \" + sanitizeJavaEl(fullName)); } } ``` See also: https://github.com/dropwizard/dropwizard/blob/v2.0.2/dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java#L84-L98 ### References * https://github.com/dropwizard/dropwizard/pull/3157 * https://github.com/dropwizard/dropwizard/pull/3160 * https://docs.oracle.com/javaee/7/tutorial/jsf-el.htm * https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-interpolation-with-message-expressions * https://beanvalidation.org/2.0/spec/#validationapi-message-defaultmessageinterpolation ### For more information If you have any questions or comments about this advisory: * Open an issue in [dropwizard/dropwizard](https://github.com/dropwizard/dropwizard/issues/new) * Start a discussion on the [dropwizard-dev mailing list](https://groups.google.com/forum/#!forum/dropwizard-dev) ### Security contact If you want to responsibly disclose a security issue in Dropwizard or one of its official modules, please contact us via the published channels in our [security policy](https://github.com/dropwizard/dropwizard/security/policy): https://github.com/dropwizard/dropwizard/security/policy#reporting-a-vulnerability",
          "id": "GHSA-3mcp-9wr4-cjqf",
          "desc": "Description: Dropwizard-Validation before 1.3.19, and 2.0.2 may allow arbitrary code execution on the host system, with the privileges of the Dropwizard service account, by injecting arbitrary Java Expression Language expressions when using the self-validating feature. ### Summary A server-side template injection was identified in the self-validating ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html)) feature of **dropwizard-validation** enabling attackers to inject arbitrary Java EL expressions, leading to Remote Code Execution (RCE) vulnerability. If you're using a self-validating bean (via [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html)), an upgrade to Dropwizard 1.3.19 or 2.0.2 is strongly recommended. ### Impact This issue may allow Remote Code Execution (RCE), allowing to run arbitrary code on the host system (with the privileges of the Dropwizard service account privileges) by injecting arbitrary [Java Expression Language (EL)](https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-interpolation-with-message-expressions) expressions when using the self-validating feature ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html), [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidation.html)) in **dropwizard-validation**. ### Patches The issue has been fixed in **dropwizard-validation** **1.3.19** and **2.0.2**. We strongly recommend upgrading to one of these versions. ### Workarounds If you are not able to upgrade to one of the aforementioned versions of **dropwizard-validation** but still want to use the [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html) feature, make sure to properly sanitize any message you're adding to the [`ViolationCollector`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/ViolationCollector.html) in the method annotated with [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidation.html). Example: ```java @SelfValidation public void validateFullName(ViolationCollector col) { if (fullName.contains(\"_\")) { // Sanitize fullName variable by escaping relevant characters such as \"$\" col.addViolation(\"Full name contains invalid characters: \" + sanitizeJavaEl(fullName)); } } ``` See also: https://github.com/dropwizard/dropwizard/blob/v2.0.2/dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java#L84-L98 ### References * https://github.com/dropwizard/dropwizard/pull/3157 * https://github.com/dropwizard/dropwizard/pull/3160 * https://docs.oracle.com/javaee/7/tutorial/jsf-el.htm * https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-interpolation-with-message-expressions * https://beanvalidation.org/2.0/spec/#validationapi-message-defaultmessageinterpolation ### For more information If you have any questions or comments about this advisory: * Open an issue in [dropwizard/dropwizard](https://github.com/dropwizard/dropwizard/issues/new) * Start a discussion on the [dropwizard-dev mailing list](https://groups.google.com/forum/#!forum/dropwizard-dev) ### Security contact If you want to responsibly disclose a security issue in Dropwizard or one of its official modules, please contact us via the published channels in our [security policy](https://github.com/dropwizard/dropwizard/security/policy): https://github.com/dropwizard/dropwizard/security/policy#reporting-a-vulnerability",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"00bc944f-fead-400b-8bbd-0c5b56ba2b14\",\n  \"id\": \"GHSA-3mcp-9wr4-cjqf\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    74\n  ],\n  \"description\": \"Dropwizard-Validation before 1.3.19, and 2.0.2 may allow arbitrary code execution on the host system, with the privileges of the Dropwizard service account, by injecting arbitrary Java Expression Language expressions when using the self-validating feature. ### Summary A server-side template injection was identified in the self-validating ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html)) feature of **dropwizard-validation** enabling attackers to inject arbitrary Java EL expressions, leading to Remote Code Execution (RCE) vulnerability. If you're using a self-validating bean (via [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html)), an upgrade to Dropwizard 1.3.19 or 2.0.2 is strongly recommended. ### Impact This issue may allow Remote Code Execution (RCE), allowing to run arbitrary code on the host system (with the privileges of the Dropwizard service account privileges) by injecting arbitrary [Java Expression Language (EL)](https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-interpolation-with-message-expressions) expressions when using the self-validating feature ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html), [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidation.html)) in **dropwizard-validation**. ### Patches The issue has been fixed in **dropwizard-validation** **1.3.19** and **2.0.2**. We strongly recommend upgrading to one of these versions. ### Workarounds If you are not able to upgrade to one of the aforementioned versions of **dropwizard-validation** but still want to use the [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html) feature, make sure to properly sanitize any message you're adding to the [`ViolationCollector`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/ViolationCollector.html) in the method annotated with [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidation.html). Example: ```java @SelfValidation public void validateFullName(ViolationCollector col) { if (fullName.contains(\\\"_\\\")) { // Sanitize fullName variable by escaping relevant characters such as \\\"$\\\" col.addViolation(\\\"Full name contains invalid characters: \\\" + sanitizeJavaEl(fullName)); } } ``` See also: https://github.com/dropwizard/dropwizard/blob/v2.0.2/dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java#L84-L98 ### References * https://github.com/dropwizard/dropwizard/pull/3157 * https://github.com/dropwizard/dropwizard/pull/3160 * https://docs.oracle.com/javaee/7/tutorial/jsf-el.htm * https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-interpolation-with-message-expressions * https://beanvalidation.org/2.0/spec/#validationapi-message-defaultmessageinterpolation ### For more information If you have any questions or comments about this advisory: * Open an issue in [dropwizard/dropwizard](https://github.com/dropwizard/dropwizard/issues/new) * Start a discussion on the [dropwizard-dev mailing list](https://groups.google.com/forum/#!forum/dropwizard-dev) ### Security contact If you want to responsibly disclose a security issue in Dropwizard or one of its official modules, please contact us via the published channels in our [security policy](https://github.com/dropwizard/dropwizard/security/policy): https://github.com/dropwizard/dropwizard/security/policy#reporting-a-vulnerability\",\n  \"published\": \"2020-02-24T17:27:27Z\",\n  \"updated\": \"2024-06-05T16:42:03Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-2",
              "RA-5"
            ],
            "cci": [
              "CCI-002605",
              "CCI-001643"
            ],
            "cwe": [
              "CWE-776"
            ],
            "bom-ref": "210a5c45-88ac-4c1f-a5f4-f93c7af6f59e",
            "ratings": "GITHUB - high",
            "published": "2021-06-04T21:37:45Z",
            "updated": "2023-05-22T20:17:58Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "The Alias feature in SnakeYAML 1.18 allows entity expansion during a load operation, a related issue to CVE-2003-1564.",
          "id": "GHSA-rvwf-54qp-4r6v",
          "desc": "Description: The Alias feature in SnakeYAML 1.18 allows entity expansion during a load operation, a related issue to CVE-2003-1564.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"210a5c45-88ac-4c1f-a5f4-f93c7af6f59e\",\n  \"id\": \"GHSA-rvwf-54qp-4r6v\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    776\n  ],\n  \"description\": \"The Alias feature in SnakeYAML 1.18 allows entity expansion during a load operation, a related issue to CVE-2003-1564.\",\n  \"published\": \"2021-06-04T21:37:45Z\",\n  \"updated\": \"2023-05-22T20:17:58Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-121",
              "CWE-787"
            ],
            "bom-ref": "63a53dc7-5769-43dc-a053-50ccd5295d8b",
            "ratings": "GITHUB - medium",
            "published": "2022-09-06T00:00:27Z",
            "updated": "2024-03-15T12:30:36Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DoS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack-overflow.",
          "id": "GHSA-9w3m-gqgf-c4p9",
          "desc": "Description: Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DoS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack-overflow.",
          "impact": 0.5,
          "code": "{\n  \"bom-ref\": \"63a53dc7-5769-43dc-a053-50ccd5295d8b\",\n  \"id\": \"GHSA-9w3m-gqgf-c4p9\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"medium\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    121,\n    787\n  ],\n  \"description\": \"Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DoS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack-overflow.\",\n  \"published\": \"2022-09-06T00:00:27Z\",\n  \"updated\": \"2024-03-15T12:30:36Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-121",
              "CWE-787"
            ],
            "bom-ref": "5ab41975-23cc-45e0-9a13-be603ea00595",
            "ratings": "GITHUB - medium",
            "published": "2022-11-11T19:00:31Z",
            "updated": "2024-06-21T21:33:52Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "Those using Snakeyaml to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack overflow. This effect may support a denial of service attack.",
          "id": "GHSA-w37g-rhq8-7m4j",
          "desc": "Description: Those using Snakeyaml to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack overflow. This effect may support a denial of service attack.",
          "impact": 0.5,
          "code": "{\n  \"bom-ref\": \"5ab41975-23cc-45e0-9a13-be603ea00595\",\n  \"id\": \"GHSA-w37g-rhq8-7m4j\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"medium\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    121,\n    787\n  ],\n  \"description\": \"Those using Snakeyaml to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack overflow. This effect may support a denial of service attack.\",\n  \"published\": \"2022-11-11T19:00:31Z\",\n  \"updated\": \"2024-06-21T21:33:52Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-121",
              "CWE-787"
            ],
            "bom-ref": "dff65990-715e-4f71-aace-60d4436af108",
            "ratings": "GITHUB - medium",
            "published": "2022-09-06T00:00:27Z",
            "updated": "2024-03-15T12:30:36Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.",
          "id": "GHSA-c4r9-r8fh-9vj2",
          "desc": "Description: Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.",
          "impact": 0.5,
          "code": "{\n  \"bom-ref\": \"dff65990-715e-4f71-aace-60d4436af108\",\n  \"id\": \"GHSA-c4r9-r8fh-9vj2\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"medium\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    121,\n    787\n  ],\n  \"description\": \"Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.\",\n  \"published\": \"2022-09-06T00:00:27Z\",\n  \"updated\": \"2024-03-15T12:30:36Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-121",
              "CWE-787"
            ],
            "bom-ref": "d55a9a55-cf82-483f-9a7c-8bf5395ce510",
            "ratings": "GITHUB - medium",
            "published": "2022-09-06T00:00:27Z",
            "updated": "2024-03-15T12:30:36Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.",
          "id": "GHSA-hhhw-99gj-p3c3",
          "desc": "Description: Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.",
          "impact": 0.5,
          "code": "{\n  \"bom-ref\": \"d55a9a55-cf82-483f-9a7c-8bf5395ce510\",\n  \"id\": \"GHSA-hhhw-99gj-p3c3\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"medium\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    121,\n    787\n  ],\n  \"description\": \"Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.\",\n  \"published\": \"2022-09-06T00:00:27Z\",\n  \"updated\": \"2024-03-15T12:30:36Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-121",
              "CWE-787"
            ],
            "bom-ref": "6c215a04-8ea0-421f-961b-d5cceb64fd13",
            "ratings": "GITHUB - medium",
            "published": "2022-09-06T00:00:27Z",
            "updated": "2024-03-15T12:30:36Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.",
          "id": "GHSA-98wm-3w3q-mw94",
          "desc": "Description: Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.",
          "impact": 0.5,
          "code": "{\n  \"bom-ref\": \"6c215a04-8ea0-421f-961b-d5cceb64fd13\",\n  \"id\": \"GHSA-98wm-3w3q-mw94\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"medium\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    121,\n    787\n  ],\n  \"description\": \"Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.\",\n  \"published\": \"2022-09-06T00:00:27Z\",\n  \"updated\": \"2024-03-15T12:30:36Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-400",
              "CWE-776"
            ],
            "bom-ref": "38c08d91-3487-44c4-b258-d5a274a4ad05",
            "ratings": "GITHUB - high",
            "published": "2022-08-31T00:00:24Z",
            "updated": "2024-03-15T19:06:46Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "The package org.yaml:snakeyaml from 0 and before 1.31 are vulnerable to Denial of Service (DoS) due missing to nested depth limitation for collections.",
          "id": "GHSA-3mc7-4q67-w48m",
          "desc": "Description: The package org.yaml:snakeyaml from 0 and before 1.31 are vulnerable to Denial of Service (DoS) due missing to nested depth limitation for collections.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"38c08d91-3487-44c4-b258-d5a274a4ad05\",\n  \"id\": \"GHSA-3mc7-4q67-w48m\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    400,\n    776\n  ],\n  \"description\": \"The package org.yaml:snakeyaml from 0 and before 1.31 are vulnerable to Denial of Service (DoS) due missing to nested depth limitation for collections.\",\n  \"published\": \"2022-08-31T00:00:24Z\",\n  \"updated\": \"2024-03-15T19:06:46Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-20",
              "CWE-502"
            ],
            "bom-ref": "da9ea5d3-a3c2-4d1b-8425-a799e47a804f",
            "ratings": "GITHUB - high",
            "published": "2022-12-12T21:19:47Z",
            "updated": "2024-06-24T21:22:59Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "### Summary SnakeYaml's `Constructor` class, which inherits from `SafeConstructor`, allows any type be deserialized given the following line: new Yaml(new Constructor(TestDataClass.class)).load(yamlContent); Types do not have to match the types of properties in the target class. A `ConstructorException` is thrown, but only after a malicious payload is deserialized. ### Severity High, lack of type checks during deserialization allows remote code execution. ### Proof of Concept Execute `bash run.sh`. The PoC uses Constructor to deserialize a payload for RCE. RCE is demonstrated by using a payload which performs a http request to http://127.0.0.1:8000. Example output of successful run of proof of concept: ``` $ bash run.sh [+] Downloading snakeyaml if needed [+] Starting mock HTTP server on 127.0.0.1:8000 to demonstrate RCE nc: no process found [+] Compiling and running Proof of Concept, which a payload that sends a HTTP request to mock web server. [+] An exception is expected. Exception: Cannot create property=payload for JavaBean=Main$TestDataClass@3cbbc1e0 in 'string', line 1, column 1: payload: !!javax.script.ScriptEn ... ^ Can not set java.lang.String field Main$TestDataClass.payload to javax.script.ScriptEngineManager in 'string', line 1, column 10: payload: !!javax.script.ScriptEngineManag ... ^ at org.yaml.snakeyaml.constructor.Constructor$ConstructMapping.constructJavaBean2ndStep(Constructor.java:291) at org.yaml.snakeyaml.constructor.Constructor$ConstructMapping.construct(Constructor.java:172) at org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject.construct(Constructor.java:332) at org.yaml.snakeyaml.constructor.BaseConstructor.constructObjectNoCheck(BaseConstructor.java:230) at org.yaml.snakeyaml.constructor.BaseConstructor.constructObject(BaseConstructor.java:220) at org.yaml.snakeyaml.constructor.BaseConstructor.constructDocument(BaseConstructor.java:174) at org.yaml.snakeyaml.constructor.BaseConstructor.getSingleData(BaseConstructor.java:158) at org.yaml.snakeyaml.Yaml.loadFromReader(Yaml.java:491) at org.yaml.snakeyaml.Yaml.load(Yaml.java:416) at Main.main(Main.java:37) Caused by: java.lang.IllegalArgumentException: Can not set java.lang.String field Main$TestDataClass.payload to javax.script.ScriptEngineManager at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167) at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171) at java.base/jdk.internal.reflect.UnsafeObjectFieldAccessorImpl.set(UnsafeObjectFieldAccessorImpl.java:81) at java.base/java.lang.reflect.Field.set(Field.java:780) at org.yaml.snakeyaml.introspector.FieldProperty.set(FieldProperty.java:44) at org.yaml.snakeyaml.constructor.Constructor$ConstructMapping.constructJavaBean2ndStep(Constructor.java:286) ... 9 more [+] Dumping Received HTTP Request. Will not be empty if PoC worked GET /proof-of-concept HTTP/1.1 User-Agent: Java/11.0.14 Host: localhost:8000 Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2 Connection: keep-alive ``` ### Further Analysis Potential mitigations include, leveraging SnakeYaml's SafeConstructor while parsing untrusted content. See https://bitbucket.org/snakeyaml/snakeyaml/issues/561/cve-2022-1471-vulnerability-in#comment-64581479 for discussion on the subject. A fix was released in version 2.0. See https://bitbucket.org/snakeyaml/snakeyaml/issues/561/cve-2022-1471-vulnerability-in#comment-64876314 for more information. ### Timeline **Date reported**: 4/11/2022 **Date fixed**: **Date disclosed**: 10/13/2022",
          "id": "GHSA-mjmj-j48q-9wg2",
          "desc": "Description: ### Summary SnakeYaml's `Constructor` class, which inherits from `SafeConstructor`, allows any type be deserialized given the following line: new Yaml(new Constructor(TestDataClass.class)).load(yamlContent); Types do not have to match the types of properties in the target class. A `ConstructorException` is thrown, but only after a malicious payload is deserialized. ### Severity High, lack of type checks during deserialization allows remote code execution. ### Proof of Concept Execute `bash run.sh`. The PoC uses Constructor to deserialize a payload for RCE. RCE is demonstrated by using a payload which performs a http request to http://127.0.0.1:8000. Example output of successful run of proof of concept: ``` $ bash run.sh [+] Downloading snakeyaml if needed [+] Starting mock HTTP server on 127.0.0.1:8000 to demonstrate RCE nc: no process found [+] Compiling and running Proof of Concept, which a payload that sends a HTTP request to mock web server. [+] An exception is expected. Exception: Cannot create property=payload for JavaBean=Main$TestDataClass@3cbbc1e0 in 'string', line 1, column 1: payload: !!javax.script.ScriptEn ... ^ Can not set java.lang.String field Main$TestDataClass.payload to javax.script.ScriptEngineManager in 'string', line 1, column 10: payload: !!javax.script.ScriptEngineManag ... ^ at org.yaml.snakeyaml.constructor.Constructor$ConstructMapping.constructJavaBean2ndStep(Constructor.java:291) at org.yaml.snakeyaml.constructor.Constructor$ConstructMapping.construct(Constructor.java:172) at org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject.construct(Constructor.java:332) at org.yaml.snakeyaml.constructor.BaseConstructor.constructObjectNoCheck(BaseConstructor.java:230) at org.yaml.snakeyaml.constructor.BaseConstructor.constructObject(BaseConstructor.java:220) at org.yaml.snakeyaml.constructor.BaseConstructor.constructDocument(BaseConstructor.java:174) at org.yaml.snakeyaml.constructor.BaseConstructor.getSingleData(BaseConstructor.java:158) at org.yaml.snakeyaml.Yaml.loadFromReader(Yaml.java:491) at org.yaml.snakeyaml.Yaml.load(Yaml.java:416) at Main.main(Main.java:37) Caused by: java.lang.IllegalArgumentException: Can not set java.lang.String field Main$TestDataClass.payload to javax.script.ScriptEngineManager at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167) at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171) at java.base/jdk.internal.reflect.UnsafeObjectFieldAccessorImpl.set(UnsafeObjectFieldAccessorImpl.java:81) at java.base/java.lang.reflect.Field.set(Field.java:780) at org.yaml.snakeyaml.introspector.FieldProperty.set(FieldProperty.java:44) at org.yaml.snakeyaml.constructor.Constructor$ConstructMapping.constructJavaBean2ndStep(Constructor.java:286) ... 9 more [+] Dumping Received HTTP Request. Will not be empty if PoC worked GET /proof-of-concept HTTP/1.1 User-Agent: Java/11.0.14 Host: localhost:8000 Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2 Connection: keep-alive ``` ### Further Analysis Potential mitigations include, leveraging SnakeYaml's SafeConstructor while parsing untrusted content. See https://bitbucket.org/snakeyaml/snakeyaml/issues/561/cve-2022-1471-vulnerability-in#comment-64581479 for discussion on the subject. A fix was released in version 2.0. See https://bitbucket.org/snakeyaml/snakeyaml/issues/561/cve-2022-1471-vulnerability-in#comment-64876314 for more information. ### Timeline **Date reported**: 4/11/2022 **Date fixed**: **Date disclosed**: 10/13/2022",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"da9ea5d3-a3c2-4d1b-8425-a799e47a804f\",\n  \"id\": \"GHSA-mjmj-j48q-9wg2\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    20,\n    502\n  ],\n  \"description\": \"### Summary SnakeYaml's `Constructor` class, which inherits from `SafeConstructor`, allows any type be deserialized given the following line: new Yaml(new Constructor(TestDataClass.class)).load(yamlContent); Types do not have to match the types of properties in the target class. A `ConstructorException` is thrown, but only after a malicious payload is deserialized. ### Severity High, lack of type checks during deserialization allows remote code execution. ### Proof of Concept Execute `bash run.sh`. The PoC uses Constructor to deserialize a payload for RCE. RCE is demonstrated by using a payload which performs a http request to http://127.0.0.1:8000. Example output of successful run of proof of concept: ``` $ bash run.sh [+] Downloading snakeyaml if needed [+] Starting mock HTTP server on 127.0.0.1:8000 to demonstrate RCE nc: no process found [+] Compiling and running Proof of Concept, which a payload that sends a HTTP request to mock web server. [+] An exception is expected. Exception: Cannot create property=payload for JavaBean=Main$TestDataClass@3cbbc1e0 in 'string', line 1, column 1: payload: !!javax.script.ScriptEn ... ^ Can not set java.lang.String field Main$TestDataClass.payload to javax.script.ScriptEngineManager in 'string', line 1, column 10: payload: !!javax.script.ScriptEngineManag ... ^ at org.yaml.snakeyaml.constructor.Constructor$ConstructMapping.constructJavaBean2ndStep(Constructor.java:291) at org.yaml.snakeyaml.constructor.Constructor$ConstructMapping.construct(Constructor.java:172) at org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject.construct(Constructor.java:332) at org.yaml.snakeyaml.constructor.BaseConstructor.constructObjectNoCheck(BaseConstructor.java:230) at org.yaml.snakeyaml.constructor.BaseConstructor.constructObject(BaseConstructor.java:220) at org.yaml.snakeyaml.constructor.BaseConstructor.constructDocument(BaseConstructor.java:174) at org.yaml.snakeyaml.constructor.BaseConstructor.getSingleData(BaseConstructor.java:158) at org.yaml.snakeyaml.Yaml.loadFromReader(Yaml.java:491) at org.yaml.snakeyaml.Yaml.load(Yaml.java:416) at Main.main(Main.java:37) Caused by: java.lang.IllegalArgumentException: Can not set java.lang.String field Main$TestDataClass.payload to javax.script.ScriptEngineManager at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167) at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171) at java.base/jdk.internal.reflect.UnsafeObjectFieldAccessorImpl.set(UnsafeObjectFieldAccessorImpl.java:81) at java.base/java.lang.reflect.Field.set(Field.java:780) at org.yaml.snakeyaml.introspector.FieldProperty.set(FieldProperty.java:44) at org.yaml.snakeyaml.constructor.Constructor$ConstructMapping.constructJavaBean2ndStep(Constructor.java:286) ... 9 more [+] Dumping Received HTTP Request. Will not be empty if PoC worked GET /proof-of-concept HTTP/1.1 User-Agent: Java/11.0.14 Host: localhost:8000 Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2 Connection: keep-alive ``` ### Further Analysis Potential mitigations include, leveraging SnakeYaml's SafeConstructor while parsing untrusted content. See https://bitbucket.org/snakeyaml/snakeyaml/issues/561/cve-2022-1471-vulnerability-in#comment-64581479 for discussion on the subject. A fix was released in version 2.0. See https://bitbucket.org/snakeyaml/snakeyaml/issues/561/cve-2022-1471-vulnerability-in#comment-64876314 for more information. ### Timeline **Date reported**: 4/11/2022 **Date fixed**: **Date disclosed**: 10/13/2022\",\n  \"published\": \"2022-12-12T21:19:47Z\",\n  \"updated\": \"2024-06-24T21:22:59Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "bdd3f85b-5284-4163-be5b-0dd84b9300ac",
            "ratings": "GITHUB - medium",
            "published": "2021-12-17T20:00:50Z",
            "updated": "2023-01-30T05:04:55Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "In logback version 1.2.7 and prior versions, an attacker with the required privileges to edit configurations files could craft a malicious configuration allowing to execute arbitrary code loaded from LDAP servers.",
          "id": "GHSA-668q-qrv7-99fm",
          "desc": "Description: In logback version 1.2.7 and prior versions, an attacker with the required privileges to edit configurations files could craft a malicious configuration allowing to execute arbitrary code loaded from LDAP servers.",
          "impact": 0.5,
          "code": "{\n  \"bom-ref\": \"bdd3f85b-5284-4163-be5b-0dd84b9300ac\",\n  \"id\": \"GHSA-668q-qrv7-99fm\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"medium\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"In logback version 1.2.7 and prior versions, an attacker with the required privileges to edit configurations files could craft a malicious configuration allowing to execute arbitrary code loaded from LDAP servers.\",\n  \"published\": \"2021-12-17T20:00:50Z\",\n  \"updated\": \"2023-01-30T05:04:55Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "0d58391c-d0fe-4b46-8f8d-6a49db7fb354",
            "ratings": "GITHUB - high",
            "published": "2023-11-29T12:30:16Z",
            "updated": "2023-12-05T21:31:13Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "A serialization vulnerability in logback receiver component part of logback allows an attacker to mount a Denial-Of-Service attack by sending poisoned data. This is only exploitable if logback receiver component is deployed. See https://logback.qos.ch/manual/receivers.html",
          "id": "GHSA-vmq6-5m68-f53m",
          "desc": "Description: A serialization vulnerability in logback receiver component part of logback allows an attacker to mount a Denial-Of-Service attack by sending poisoned data. This is only exploitable if logback receiver component is deployed. See https://logback.qos.ch/manual/receivers.html",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"0d58391c-d0fe-4b46-8f8d-6a49db7fb354\",\n  \"id\": \"GHSA-vmq6-5m68-f53m\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"A serialization vulnerability in logback receiver component part of logback allows an attacker to mount a Denial-Of-Service attack by sending poisoned data. This is only exploitable if logback receiver component is deployed. See https://logback.qos.ch/manual/receivers.html\",\n  \"published\": \"2023-11-29T12:30:16Z\",\n  \"updated\": \"2023-12-05T21:31:13Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-400"
            ],
            "bom-ref": "17d2faa1-cd26-4ac7-8c68-c4a44ec398a8",
            "ratings": "GITHUB - medium",
            "published": "2021-03-10T03:46:47Z",
            "updated": "2023-02-01T05:05:09Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "### Impact When Jetty handles a request containing request headers with a large number of “quality” (i.e. q) parameters (such as what are seen on the `Accept`, `Accept-Encoding`, and `Accept-Language` request headers), the server may enter a denial of service (DoS) state due to high CPU usage while sorting the list of values based on their quality values. A single request can easily consume minutes of CPU time before it is even dispatched to the application. The only features within Jetty that can trigger this behavior are: - Default Error Handling - the `Accept` request header with the `QuotedQualityCSV` is used to determine what kind of content to send back to the client (html, text, json, xml, etc) - `StatisticsServlet` - uses the `Accept` request header with the `QuotedQualityCSV` to determine what kind of content to send back to the client (xml, json, text, html, etc) - `HttpServletRequest.getLocale()` - uses the `Accept-Language` request header with the `QuotedQualityCSV` to determine which “preferred” language is returned on this call. - `HttpservletRequest.getLocales()` - is similar to the above, but returns an ordered list of locales based on the quality values on the `Accept-Language` request header. - `DefaultServlet` - uses the `Accept-Encoding` request header with the `QuotedQualityCSV` to determine which kind of pre-compressed content should be sent back for static content (content that is not matched against a url-pattern in your web app) ### Versions `QuotedQualityCSV` was introduced to Jetty 9.3.9.v20160517 and the bug that introduced the vulnerability was in 9.4.6.v20170531. Currently, known vulnerable versions include: - 9.4.6.v20170531 thru to 9.4.36.v20210114 - 10.0.0 - 11.0.0 ### Workarounds Quality ordered values are used infrequently by jetty so they can be avoided by: * Do not use the default error page/handler. * Do not deploy the `StatisticsServlet` exposed to the network * Do not call `getLocale` API * Do not enable precompressed static content in the `DefaultServlet` ### Patches All patches are available for download from the Eclipse Jetty website at [https://www.eclipse.org/jetty/download.php](https://www.eclipse.org/jetty/download.php) - 9.4.37.v20210219 and greater - 10.0.1 and greater - 11.0.1 and greater",
          "id": "GHSA-m394-8rww-3jr7",
          "desc": "Description: ### Impact When Jetty handles a request containing request headers with a large number of “quality” (i.e. q) parameters (such as what are seen on the `Accept`, `Accept-Encoding`, and `Accept-Language` request headers), the server may enter a denial of service (DoS) state due to high CPU usage while sorting the list of values based on their quality values. A single request can easily consume minutes of CPU time before it is even dispatched to the application. The only features within Jetty that can trigger this behavior are: - Default Error Handling - the `Accept` request header with the `QuotedQualityCSV` is used to determine what kind of content to send back to the client (html, text, json, xml, etc) - `StatisticsServlet` - uses the `Accept` request header with the `QuotedQualityCSV` to determine what kind of content to send back to the client (xml, json, text, html, etc) - `HttpServletRequest.getLocale()` - uses the `Accept-Language` request header with the `QuotedQualityCSV` to determine which “preferred” language is returned on this call. - `HttpservletRequest.getLocales()` - is similar to the above, but returns an ordered list of locales based on the quality values on the `Accept-Language` request header. - `DefaultServlet` - uses the `Accept-Encoding` request header with the `QuotedQualityCSV` to determine which kind of pre-compressed content should be sent back for static content (content that is not matched against a url-pattern in your web app) ### Versions `QuotedQualityCSV` was introduced to Jetty 9.3.9.v20160517 and the bug that introduced the vulnerability was in 9.4.6.v20170531. Currently, known vulnerable versions include: - 9.4.6.v20170531 thru to 9.4.36.v20210114 - 10.0.0 - 11.0.0 ### Workarounds Quality ordered values are used infrequently by jetty so they can be avoided by: * Do not use the default error page/handler. * Do not deploy the `StatisticsServlet` exposed to the network * Do not call `getLocale` API * Do not enable precompressed static content in the `DefaultServlet` ### Patches All patches are available for download from the Eclipse Jetty website at [https://www.eclipse.org/jetty/download.php](https://www.eclipse.org/jetty/download.php) - 9.4.37.v20210219 and greater - 10.0.1 and greater - 11.0.1 and greater",
          "impact": 0.5,
          "code": "{\n  \"bom-ref\": \"17d2faa1-cd26-4ac7-8c68-c4a44ec398a8\",\n  \"id\": \"GHSA-m394-8rww-3jr7\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"medium\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    400\n  ],\n  \"description\": \"### Impact When Jetty handles a request containing request headers with a large number of “quality” (i.e. q) parameters (such as what are seen on the `Accept`, `Accept-Encoding`, and `Accept-Language` request headers), the server may enter a denial of service (DoS) state due to high CPU usage while sorting the list of values based on their quality values. A single request can easily consume minutes of CPU time before it is even dispatched to the application. The only features within Jetty that can trigger this behavior are: - Default Error Handling - the `Accept` request header with the `QuotedQualityCSV` is used to determine what kind of content to send back to the client (html, text, json, xml, etc) - `StatisticsServlet` - uses the `Accept` request header with the `QuotedQualityCSV` to determine what kind of content to send back to the client (xml, json, text, html, etc) - `HttpServletRequest.getLocale()` - uses the `Accept-Language` request header with the `QuotedQualityCSV` to determine which “preferred” language is returned on this call. - `HttpservletRequest.getLocales()` - is similar to the above, but returns an ordered list of locales based on the quality values on the `Accept-Language` request header. - `DefaultServlet` - uses the `Accept-Encoding` request header with the `QuotedQualityCSV` to determine which kind of pre-compressed content should be sent back for static content (content that is not matched against a url-pattern in your web app) ### Versions `QuotedQualityCSV` was introduced to Jetty 9.3.9.v20160517 and the bug that introduced the vulnerability was in 9.4.6.v20170531. Currently, known vulnerable versions include: - 9.4.6.v20170531 thru to 9.4.36.v20210114 - 10.0.0 - 11.0.0 ### Workarounds Quality ordered values are used infrequently by jetty so they can be avoided by: * Do not use the default error page/handler. * Do not deploy the `StatisticsServlet` exposed to the network * Do not call `getLocale` API * Do not enable precompressed static content in the `DefaultServlet` ### Patches All patches are available for download from the Eclipse Jetty website at [https://www.eclipse.org/jetty/download.php](https://www.eclipse.org/jetty/download.php) - 9.4.37.v20210219 and greater - 10.0.1 and greater - 11.0.1 and greater\",\n  \"published\": \"2021-03-10T03:46:47Z\",\n  \"updated\": \"2023-02-01T05:05:09Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "AC-12"
            ],
            "cci": [
              "CCI-002361"
            ],
            "cwe": [
              "CWE-613"
            ],
            "bom-ref": "f32ca540-f068-4392-bea0-c0d7b050b7d1",
            "ratings": "GITHUB - low",
            "published": "2021-06-23T20:23:04Z",
            "updated": "2023-02-01T05:05:59Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "### Impact If an exception is thrown from the `SessionListener#sessionDestroyed()` method, then the session ID is not invalidated in the session ID manager. On deployments with clustered sessions and multiple contexts this can result in a session not being invalidated. This can result in an application used on a shared computer being left logged in. There is no known path for an attacker to induce such an exception to be thrown, thus they must rely on an application to throw such an exception. The OP has also identified that during the call to `sessionDestroyed`, the `getLastAccessedTime()` throws an `IllegalStateException`, which potentially contrary to the servlet spec, so applications calling this method may always throw and fail to log out. If such an application was only tested on a non clustered test environment, then it may be deployed on a clustered environment with multiple contexts and fail to log out. ### Workarounds The application should catch all Throwables within their `SessionListener#sessionDestroyed()` implementations.",
          "id": "GHSA-m6cp-vxjx-65j6",
          "desc": "Description: ### Impact If an exception is thrown from the `SessionListener#sessionDestroyed()` method, then the session ID is not invalidated in the session ID manager. On deployments with clustered sessions and multiple contexts this can result in a session not being invalidated. This can result in an application used on a shared computer being left logged in. There is no known path for an attacker to induce such an exception to be thrown, thus they must rely on an application to throw such an exception. The OP has also identified that during the call to `sessionDestroyed`, the `getLastAccessedTime()` throws an `IllegalStateException`, which potentially contrary to the servlet spec, so applications calling this method may always throw and fail to log out. If such an application was only tested on a non clustered test environment, then it may be deployed on a clustered environment with multiple contexts and fail to log out. ### Workarounds The application should catch all Throwables within their `SessionListener#sessionDestroyed()` implementations.",
          "impact": 0.3,
          "code": "{\n  \"bom-ref\": \"f32ca540-f068-4392-bea0-c0d7b050b7d1\",\n  \"id\": \"GHSA-m6cp-vxjx-65j6\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"low\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    613\n  ],\n  \"description\": \"### Impact If an exception is thrown from the `SessionListener#sessionDestroyed()` method, then the session ID is not invalidated in the session ID manager. On deployments with clustered sessions and multiple contexts this can result in a session not being invalidated. This can result in an application used on a shared computer being left logged in. There is no known path for an attacker to induce such an exception to be thrown, thus they must rely on an application to throw such an exception. The OP has also identified that during the call to `sessionDestroyed`, the `getLastAccessedTime()` throws an `IllegalStateException`, which potentially contrary to the servlet spec, so applications calling this method may always throw and fail to log out. If such an application was only tested on a non clustered test environment, then it may be deployed on a clustered environment with multiple contexts and fail to log out. ### Workarounds The application should catch all Throwables within their `SessionListener#sessionDestroyed()` implementations.\",\n  \"published\": \"2021-06-23T20:23:04Z\",\n  \"updated\": \"2023-02-01T05:05:59Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-400",
              "CWE-551",
              "CWE-755"
            ],
            "bom-ref": "6d35c4e5-f5ee-4572-af28-1ca71cf48158",
            "ratings": "GITHUB - high",
            "published": "2021-04-06T17:31:30Z",
            "updated": "2023-09-26T11:11:47Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "### Impact When using SSL/TLS with Jetty, either with HTTP/1.1, HTTP/2, or WebSocket, the server may receive an invalid large (greater than 17408) TLS frame that is incorrectly handled, causing CPU resources to eventually reach 100% usage. ### Workarounds The problem can be worked around by compiling the following class: ```java package org.eclipse.jetty.server.ssl.fix6072; import java.nio.ByteBuffer; import javax.net.ssl.SSLEngine; import javax.net.ssl.SSLEngineResult; import javax.net.ssl.SSLException; import javax.net.ssl.SSLHandshakeException; import org.eclipse.jetty.io.EndPoint; import org.eclipse.jetty.io.ssl.SslConnection; import org.eclipse.jetty.server.Connector; import org.eclipse.jetty.server.SslConnectionFactory; import org.eclipse.jetty.util.BufferUtil; import org.eclipse.jetty.util.annotation.Name; import org.eclipse.jetty.util.ssl.SslContextFactory; public class SpaceCheckingSslConnectionFactory extends SslConnectionFactory { public SpaceCheckingSslConnectionFactory(@Name(\"sslContextFactory\") SslContextFactory factory, @Name(\"next\") String nextProtocol) { super(factory, nextProtocol); } @Override protected SslConnection newSslConnection(Connector connector, EndPoint endPoint, SSLEngine engine) { return new SslConnection(connector.getByteBufferPool(), connector.getExecutor(), endPoint, engine, isDirectBuffersForEncryption(), isDirectBuffersForDecryption()) { @Override protected SSLEngineResult unwrap(SSLEngine sslEngine, ByteBuffer input, ByteBuffer output) throws SSLException { SSLEngineResult results = super.unwrap(sslEngine, input, output); if ((results.getStatus() == SSLEngineResult.Status.BUFFER_UNDERFLOW || results.getStatus() == SSLEngineResult.Status.OK && results.bytesConsumed() == 0 && results.bytesProduced() == 0) && BufferUtil.space(input) == 0) { BufferUtil.clear(input); throw new SSLHandshakeException(\"Encrypted buffer max length exceeded\"); } return results; } }; } } ``` This class can be deployed by: + The resulting class file should be put into a jar file (eg sslfix6072.jar) + The jar file should be made available to the server. For a normal distribution this can be done by putting the file into ${jetty.base}/lib + Copy the file `${jetty.home}/modules/ssl.mod` to `${jetty.base}/modules` + Edit the `${jetty.base}/modules/ssl.mod` file to have the following section: ``` [lib] lib/sslfix6072.jar ``` + Copy the file `${jetty.home}/etc/jetty-https.xml` and`${jetty.home}/etc/jetty-http2.xml` to `${jetty.base}/etc` + Edit files `${jetty.base}/etc/jetty-https.xml` and `${jetty.base}/etc/jetty-http2.xml`, changing any reference of `org.eclipse.jetty.server.SslConnectionFactory` to `org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory`. For example: ```xml <Call name=\"addIfAbsentConnectionFactory\"> <Arg> <New class=\"org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory\"> <Arg name=\"next\">http/1.1</Arg> <Arg name=\"sslContextFactory\"><Ref refid=\"sslContextFactory\"/></Arg> </New> </Arg> </Call> ``` + Restart Jetty",
          "id": "GHSA-26vr-8j45-3r4w",
          "desc": "Description: ### Impact When using SSL/TLS with Jetty, either with HTTP/1.1, HTTP/2, or WebSocket, the server may receive an invalid large (greater than 17408) TLS frame that is incorrectly handled, causing CPU resources to eventually reach 100% usage. ### Workarounds The problem can be worked around by compiling the following class: ```java package org.eclipse.jetty.server.ssl.fix6072; import java.nio.ByteBuffer; import javax.net.ssl.SSLEngine; import javax.net.ssl.SSLEngineResult; import javax.net.ssl.SSLException; import javax.net.ssl.SSLHandshakeException; import org.eclipse.jetty.io.EndPoint; import org.eclipse.jetty.io.ssl.SslConnection; import org.eclipse.jetty.server.Connector; import org.eclipse.jetty.server.SslConnectionFactory; import org.eclipse.jetty.util.BufferUtil; import org.eclipse.jetty.util.annotation.Name; import org.eclipse.jetty.util.ssl.SslContextFactory; public class SpaceCheckingSslConnectionFactory extends SslConnectionFactory { public SpaceCheckingSslConnectionFactory(@Name(\"sslContextFactory\") SslContextFactory factory, @Name(\"next\") String nextProtocol) { super(factory, nextProtocol); } @Override protected SslConnection newSslConnection(Connector connector, EndPoint endPoint, SSLEngine engine) { return new SslConnection(connector.getByteBufferPool(), connector.getExecutor(), endPoint, engine, isDirectBuffersForEncryption(), isDirectBuffersForDecryption()) { @Override protected SSLEngineResult unwrap(SSLEngine sslEngine, ByteBuffer input, ByteBuffer output) throws SSLException { SSLEngineResult results = super.unwrap(sslEngine, input, output); if ((results.getStatus() == SSLEngineResult.Status.BUFFER_UNDERFLOW || results.getStatus() == SSLEngineResult.Status.OK && results.bytesConsumed() == 0 && results.bytesProduced() == 0) && BufferUtil.space(input) == 0) { BufferUtil.clear(input); throw new SSLHandshakeException(\"Encrypted buffer max length exceeded\"); } return results; } }; } } ``` This class can be deployed by: + The resulting class file should be put into a jar file (eg sslfix6072.jar) + The jar file should be made available to the server. For a normal distribution this can be done by putting the file into ${jetty.base}/lib + Copy the file `${jetty.home}/modules/ssl.mod` to `${jetty.base}/modules` + Edit the `${jetty.base}/modules/ssl.mod` file to have the following section: ``` [lib] lib/sslfix6072.jar ``` + Copy the file `${jetty.home}/etc/jetty-https.xml` and`${jetty.home}/etc/jetty-http2.xml` to `${jetty.base}/etc` + Edit files `${jetty.base}/etc/jetty-https.xml` and `${jetty.base}/etc/jetty-http2.xml`, changing any reference of `org.eclipse.jetty.server.SslConnectionFactory` to `org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory`. For example: ```xml <Call name=\"addIfAbsentConnectionFactory\"> <Arg> <New class=\"org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory\"> <Arg name=\"next\">http/1.1</Arg> <Arg name=\"sslContextFactory\"><Ref refid=\"sslContextFactory\"/></Arg> </New> </Arg> </Call> ``` + Restart Jetty",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"6d35c4e5-f5ee-4572-af28-1ca71cf48158\",\n  \"id\": \"GHSA-26vr-8j45-3r4w\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    400,\n    551,\n    755\n  ],\n  \"description\": \"### Impact When using SSL/TLS with Jetty, either with HTTP/1.1, HTTP/2, or WebSocket, the server may receive an invalid large (greater than 17408) TLS frame that is incorrectly handled, causing CPU resources to eventually reach 100% usage. ### Workarounds The problem can be worked around by compiling the following class: ```java package org.eclipse.jetty.server.ssl.fix6072; import java.nio.ByteBuffer; import javax.net.ssl.SSLEngine; import javax.net.ssl.SSLEngineResult; import javax.net.ssl.SSLException; import javax.net.ssl.SSLHandshakeException; import org.eclipse.jetty.io.EndPoint; import org.eclipse.jetty.io.ssl.SslConnection; import org.eclipse.jetty.server.Connector; import org.eclipse.jetty.server.SslConnectionFactory; import org.eclipse.jetty.util.BufferUtil; import org.eclipse.jetty.util.annotation.Name; import org.eclipse.jetty.util.ssl.SslContextFactory; public class SpaceCheckingSslConnectionFactory extends SslConnectionFactory { public SpaceCheckingSslConnectionFactory(@Name(\\\"sslContextFactory\\\") SslContextFactory factory, @Name(\\\"next\\\") String nextProtocol) { super(factory, nextProtocol); } @Override protected SslConnection newSslConnection(Connector connector, EndPoint endPoint, SSLEngine engine) { return new SslConnection(connector.getByteBufferPool(), connector.getExecutor(), endPoint, engine, isDirectBuffersForEncryption(), isDirectBuffersForDecryption()) { @Override protected SSLEngineResult unwrap(SSLEngine sslEngine, ByteBuffer input, ByteBuffer output) throws SSLException { SSLEngineResult results = super.unwrap(sslEngine, input, output); if ((results.getStatus() == SSLEngineResult.Status.BUFFER_UNDERFLOW || results.getStatus() == SSLEngineResult.Status.OK && results.bytesConsumed() == 0 && results.bytesProduced() == 0) && BufferUtil.space(input) == 0) { BufferUtil.clear(input); throw new SSLHandshakeException(\\\"Encrypted buffer max length exceeded\\\"); } return results; } }; } } ``` This class can be deployed by: + The resulting class file should be put into a jar file (eg sslfix6072.jar) + The jar file should be made available to the server. For a normal distribution this can be done by putting the file into ${jetty.base}/lib + Copy the file `${jetty.home}/modules/ssl.mod` to `${jetty.base}/modules` + Edit the `${jetty.base}/modules/ssl.mod` file to have the following section: ``` [lib] lib/sslfix6072.jar ``` + Copy the file `${jetty.home}/etc/jetty-https.xml` and`${jetty.home}/etc/jetty-http2.xml` to `${jetty.base}/etc` + Edit files `${jetty.base}/etc/jetty-https.xml` and `${jetty.base}/etc/jetty-http2.xml`, changing any reference of `org.eclipse.jetty.server.SslConnectionFactory` to `org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory`. For example: ```xml <Call name=\\\"addIfAbsentConnectionFactory\\\"> <Arg> <New class=\\\"org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory\\\"> <Arg name=\\\"next\\\">http/1.1</Arg> <Arg name=\\\"sslContextFactory\\\"><Ref refid=\\\"sslContextFactory\\\"/></Arg> </New> </Arg> </Call> ``` + Restart Jetty\",\n  \"published\": \"2021-04-06T17:31:30Z\",\n  \"updated\": \"2023-09-26T11:11:47Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SC-8"
            ],
            "cci": [
              "CCI-002418"
            ],
            "cwe": [
              "CWE-200"
            ],
            "bom-ref": "d5c5815d-1742-46b6-953a-a4ed90fdd920",
            "ratings": "GITHUB - low",
            "published": "2023-04-18T22:19:57Z",
            "updated": "2023-11-06T05:01:53Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "Nonstandard cookie parsing in Jetty may allow an attacker to smuggle cookies within other cookies, or otherwise perform unintended behavior by tampering with the cookie parsing mechanism. If Jetty sees a cookie VALUE that starts with `\"` (double quote), it will continue to read the cookie string until it sees a closing quote -- even if a semicolon is encountered. So, a cookie header such as: `DISPLAY_LANGUAGE=\"b; JSESSIONID=1337; c=d\"` will be parsed as one cookie, with the name `DISPLAY_LANGUAGE` and a value of `b; JSESSIONID=1337; c=d` instead of 3 separate cookies. ### Impact This has security implications because if, say, `JSESSIONID` is an `HttpOnly` cookie, and the `DISPLAY_LANGUAGE` cookie value is rendered on the page, an attacker can smuggle the `JSESSIONID` cookie into the `DISPLAY_LANGUAGE` cookie and thereby exfiltrate it. This is significant when an intermediary is enacting some policy based on cookies, so a smuggled cookie can bypass that policy yet still be seen by the Jetty server. ### Patches * 9.4.51.v20230217 - via PR #9352 * 10.0.15 - via PR #9339 * 11.0.15 - via PR #9339 ### Workarounds No workarounds ### References * https://www.rfc-editor.org/rfc/rfc2965 * https://www.rfc-editor.org/rfc/rfc6265",
          "id": "GHSA-p26g-97m4-6q7c",
          "desc": "Description: Nonstandard cookie parsing in Jetty may allow an attacker to smuggle cookies within other cookies, or otherwise perform unintended behavior by tampering with the cookie parsing mechanism. If Jetty sees a cookie VALUE that starts with `\"` (double quote), it will continue to read the cookie string until it sees a closing quote -- even if a semicolon is encountered. So, a cookie header such as: `DISPLAY_LANGUAGE=\"b; JSESSIONID=1337; c=d\"` will be parsed as one cookie, with the name `DISPLAY_LANGUAGE` and a value of `b; JSESSIONID=1337; c=d` instead of 3 separate cookies. ### Impact This has security implications because if, say, `JSESSIONID` is an `HttpOnly` cookie, and the `DISPLAY_LANGUAGE` cookie value is rendered on the page, an attacker can smuggle the `JSESSIONID` cookie into the `DISPLAY_LANGUAGE` cookie and thereby exfiltrate it. This is significant when an intermediary is enacting some policy based on cookies, so a smuggled cookie can bypass that policy yet still be seen by the Jetty server. ### Patches * 9.4.51.v20230217 - via PR #9352 * 10.0.15 - via PR #9339 * 11.0.15 - via PR #9339 ### Workarounds No workarounds ### References * https://www.rfc-editor.org/rfc/rfc2965 * https://www.rfc-editor.org/rfc/rfc6265",
          "impact": 0.3,
          "code": "{\n  \"bom-ref\": \"d5c5815d-1742-46b6-953a-a4ed90fdd920\",\n  \"id\": \"GHSA-p26g-97m4-6q7c\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"low\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    200\n  ],\n  \"description\": \"Nonstandard cookie parsing in Jetty may allow an attacker to smuggle cookies within other cookies, or otherwise perform unintended behavior by tampering with the cookie parsing mechanism. If Jetty sees a cookie VALUE that starts with `\\\"` (double quote), it will continue to read the cookie string until it sees a closing quote -- even if a semicolon is encountered. So, a cookie header such as: `DISPLAY_LANGUAGE=\\\"b; JSESSIONID=1337; c=d\\\"` will be parsed as one cookie, with the name `DISPLAY_LANGUAGE` and a value of `b; JSESSIONID=1337; c=d` instead of 3 separate cookies. ### Impact This has security implications because if, say, `JSESSIONID` is an `HttpOnly` cookie, and the `DISPLAY_LANGUAGE` cookie value is rendered on the page, an attacker can smuggle the `JSESSIONID` cookie into the `DISPLAY_LANGUAGE` cookie and thereby exfiltrate it. This is significant when an intermediary is enacting some policy based on cookies, so a smuggled cookie can bypass that policy yet still be seen by the Jetty server. ### Patches * 9.4.51.v20230217 - via PR #9352 * 10.0.15 - via PR #9339 * 11.0.15 - via PR #9339 ### Workarounds No workarounds ### References * https://www.rfc-editor.org/rfc/rfc2965 * https://www.rfc-editor.org/rfc/rfc6265\",\n  \"published\": \"2023-04-18T22:19:57Z\",\n  \"updated\": \"2023-11-06T05:01:53Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-400",
              "CWE-770"
            ],
            "bom-ref": "f6ff72c7-6603-4627-899d-658f8f7c5f23",
            "ratings": "GITHUB - medium",
            "published": "2023-04-19T18:15:45Z",
            "updated": "2023-11-06T05:02:06Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "### Impact Servlets with multipart support (e.g. annotated with `@MultipartConfig`) that call `HttpServletRequest.getParameter()` or `HttpServletRequest.getParts()` may cause `OutOfMemoryError` when the client sends a multipart request with a part that has a name but no filename and a very large content. This happens even with the default settings of `fileSizeThreshold=0` which should stream the whole part content to disk. An attacker client may send a large multipart request and cause the server to throw `OutOfMemoryError`. However, the server may be able to recover after the `OutOfMemoryError` and continue its service -- although it may take some time. A very large number of parts may cause the same problem. ### Patches Patched in Jetty versions * 9.4.51.v20230217 - via PR #9345 * 10.0.14 - via PR #9344 * 11.0.14 - via PR #9344 ### Workarounds Multipart parameter `maxRequestSize` must be set to a non-negative value, so the whole multipart content is limited (although still read into memory). Limiting multipart parameter `maxFileSize` won't be enough because an attacker can send a large number of parts that summed up will cause memory issues. ### References * https://github.com/eclipse/jetty.project/issues/9076 * https://github.com/jakartaee/servlet/blob/6.0.0/spec/src/main/asciidoc/servlet-spec-body.adoc#32-file-upload",
          "id": "GHSA-qw69-rqj8-6qw8",
          "desc": "Description: ### Impact Servlets with multipart support (e.g. annotated with `@MultipartConfig`) that call `HttpServletRequest.getParameter()` or `HttpServletRequest.getParts()` may cause `OutOfMemoryError` when the client sends a multipart request with a part that has a name but no filename and a very large content. This happens even with the default settings of `fileSizeThreshold=0` which should stream the whole part content to disk. An attacker client may send a large multipart request and cause the server to throw `OutOfMemoryError`. However, the server may be able to recover after the `OutOfMemoryError` and continue its service -- although it may take some time. A very large number of parts may cause the same problem. ### Patches Patched in Jetty versions * 9.4.51.v20230217 - via PR #9345 * 10.0.14 - via PR #9344 * 11.0.14 - via PR #9344 ### Workarounds Multipart parameter `maxRequestSize` must be set to a non-negative value, so the whole multipart content is limited (although still read into memory). Limiting multipart parameter `maxFileSize` won't be enough because an attacker can send a large number of parts that summed up will cause memory issues. ### References * https://github.com/eclipse/jetty.project/issues/9076 * https://github.com/jakartaee/servlet/blob/6.0.0/spec/src/main/asciidoc/servlet-spec-body.adoc#32-file-upload",
          "impact": 0.5,
          "code": "{\n  \"bom-ref\": \"f6ff72c7-6603-4627-899d-658f8f7c5f23\",\n  \"id\": \"GHSA-qw69-rqj8-6qw8\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"medium\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    400,\n    770\n  ],\n  \"description\": \"### Impact Servlets with multipart support (e.g. annotated with `@MultipartConfig`) that call `HttpServletRequest.getParameter()` or `HttpServletRequest.getParts()` may cause `OutOfMemoryError` when the client sends a multipart request with a part that has a name but no filename and a very large content. This happens even with the default settings of `fileSizeThreshold=0` which should stream the whole part content to disk. An attacker client may send a large multipart request and cause the server to throw `OutOfMemoryError`. However, the server may be able to recover after the `OutOfMemoryError` and continue its service -- although it may take some time. A very large number of parts may cause the same problem. ### Patches Patched in Jetty versions * 9.4.51.v20230217 - via PR #9345 * 10.0.14 - via PR #9344 * 11.0.14 - via PR #9344 ### Workarounds Multipart parameter `maxRequestSize` must be set to a non-negative value, so the whole multipart content is limited (although still read into memory). Limiting multipart parameter `maxFileSize` won't be enough because an attacker can send a large number of parts that summed up will cause memory issues. ### References * https://github.com/eclipse/jetty.project/issues/9076 * https://github.com/jakartaee/servlet/blob/6.0.0/spec/src/main/asciidoc/servlet-spec-body.adoc#32-file-upload\",\n  \"published\": \"2023-04-19T18:15:45Z\",\n  \"updated\": \"2023-11-06T05:02:06Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SC-4"
            ],
            "cci": [
              "CCI-001090"
            ],
            "cwe": [
              "CWE-226"
            ],
            "bom-ref": "ebc03317-a0b4-4b53-9cd0-7ae4281c02e6",
            "ratings": "GITHUB - medium",
            "published": "2020-12-02T18:28:18Z",
            "updated": "2024-02-21T17:23:14Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "### Impact If GZIP request body inflation is enabled and requests from different clients are multiplexed onto a single connection and if an attacker can send a request with a body that is received entirely by not consumed by the application, then a subsequent request on the same connection will see that body prepended to it's body. The attacker will not see any data, but may inject data into the body of the subsequent request CVE score is [4.8 AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:L](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:L&version=3.1) ### Workarounds The problem can be worked around by either: - Disabling compressed request body inflation by GzipHandler. - By always fully consuming the request content before sending a response. - By adding a `Connection: close` to any response where the servlet does not fully consume request content.",
          "id": "GHSA-86wm-rrjm-8wh8",
          "desc": "Description: ### Impact If GZIP request body inflation is enabled and requests from different clients are multiplexed onto a single connection and if an attacker can send a request with a body that is received entirely by not consumed by the application, then a subsequent request on the same connection will see that body prepended to it's body. The attacker will not see any data, but may inject data into the body of the subsequent request CVE score is [4.8 AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:L](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:L&version=3.1) ### Workarounds The problem can be worked around by either: - Disabling compressed request body inflation by GzipHandler. - By always fully consuming the request content before sending a response. - By adding a `Connection: close` to any response where the servlet does not fully consume request content.",
          "impact": 0.5,
          "code": "{\n  \"bom-ref\": \"ebc03317-a0b4-4b53-9cd0-7ae4281c02e6\",\n  \"id\": \"GHSA-86wm-rrjm-8wh8\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"medium\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    226\n  ],\n  \"description\": \"### Impact If GZIP request body inflation is enabled and requests from different clients are multiplexed onto a single connection and if an attacker can send a request with a body that is received entirely by not consumed by the application, then a subsequent request on the same connection will see that body prepended to it's body. The attacker will not see any data, but may inject data into the body of the subsequent request CVE score is [4.8 AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:L](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:L&version=3.1) ### Workarounds The problem can be worked around by either: - Disabling compressed request body inflation by GzipHandler. - By always fully consuming the request content before sending a response. - By adding a `Connection: close` to any response where the servlet does not fully consume request content.\",\n  \"published\": \"2020-12-02T18:28:18Z\",\n  \"updated\": \"2024-02-21T17:23:14Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-20"
            ],
            "bom-ref": "c19b779d-2699-44de-a189-a0d18d8dc953",
            "ratings": "GITHUB - low",
            "published": "2022-07-07T20:55:34Z",
            "updated": "2023-01-29T05:06:01Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "### Description URI use within Jetty's `HttpURI` class can parse invalid URIs such as `http://localhost;/path` as having an authority with a host of `localhost;`. A URIs of the type `http://localhost;/path` should be interpreted to be either invalid or as `localhost;` to be the userinfo and no host. However, `HttpURI.host` returns `localhost;` which is definitely wrong. ### Impact This can lead to errors with Jetty's `HttpClient`, and Jetty's `ProxyServlet` / `AsyncProxyServlet` / `AsyncMiddleManServlet` wrongly interpreting an authority with no host as one with a host. ### Patches Patched in PR [#8146](https://github.com/eclipse/jetty.project/pull/8146) for Jetty version 9.4.47. Patched in PR [#8014](https://github.com/eclipse/jetty.project/pull/8015) for Jetty versions 10.0.10, and 11.0.10 ### Workarounds None. ### For more information If you have any questions or comments about this advisory: * Email us at security@webtide.com.",
          "id": "GHSA-cj7v-27pg-wf7q",
          "desc": "Description: ### Description URI use within Jetty's `HttpURI` class can parse invalid URIs such as `http://localhost;/path` as having an authority with a host of `localhost;`. A URIs of the type `http://localhost;/path` should be interpreted to be either invalid or as `localhost;` to be the userinfo and no host. However, `HttpURI.host` returns `localhost;` which is definitely wrong. ### Impact This can lead to errors with Jetty's `HttpClient`, and Jetty's `ProxyServlet` / `AsyncProxyServlet` / `AsyncMiddleManServlet` wrongly interpreting an authority with no host as one with a host. ### Patches Patched in PR [#8146](https://github.com/eclipse/jetty.project/pull/8146) for Jetty version 9.4.47. Patched in PR [#8014](https://github.com/eclipse/jetty.project/pull/8015) for Jetty versions 10.0.10, and 11.0.10 ### Workarounds None. ### For more information If you have any questions or comments about this advisory: * Email us at security@webtide.com.",
          "impact": 0.3,
          "code": "{\n  \"bom-ref\": \"c19b779d-2699-44de-a189-a0d18d8dc953\",\n  \"id\": \"GHSA-cj7v-27pg-wf7q\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"low\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    20\n  ],\n  \"description\": \"### Description URI use within Jetty's `HttpURI` class can parse invalid URIs such as `http://localhost;/path` as having an authority with a host of `localhost;`. A URIs of the type `http://localhost;/path` should be interpreted to be either invalid or as `localhost;` to be the userinfo and no host. However, `HttpURI.host` returns `localhost;` which is definitely wrong. ### Impact This can lead to errors with Jetty's `HttpClient`, and Jetty's `ProxyServlet` / `AsyncProxyServlet` / `AsyncMiddleManServlet` wrongly interpreting an authority with no host as one with a host. ### Patches Patched in PR [#8146](https://github.com/eclipse/jetty.project/pull/8146) for Jetty version 9.4.47. Patched in PR [#8014](https://github.com/eclipse/jetty.project/pull/8015) for Jetty versions 10.0.10, and 11.0.10 ### Workarounds None. ### For more information If you have any questions or comments about this advisory: * Email us at security@webtide.com.\",\n  \"published\": \"2022-07-07T20:55:34Z\",\n  \"updated\": \"2023-01-29T05:06:01Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-2",
              "RA-5"
            ],
            "cci": [
              "CCI-002605",
              "CCI-001643"
            ],
            "cwe": [
              "CWE-130"
            ],
            "bom-ref": "a2897b13-bdeb-4a6c-802e-abf09fef10a9",
            "ratings": "GITHUB - medium",
            "published": "2023-09-14T16:17:27Z",
            "updated": "2023-11-06T05:01:59Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "### Impact Jetty accepts the '+' character proceeding the content-length value in a HTTP/1 header field. This is more permissive than allowed by the RFC and other servers routinely reject such requests with 400 responses. There is no known exploit scenario, but it is conceivable that request smuggling could result if jetty is used in combination with a server that does not close the connection after sending such a 400 response. ### Workarounds There is no workaround as there is no known exploit scenario. ### Original Report [RFC 9110 Secion 8.6](https://www.rfc-editor.org/rfc/rfc9110#section-8.6) defined the value of Content-Length header should be a string of 0-9 digits. However we found that Jetty accepts \"+\" prefixed Content-Length, which could lead to potential HTTP request smuggling. Payload: ``` POST / HTTP/1.1 Host: a.com Content-Length: +16 Connection: close ​ 0123456789abcdef ``` When sending this payload to Jetty, it can successfully parse and identify the length. When sending this payload to NGINX, Apache HTTPd or other HTTP servers/parsers, they will return 400 bad request. This behavior can lead to HTTP request smuggling and can be leveraged to bypass WAF or IDS.",
          "id": "GHSA-hmr7-m48g-48f6",
          "desc": "Description: ### Impact Jetty accepts the '+' character proceeding the content-length value in a HTTP/1 header field. This is more permissive than allowed by the RFC and other servers routinely reject such requests with 400 responses. There is no known exploit scenario, but it is conceivable that request smuggling could result if jetty is used in combination with a server that does not close the connection after sending such a 400 response. ### Workarounds There is no workaround as there is no known exploit scenario. ### Original Report [RFC 9110 Secion 8.6](https://www.rfc-editor.org/rfc/rfc9110#section-8.6) defined the value of Content-Length header should be a string of 0-9 digits. However we found that Jetty accepts \"+\" prefixed Content-Length, which could lead to potential HTTP request smuggling. Payload: ``` POST / HTTP/1.1 Host: a.com Content-Length: +16 Connection: close ​ 0123456789abcdef ``` When sending this payload to Jetty, it can successfully parse and identify the length. When sending this payload to NGINX, Apache HTTPd or other HTTP servers/parsers, they will return 400 bad request. This behavior can lead to HTTP request smuggling and can be leveraged to bypass WAF or IDS.",
          "impact": 0.5,
          "code": "{\n  \"bom-ref\": \"a2897b13-bdeb-4a6c-802e-abf09fef10a9\",\n  \"id\": \"GHSA-hmr7-m48g-48f6\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"medium\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    130\n  ],\n  \"description\": \"### Impact Jetty accepts the '+' character proceeding the content-length value in a HTTP/1 header field. This is more permissive than allowed by the RFC and other servers routinely reject such requests with 400 responses. There is no known exploit scenario, but it is conceivable that request smuggling could result if jetty is used in combination with a server that does not close the connection after sending such a 400 response. ### Workarounds There is no workaround as there is no known exploit scenario. ### Original Report [RFC 9110 Secion 8.6](https://www.rfc-editor.org/rfc/rfc9110#section-8.6) defined the value of Content-Length header should be a string of 0-9 digits. However we found that Jetty accepts \\\"+\\\" prefixed Content-Length, which could lead to potential HTTP request smuggling. Payload: ``` POST / HTTP/1.1 Host: a.com Content-Length: +16 Connection: close ​ 0123456789abcdef ``` When sending this payload to Jetty, it can successfully parse and identify the length. When sending this payload to NGINX, Apache HTTPd or other HTTP servers/parsers, they will return 400 bad request. This behavior can lead to HTTP request smuggling and can be leveraged to bypass WAF or IDS.\",\n  \"published\": \"2023-09-14T16:17:27Z\",\n  \"updated\": \"2023-11-06T05:01:59Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-2",
              "RA-5"
            ],
            "cci": [
              "CCI-002605",
              "CCI-001643"
            ],
            "cwe": [
              "CWE-378",
              "CWE-379",
              "CWE-552"
            ],
            "bom-ref": "4bb1fb03-b1bb-4ddf-bcf2-d5314c0c6442",
            "ratings": "GITHUB - high",
            "published": "2020-11-04T17:50:24Z",
            "updated": "2023-11-27T23:07:53Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "### Impact On Unix like systems, the system's temporary directory is shared between all users on that system. A collocated user can observe the process of creating a temporary sub directory in the shared temporary directory and race to complete the creation of the temporary subdirectory. If the attacker wins the race then they will have read and write permission to the subdirectory used to unpack web applications, including their WEB-INF/lib jar files and JSP files. If any code is ever executed out of this temporary directory, this can lead to a local privilege escalation vulnerability. Additionally, any user code uses of [WebAppContext::getTempDirectory](https://www.eclipse.org/jetty/javadoc/9.4.31.v20200723/org/eclipse/jetty/webapp/WebAppContext.html#getTempDirectory()) would similarly be vulnerable. Additionally, any user application code using the `ServletContext` attribute for the tempdir will also be impacted. See: https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletContext.html#TEMPDIR For example: ```java import java.io.File; import java.io.IOException; import javax.servlet.ServletContext; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class ExampleServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { File tempDir = (File)getServletContext().getAttribute(ServletContext.TEMPDIR); // Potentially compromised // do something with that temp dir } } ``` Example: The JSP library itself will use the container temp directory for compiling the JSP source into Java classes before executing them. ### CVSSv3.1 Evaluation This vulnerability has been calculated to have a [CVSSv3.1 score of 7.8/10 (AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H&version=3.1) ### Patches Fixes were applied to the 9.4.x branch with: - https://github.com/eclipse/jetty.project/commit/53e0e0e9b25a6309bf24ee3b10984f4145701edb - https://github.com/eclipse/jetty.project/commit/9ad6beb80543b392c91653f6bfce233fc75b9d5f These will be included in releases: 9.4.33, 10.0.0.beta3, 11.0.0.beta3 ### Workarounds A work around is to set a temporary directory, either for the server or the context, to a directory outside of the shared temporary file system. For recent releases, a temporary directory can be created simple by creating a directory called `work` in the ${jetty.base} directory (the parent directory of the `webapps` directory). Alternately the java temporary directory can be set with the System Property `java.io.tmpdir`. A more detailed description of how jetty selects a temporary directory is below. The Jetty search order for finding a temporary directory is as follows: 1. If the [`WebAppContext` has a temp directory specified](https://www.eclipse.org/jetty/javadoc/current/org/eclipse/jetty/webapp/WebAppContext.html#setTempDirectory(java.io.File)), use it. 2. If the `ServletContext` has the `javax.servlet.context.tempdir` attribute set, and if directory exists, use it. 3. If a `${jetty.base}/work` directory exists, use it (since Jetty 9.1) 4. If a `ServletContext` has the `org.eclipse.jetty.webapp.basetempdir` attribute set, and if the directory exists, use it. 5. Use `System.getProperty(\"java.io.tmpdir\")` and use it. Jetty will end traversal at the first successful step. To mitigate this vulnerability the directory must be set to one that is not writable by an attacker. To avoid information leakage, the directory should also not be readable by an attacker. #### Setting a Jetty server temporary directory. Choices 3 and 5 apply to the server level, and will impact all deployed webapps on the server. For choice 3 just create that work directory underneath your `${jetty.base}` and restart Jetty. For choice 5, just specify your own `java.io.tmpdir` when you start the JVM for Jetty. ``` shell [jetty-distribution]$ java -Djava.io.tmpdir=/var/web/work -jar start.jar ``` #### Setting a Context specific temporary directory. The rest of the choices require you to configure the context for that deployed webapp (seen as `${jetty.base}/webapps/<context>.xml`) Example (excluding the DTD which is version specific): ``` xml <Configure class=\"org.eclipse.jetty.webapp.WebAppContext\"> <Set name=\"contextPath\"><Property name=\"foo\"/></Set> <Set name=\"war\">/var/web/webapps/foo.war</Set> <Set name=\"tempDirectory\">/var/web/work/foo</Set> </Configure> ``` ### References - https://github.com/eclipse/jetty.project/issues/5451 - [CWE-378: Creation of Temporary File With Insecure Permissions](https://cwe.mitre.org/data/definitions/378.html) - [CWE-379: Creation of Temporary File in Directory with Insecure Permissions](https://cwe.mitre.org/data/definitions/379.html) - [CodeQL Query PR To Detect Similar Vulnerabilities](https://github.com/github/codeql/pull/4473) ### Similar Vulnerabilities Similar, but not the same. - JUnit 4 - https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp - Google Guava - https://github.com/google/guava/issues/4011 - Apache Ant - https://nvd.nist.gov/vuln/detail/CVE-2020-1945 - JetBrains Kotlin Compiler - https://nvd.nist.gov/vuln/detail/CVE-2020-15824 ### For more information The original report of this vulnerability is below: > On Thu, 15 Oct 2020 at 21:14, Jonathan Leitschuh <jonathan.leitschuh@gmail.com> wrote: > Hi WebTide Security Team, > > I'm a security researcher writing some custom CodeQL queries to find Local Temporary Directory Hijacking Vulnerabilities. One of my queries flagged an issue in Jetty. > > https://lgtm.com/query/5615014766184643449/ > > I've recently been looking into security vulnerabilities involving the temporary directory because on unix-like systems, the system temporary directory is shared between all users. > There exists a race condition between the deletion of the temporary file and the creation of the directory. > > ```java > // ensure file will always be unique by appending random digits > tmpDir = File.createTempFile(temp, \".dir\", parent); // Attacker knows the full path of the file that will be generated > // delete the file that was created > tmpDir.delete(); // Attacker sees file is deleted and begins a race to create their own directory before Jetty. > // and make a directory of the same name > // SECURITY VULNERABILITY: Race Condition! - Attacker beats Jetty and now owns this directory > tmpDir.mkdirs(); > ``` > > https://github.com/eclipse/jetty.project/blob/1b59672b7f668b8a421690154b98b4b2b03f254b/jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java#L511-L518 > > In several cases the `parent` parameter will not be the system temporary directory. However, there is one case where it will be, as the last fallback. > > > https://github.com/eclipse/jetty.project/blob/1b59672b7f668b8a421690154b98b4b2b03f254b/jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java#L467-L468 > > If any code is ever executed out of this temporary directory, this can lead to a local privilege escalation vulnerability. > > Would your team be willing to open a GitHub security advisory to continue the discussion and disclosure there? https://github.com/eclipse/jetty.project/security/advisories > > **This vulnerability disclosure follows Google's [90-day vulnerability disclosure policy](https://www.google.com/about/appsecurity/) (I'm not an employee of Google, I just like their policy). Full disclosure will occur either at the end of the 90-day deadline or whenever a patch is made widely available, whichever occurs first.** > > Cheers, > Jonathan Leitschuh",
          "id": "GHSA-g3wg-6mcf-8jj6",
          "desc": "Description: ### Impact On Unix like systems, the system's temporary directory is shared between all users on that system. A collocated user can observe the process of creating a temporary sub directory in the shared temporary directory and race to complete the creation of the temporary subdirectory. If the attacker wins the race then they will have read and write permission to the subdirectory used to unpack web applications, including their WEB-INF/lib jar files and JSP files. If any code is ever executed out of this temporary directory, this can lead to a local privilege escalation vulnerability. Additionally, any user code uses of [WebAppContext::getTempDirectory](https://www.eclipse.org/jetty/javadoc/9.4.31.v20200723/org/eclipse/jetty/webapp/WebAppContext.html#getTempDirectory()) would similarly be vulnerable. Additionally, any user application code using the `ServletContext` attribute for the tempdir will also be impacted. See: https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletContext.html#TEMPDIR For example: ```java import java.io.File; import java.io.IOException; import javax.servlet.ServletContext; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class ExampleServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { File tempDir = (File)getServletContext().getAttribute(ServletContext.TEMPDIR); // Potentially compromised // do something with that temp dir } } ``` Example: The JSP library itself will use the container temp directory for compiling the JSP source into Java classes before executing them. ### CVSSv3.1 Evaluation This vulnerability has been calculated to have a [CVSSv3.1 score of 7.8/10 (AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H&version=3.1) ### Patches Fixes were applied to the 9.4.x branch with: - https://github.com/eclipse/jetty.project/commit/53e0e0e9b25a6309bf24ee3b10984f4145701edb - https://github.com/eclipse/jetty.project/commit/9ad6beb80543b392c91653f6bfce233fc75b9d5f These will be included in releases: 9.4.33, 10.0.0.beta3, 11.0.0.beta3 ### Workarounds A work around is to set a temporary directory, either for the server or the context, to a directory outside of the shared temporary file system. For recent releases, a temporary directory can be created simple by creating a directory called `work` in the ${jetty.base} directory (the parent directory of the `webapps` directory). Alternately the java temporary directory can be set with the System Property `java.io.tmpdir`. A more detailed description of how jetty selects a temporary directory is below. The Jetty search order for finding a temporary directory is as follows: 1. If the [`WebAppContext` has a temp directory specified](https://www.eclipse.org/jetty/javadoc/current/org/eclipse/jetty/webapp/WebAppContext.html#setTempDirectory(java.io.File)), use it. 2. If the `ServletContext` has the `javax.servlet.context.tempdir` attribute set, and if directory exists, use it. 3. If a `${jetty.base}/work` directory exists, use it (since Jetty 9.1) 4. If a `ServletContext` has the `org.eclipse.jetty.webapp.basetempdir` attribute set, and if the directory exists, use it. 5. Use `System.getProperty(\"java.io.tmpdir\")` and use it. Jetty will end traversal at the first successful step. To mitigate this vulnerability the directory must be set to one that is not writable by an attacker. To avoid information leakage, the directory should also not be readable by an attacker. #### Setting a Jetty server temporary directory. Choices 3 and 5 apply to the server level, and will impact all deployed webapps on the server. For choice 3 just create that work directory underneath your `${jetty.base}` and restart Jetty. For choice 5, just specify your own `java.io.tmpdir` when you start the JVM for Jetty. ``` shell [jetty-distribution]$ java -Djava.io.tmpdir=/var/web/work -jar start.jar ``` #### Setting a Context specific temporary directory. The rest of the choices require you to configure the context for that deployed webapp (seen as `${jetty.base}/webapps/<context>.xml`) Example (excluding the DTD which is version specific): ``` xml <Configure class=\"org.eclipse.jetty.webapp.WebAppContext\"> <Set name=\"contextPath\"><Property name=\"foo\"/></Set> <Set name=\"war\">/var/web/webapps/foo.war</Set> <Set name=\"tempDirectory\">/var/web/work/foo</Set> </Configure> ``` ### References - https://github.com/eclipse/jetty.project/issues/5451 - [CWE-378: Creation of Temporary File With Insecure Permissions](https://cwe.mitre.org/data/definitions/378.html) - [CWE-379: Creation of Temporary File in Directory with Insecure Permissions](https://cwe.mitre.org/data/definitions/379.html) - [CodeQL Query PR To Detect Similar Vulnerabilities](https://github.com/github/codeql/pull/4473) ### Similar Vulnerabilities Similar, but not the same. - JUnit 4 - https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp - Google Guava - https://github.com/google/guava/issues/4011 - Apache Ant - https://nvd.nist.gov/vuln/detail/CVE-2020-1945 - JetBrains Kotlin Compiler - https://nvd.nist.gov/vuln/detail/CVE-2020-15824 ### For more information The original report of this vulnerability is below: > On Thu, 15 Oct 2020 at 21:14, Jonathan Leitschuh <jonathan.leitschuh@gmail.com> wrote: > Hi WebTide Security Team, > > I'm a security researcher writing some custom CodeQL queries to find Local Temporary Directory Hijacking Vulnerabilities. One of my queries flagged an issue in Jetty. > > https://lgtm.com/query/5615014766184643449/ > > I've recently been looking into security vulnerabilities involving the temporary directory because on unix-like systems, the system temporary directory is shared between all users. > There exists a race condition between the deletion of the temporary file and the creation of the directory. > > ```java > // ensure file will always be unique by appending random digits > tmpDir = File.createTempFile(temp, \".dir\", parent); // Attacker knows the full path of the file that will be generated > // delete the file that was created > tmpDir.delete(); // Attacker sees file is deleted and begins a race to create their own directory before Jetty. > // and make a directory of the same name > // SECURITY VULNERABILITY: Race Condition! - Attacker beats Jetty and now owns this directory > tmpDir.mkdirs(); > ``` > > https://github.com/eclipse/jetty.project/blob/1b59672b7f668b8a421690154b98b4b2b03f254b/jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java#L511-L518 > > In several cases the `parent` parameter will not be the system temporary directory. However, there is one case where it will be, as the last fallback. > > > https://github.com/eclipse/jetty.project/blob/1b59672b7f668b8a421690154b98b4b2b03f254b/jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java#L467-L468 > > If any code is ever executed out of this temporary directory, this can lead to a local privilege escalation vulnerability. > > Would your team be willing to open a GitHub security advisory to continue the discussion and disclosure there? https://github.com/eclipse/jetty.project/security/advisories > > **This vulnerability disclosure follows Google's [90-day vulnerability disclosure policy](https://www.google.com/about/appsecurity/) (I'm not an employee of Google, I just like their policy). Full disclosure will occur either at the end of the 90-day deadline or whenever a patch is made widely available, whichever occurs first.** > > Cheers, > Jonathan Leitschuh",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"4bb1fb03-b1bb-4ddf-bcf2-d5314c0c6442\",\n  \"id\": \"GHSA-g3wg-6mcf-8jj6\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    378,\n    379,\n    552\n  ],\n  \"description\": \"### Impact On Unix like systems, the system's temporary directory is shared between all users on that system. A collocated user can observe the process of creating a temporary sub directory in the shared temporary directory and race to complete the creation of the temporary subdirectory. If the attacker wins the race then they will have read and write permission to the subdirectory used to unpack web applications, including their WEB-INF/lib jar files and JSP files. If any code is ever executed out of this temporary directory, this can lead to a local privilege escalation vulnerability. Additionally, any user code uses of [WebAppContext::getTempDirectory](https://www.eclipse.org/jetty/javadoc/9.4.31.v20200723/org/eclipse/jetty/webapp/WebAppContext.html#getTempDirectory()) would similarly be vulnerable. Additionally, any user application code using the `ServletContext` attribute for the tempdir will also be impacted. See: https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletContext.html#TEMPDIR For example: ```java import java.io.File; import java.io.IOException; import javax.servlet.ServletContext; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class ExampleServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { File tempDir = (File)getServletContext().getAttribute(ServletContext.TEMPDIR); // Potentially compromised // do something with that temp dir } } ``` Example: The JSP library itself will use the container temp directory for compiling the JSP source into Java classes before executing them. ### CVSSv3.1 Evaluation This vulnerability has been calculated to have a [CVSSv3.1 score of 7.8/10 (AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H&version=3.1) ### Patches Fixes were applied to the 9.4.x branch with: - https://github.com/eclipse/jetty.project/commit/53e0e0e9b25a6309bf24ee3b10984f4145701edb - https://github.com/eclipse/jetty.project/commit/9ad6beb80543b392c91653f6bfce233fc75b9d5f These will be included in releases: 9.4.33, 10.0.0.beta3, 11.0.0.beta3 ### Workarounds A work around is to set a temporary directory, either for the server or the context, to a directory outside of the shared temporary file system. For recent releases, a temporary directory can be created simple by creating a directory called `work` in the ${jetty.base} directory (the parent directory of the `webapps` directory). Alternately the java temporary directory can be set with the System Property `java.io.tmpdir`. A more detailed description of how jetty selects a temporary directory is below. The Jetty search order for finding a temporary directory is as follows: 1. If the [`WebAppContext` has a temp directory specified](https://www.eclipse.org/jetty/javadoc/current/org/eclipse/jetty/webapp/WebAppContext.html#setTempDirectory(java.io.File)), use it. 2. If the `ServletContext` has the `javax.servlet.context.tempdir` attribute set, and if directory exists, use it. 3. If a `${jetty.base}/work` directory exists, use it (since Jetty 9.1) 4. If a `ServletContext` has the `org.eclipse.jetty.webapp.basetempdir` attribute set, and if the directory exists, use it. 5. Use `System.getProperty(\\\"java.io.tmpdir\\\")` and use it. Jetty will end traversal at the first successful step. To mitigate this vulnerability the directory must be set to one that is not writable by an attacker. To avoid information leakage, the directory should also not be readable by an attacker. #### Setting a Jetty server temporary directory. Choices 3 and 5 apply to the server level, and will impact all deployed webapps on the server. For choice 3 just create that work directory underneath your `${jetty.base}` and restart Jetty. For choice 5, just specify your own `java.io.tmpdir` when you start the JVM for Jetty. ``` shell [jetty-distribution]$ java -Djava.io.tmpdir=/var/web/work -jar start.jar ``` #### Setting a Context specific temporary directory. The rest of the choices require you to configure the context for that deployed webapp (seen as `${jetty.base}/webapps/<context>.xml`) Example (excluding the DTD which is version specific): ``` xml <Configure class=\\\"org.eclipse.jetty.webapp.WebAppContext\\\"> <Set name=\\\"contextPath\\\"><Property name=\\\"foo\\\"/></Set> <Set name=\\\"war\\\">/var/web/webapps/foo.war</Set> <Set name=\\\"tempDirectory\\\">/var/web/work/foo</Set> </Configure> ``` ### References - https://github.com/eclipse/jetty.project/issues/5451 - [CWE-378: Creation of Temporary File With Insecure Permissions](https://cwe.mitre.org/data/definitions/378.html) - [CWE-379: Creation of Temporary File in Directory with Insecure Permissions](https://cwe.mitre.org/data/definitions/379.html) - [CodeQL Query PR To Detect Similar Vulnerabilities](https://github.com/github/codeql/pull/4473) ### Similar Vulnerabilities Similar, but not the same. - JUnit 4 - https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp - Google Guava - https://github.com/google/guava/issues/4011 - Apache Ant - https://nvd.nist.gov/vuln/detail/CVE-2020-1945 - JetBrains Kotlin Compiler - https://nvd.nist.gov/vuln/detail/CVE-2020-15824 ### For more information The original report of this vulnerability is below: > On Thu, 15 Oct 2020 at 21:14, Jonathan Leitschuh <jonathan.leitschuh@gmail.com> wrote: > Hi WebTide Security Team, > > I'm a security researcher writing some custom CodeQL queries to find Local Temporary Directory Hijacking Vulnerabilities. One of my queries flagged an issue in Jetty. > > https://lgtm.com/query/5615014766184643449/ > > I've recently been looking into security vulnerabilities involving the temporary directory because on unix-like systems, the system temporary directory is shared between all users. > There exists a race condition between the deletion of the temporary file and the creation of the directory. > > ```java > // ensure file will always be unique by appending random digits > tmpDir = File.createTempFile(temp, \\\".dir\\\", parent); // Attacker knows the full path of the file that will be generated > // delete the file that was created > tmpDir.delete(); // Attacker sees file is deleted and begins a race to create their own directory before Jetty. > // and make a directory of the same name > // SECURITY VULNERABILITY: Race Condition! - Attacker beats Jetty and now owns this directory > tmpDir.mkdirs(); > ``` > > https://github.com/eclipse/jetty.project/blob/1b59672b7f668b8a421690154b98b4b2b03f254b/jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java#L511-L518 > > In several cases the `parent` parameter will not be the system temporary directory. However, there is one case where it will be, as the last fallback. > > > https://github.com/eclipse/jetty.project/blob/1b59672b7f668b8a421690154b98b4b2b03f254b/jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java#L467-L468 > > If any code is ever executed out of this temporary directory, this can lead to a local privilege escalation vulnerability. > > Would your team be willing to open a GitHub security advisory to continue the discussion and disclosure there? https://github.com/eclipse/jetty.project/security/advisories > > **This vulnerability disclosure follows Google's [90-day vulnerability disclosure policy](https://www.google.com/about/appsecurity/) (I'm not an employee of Google, I just like their policy). Full disclosure will occur either at the end of the 90-day deadline or whenever a patch is made widely available, whichever occurs first.** > > Cheers, > Jonathan Leitschuh\",\n  \"published\": \"2020-11-04T17:50:24Z\",\n  \"updated\": \"2023-11-27T23:07:53Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-611"
            ],
            "bom-ref": "76910119-ee18-4144-855b-b2fdab20e33c",
            "ratings": "GITHUB - low",
            "published": "2023-07-10T21:52:39Z",
            "updated": "2023-09-05T22:39:32Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "### From the reporter > `XmlParser` is vulnerable to XML external entity (XXE) vulnerability. > XmlParser is being used when parsing Jetty’s xml configuration files. An attacker might exploit > this vulnerability in order to achieve SSRF or cause a denial of service. > One possible scenario is importing a (remote) malicious WAR into a Jetty’s server, while the > WAR includes a malicious web.xml. ### Impact There are no circumstances in a normally deployed Jetty server where potentially hostile XML is given to the XmlParser class without the attacker already having arbitrary access to the server. I.e. in order to exploit `XmlParser` the attacker would already have the ability to deploy and execute hostile code. Specifically, Jetty has no protection against malicious web application and potentially hostile web applications should only be run on an isolated virtualisation. Thus this is not considered a vulnerability of the Jetty server itself, as any such usage of the jetty XmlParser is equally vulnerable as a direct usage of the JVM supplied SAX parser. No CVE will be allocated to this advisory. However, any direct usage of the `XmlParser` class by an application may be vulnerable. The impact would greatly depend on how the application uses `XmlParser`, but it could be a denial of service due to large entity expansion, or possibly the revealing local files if the XML results are accessible remotely. ### Patches Ability to configure the SAXParserFactory to fit the needs of your particular XML parser implementation have been merged as part of PR #10067 ### Workarounds Don't use `XmlParser` to parse data from users.",
          "id": "GHSA-58qw-p7qm-5rvh",
          "desc": "Description: ### From the reporter > `XmlParser` is vulnerable to XML external entity (XXE) vulnerability. > XmlParser is being used when parsing Jetty’s xml configuration files. An attacker might exploit > this vulnerability in order to achieve SSRF or cause a denial of service. > One possible scenario is importing a (remote) malicious WAR into a Jetty’s server, while the > WAR includes a malicious web.xml. ### Impact There are no circumstances in a normally deployed Jetty server where potentially hostile XML is given to the XmlParser class without the attacker already having arbitrary access to the server. I.e. in order to exploit `XmlParser` the attacker would already have the ability to deploy and execute hostile code. Specifically, Jetty has no protection against malicious web application and potentially hostile web applications should only be run on an isolated virtualisation. Thus this is not considered a vulnerability of the Jetty server itself, as any such usage of the jetty XmlParser is equally vulnerable as a direct usage of the JVM supplied SAX parser. No CVE will be allocated to this advisory. However, any direct usage of the `XmlParser` class by an application may be vulnerable. The impact would greatly depend on how the application uses `XmlParser`, but it could be a denial of service due to large entity expansion, or possibly the revealing local files if the XML results are accessible remotely. ### Patches Ability to configure the SAXParserFactory to fit the needs of your particular XML parser implementation have been merged as part of PR #10067 ### Workarounds Don't use `XmlParser` to parse data from users.",
          "impact": 0.3,
          "code": "{\n  \"bom-ref\": \"76910119-ee18-4144-855b-b2fdab20e33c\",\n  \"id\": \"GHSA-58qw-p7qm-5rvh\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"low\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    611\n  ],\n  \"description\": \"### From the reporter > `XmlParser` is vulnerable to XML external entity (XXE) vulnerability. > XmlParser is being used when parsing Jetty’s xml configuration files. An attacker might exploit > this vulnerability in order to achieve SSRF or cause a denial of service. > One possible scenario is importing a (remote) malicious WAR into a Jetty’s server, while the > WAR includes a malicious web.xml. ### Impact There are no circumstances in a normally deployed Jetty server where potentially hostile XML is given to the XmlParser class without the attacker already having arbitrary access to the server. I.e. in order to exploit `XmlParser` the attacker would already have the ability to deploy and execute hostile code. Specifically, Jetty has no protection against malicious web application and potentially hostile web applications should only be run on an isolated virtualisation. Thus this is not considered a vulnerability of the Jetty server itself, as any such usage of the jetty XmlParser is equally vulnerable as a direct usage of the JVM supplied SAX parser. No CVE will be allocated to this advisory. However, any direct usage of the `XmlParser` class by an application may be vulnerable. The impact would greatly depend on how the application uses `XmlParser`, but it could be a denial of service due to large entity expansion, or possibly the revealing local files if the XML results are accessible remotely. ### Patches Ability to configure the SAXParserFactory to fit the needs of your particular XML parser implementation have been merged as part of PR #10067 ### Workarounds Don't use `XmlParser` to parse data from users.\",\n  \"published\": \"2023-07-10T21:52:39Z\",\n  \"updated\": \"2023-09-05T22:39:32Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SC-8"
            ],
            "cci": [
              "CCI-002418"
            ],
            "cwe": [
              "CWE-200"
            ],
            "bom-ref": "d8add710-4eed-448d-b198-ecff8ffe86ea",
            "ratings": "GITHUB - medium",
            "published": "2021-06-10T15:43:22Z",
            "updated": "2023-02-01T05:05:51Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "Requests to the `ConcatServlet` and `WelcomeFilter` are able to access protected resources within the `WEB-INF` directory. For example a request to the `ConcatServlet` with a URI of `/concat?/%2557EB-INF/web.xml` can retrieve the web.xml file. This can reveal sensitive information regarding the implementation of a web application. This occurs because both `ConcatServlet` and `WelcomeFilter` decode the supplied path to verify it is not within the `WEB-INF` or `META-INF` directories. It then uses this decoded path to call `RequestDispatcher` which will also do decoding of the path. This double decoding allows paths with a doubly encoded `WEB-INF` to bypass this security check. ### Impact This affects all versions of `ConcatServlet` and `WelcomeFilter` in versions before 9.4.41, 10.0.3 and 11.0.3. ### Workarounds If you cannot update to the latest version of Jetty, you can instead deploy your own version of the [`ConcatServlet`](https://github.com/eclipse/jetty.project/blob/4204526d2fdad355e233f6bf18a44bfe028ee00b/jetty-servlets/src/main/java/org/eclipse/jetty/servlets/ConcatServlet.java) and/or the [`WelcomeFilter`](https://github.com/eclipse/jetty.project/blob/4204526d2fdad355e233f6bf18a44bfe028ee00b/jetty-servlets/src/main/java/org/eclipse/jetty/servlets/WelcomeFilter.java) by using the code from the latest version of Jetty.",
          "id": "GHSA-gwcr-j4wh-j3cq",
          "desc": "Description: Requests to the `ConcatServlet` and `WelcomeFilter` are able to access protected resources within the `WEB-INF` directory. For example a request to the `ConcatServlet` with a URI of `/concat?/%2557EB-INF/web.xml` can retrieve the web.xml file. This can reveal sensitive information regarding the implementation of a web application. This occurs because both `ConcatServlet` and `WelcomeFilter` decode the supplied path to verify it is not within the `WEB-INF` or `META-INF` directories. It then uses this decoded path to call `RequestDispatcher` which will also do decoding of the path. This double decoding allows paths with a doubly encoded `WEB-INF` to bypass this security check. ### Impact This affects all versions of `ConcatServlet` and `WelcomeFilter` in versions before 9.4.41, 10.0.3 and 11.0.3. ### Workarounds If you cannot update to the latest version of Jetty, you can instead deploy your own version of the [`ConcatServlet`](https://github.com/eclipse/jetty.project/blob/4204526d2fdad355e233f6bf18a44bfe028ee00b/jetty-servlets/src/main/java/org/eclipse/jetty/servlets/ConcatServlet.java) and/or the [`WelcomeFilter`](https://github.com/eclipse/jetty.project/blob/4204526d2fdad355e233f6bf18a44bfe028ee00b/jetty-servlets/src/main/java/org/eclipse/jetty/servlets/WelcomeFilter.java) by using the code from the latest version of Jetty.",
          "impact": 0.5,
          "code": "{\n  \"bom-ref\": \"d8add710-4eed-448d-b198-ecff8ffe86ea\",\n  \"id\": \"GHSA-gwcr-j4wh-j3cq\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"medium\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    200\n  ],\n  \"description\": \"Requests to the `ConcatServlet` and `WelcomeFilter` are able to access protected resources within the `WEB-INF` directory. For example a request to the `ConcatServlet` with a URI of `/concat?/%2557EB-INF/web.xml` can retrieve the web.xml file. This can reveal sensitive information regarding the implementation of a web application. This occurs because both `ConcatServlet` and `WelcomeFilter` decode the supplied path to verify it is not within the `WEB-INF` or `META-INF` directories. It then uses this decoded path to call `RequestDispatcher` which will also do decoding of the path. This double decoding allows paths with a doubly encoded `WEB-INF` to bypass this security check. ### Impact This affects all versions of `ConcatServlet` and `WelcomeFilter` in versions before 9.4.41, 10.0.3 and 11.0.3. ### Workarounds If you cannot update to the latest version of Jetty, you can instead deploy your own version of the [`ConcatServlet`](https://github.com/eclipse/jetty.project/blob/4204526d2fdad355e233f6bf18a44bfe028ee00b/jetty-servlets/src/main/java/org/eclipse/jetty/servlets/ConcatServlet.java) and/or the [`WelcomeFilter`](https://github.com/eclipse/jetty.project/blob/4204526d2fdad355e233f6bf18a44bfe028ee00b/jetty-servlets/src/main/java/org/eclipse/jetty/servlets/WelcomeFilter.java) by using the code from the latest version of Jetty.\",\n  \"published\": \"2021-06-10T15:43:22Z\",\n  \"updated\": \"2023-02-01T05:05:51Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-2",
              "RA-5"
            ],
            "cci": [
              "CCI-002605",
              "CCI-001643"
            ],
            "cwe": [
              "CWE-149"
            ],
            "bom-ref": "123b8eaf-5572-4945-975d-21ed3c2f101d",
            "ratings": "GITHUB - low",
            "published": "2023-09-14T16:16:00Z",
            "updated": "2023-11-06T05:01:59Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "If a user sends a request to a `org.eclipse.jetty.servlets.CGI` Servlet for a binary with a space in its name, the servlet will escape the command by wrapping it in quotation marks. This wrapped command, plus an optional command prefix, will then be executed through a call to Runtime.exec. If the original binary name provided by the user contains a quotation mark followed by a space, the resulting command line will contain multiple tokens instead of one. For example, if a request references a binary called file” name “here, the escaping algorithm will generate the command line string “file” name “here”, which will invoke the binary named file, not the one that the user requested. ```java if (execCmd.length() > 0 && execCmd.charAt(0) != '\"' && execCmd.contains(\" \")) execCmd = \"\\\"\" + execCmd + \"\\\"\"; ``` ### Exploit Scenario The cgi-bin directory contains a binary named exec and a subdirectory named exec” commands, which contains a file called bin1. The user sends to the CGI servlet a request for the filename exec” commands/bin1. This request will pass the file existence check on lines 194 through 205. The servlet will add quotation marks around this filename, resulting in the command line string “exec” commands/bin1”. When this string is passed to Runtime.exec, instead of executing the bin1 binary, the server will execute the exec binary with the argument commands/file1”. In addition to being incorrect, this behavior may bypass alias checks, and it may cause other unintended behaviors if a command prefix is configured. If the useFullPath configuration setting is off, the command need not pass the existence check. The attack would not rely on a binary and subdirectory having similar names, and the attack will succeed on a much wider variety of directory structures. ### Impact Users of the `org.eclipse.jetty.servlets.CGI` Servlet with a very specific command structure may have the wrong command executed. ### Patches No patch. In Jetty 9.x, 10.x, and 11.x the `org.eclipse.jetty.servlets.CGI` has been deprecated. In Jetty 12 (all environments) the `org.eclipse.jetty.servlets.CGI` has been entirely removed. ### Workarounds The `org.eclipse.jetty.servlets.CGI` Servlet should not be used. Fast CGI support is available instead. ### References * https://github.com/eclipse/jetty.project/pull/9516 * https://github.com/eclipse/jetty.project/pull/9889 * https://github.com/eclipse/jetty.project/pull/9888",
          "id": "GHSA-3gh6-v5v9-6v9j",
          "desc": "Description: If a user sends a request to a `org.eclipse.jetty.servlets.CGI` Servlet for a binary with a space in its name, the servlet will escape the command by wrapping it in quotation marks. This wrapped command, plus an optional command prefix, will then be executed through a call to Runtime.exec. If the original binary name provided by the user contains a quotation mark followed by a space, the resulting command line will contain multiple tokens instead of one. For example, if a request references a binary called file” name “here, the escaping algorithm will generate the command line string “file” name “here”, which will invoke the binary named file, not the one that the user requested. ```java if (execCmd.length() > 0 && execCmd.charAt(0) != '\"' && execCmd.contains(\" \")) execCmd = \"\\\"\" + execCmd + \"\\\"\"; ``` ### Exploit Scenario The cgi-bin directory contains a binary named exec and a subdirectory named exec” commands, which contains a file called bin1. The user sends to the CGI servlet a request for the filename exec” commands/bin1. This request will pass the file existence check on lines 194 through 205. The servlet will add quotation marks around this filename, resulting in the command line string “exec” commands/bin1”. When this string is passed to Runtime.exec, instead of executing the bin1 binary, the server will execute the exec binary with the argument commands/file1”. In addition to being incorrect, this behavior may bypass alias checks, and it may cause other unintended behaviors if a command prefix is configured. If the useFullPath configuration setting is off, the command need not pass the existence check. The attack would not rely on a binary and subdirectory having similar names, and the attack will succeed on a much wider variety of directory structures. ### Impact Users of the `org.eclipse.jetty.servlets.CGI` Servlet with a very specific command structure may have the wrong command executed. ### Patches No patch. In Jetty 9.x, 10.x, and 11.x the `org.eclipse.jetty.servlets.CGI` has been deprecated. In Jetty 12 (all environments) the `org.eclipse.jetty.servlets.CGI` has been entirely removed. ### Workarounds The `org.eclipse.jetty.servlets.CGI` Servlet should not be used. Fast CGI support is available instead. ### References * https://github.com/eclipse/jetty.project/pull/9516 * https://github.com/eclipse/jetty.project/pull/9889 * https://github.com/eclipse/jetty.project/pull/9888",
          "impact": 0.3,
          "code": "{\n  \"bom-ref\": \"123b8eaf-5572-4945-975d-21ed3c2f101d\",\n  \"id\": \"GHSA-3gh6-v5v9-6v9j\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"low\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    149\n  ],\n  \"description\": \"If a user sends a request to a `org.eclipse.jetty.servlets.CGI` Servlet for a binary with a space in its name, the servlet will escape the command by wrapping it in quotation marks. This wrapped command, plus an optional command prefix, will then be executed through a call to Runtime.exec. If the original binary name provided by the user contains a quotation mark followed by a space, the resulting command line will contain multiple tokens instead of one. For example, if a request references a binary called file” name “here, the escaping algorithm will generate the command line string “file” name “here”, which will invoke the binary named file, not the one that the user requested. ```java if (execCmd.length() > 0 && execCmd.charAt(0) != '\\\"' && execCmd.contains(\\\" \\\")) execCmd = \\\"\\\\\\\"\\\" + execCmd + \\\"\\\\\\\"\\\"; ``` ### Exploit Scenario The cgi-bin directory contains a binary named exec and a subdirectory named exec” commands, which contains a file called bin1. The user sends to the CGI servlet a request for the filename exec” commands/bin1. This request will pass the file existence check on lines 194 through 205. The servlet will add quotation marks around this filename, resulting in the command line string “exec” commands/bin1”. When this string is passed to Runtime.exec, instead of executing the bin1 binary, the server will execute the exec binary with the argument commands/file1”. In addition to being incorrect, this behavior may bypass alias checks, and it may cause other unintended behaviors if a command prefix is configured. If the useFullPath configuration setting is off, the command need not pass the existence check. The attack would not rely on a binary and subdirectory having similar names, and the attack will succeed on a much wider variety of directory structures. ### Impact Users of the `org.eclipse.jetty.servlets.CGI` Servlet with a very specific command structure may have the wrong command executed. ### Patches No patch. In Jetty 9.x, 10.x, and 11.x the `org.eclipse.jetty.servlets.CGI` has been deprecated. In Jetty 12 (all environments) the `org.eclipse.jetty.servlets.CGI` has been entirely removed. ### Workarounds The `org.eclipse.jetty.servlets.CGI` Servlet should not be used. Fast CGI support is available instead. ### References * https://github.com/eclipse/jetty.project/pull/9516 * https://github.com/eclipse/jetty.project/pull/9889 * https://github.com/eclipse/jetty.project/pull/9888\",\n  \"published\": \"2023-09-14T16:16:00Z\",\n  \"updated\": \"2023-11-06T05:01:59Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SC-8",
              "AC-3"
            ],
            "cci": [
              "CCI-002418",
              "CCI-000213"
            ],
            "cwe": [
              "CWE-200",
              "CWE-732"
            ],
            "bom-ref": "499117ae-d134-4505-8674-ed498531e7a9",
            "ratings": "GITHUB - medium",
            "published": "2020-10-12T17:33:00Z",
            "updated": "2023-02-01T05:04:50Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "### Vulnerability The JUnit4 test rule [TemporaryFolder](https://junit.org/junit4/javadoc/4.13/org/junit/rules/TemporaryFolder.html) contains a local information disclosure vulnerability. Example of vulnerable code: ```java public static class HasTempFolder { @Rule public TemporaryFolder folder = new TemporaryFolder(); @Test public void testUsingTempFolder() throws IOException { folder.getRoot(); // Previous file permissions: `drwxr-xr-x`; After fix:`drwx------` File createdFile= folder.newFile(\"myfile.txt\"); // unchanged/irrelevant file permissions File createdFolder= folder.newFolder(\"subfolder\"); // unchanged/irrelevant file permissions // ... } } ``` ### Impact On Unix like systems, the system's temporary directory is shared between all users on that system. Because of this, when files and directories are written into this directory they are, by default, readable by other users on that same system. This vulnerability **does not** allow other users to overwrite the contents of these directories or files. This is purely an information disclosure vulnerability. When analyzing the impact of this vulnerability, here are the important questions to ask: 1. Do the JUnit tests write sensitive information, like API keys or passwords, into the temporary folder? - If yes, this vulnerability impacts you, but only if you also answer 'yes' to question 2. - If no, this vulnerability does not impact you. 2. Do the JUnit tests ever execute in an environment where the OS has other untrusted users. _This may apply in CI/CD environments but normally won't be 'yes' for personal developer machines._ - If yes, and you answered 'yes' to question 1, this vulnerability impacts you. - If no, this vulnerability does not impact you. ### Patches Because certain JDK file system APIs were only added in JDK 1.7, this this fix is dependent upon the version of the JDK you are using. - Java 1.7 and higher users: this vulnerability is fixed in 4.13.1. - Java 1.6 and lower users: **no patch is available, you must use the workaround below.** ### Workarounds If you are unable to patch, or are stuck running on Java 1.6, specifying the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability. ### References - [CWE-200: Exposure of Sensitive Information to an Unauthorized Actor](https://cwe.mitre.org/data/definitions/200.html) - Fix commit https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae #### Similar Vulnerabilities - Google Guava - https://github.com/google/guava/issues/4011 - Apache Ant - https://nvd.nist.gov/vuln/detail/CVE-2020-1945 - JetBrains Kotlin Compiler - https://nvd.nist.gov/vuln/detail/CVE-2020-15824 ### For more information If you have any questions or comments about this advisory, please pen an issue in [junit-team/junit4](https://github.com/junit-team/junit4/issues).",
          "id": "GHSA-269g-pwp5-87pp",
          "desc": "Description: ### Vulnerability The JUnit4 test rule [TemporaryFolder](https://junit.org/junit4/javadoc/4.13/org/junit/rules/TemporaryFolder.html) contains a local information disclosure vulnerability. Example of vulnerable code: ```java public static class HasTempFolder { @Rule public TemporaryFolder folder = new TemporaryFolder(); @Test public void testUsingTempFolder() throws IOException { folder.getRoot(); // Previous file permissions: `drwxr-xr-x`; After fix:`drwx------` File createdFile= folder.newFile(\"myfile.txt\"); // unchanged/irrelevant file permissions File createdFolder= folder.newFolder(\"subfolder\"); // unchanged/irrelevant file permissions // ... } } ``` ### Impact On Unix like systems, the system's temporary directory is shared between all users on that system. Because of this, when files and directories are written into this directory they are, by default, readable by other users on that same system. This vulnerability **does not** allow other users to overwrite the contents of these directories or files. This is purely an information disclosure vulnerability. When analyzing the impact of this vulnerability, here are the important questions to ask: 1. Do the JUnit tests write sensitive information, like API keys or passwords, into the temporary folder? - If yes, this vulnerability impacts you, but only if you also answer 'yes' to question 2. - If no, this vulnerability does not impact you. 2. Do the JUnit tests ever execute in an environment where the OS has other untrusted users. _This may apply in CI/CD environments but normally won't be 'yes' for personal developer machines._ - If yes, and you answered 'yes' to question 1, this vulnerability impacts you. - If no, this vulnerability does not impact you. ### Patches Because certain JDK file system APIs were only added in JDK 1.7, this this fix is dependent upon the version of the JDK you are using. - Java 1.7 and higher users: this vulnerability is fixed in 4.13.1. - Java 1.6 and lower users: **no patch is available, you must use the workaround below.** ### Workarounds If you are unable to patch, or are stuck running on Java 1.6, specifying the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability. ### References - [CWE-200: Exposure of Sensitive Information to an Unauthorized Actor](https://cwe.mitre.org/data/definitions/200.html) - Fix commit https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae #### Similar Vulnerabilities - Google Guava - https://github.com/google/guava/issues/4011 - Apache Ant - https://nvd.nist.gov/vuln/detail/CVE-2020-1945 - JetBrains Kotlin Compiler - https://nvd.nist.gov/vuln/detail/CVE-2020-15824 ### For more information If you have any questions or comments about this advisory, please pen an issue in [junit-team/junit4](https://github.com/junit-team/junit4/issues).",
          "impact": 0.5,
          "code": "{\n  \"bom-ref\": \"499117ae-d134-4505-8674-ed498531e7a9\",\n  \"id\": \"GHSA-269g-pwp5-87pp\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"medium\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    200,\n    732\n  ],\n  \"description\": \"### Vulnerability The JUnit4 test rule [TemporaryFolder](https://junit.org/junit4/javadoc/4.13/org/junit/rules/TemporaryFolder.html) contains a local information disclosure vulnerability. Example of vulnerable code: ```java public static class HasTempFolder { @Rule public TemporaryFolder folder = new TemporaryFolder(); @Test public void testUsingTempFolder() throws IOException { folder.getRoot(); // Previous file permissions: `drwxr-xr-x`; After fix:`drwx------` File createdFile= folder.newFile(\\\"myfile.txt\\\"); // unchanged/irrelevant file permissions File createdFolder= folder.newFolder(\\\"subfolder\\\"); // unchanged/irrelevant file permissions // ... } } ``` ### Impact On Unix like systems, the system's temporary directory is shared between all users on that system. Because of this, when files and directories are written into this directory they are, by default, readable by other users on that same system. This vulnerability **does not** allow other users to overwrite the contents of these directories or files. This is purely an information disclosure vulnerability. When analyzing the impact of this vulnerability, here are the important questions to ask: 1. Do the JUnit tests write sensitive information, like API keys or passwords, into the temporary folder? - If yes, this vulnerability impacts you, but only if you also answer 'yes' to question 2. - If no, this vulnerability does not impact you. 2. Do the JUnit tests ever execute in an environment where the OS has other untrusted users. _This may apply in CI/CD environments but normally won't be 'yes' for personal developer machines._ - If yes, and you answered 'yes' to question 1, this vulnerability impacts you. - If no, this vulnerability does not impact you. ### Patches Because certain JDK file system APIs were only added in JDK 1.7, this this fix is dependent upon the version of the JDK you are using. - Java 1.7 and higher users: this vulnerability is fixed in 4.13.1. - Java 1.6 and lower users: **no patch is available, you must use the workaround below.** ### Workarounds If you are unable to patch, or are stuck running on Java 1.6, specifying the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability. ### References - [CWE-200: Exposure of Sensitive Information to an Unauthorized Actor](https://cwe.mitre.org/data/definitions/200.html) - Fix commit https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae #### Similar Vulnerabilities - Google Guava - https://github.com/google/guava/issues/4011 - Apache Ant - https://nvd.nist.gov/vuln/detail/CVE-2020-1945 - JetBrains Kotlin Compiler - https://nvd.nist.gov/vuln/detail/CVE-2020-15824 ### For more information If you have any questions or comments about this advisory, please pen an issue in [junit-team/junit4](https://github.com/junit-team/junit4/issues).\",\n  \"published\": \"2020-10-12T17:33:00Z\",\n  \"updated\": \"2023-02-01T05:04:50Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-2",
              "RA-5"
            ],
            "cci": [
              "CCI-002605",
              "CCI-001643"
            ],
            "cwe": [],
            "bom-ref": "4ad3464b-09c7-40fa-ab51-754f3f196cd4",
            "ratings": "INTERNAL - high"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "INTERNAL"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "INT-f70z-tbpp-4o5d",
          "id": "INT-f70z-tbpp-4o5d",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"4ad3464b-09c7-40fa-ab51-754f3f196cd4\",\n  \"id\": \"INT-f70z-tbpp-4o5d\",\n  \"source\": {\n    \"name\": \"INTERNAL\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"INTERNAL\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-2",
              "RA-5"
            ],
            "cci": [
              "CCI-002605",
              "CCI-001643"
            ],
            "cwe": [],
            "bom-ref": "0cdbb69e-0ac6-4efd-ad09-2f8ead5b2aad",
            "ratings": "INTERNAL - low"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "INTERNAL"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "testing",
          "id": "INT-63e3-49kp-blqt",
          "desc": "Description: testing",
          "impact": 0.3,
          "code": "{\n  \"bom-ref\": \"0cdbb69e-0ac6-4efd-ad09-2f8ead5b2aad\",\n  \"id\": \"INT-63e3-49kp-blqt\",\n  \"source\": {\n    \"name\": \"INTERNAL\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"INTERNAL\"\n      },\n      \"severity\": \"low\",\n      \"method\": \"other\"\n    }\n  ],\n  \"description\": \"testing\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-89"
            ],
            "bom-ref": "1f182b73-afb8-424c-8e08-533a0f702076",
            "ratings": "GITHUB - high",
            "published": "2022-02-09T22:57:29Z",
            "updated": "2024-06-27T16:39:59Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "A flaw was found in hibernate-core in versions prior to 5.3.20.Final and in 5.4.0.Final up to and including 5.4.23.Final. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SQL comments of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks. The highest threat from this vulnerability is to data confidentiality and integrity.",
          "id": "GHSA-j8jw-g6fq-mp7h",
          "desc": "Description: A flaw was found in hibernate-core in versions prior to 5.3.20.Final and in 5.4.0.Final up to and including 5.4.23.Final. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SQL comments of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks. The highest threat from this vulnerability is to data confidentiality and integrity.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"1f182b73-afb8-424c-8e08-533a0f702076\",\n  \"id\": \"GHSA-j8jw-g6fq-mp7h\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    89\n  ],\n  \"description\": \"A flaw was found in hibernate-core in versions prior to 5.3.20.Final and in 5.4.0.Final up to and including 5.4.23.Final. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SQL comments of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks. The highest threat from this vulnerability is to data confidentiality and integrity.\",\n  \"published\": \"2022-02-09T22:57:29Z\",\n  \"updated\": \"2024-06-27T16:39:59Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-89"
            ],
            "bom-ref": "8ba20df5-3877-4825-a8f2-b52e2d2f86d8",
            "ratings": "GITHUB - medium",
            "published": "2022-02-10T23:05:04Z",
            "updated": "2024-06-27T18:05:49Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "A flaw was found in Hibernate ORM in versions before 5.3.18, 5.4.18 and 5.5.0.Beta1. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SELECT or GROUP BY parts of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks.",
          "id": "GHSA-8grg-q944-cch5",
          "desc": "Description: A flaw was found in Hibernate ORM in versions before 5.3.18, 5.4.18 and 5.5.0.Beta1. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SELECT or GROUP BY parts of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks.",
          "impact": 0.5,
          "code": "{\n  \"bom-ref\": \"8ba20df5-3877-4825-a8f2-b52e2d2f86d8\",\n  \"id\": \"GHSA-8grg-q944-cch5\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"medium\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    89\n  ],\n  \"description\": \"A flaw was found in Hibernate ORM in versions before 5.3.18, 5.4.18 and 5.5.0.Beta1. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SELECT or GROUP BY parts of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks.\",\n  \"published\": \"2022-02-10T23:05:04Z\",\n  \"updated\": \"2024-06-27T18:05:49Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-611"
            ],
            "bom-ref": "55ebe39e-12f6-4360-aeba-9913ef7efb68",
            "ratings": "GITHUB - critical",
            "published": "2020-06-05T16:13:36Z",
            "updated": "2023-01-27T05:02:30Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "dom4j before 2.1.3 allows external DTDs and External Entities by default, which might enable XXE attacks. However, there is popular external documentation from OWASP showing how to enable the safe, non-default behavior in any application that uses dom4j. Note: This advisory applies to `dom4j:dom4j` version 1.x legacy artifacts. To resolve this a change to the latest version of `org.dom4j:dom4j` is recommended.",
          "id": "GHSA-hwj3-m3p6-hj38",
          "desc": "Description: dom4j before 2.1.3 allows external DTDs and External Entities by default, which might enable XXE attacks. However, there is popular external documentation from OWASP showing how to enable the safe, non-default behavior in any application that uses dom4j. Note: This advisory applies to `dom4j:dom4j` version 1.x legacy artifacts. To resolve this a change to the latest version of `org.dom4j:dom4j` is recommended.",
          "impact": 1,
          "code": "{\n  \"bom-ref\": \"55ebe39e-12f6-4360-aeba-9913ef7efb68\",\n  \"id\": \"GHSA-hwj3-m3p6-hj38\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"critical\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    611\n  ],\n  \"description\": \"dom4j before 2.1.3 allows external DTDs and External Entities by default, which might enable XXE attacks. However, there is popular external documentation from OWASP showing how to enable the safe, non-default behavior in any application that uses dom4j. Note: This advisory applies to `dom4j:dom4j` version 1.x legacy artifacts. To resolve this a change to the latest version of `org.dom4j:dom4j` is recommended.\",\n  \"published\": \"2020-06-05T16:13:36Z\",\n  \"updated\": \"2023-01-27T05:02:30Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-79"
            ],
            "bom-ref": "8c0002e8-9326-40f7-9209-51020755ff02",
            "ratings": "GITHUB - medium",
            "published": "2021-06-03T23:40:23Z",
            "updated": "2023-02-01T05:05:30Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "Apache HttpClient versions prior to version 4.5.13 and 5.0.3 can misinterpret malformed authority component in request URIs passed to the library as java.net.URI object and pick the wrong target host for request execution.",
          "id": "GHSA-7r82-7xv7-xcpj",
          "desc": "Description: Apache HttpClient versions prior to version 4.5.13 and 5.0.3 can misinterpret malformed authority component in request URIs passed to the library as java.net.URI object and pick the wrong target host for request execution.",
          "impact": 0.5,
          "code": "{\n  \"bom-ref\": \"8c0002e8-9326-40f7-9209-51020755ff02\",\n  \"id\": \"GHSA-7r82-7xv7-xcpj\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"medium\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    79\n  ],\n  \"description\": \"Apache HttpClient versions prior to version 4.5.13 and 5.0.3 can misinterpret malformed authority component in request URIs passed to the library as java.net.URI object and pick the wrong target host for request execution.\",\n  \"published\": \"2021-06-03T23:40:23Z\",\n  \"updated\": \"2023-02-01T05:05:30Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-611"
            ],
            "bom-ref": "7b0674fc-e326-47d0-b34b-b5bfb523784b",
            "ratings": "GITHUB - critical",
            "published": "2022-03-05T00:00:45Z",
            "updated": "2023-01-27T05:02:46Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "The XMLChangeLogSAXParser() function in Liquibase prior to version 4.8.0 contains an issue that may lead to to Improper Restriction of XML External Entity Reference.",
          "id": "GHSA-jvfv-hrrc-6q72",
          "desc": "Description: The XMLChangeLogSAXParser() function in Liquibase prior to version 4.8.0 contains an issue that may lead to to Improper Restriction of XML External Entity Reference.",
          "impact": 1,
          "code": "{\n  \"bom-ref\": \"7b0674fc-e326-47d0-b34b-b5bfb523784b\",\n  \"id\": \"GHSA-jvfv-hrrc-6q72\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"critical\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    611\n  ],\n  \"description\": \"The XMLChangeLogSAXParser() function in Liquibase prior to version 4.8.0 contains an issue that may lead to to Improper Restriction of XML External Entity Reference.\",\n  \"published\": \"2022-03-05T00:00:45Z\",\n  \"updated\": \"2023-01-27T05:02:46Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-400",
              "CWE-410"
            ],
            "bom-ref": "c3fdf61d-7886-423b-8a29-b6ab6790c127",
            "ratings": "GITHUB - high",
            "published": "2022-07-07T20:55:40Z",
            "updated": "2023-07-24T19:39:20Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "### Description Invalid HTTP/2 requests (for example, invalid URIs) are incorrectly handled by writing a blocking error response directly from the selector thread. If the client manages to exhaust the HTTP/2 flow control window, or TCP congest the connection, the selector thread will be blocked trying to write the error response. If this is repeated for all the selector threads, the server becomes unresponsive, causing the denial of service. ### Impact A malicious client may render the server unresponsive. ### Patches The fix is available in Jetty versions 9.4.47. 10.0.10, 11.0.10. ### Workarounds No workaround available within Jetty itself. One possible workaround is to filter the requests before sending them to Jetty (for example in a proxy) ### For more information If you have any questions or comments about this advisory: * Email us at security@webtide.com.",
          "id": "GHSA-wgmr-mf83-7x4j",
          "desc": "Description: ### Description Invalid HTTP/2 requests (for example, invalid URIs) are incorrectly handled by writing a blocking error response directly from the selector thread. If the client manages to exhaust the HTTP/2 flow control window, or TCP congest the connection, the selector thread will be blocked trying to write the error response. If this is repeated for all the selector threads, the server becomes unresponsive, causing the denial of service. ### Impact A malicious client may render the server unresponsive. ### Patches The fix is available in Jetty versions 9.4.47. 10.0.10, 11.0.10. ### Workarounds No workaround available within Jetty itself. One possible workaround is to filter the requests before sending them to Jetty (for example in a proxy) ### For more information If you have any questions or comments about this advisory: * Email us at security@webtide.com.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"c3fdf61d-7886-423b-8a29-b6ab6790c127\",\n  \"id\": \"GHSA-wgmr-mf83-7x4j\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    400,\n    410\n  ],\n  \"description\": \"### Description Invalid HTTP/2 requests (for example, invalid URIs) are incorrectly handled by writing a blocking error response directly from the selector thread. If the client manages to exhaust the HTTP/2 flow control window, or TCP congest the connection, the selector thread will be blocked trying to write the error response. If this is repeated for all the selector threads, the server becomes unresponsive, causing the denial of service. ### Impact A malicious client may render the server unresponsive. ### Patches The fix is available in Jetty versions 9.4.47. 10.0.10, 11.0.10. ### Workarounds No workaround available within Jetty itself. One possible workaround is to filter the requests before sending them to Jetty (for example in a proxy) ### For more information If you have any questions or comments about this advisory: * Email us at security@webtide.com.\",\n  \"published\": \"2022-07-07T20:55:40Z\",\n  \"updated\": \"2023-07-24T19:39:20Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-400"
            ],
            "bom-ref": "affa7af3-427f-4223-8028-d9ac45e80e08",
            "ratings": "GITHUB - medium",
            "published": "2023-10-10T21:28:24Z",
            "updated": "2024-06-21T21:34:00Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "## HTTP/2 Rapid reset attack The HTTP/2 protocol allows clients to indicate to the server that a previous stream should be canceled by sending a RST_STREAM frame. The protocol does not require the client and server to coordinate the cancellation in any way, the client may do it unilaterally. The client may also assume that the cancellation will take effect immediately when the server receives the RST_STREAM frame, before any other data from that TCP connection is processed. Abuse of this feature is called a Rapid Reset attack because it relies on the ability for an endpoint to send a RST_STREAM frame immediately after sending a request frame, which makes the other endpoint start working and then rapidly resets the request. The request is canceled, but leaves the HTTP/2 connection open. The HTTP/2 Rapid Reset attack built on this capability is simple: The client opens a large number of streams at once as in the standard HTTP/2 attack, but rather than waiting for a response to each request stream from the server or proxy, the client cancels each request immediately. The ability to reset streams immediately allows each connection to have an indefinite number of requests in flight. By explicitly canceling the requests, the attacker never exceeds the limit on the number of concurrent open streams. The number of in-flight requests is no longer dependent on the round-trip time (RTT), but only on the available network bandwidth. In a typical HTTP/2 server implementation, the server will still have to do significant amounts of work for canceled requests, such as allocating new stream data structures, parsing the query and doing header decompression, and mapping the URL to a resource. For reverse proxy implementations, the request may be proxied to the backend server before the RST_STREAM frame is processed. The client on the other hand paid almost no costs for sending the requests. This creates an exploitable cost asymmetry between the server and the client. Multiple software artifacts implementing HTTP/2 are affected. This advisory was originally ingested from the `swift-nio-http2` repo advisory and their original conent follows. ## swift-nio-http2 specific advisory swift-nio-http2 is vulnerable to a denial-of-service vulnerability in which a malicious client can create and then reset a large number of HTTP/2 streams in a short period of time. This causes swift-nio-http2 to commit to a large amount of expensive work which it then throws away, including creating entirely new `Channel`s to serve the traffic. This can easily overwhelm an `EventLoop` and prevent it from making forward progress. swift-nio-http2 1.28 contains a remediation for this issue that applies reset counter using a sliding window. This constrains the number of stream resets that may occur in a given window of time. Clients violating this limit will have their connections torn down. This allows clients to continue to cancel streams for legitimate reasons, while constraining malicious actors.",
          "id": "GHSA-qppj-fm5r-hxr3",
          "desc": "Description: ## HTTP/2 Rapid reset attack The HTTP/2 protocol allows clients to indicate to the server that a previous stream should be canceled by sending a RST_STREAM frame. The protocol does not require the client and server to coordinate the cancellation in any way, the client may do it unilaterally. The client may also assume that the cancellation will take effect immediately when the server receives the RST_STREAM frame, before any other data from that TCP connection is processed. Abuse of this feature is called a Rapid Reset attack because it relies on the ability for an endpoint to send a RST_STREAM frame immediately after sending a request frame, which makes the other endpoint start working and then rapidly resets the request. The request is canceled, but leaves the HTTP/2 connection open. The HTTP/2 Rapid Reset attack built on this capability is simple: The client opens a large number of streams at once as in the standard HTTP/2 attack, but rather than waiting for a response to each request stream from the server or proxy, the client cancels each request immediately. The ability to reset streams immediately allows each connection to have an indefinite number of requests in flight. By explicitly canceling the requests, the attacker never exceeds the limit on the number of concurrent open streams. The number of in-flight requests is no longer dependent on the round-trip time (RTT), but only on the available network bandwidth. In a typical HTTP/2 server implementation, the server will still have to do significant amounts of work for canceled requests, such as allocating new stream data structures, parsing the query and doing header decompression, and mapping the URL to a resource. For reverse proxy implementations, the request may be proxied to the backend server before the RST_STREAM frame is processed. The client on the other hand paid almost no costs for sending the requests. This creates an exploitable cost asymmetry between the server and the client. Multiple software artifacts implementing HTTP/2 are affected. This advisory was originally ingested from the `swift-nio-http2` repo advisory and their original conent follows. ## swift-nio-http2 specific advisory swift-nio-http2 is vulnerable to a denial-of-service vulnerability in which a malicious client can create and then reset a large number of HTTP/2 streams in a short period of time. This causes swift-nio-http2 to commit to a large amount of expensive work which it then throws away, including creating entirely new `Channel`s to serve the traffic. This can easily overwhelm an `EventLoop` and prevent it from making forward progress. swift-nio-http2 1.28 contains a remediation for this issue that applies reset counter using a sliding window. This constrains the number of stream resets that may occur in a given window of time. Clients violating this limit will have their connections torn down. This allows clients to continue to cancel streams for legitimate reasons, while constraining malicious actors.",
          "impact": 0.5,
          "code": "{\n  \"bom-ref\": \"affa7af3-427f-4223-8028-d9ac45e80e08\",\n  \"id\": \"GHSA-qppj-fm5r-hxr3\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"medium\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    400\n  ],\n  \"description\": \"## HTTP/2 Rapid reset attack The HTTP/2 protocol allows clients to indicate to the server that a previous stream should be canceled by sending a RST_STREAM frame. The protocol does not require the client and server to coordinate the cancellation in any way, the client may do it unilaterally. The client may also assume that the cancellation will take effect immediately when the server receives the RST_STREAM frame, before any other data from that TCP connection is processed. Abuse of this feature is called a Rapid Reset attack because it relies on the ability for an endpoint to send a RST_STREAM frame immediately after sending a request frame, which makes the other endpoint start working and then rapidly resets the request. The request is canceled, but leaves the HTTP/2 connection open. The HTTP/2 Rapid Reset attack built on this capability is simple: The client opens a large number of streams at once as in the standard HTTP/2 attack, but rather than waiting for a response to each request stream from the server or proxy, the client cancels each request immediately. The ability to reset streams immediately allows each connection to have an indefinite number of requests in flight. By explicitly canceling the requests, the attacker never exceeds the limit on the number of concurrent open streams. The number of in-flight requests is no longer dependent on the round-trip time (RTT), but only on the available network bandwidth. In a typical HTTP/2 server implementation, the server will still have to do significant amounts of work for canceled requests, such as allocating new stream data structures, parsing the query and doing header decompression, and mapping the URL to a resource. For reverse proxy implementations, the request may be proxied to the backend server before the RST_STREAM frame is processed. The client on the other hand paid almost no costs for sending the requests. This creates an exploitable cost asymmetry between the server and the client. Multiple software artifacts implementing HTTP/2 are affected. This advisory was originally ingested from the `swift-nio-http2` repo advisory and their original conent follows. ## swift-nio-http2 specific advisory swift-nio-http2 is vulnerable to a denial-of-service vulnerability in which a malicious client can create and then reset a large number of HTTP/2 streams in a short period of time. This causes swift-nio-http2 to commit to a large amount of expensive work which it then throws away, including creating entirely new `Channel`s to serve the traffic. This can easily overwhelm an `EventLoop` and prevent it from making forward progress. swift-nio-http2 1.28 contains a remediation for this issue that applies reset counter using a sliding window. This constrains the number of stream resets that may occur in a given window of time. Clients violating this limit will have their connections torn down. This allows clients to continue to cancel streams for legitimate reasons, while constraining malicious actors.\",\n  \"published\": \"2023-10-10T21:28:24Z\",\n  \"updated\": \"2024-06-21T21:34:00Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-400"
            ],
            "bom-ref": "bc8ec43b-7cba-4167-9a9d-901fcb443ac8",
            "ratings": "GITHUB - high",
            "published": "2024-02-26T20:13:46Z",
            "updated": "2024-05-02T18:38:19Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "### Impact If an HTTP/2 connection gets TCP congested, when an idle timeout occurs the HTTP/2 session is marked as closed, and then a GOAWAY frame is queued to be written. However it is not written because the connection is TCP congested. When another idle timeout period elapses, it is then supposed to hard close the connection, but it delegates to the HTTP/2 session which reports that it has already been closed so it does not attempt to hard close the connection. This leaves the connection in ESTABLISHED state (i.e. not closed), TCP congested, and idle. An attacker can cause many connections to end up in this state, and the server may run out of file descriptors, eventually causing the server to stop accepting new connections from valid clients. The client may also be impacted (if the server does not read causing a TCP congestion), but the issue is more severe for servers. ### Patches Patched versions: * 9.4.54 * 10.0.20 * 11.0.20 * 12.0.6 ### Workarounds Disable HTTP/2 and HTTP/3 support until you can upgrade to a patched version of Jetty. HTTP/1.x is not affected. ### References * https://github.com/jetty/jetty.project/issues/11256.",
          "id": "GHSA-rggv-cv7r-mw98",
          "desc": "Description: ### Impact If an HTTP/2 connection gets TCP congested, when an idle timeout occurs the HTTP/2 session is marked as closed, and then a GOAWAY frame is queued to be written. However it is not written because the connection is TCP congested. When another idle timeout period elapses, it is then supposed to hard close the connection, but it delegates to the HTTP/2 session which reports that it has already been closed so it does not attempt to hard close the connection. This leaves the connection in ESTABLISHED state (i.e. not closed), TCP congested, and idle. An attacker can cause many connections to end up in this state, and the server may run out of file descriptors, eventually causing the server to stop accepting new connections from valid clients. The client may also be impacted (if the server does not read causing a TCP congestion), but the issue is more severe for servers. ### Patches Patched versions: * 9.4.54 * 10.0.20 * 11.0.20 * 12.0.6 ### Workarounds Disable HTTP/2 and HTTP/3 support until you can upgrade to a patched version of Jetty. HTTP/1.x is not affected. ### References * https://github.com/jetty/jetty.project/issues/11256.",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"bc8ec43b-7cba-4167-9a9d-901fcb443ac8\",\n  \"id\": \"GHSA-rggv-cv7r-mw98\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    400\n  ],\n  \"description\": \"### Impact If an HTTP/2 connection gets TCP congested, when an idle timeout occurs the HTTP/2 session is marked as closed, and then a GOAWAY frame is queued to be written. However it is not written because the connection is TCP congested. When another idle timeout period elapses, it is then supposed to hard close the connection, but it delegates to the HTTP/2 session which reports that it has already been closed so it does not attempt to hard close the connection. This leaves the connection in ESTABLISHED state (i.e. not closed), TCP congested, and idle. An attacker can cause many connections to end up in this state, and the server may run out of file descriptors, eventually causing the server to stop accepting new connections from valid clients. The client may also be impacted (if the server does not read causing a TCP congestion), but the issue is more severe for servers. ### Patches Patched versions: * 9.4.54 * 10.0.20 * 11.0.20 * 12.0.6 ### Workarounds Disable HTTP/2 and HTTP/3 support until you can upgrade to a patched version of Jetty. HTTP/1.x is not affected. ### References * https://github.com/jetty/jetty.project/issues/11256.\",\n  \"published\": \"2024-02-26T20:13:46Z\",\n  \"updated\": \"2024-05-02T18:38:19Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-190"
            ],
            "bom-ref": "c8bd5d7e-e9be-459c-b6e2-05de86a00bb9",
            "ratings": "GITHUB - high",
            "published": "2023-10-10T21:16:23Z",
            "updated": "2024-06-21T21:33:57Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "An integer overflow in `MetaDataBuilder.checkSize` allows for HTTP/2 HPACK header values to exceed their size limit. In `MetaDataBuilder.java`, the following code determines if a header name or value exceeds the size limit, and throws an exception if the limit is exceeded: ```java 291 public void checkSize(int length, boolean huffman) throws SessionException 292 { 293 // Apply a huffman fudge factor 294 if (huffman) 295 length = (length * 4) / 3; 296 if ((_size + length) > _maxSize) 297 throw new HpackException.SessionException(\"Header too large %d > %d\", _size + length, _maxSize); 298 } ``` However, when length is very large and huffman is true, the multiplication by 4 in line 295 will overflow, and length will become negative. (_size+length) will now be negative, and the check on line 296 will not be triggered. Furthermore, `MetaDataBuilder.checkSize` allows for user-entered HPACK header value sizes to be negative, potentially leading to a very large buffer allocation later on when the user-entered size is multiplied by 2. In `MetaDataBuilder.java`, the following code determines if a header name or value exceeds the size limit, and throws an exception if the limit is exceeded: ```java public void checkSize(int length, boolean huffman) throws SessionException { // Apply a huffman fudge factor if (huffman) length = (length * 4) / 3; if ((_size + length) > _maxSize) throw new HpackException.SessionException(\"Header too large %d > %d\", _size + length, _maxSize); } ``` However, no exception is thrown in the case of a negative size. Later, in `Huffman.decode`, the user-entered length is multiplied by 2 before allocating a buffer: ```java public static String decode(ByteBuffer buffer, int length) throws HpackException.CompressionException { Utf8StringBuilder utf8 = new Utf8StringBuilder(length * 2); // ... ``` This means that if a user provides a negative length value (or, more precisely, a length value which, when multiplied by the 4/3 fudge factor, is negative), and this length value is a very large positive number when multiplied by 2, then the user can cause a very large buffer to be allocated on the server. ### Exploit Scenario 1 An attacker repeatedly sends HTTP messages with the HPACK header 0x00ffffffffff02. Each time this header is decoded: + `HpackDecode.decode` will determine that a Huffman-coded value of length 805306494 needs to be decoded. + `MetaDataBuilder.checkSize` will approve this length. + Huffman.decode will allocate a 1.6 GB string array. + Huffman.decode will have a buffer overflow error, and the array will be deallocated the next time garbage collection happens. (Note: this can be delayed by appending valid huffman-coded characters to the end of the header.) Depending on the timing of garbage collection, the number of threads, and the amount of memory available on the server, this may cause the server to run out of memory. ### Exploit Scenario 2 An attacker repeatedly sends HTTP messages with the HPACK header 0x00ff8080ffff0b. Each time this header is decoded: + HpackDecode.decode will determine that a Huffman-coded value of length -1073758081 needs to be decoded + MetaDataBuilder.checkSize will approve this length + The number will be multiplied by 2 to get 2147451134, and Huffman.decode will allocate a 2.1 GB string array + Huffman.decode will have a buffer overflow error, and the array will be deallocated the next time garbage collection happens (Note that this deallocation can be delayed by adding valid Huffman-coded characters to the end of the header) Depending on the timing of garbage collection, the number of threads, and the amount of memory available on the server, this may cause the server to run out of memory. ### Impact Users of HTTP/2 can be impacted by a remote denial of service attack. ### Patches Fixed in Jetty 10.0.16 and Jetty 11.0.16 Fixed in Jetty 9.4.53 Jetty 12.x is unaffected. ### Workarounds No workarounds possible, only patched versions of Jetty. ### References * https://github.com/eclipse/jetty.project/pull/9634",
          "id": "GHSA-wgh7-54f2-x98r",
          "desc": "Description: An integer overflow in `MetaDataBuilder.checkSize` allows for HTTP/2 HPACK header values to exceed their size limit. In `MetaDataBuilder.java`, the following code determines if a header name or value exceeds the size limit, and throws an exception if the limit is exceeded: ```java 291 public void checkSize(int length, boolean huffman) throws SessionException 292 { 293 // Apply a huffman fudge factor 294 if (huffman) 295 length = (length * 4) / 3; 296 if ((_size + length) > _maxSize) 297 throw new HpackException.SessionException(\"Header too large %d > %d\", _size + length, _maxSize); 298 } ``` However, when length is very large and huffman is true, the multiplication by 4 in line 295 will overflow, and length will become negative. (_size+length) will now be negative, and the check on line 296 will not be triggered. Furthermore, `MetaDataBuilder.checkSize` allows for user-entered HPACK header value sizes to be negative, potentially leading to a very large buffer allocation later on when the user-entered size is multiplied by 2. In `MetaDataBuilder.java`, the following code determines if a header name or value exceeds the size limit, and throws an exception if the limit is exceeded: ```java public void checkSize(int length, boolean huffman) throws SessionException { // Apply a huffman fudge factor if (huffman) length = (length * 4) / 3; if ((_size + length) > _maxSize) throw new HpackException.SessionException(\"Header too large %d > %d\", _size + length, _maxSize); } ``` However, no exception is thrown in the case of a negative size. Later, in `Huffman.decode`, the user-entered length is multiplied by 2 before allocating a buffer: ```java public static String decode(ByteBuffer buffer, int length) throws HpackException.CompressionException { Utf8StringBuilder utf8 = new Utf8StringBuilder(length * 2); // ... ``` This means that if a user provides a negative length value (or, more precisely, a length value which, when multiplied by the 4/3 fudge factor, is negative), and this length value is a very large positive number when multiplied by 2, then the user can cause a very large buffer to be allocated on the server. ### Exploit Scenario 1 An attacker repeatedly sends HTTP messages with the HPACK header 0x00ffffffffff02. Each time this header is decoded: + `HpackDecode.decode` will determine that a Huffman-coded value of length 805306494 needs to be decoded. + `MetaDataBuilder.checkSize` will approve this length. + Huffman.decode will allocate a 1.6 GB string array. + Huffman.decode will have a buffer overflow error, and the array will be deallocated the next time garbage collection happens. (Note: this can be delayed by appending valid huffman-coded characters to the end of the header.) Depending on the timing of garbage collection, the number of threads, and the amount of memory available on the server, this may cause the server to run out of memory. ### Exploit Scenario 2 An attacker repeatedly sends HTTP messages with the HPACK header 0x00ff8080ffff0b. Each time this header is decoded: + HpackDecode.decode will determine that a Huffman-coded value of length -1073758081 needs to be decoded + MetaDataBuilder.checkSize will approve this length + The number will be multiplied by 2 to get 2147451134, and Huffman.decode will allocate a 2.1 GB string array + Huffman.decode will have a buffer overflow error, and the array will be deallocated the next time garbage collection happens (Note that this deallocation can be delayed by adding valid Huffman-coded characters to the end of the header) Depending on the timing of garbage collection, the number of threads, and the amount of memory available on the server, this may cause the server to run out of memory. ### Impact Users of HTTP/2 can be impacted by a remote denial of service attack. ### Patches Fixed in Jetty 10.0.16 and Jetty 11.0.16 Fixed in Jetty 9.4.53 Jetty 12.x is unaffected. ### Workarounds No workarounds possible, only patched versions of Jetty. ### References * https://github.com/eclipse/jetty.project/pull/9634",
          "impact": 0.7,
          "code": "{\n  \"bom-ref\": \"c8bd5d7e-e9be-459c-b6e2-05de86a00bb9\",\n  \"id\": \"GHSA-wgh7-54f2-x98r\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"high\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    190\n  ],\n  \"description\": \"An integer overflow in `MetaDataBuilder.checkSize` allows for HTTP/2 HPACK header values to exceed their size limit. In `MetaDataBuilder.java`, the following code determines if a header name or value exceeds the size limit, and throws an exception if the limit is exceeded: ```java 291 public void checkSize(int length, boolean huffman) throws SessionException 292 { 293 // Apply a huffman fudge factor 294 if (huffman) 295 length = (length * 4) / 3; 296 if ((_size + length) > _maxSize) 297 throw new HpackException.SessionException(\\\"Header too large %d > %d\\\", _size + length, _maxSize); 298 } ``` However, when length is very large and huffman is true, the multiplication by 4 in line 295 will overflow, and length will become negative. (_size+length) will now be negative, and the check on line 296 will not be triggered. Furthermore, `MetaDataBuilder.checkSize` allows for user-entered HPACK header value sizes to be negative, potentially leading to a very large buffer allocation later on when the user-entered size is multiplied by 2. In `MetaDataBuilder.java`, the following code determines if a header name or value exceeds the size limit, and throws an exception if the limit is exceeded: ```java public void checkSize(int length, boolean huffman) throws SessionException { // Apply a huffman fudge factor if (huffman) length = (length * 4) / 3; if ((_size + length) > _maxSize) throw new HpackException.SessionException(\\\"Header too large %d > %d\\\", _size + length, _maxSize); } ``` However, no exception is thrown in the case of a negative size. Later, in `Huffman.decode`, the user-entered length is multiplied by 2 before allocating a buffer: ```java public static String decode(ByteBuffer buffer, int length) throws HpackException.CompressionException { Utf8StringBuilder utf8 = new Utf8StringBuilder(length * 2); // ... ``` This means that if a user provides a negative length value (or, more precisely, a length value which, when multiplied by the 4/3 fudge factor, is negative), and this length value is a very large positive number when multiplied by 2, then the user can cause a very large buffer to be allocated on the server. ### Exploit Scenario 1 An attacker repeatedly sends HTTP messages with the HPACK header 0x00ffffffffff02. Each time this header is decoded: + `HpackDecode.decode` will determine that a Huffman-coded value of length 805306494 needs to be decoded. + `MetaDataBuilder.checkSize` will approve this length. + Huffman.decode will allocate a 1.6 GB string array. + Huffman.decode will have a buffer overflow error, and the array will be deallocated the next time garbage collection happens. (Note: this can be delayed by appending valid huffman-coded characters to the end of the header.) Depending on the timing of garbage collection, the number of threads, and the amount of memory available on the server, this may cause the server to run out of memory. ### Exploit Scenario 2 An attacker repeatedly sends HTTP messages with the HPACK header 0x00ff8080ffff0b. Each time this header is decoded: + HpackDecode.decode will determine that a Huffman-coded value of length -1073758081 needs to be decoded + MetaDataBuilder.checkSize will approve this length + The number will be multiplied by 2 to get 2147451134, and Huffman.decode will allocate a 2.1 GB string array + Huffman.decode will have a buffer overflow error, and the array will be deallocated the next time garbage collection happens (Note that this deallocation can be delayed by adding valid Huffman-coded characters to the end of the header) Depending on the timing of garbage collection, the number of threads, and the amount of memory available on the server, this may cause the server to run out of memory. ### Impact Users of HTTP/2 can be impacted by a remote denial of service attack. ### Patches Fixed in Jetty 10.0.16 and Jetty 11.0.16 Fixed in Jetty 9.4.53 Jetty 12.x is unaffected. ### Workarounds No workarounds possible, only patched versions of Jetty. ### References * https://github.com/eclipse/jetty.project/pull/9634\",\n  \"published\": \"2023-10-10T21:16:23Z\",\n  \"updated\": \"2024-06-21T21:33:57Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-2",
              "RA-5"
            ],
            "cci": [
              "CCI-002605",
              "CCI-001643"
            ],
            "cwe": [
              "CWE-295"
            ],
            "bom-ref": "f987bc98-65f5-402b-8b39-7e8e3e730ebe",
            "ratings": "GITHUB - medium",
            "published": "2018-10-18T18:06:08Z",
            "updated": "2023-01-09T05:03:38Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "Pivotal Spring AMQP, 1.x versions prior to 1.7.10 and 2.x versions prior to 2.0.6, expose a man-in-the-middle vulnerability due to lack of hostname validation. A malicious user that has the ability to intercept traffic would be able to view data in transit.",
          "id": "GHSA-w4g2-9hj6-5472",
          "desc": "Description: Pivotal Spring AMQP, 1.x versions prior to 1.7.10 and 2.x versions prior to 2.0.6, expose a man-in-the-middle vulnerability due to lack of hostname validation. A malicious user that has the ability to intercept traffic would be able to view data in transit.",
          "impact": 0.5,
          "code": "{\n  \"bom-ref\": \"f987bc98-65f5-402b-8b39-7e8e3e730ebe\",\n  \"id\": \"GHSA-w4g2-9hj6-5472\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"medium\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    295\n  ],\n  \"description\": \"Pivotal Spring AMQP, 1.x versions prior to 1.7.10 and 2.x versions prior to 2.0.6, expose a man-in-the-middle vulnerability due to lack of hostname validation. A malicious user that has the ability to intercept traffic would be able to view data in transit.\",\n  \"published\": \"2018-10-18T18:06:08Z\",\n  \"updated\": \"2023-01-09T05:03:38Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-400"
            ],
            "bom-ref": "5acc2eee-8433-4a66-b9c5-3dcc7be5b29a",
            "ratings": "GITHUB - medium",
            "published": "2023-10-24T01:49:09Z",
            "updated": "2023-11-05T05:04:23Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "### Summary `maxBodyLebgth` was not used when receiving Message objects. Attackers could just send a very large Message causing a memory overflow and triggering an OOM Error. ### PoC #### RbbitMQ * Use RabbitMQ 3.11.16 as MQ and specify Message Body size 512M (here it only needs to be larger than the Consumer memory) * Start RabbitMQ #### Producer * Build a String of length 256M and send it to Consumer ``` package org.springframework.amqp.helloworld; import org.springframework.amqp.core.AmqpTemplate; import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.AnnotationConfigApplicationContext; public class Producer { public static void main(String[] args) { ApplicationContext context = new AnnotationConfigApplicationContext(HelloWorldConfiguration.class); AmqpTemplate amqpTemplate = context.getBean(AmqpTemplate.class); String s = \"A\"; for(int i=0;i<28;++i){ s = s + s; System.out.println(i); } amqpTemplate.convertAndSend(s); System.out.println(\"Send Finish\"); } } ``` #### Consumer * First set the heap memory size to 128M * Read the message sent by the Producer from the MQ and print the length ``` package org.springframework.amqp.helloworld; import org.springframework.amqp.core.AmqpTemplate; import org.springframework.amqp.core.Message; import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.AnnotationConfigApplicationContext; public class Consumer { public static void main(String[] args) { ApplicationContext context = new AnnotationConfigApplicationContext(HelloWorldConfiguration.class); AmqpTemplate amqpTemplate = context.getBean(AmqpTemplate.class); Object o = amqpTemplate.receiveAndConvert(); if(o != null){ String s = o.toString(); System.out.println(\"Received Length : \" + s.length()); }else{ System.out.println(\"null\"); } } } ``` #### Results * Run the Producer first, then the Consumer * Consumer throws OOM Exception ### Impact Users of RabbitMQ may suffer from DoS attacks from RabbitMQ Java client which will ultimately exhaust the memory of the consumer.",
          "id": "GHSA-mm8h-8587-p46h",
          "desc": "Description: ### Summary `maxBodyLebgth` was not used when receiving Message objects. Attackers could just send a very large Message causing a memory overflow and triggering an OOM Error. ### PoC #### RbbitMQ * Use RabbitMQ 3.11.16 as MQ and specify Message Body size 512M (here it only needs to be larger than the Consumer memory) * Start RabbitMQ #### Producer * Build a String of length 256M and send it to Consumer ``` package org.springframework.amqp.helloworld; import org.springframework.amqp.core.AmqpTemplate; import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.AnnotationConfigApplicationContext; public class Producer { public static void main(String[] args) { ApplicationContext context = new AnnotationConfigApplicationContext(HelloWorldConfiguration.class); AmqpTemplate amqpTemplate = context.getBean(AmqpTemplate.class); String s = \"A\"; for(int i=0;i<28;++i){ s = s + s; System.out.println(i); } amqpTemplate.convertAndSend(s); System.out.println(\"Send Finish\"); } } ``` #### Consumer * First set the heap memory size to 128M * Read the message sent by the Producer from the MQ and print the length ``` package org.springframework.amqp.helloworld; import org.springframework.amqp.core.AmqpTemplate; import org.springframework.amqp.core.Message; import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.AnnotationConfigApplicationContext; public class Consumer { public static void main(String[] args) { ApplicationContext context = new AnnotationConfigApplicationContext(HelloWorldConfiguration.class); AmqpTemplate amqpTemplate = context.getBean(AmqpTemplate.class); Object o = amqpTemplate.receiveAndConvert(); if(o != null){ String s = o.toString(); System.out.println(\"Received Length : \" + s.length()); }else{ System.out.println(\"null\"); } } } ``` #### Results * Run the Producer first, then the Consumer * Consumer throws OOM Exception ### Impact Users of RabbitMQ may suffer from DoS attacks from RabbitMQ Java client which will ultimately exhaust the memory of the consumer.",
          "impact": 0.5,
          "code": "{\n  \"bom-ref\": \"5acc2eee-8433-4a66-b9c5-3dcc7be5b29a\",\n  \"id\": \"GHSA-mm8h-8587-p46h\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"medium\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    400\n  ],\n  \"description\": \"### Summary `maxBodyLebgth` was not used when receiving Message objects. Attackers could just send a very large Message causing a memory overflow and triggering an OOM Error. ### PoC #### RbbitMQ * Use RabbitMQ 3.11.16 as MQ and specify Message Body size 512M (here it only needs to be larger than the Consumer memory) * Start RabbitMQ #### Producer * Build a String of length 256M and send it to Consumer ``` package org.springframework.amqp.helloworld; import org.springframework.amqp.core.AmqpTemplate; import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.AnnotationConfigApplicationContext; public class Producer { public static void main(String[] args) { ApplicationContext context = new AnnotationConfigApplicationContext(HelloWorldConfiguration.class); AmqpTemplate amqpTemplate = context.getBean(AmqpTemplate.class); String s = \\\"A\\\"; for(int i=0;i<28;++i){ s = s + s; System.out.println(i); } amqpTemplate.convertAndSend(s); System.out.println(\\\"Send Finish\\\"); } } ``` #### Consumer * First set the heap memory size to 128M * Read the message sent by the Producer from the MQ and print the length ``` package org.springframework.amqp.helloworld; import org.springframework.amqp.core.AmqpTemplate; import org.springframework.amqp.core.Message; import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.AnnotationConfigApplicationContext; public class Consumer { public static void main(String[] args) { ApplicationContext context = new AnnotationConfigApplicationContext(HelloWorldConfiguration.class); AmqpTemplate amqpTemplate = context.getBean(AmqpTemplate.class); Object o = amqpTemplate.receiveAndConvert(); if(o != null){ String s = o.toString(); System.out.println(\\\"Received Length : \\\" + s.length()); }else{ System.out.println(\\\"null\\\"); } } } ``` #### Results * Run the Producer first, then the Consumer * Consumer throws OOM Exception ### Impact Users of RabbitMQ may suffer from DoS attacks from RabbitMQ Java client which will ultimately exhaust the memory of the consumer.\",\n  \"published\": \"2023-10-24T01:49:09Z\",\n  \"updated\": \"2023-11-05T05:04:23Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-10"
            ],
            "cci": [
              "CCI-001310"
            ],
            "cwe": [
              "CWE-502"
            ],
            "bom-ref": "815a1358-2bd4-4028-bd3e-8219747c78f6",
            "ratings": "GITHUB - critical",
            "published": "2022-01-06T23:55:09Z",
            "updated": "2023-02-25T00:31:20Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "### Impact H2 Console in versions since 1.1.100 (2008-10-14) to 2.0.204 (2021-12-21) inclusive allows loading of custom classes from remote servers through JNDI. H2 Console doesn't accept remote connections by default. If remote access was enabled explicitly and some protection method (such as security constraint) wasn't set, an intruder can load own custom class and execute its code in a process with H2 Console (H2 Server process or a web server with H2 Console servlet). It is also possible to load them by creation a linked table in these versions, but it requires `ADMIN` privileges and user with `ADMIN` privileges has full access to the Java process by design. These privileges should never be granted to untrusted users. ### Patches Since version 2.0.206 H2 Console and linked tables explicitly forbid attempts to specify LDAP URLs for JNDI. Only local data sources can be used. ### Workarounds H2 Console should never be available to untrusted users. `-webAllowOthers` is a dangerous setting that should be avoided. H2 Console Servlet deployed on a web server can be protected with a security constraint: https://h2database.com/html/tutorial.html#usingH2ConsoleServlet If `webAllowOthers` is specified, you need to uncomment and edit `<security-role>` and `<security-constraint>` as necessary. See documentation of your web server for more details. ### References This issue was found and privately reported to H2 team by [JFrog Security](https://www.jfrog.com/)'s vulnerability research team with detailed information.",
          "id": "GHSA-h376-j262-vhq6",
          "desc": "Description: ### Impact H2 Console in versions since 1.1.100 (2008-10-14) to 2.0.204 (2021-12-21) inclusive allows loading of custom classes from remote servers through JNDI. H2 Console doesn't accept remote connections by default. If remote access was enabled explicitly and some protection method (such as security constraint) wasn't set, an intruder can load own custom class and execute its code in a process with H2 Console (H2 Server process or a web server with H2 Console servlet). It is also possible to load them by creation a linked table in these versions, but it requires `ADMIN` privileges and user with `ADMIN` privileges has full access to the Java process by design. These privileges should never be granted to untrusted users. ### Patches Since version 2.0.206 H2 Console and linked tables explicitly forbid attempts to specify LDAP URLs for JNDI. Only local data sources can be used. ### Workarounds H2 Console should never be available to untrusted users. `-webAllowOthers` is a dangerous setting that should be avoided. H2 Console Servlet deployed on a web server can be protected with a security constraint: https://h2database.com/html/tutorial.html#usingH2ConsoleServlet If `webAllowOthers` is specified, you need to uncomment and edit `<security-role>` and `<security-constraint>` as necessary. See documentation of your web server for more details. ### References This issue was found and privately reported to H2 team by [JFrog Security](https://www.jfrog.com/)'s vulnerability research team with detailed information.",
          "impact": 1,
          "code": "{\n  \"bom-ref\": \"815a1358-2bd4-4028-bd3e-8219747c78f6\",\n  \"id\": \"GHSA-h376-j262-vhq6\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"critical\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    502\n  ],\n  \"description\": \"### Impact H2 Console in versions since 1.1.100 (2008-10-14) to 2.0.204 (2021-12-21) inclusive allows loading of custom classes from remote servers through JNDI. H2 Console doesn't accept remote connections by default. If remote access was enabled explicitly and some protection method (such as security constraint) wasn't set, an intruder can load own custom class and execute its code in a process with H2 Console (H2 Server process or a web server with H2 Console servlet). It is also possible to load them by creation a linked table in these versions, but it requires `ADMIN` privileges and user with `ADMIN` privileges has full access to the Java process by design. These privileges should never be granted to untrusted users. ### Patches Since version 2.0.206 H2 Console and linked tables explicitly forbid attempts to specify LDAP URLs for JNDI. Only local data sources can be used. ### Workarounds H2 Console should never be available to untrusted users. `-webAllowOthers` is a dangerous setting that should be avoided. H2 Console Servlet deployed on a web server can be protected with a security constraint: https://h2database.com/html/tutorial.html#usingH2ConsoleServlet If `webAllowOthers` is specified, you need to uncomment and edit `<security-role>` and `<security-constraint>` as necessary. See documentation of your web server for more details. ### References This issue was found and privately reported to H2 team by [JFrog Security](https://www.jfrog.com/)'s vulnerability research team with detailed information.\",\n  \"published\": \"2022-01-06T23:55:09Z\",\n  \"updated\": \"2023-02-25T00:31:20Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        },
        {
          "tags": {
            "nist": [
              "SI-2",
              "RA-5"
            ],
            "cci": [
              "CCI-002605",
              "CCI-001643"
            ],
            "cwe": [
              "CWE-88"
            ],
            "bom-ref": "c8a50465-16df-44e0-84e9-7acff5870a51",
            "ratings": "GITHUB - critical",
            "published": "2022-01-21T23:07:39Z",
            "updated": "2023-08-18T15:47:05Z"
          },
          "descriptions": [],
          "refs": [
            {
              "ref": [
                {
                  "source": {
                    "name": "GITHUB",
                    "url": "https://github.com/advisories"
                  }
                }
              ]
            }
          ],
          "source_location": {},
          "title": "H2 Console before 2.1.210 allows remote attackers to execute arbitrary code via a jdbc:h2:mem JDBC URL containing the IGNORE_UNKNOWN_SETTINGS=TRUE;FORBID_CREATION=FALSE;INIT=RUNSCRIPT substring, a different vulnerability than CVE-2021-42392.",
          "id": "GHSA-45hx-wfhj-473x",
          "desc": "Description: H2 Console before 2.1.210 allows remote attackers to execute arbitrary code via a jdbc:h2:mem JDBC URL containing the IGNORE_UNKNOWN_SETTINGS=TRUE;FORBID_CREATION=FALSE;INIT=RUNSCRIPT substring, a different vulnerability than CVE-2021-42392.",
          "impact": 1,
          "code": "{\n  \"bom-ref\": \"c8a50465-16df-44e0-84e9-7acff5870a51\",\n  \"id\": \"GHSA-45hx-wfhj-473x\",\n  \"source\": {\n    \"name\": \"GITHUB\",\n    \"url\": \"https://github.com/advisories\"\n  },\n  \"ratings\": [\n    {\n      \"source\": {\n        \"name\": \"GITHUB\",\n        \"url\": \"https://github.com/advisories\"\n      },\n      \"severity\": \"critical\",\n      \"method\": \"other\"\n    }\n  ],\n  \"cwes\": [\n    88\n  ],\n  \"description\": \"H2 Console before 2.1.210 allows remote attackers to execute arbitrary code via a jdbc:h2:mem JDBC URL containing the IGNORE_UNKNOWN_SETTINGS=TRUE;FORBID_CREATION=FALSE;INIT=RUNSCRIPT substring, a different vulnerability than CVE-2021-42392.\",\n  \"published\": \"2022-01-21T23:07:39Z\",\n  \"updated\": \"2023-08-18T15:47:05Z\",\n  \"affects\": [\n    {\n      \"ref\": \"602de70a-7107-4ac8-9ad2-3c1c816892a7\"\n    }\n  ]\n}",
          "results": [
            {
              "status": "failed",
              "code_desc": "Component 602de70a-7107-4ac8-9ad2-3c1c816892a7 is vulnerable",
              "message": "-Component Summary-\n\n- Type: application\n\n- Bom-ref: 602de70a-7107-4ac8-9ad2-3c1c816892a7\n\n- Name: 602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "start_time": ""
            }
          ]
        }
      ],
      "sha256": "c248a7d929c0bc6b8f9ada98eb17478699c4c8320ee7601d8e77afd19b795f1d"
    }
  ],
  "passthrough": {
    "auxiliary_data": [
      {
        "name": "SBOM",
        "data": {
          "bomFormat": "CycloneDX",
          "specVersion": "1.5",
          "serialNumber": "urn:uuid:b9d34fa9-4f62-4b08-ae38-af606a1dc7fd",
          "version": 1,
          "metadata": {
            "timestamp": "2024-07-08T17:31:55Z",
            "tools": [
              {
                "vendor": "OWASP",
                "name": "Dependency-Track",
                "version": "4.11.4"
              }
            ],
            "component": {
              "type": "application",
              "bom-ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7",
              "name": "test 9",
              "version": "SNAPSHOT",
              "description": "This is the project I want to use to generate data to understand the schema a bit better"
            }
          }
        }
      }
    ],
    "raw": {
      "bomFormat": "CycloneDX",
      "specVersion": "1.5",
      "serialNumber": "urn:uuid:b9d34fa9-4f62-4b08-ae38-af606a1dc7fd",
      "version": 1,
      "metadata": {
        "timestamp": "2024-07-08T17:31:55Z",
        "tools": [
          {
            "vendor": "OWASP",
            "name": "Dependency-Track",
            "version": "4.11.4"
          }
        ],
        "component": {
          "type": "application",
          "bom-ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7",
          "name": "test 9",
          "version": "SNAPSHOT",
          "description": "This is the project I want to use to generate data to understand the schema a bit better"
        }
      },
      "vulnerabilities": [
        {
          "bom-ref": "b7a12947-7a8d-4031-b59d-640d33dbad6a",
          "id": "GHSA-5mg8-w23w-74h3",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "low",
              "method": "other"
            }
          ],
          "cwes": [
            173,
            200,
            378,
            732
          ],
          "description": "A temp directory creation vulnerability exists in Guava prior to version 32.0.0 allowing an attacker with access to the machine to potentially access data in a temporary directory created by the Guava `com.google.common.io.Files.createTempDir()`. The permissions granted to the directory created default to the standard unix-like /tmp ones, leaving the files open. Maintainers recommend explicitly changing the permissions after the creation of the directory, or removing uses of the vulnerable method.",
          "published": "2021-03-25T17:04:19Z",
          "updated": "2023-11-09T18:44:38Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "bb03c210-ea12-450d-85df-17d81a75ede2",
          "id": "GHSA-7g45-4rm6-3mm3",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "medium",
              "method": "other"
            }
          ],
          "cwes": [
            379,
            552
          ],
          "description": "Use of Java's default temporary directory for file creation in `FileBackedOutputStream` in Google Guava versions 1.0 to 31.1 on Unix systems and Android Ice Cream Sandwich allows other users and apps on the machine with access to the default Java temporary directory to be able to access the files created by the class. Even though the security vulnerability is fixed in version 32.0.0, maintainers recommend using version 32.0.1 as version 32.0.0 breaks some functionality under Windows.",
          "published": "2023-06-14T18:30:38Z",
          "updated": "2024-02-13T21:49:15Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "d097e083-0b0a-4e3c-9f29-fc936f27ec6f",
          "id": "GHSA-5p34-5m6p-p58g",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "critical",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig (aka shaded hikari-config).",
          "published": "2020-04-23T21:08:40Z",
          "updated": "2023-02-01T05:02:59Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "f57dc81d-6b2d-4060-8c15-7613c1a37981",
          "id": "GHSA-27xj-rqx5-2255",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.springframework.aop.config.MethodLocatingFactoryBean (aka spring-aop).",
          "published": "2020-05-15T18:58:44Z",
          "updated": "2023-02-01T05:02:59Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "600ecfb9-66c7-4fc2-88e8-2bf9efe40628",
          "id": "GHSA-58pp-9c76-5625",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.proxy.provider.remoting.RmiProvider (aka apache/commons-proxy).",
          "published": "2020-06-10T21:12:41Z",
          "updated": "2023-02-01T05:03:03Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "36dba0ba-dc6c-4f8a-822c-e51ca444d1bf",
          "id": "GHSA-v3xw-c963-f5hc",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.activemq.* (aka activemq-jms, activemq-core, activemq-pool, and activemq-pool-jms).",
          "published": "2020-05-15T18:58:50Z",
          "updated": "2023-02-01T05:03:05Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "e5cba611-d1ce-48a5-8fc2-ac68ba133947",
          "id": "GHSA-h4rc-386g-6m85",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.jelly.impl.Embedded (aka commons-jelly).",
          "published": "2020-04-23T20:19:02Z",
          "updated": "2024-03-15T00:41:35Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "9e292de9-f4f7-4d45-9ecb-846c4b972f6f",
          "id": "GHSA-9vvp-fxw6-jcxr",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.openjpa.ee.WASRegistryManagedRuntime (aka openjpa).",
          "published": "2020-05-15T18:58:47Z",
          "updated": "2024-03-15T00:48:55Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "343cd240-f667-4770-aecf-ddc11f9d0172",
          "id": "GHSA-rf6r-2c4q-2vwg",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.aoju.bus.proxy.provider.remoting.RmiProvider (aka bus-proxy).",
          "published": "2020-05-15T18:58:54Z",
          "updated": "2024-03-15T00:50:18Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "0f7e16f6-f01e-4cc0-a835-08f3ba72625f",
          "id": "GHSA-758m-v56v-grj4",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to javax.swing.JEditorPane.",
          "published": "2020-04-23T21:36:03Z",
          "updated": "2024-06-25T13:46:45Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "c2e5f22d-f91f-4689-bdb1-782974d6fa7a",
          "id": "GHSA-95cm-88f5-f2c7",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.4 mishandles the interaction between serialization gadgets and typing, related to org.apache.aries.transaction.jms.internal.XaPooledConnectionFactory (aka aries.transaction.jms).",
          "published": "2020-04-23T16:32:59Z",
          "updated": "2024-07-03T21:10:50Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "49fa1888-bfa1-480a-8564-3b62b8bf5c3c",
          "id": "GHSA-c2q3-4qrh-fm48",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to oracle.jms.AQjmsQueueConnectionFactory, oracle.jms.AQjmsXATopicConnectionFactory, oracle.jms.AQjmsTopicConnectionFactory, oracle.jms.AQjmsXAQueueConnectionFactory, and oracle.jms.AQjmsXAConnectionFactory (aka weblogic/oracle-aqjms).",
          "published": "2020-06-18T14:44:50Z",
          "updated": "2023-02-01T05:04:14Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "97981cb2-9228-4b8b-a172-ad12f550a19f",
          "id": "GHSA-mc6h-4qgp-37qh",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to org.jsecurity.realm.jndi.JndiRealmFactory (aka org.jsecurity).",
          "published": "2020-06-18T14:44:43Z",
          "updated": "2024-03-15T00:37:17Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "941d2fac-724b-4a2c-a8ba-c5a434fa3bf7",
          "id": "GHSA-j823-4qch-3rgm",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to oadd.org.apache.xalan.lib.sql.JNDIConnectionPool (aka apache/drill).",
          "published": "2020-06-18T14:44:46Z",
          "updated": "2024-03-15T00:39:55Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "7e3a7481-266e-4cb7-af3b-94dcaf462942",
          "id": "GHSA-c265-37vj-cwcc",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.5 mishandles the interaction between serialization gadgets and typing, related to com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool (aka xalan2).",
          "published": "2020-06-18T14:44:48Z",
          "updated": "2024-06-25T13:46:04Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "db7cfe67-0b1d-4504-af8b-da26e12af73a",
          "id": "GHSA-4w82-r329-3q67",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "critical",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.6.7.4, 2.7.x before 2.7.9.7, 2.8.x before 2.8.11.5 and 2.9.x before 2.9.10.2 lacks certain xbean-reflect/JNDI blocking, as demonstrated by org.apache.xbean.propertyeditor.JndiConverter.",
          "published": "2020-03-04T20:52:14Z",
          "updated": "2023-06-08T19:02:12Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "7c0af63e-ef57-43aa-9c91-d79c7e37ab20",
          "id": "GHSA-rpr3-cw39-3pxh",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "The com.fasterxml.jackson.core:jackson-databind library before version 2.9.10.4 is vulnerable to an Unsafe Deserialization vulnerability when handling interactions related to the class `ignite-jta`.",
          "published": "2022-07-15T19:41:47Z",
          "updated": "2023-08-18T15:45:27Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "c037af59-a132-4727-8cc3-c6095c490df7",
          "id": "GHSA-fmmc-742q-jg75",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "critical",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 prior to 2.9.10.1, 2.8.11.5, and 2.6.7.3. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the p6spy (3.8.6) jar in the classpath, and an attacker can find an RMI service endpoint to access, it is possible to make the service execute a malicious payload. This issue exists because of com.p6spy.engine.spy.P6DataSource mishandling.",
          "published": "2019-11-13T00:32:27Z",
          "updated": "2023-09-14T14:55:20Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "0b8d112a-b683-414d-93b6-48fa2cabb7c9",
          "id": "GHSA-gjmw-vf9h-g25v",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "critical",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 prior to 2.9.10.1, 2.8.11.5, and 2.6.7.3. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the apache-log4j-extra (version 1.2.x) jar in the classpath, and an attacker can provide a JNDI service to access, it is possible to make the service execute a malicious payload.",
          "published": "2019-11-13T00:32:38Z",
          "updated": "2023-09-14T14:55:25Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "e8b21aeb-ce1d-4df2-8102-577b813e712f",
          "id": "GHSA-mx7p-6679-8g3q",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "critical",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.0.0 through 2.9.10. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has the commons-dbcp (1.4) jar in the classpath, and an attacker can find an RMI service endpoint to access, it is possible to make the service execute a malicious payload. This issue exists because of org.apache.commons.dbcp.datasources.SharedPoolDataSource and org.apache.commons.dbcp.datasources.PerUserPoolDataSource mishandling.",
          "published": "2019-10-28T20:51:15Z",
          "updated": "2024-03-15T00:57:37Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "e141c668-bc18-4738-b3b6-e7ba1057d124",
          "id": "GHSA-q93h-jc49-78gg",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "critical",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.4, 2.8.11.6, and 2.7.9.7 mishandles the interaction between serialization gadgets and typing, related to `com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig` (aka `ibatis-sqlmap`).",
          "published": "2020-05-15T18:59:10Z",
          "updated": "2023-09-14T15:09:40Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "7aec5714-d04e-4e86-8f4c-51f5cf2568d9",
          "id": "GHSA-p43x-xfjf-5jhr",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "critical",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.4, 2.8.11.6, and 2.7.9.7 mishandles the interaction between serialization gadgets and typing, related to br.com.anteros.dbcp.AnterosDBCPConfig (aka anteros-core).",
          "published": "2020-05-15T18:59:01Z",
          "updated": "2024-03-15T00:20:09Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "6af6635c-bedd-40e5-88b8-324d3a80a33e",
          "id": "GHSA-h3cw-g4mq-c5x2",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            94,
            502
          ],
          "description": "This project contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor. FasterXML jackson-databind 2.x before 2.9.10.6 mishandles the interaction between serialization gadgets and typing, related to br.com.anteros.dbcp.AnterosDBCPDataSource (aka Anteros-DBCP).",
          "published": "2021-12-09T19:14:51Z",
          "updated": "2023-09-14T15:44:55Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "3ad04380-a25c-41d8-8fad-259c2561795b",
          "id": "GHSA-qjw2-hr98-qgfh",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.6.7.5 and from 2.7.x before 2.9.10.6 mishandles the interaction between serialization gadgets and typing, related to com.pastdev.httpcomponents.configuration.JndiConfiguration.",
          "published": "2021-12-09T19:15:36Z",
          "updated": "2023-09-14T15:47:50Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "86f78c35-adfb-48e4-9428-88084373e1c0",
          "id": "GHSA-8w26-6f25-cm9x",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp2.datasources.SharedPoolDataSource`.",
          "published": "2021-12-09T19:16:02Z",
          "updated": "2023-09-14T15:52:49Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "6d73d38a-3ff6-4fac-8c03-b09b64e9e537",
          "id": "GHSA-m6x4-97wx-4q27",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp2.datasources.PerUserPoolDataSource.",
          "published": "2021-12-09T19:16:26Z",
          "updated": "2023-09-14T15:53:30Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "00033bff-66dc-4a36-ab38-a10b0625409f",
          "id": "GHSA-v585-23hc-c647",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp.datasources.PerUserPoolDataSource`.",
          "published": "2021-11-19T20:13:06Z",
          "updated": "2023-09-14T15:59:33Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "14e2856b-f78d-4a6d-99eb-470c8566df29",
          "id": "GHSA-r695-7vr9-jgc2",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp.datasources.SharedPoolDataSource.",
          "published": "2021-12-09T19:16:51Z",
          "updated": "2023-09-14T16:01:31Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "c224f923-be9a-4faa-a930-ef4db611bc2b",
          "id": "GHSA-vfqx-33qm-g869",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.8 an 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to com.newrelic.agent.deps.ch.qos.logback.core.db.DriverManagerConnectionSource.",
          "published": "2021-12-09T19:16:59Z",
          "updated": "2023-09-14T16:04:22Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "5201940b-1f04-4668-ae86-8261448d817d",
          "id": "GHSA-f9xh-2qgp-cq57",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to `com.newrelic.agent.deps.ch.qos.logback.core.db.JNDIConnectionSource`.",
          "published": "2021-12-09T19:16:42Z",
          "updated": "2023-09-14T16:04:22Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "b267fb08-27eb-4c71-a2a7-f17fe5fbf4fd",
          "id": "GHSA-cvm9-fjm9-3572",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp.cpdsadapter.DriverAdapterCPDS`.",
          "published": "2021-12-09T19:16:10Z",
          "updated": "2023-09-14T16:07:00Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "4fcb77a9-67b3-4b3f-bc01-684b8ba72294",
          "id": "GHSA-9gph-22xh-8x98",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to `oadd.org.apache.commons.dbcp.cpdsadapter.DriverAdapterCPDS`.",
          "published": "2021-12-09T19:15:54Z",
          "updated": "2023-09-14T16:07:40Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "950cff67-088e-4f41-9818-25943c9e17c0",
          "id": "GHSA-89qr-369f-5m5x",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to org.apache.tomcat.dbcp.dbcp2.cpdsadapter.DriverAdapterCPDS.",
          "published": "2021-12-09T19:15:46Z",
          "updated": "2023-09-14T16:08:37Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "53eda8c2-268a-4866-89ac-234bfe7f74ce",
          "id": "GHSA-8c4j-34r4-xr8g",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.cpdsadapter.DriverAdapterCPDS.",
          "published": "2021-12-09T19:16:18Z",
          "updated": "2023-09-14T16:13:01Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "9edaa51d-929b-457e-aab5-0fffecdb4938",
          "id": "GHSA-9m6f-7xcq-8vf8",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.8 and 2.6.7.5 mishandles the interaction between serialization gadgets and typing, related to org.docx4j.org.apache.xalan.lib.sql.JNDIConnectionPool.",
          "published": "2021-12-09T19:16:34Z",
          "updated": "2023-09-14T16:15:44Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "6d5189b4-d549-419a-b886-43a62cc43d40",
          "id": "GHSA-5r5r-6hpj-8gg9",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to com.oracle.wls.shaded.org.apache.xalan.lib.sql.JNDIConnectionPool (aka embedded Xalan in org.glassfish.web/javax.servlet.jsp.jstl).",
          "published": "2021-12-09T19:15:24Z",
          "updated": "2023-11-21T11:40:53Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "135c6dab-529e-4855-ab72-a0138e2110c8",
          "id": "GHSA-wh8g-3j2c-rqj5",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.datasources.PerUserPoolDataSource.",
          "published": "2021-12-09T19:15:00Z",
          "updated": "2024-03-15T00:28:08Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "57f41366-73de-4a9c-ba15-4d09c9f60e33",
          "id": "GHSA-r3gr-cxrf-hg25",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502,
            913
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.8 mishandles the interaction between serialization gadgets and typing, related to org.apache.commons.dbcp2.datasources.SharedPoolDataSource.",
          "published": "2021-12-09T19:15:11Z",
          "updated": "2024-06-25T13:47:23Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "ccd0ef88-c0fe-4a10-a648-c779ce82b888",
          "id": "GHSA-jjjh-jjxp-wpff",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            400,
            502
          ],
          "description": "In FasterXML jackson-databind 2.4.0-rc1 until 2.12.7.1 and in 2.13.x before 2.13.4.2 resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled. This was patched in 2.12.7.1, 2.13.4.2, and 2.14.0. Commits that introduced vulnerable code are https://github.com/FasterXML/jackson-databind/commit/d499f2e7bbc5ebd63af11e1f5cf1989fa323aa45, https://github.com/FasterXML/jackson-databind/commit/0e37a39502439ecbaa1a5b5188387c01bf7f7fa1, and https://github.com/FasterXML/jackson-databind/commit/7ba9ac5b87a9d6ac0d2815158ecbeb315ad4dcdc. Fix commits are https://github.com/FasterXML/jackson-databind/commit/cd090979b7ea78c75e4de8a4aed04f7e9fa8deea and https://github.com/FasterXML/jackson-databind/commit/d78d00ee7b5245b93103fef3187f70543d67ca33.",
          "published": "2022-10-03T00:00:31Z",
          "updated": "2024-03-15T00:14:44Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "726a055c-f364-4cb7-a75a-d3c541dad0fa",
          "id": "GHSA-5949-rw7g-wx7w",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "A flaw was found in jackson-databind before 2.9.10.7 and 2.6.7.5. FasterXML mishandles the interaction between serialization gadgets and typing. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
          "published": "2021-01-20T21:20:15Z",
          "updated": "2024-03-15T00:16:04Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "75d8b4d7-7c79-4627-b229-8d5e38fc5d8b",
          "id": "GHSA-57j2-w4cx-62h2",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            787
          ],
          "description": "jackson-databind is a data-binding package for the Jackson Data Processor. jackson-databind allows a Java stack overflow exception and denial of service via a large depth of nested objects.",
          "published": "2022-03-12T00:00:36Z",
          "updated": "2024-03-15T00:24:56Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "cc0ff323-0529-4064-8a2d-1f7a8e2a1332",
          "id": "GHSA-288c-cq4h-88gq",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            611
          ],
          "description": "A flaw was found in FasterXML Jackson Databind, where it did not have entity expansion secured properly. This flaw allows vulnerability to XML external entity (XXE) attacks. The highest threat from this vulnerability is data integrity.",
          "published": "2021-02-18T20:51:54Z",
          "updated": "2024-03-15T00:31:24Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "7c4227e3-a0a9-4361-8eab-6ab5fa9550b2",
          "id": "GHSA-gww7-p5w4-wrfv",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "critical",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.6.7.4, 2.7.x before 2.7.9.7, 2.8.x before 2.8.11.5, and 2.9.x before 2.9.10.2 lacks certain `net.sf.ehcache` blocking.",
          "published": "2020-03-04T20:52:11Z",
          "updated": "2024-03-15T00:52:59Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "87742746-bd8b-423d-979d-d9aa81a8ccfd",
          "id": "GHSA-rgv9-q543-rqg4",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            400,
            502
          ],
          "description": "In FasterXML jackson-databind before 2.12.7.1 and in 2.13.x before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization.",
          "published": "2022-10-03T00:00:31Z",
          "updated": "2024-03-24T05:01:05Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "5c0b94e1-0577-42c9-8028-f244d68f61da",
          "id": "GHSA-fqwf-pjwf-7vqv",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "FasterXML jackson-databind 2.x before 2.9.10.4 and 2.6.7.4 mishandles the interaction between serialization gadgets and typing, related to com.caucho.config.types.ResourceRef (aka caucho-quercus).",
          "published": "2020-05-15T18:59:04Z",
          "updated": "2024-07-03T21:10:31Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "f2fa9b19-418a-4901-9840-a8631227701e",
          "id": "GHSA-8jpx-m2wh-2v34",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            74
          ],
          "description": "### Summary A server-side template injection was identified in the self-validating ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html)) feature of **dropwizard-validation** enabling attackers to inject arbitrary Java EL expressions, leading to Remote Code Execution (RCE) vulnerability. If you're using a self-validating bean (via [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html)), an upgrade to Dropwizard 1.3.21/2.0.3 or later is strongly recommended. The changes introduced in Dropwizard 1.3.19 and 2.0.2 (see [GHSA-3mcp-9wr4-cjqf](https://github.com/dropwizard/dropwizard/security/advisories/GHSA-3mcp-9wr4-cjqf)/[CVE-2020-5245](https://github.com/advisories/GHSA-3mcp-9wr4-cjqf)) unfortunately didn't fix the underlying issue completely. ### Impact This issue may allow Remote Code Execution (RCE), allowing to run arbitrary code on the host system (with the privileges of the Dropwizard service account privileges) by injecting arbitrary [Java Expression Language (EL)](https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-interpolation-with-message-expressions) expressions when using the self-validating feature ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html), [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidation.html)) in **dropwizard-validation**. ### Patches The issue has been fixed in **dropwizard-validation** **1.3.21** and **2.0.3** or later. We strongly recommend upgrading to one of these versions. The evaluation of EL expressions has been disabled by default now. In order to use some interpolation in the violation messages added to [`ViolationCollector`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html), it has to be explicitly allowed by setting [`SelfValidating#escapeExpressions()`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidating.html#escapeExpressions--) to `false`. It is also recommended to use the `addViolation` methods supporting message parameters instead of EL expressions introduced in Dropwizard 1.3.21 and 2.0.3: * [`ViolationCollector#addViolation(String, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.util.Map-) * [`ViolationCollector#addViolation(String, String, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.lang.String-java.util.Map-) * [`ViolationCollector#addViolation(String, String, Integer, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.lang.Integer-java.lang.String-java.util.Map-) * [`ViolationCollector#addViolation(String, String, String, Map<String, Object>`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html#addViolation-java.lang.String-java.lang.String-java.lang.String-java.util.Map-) ### Workarounds If you are not able to upgrade to one of the aforementioned versions of **dropwizard-validation** but still want to use the [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html) feature, make sure to properly sanitize any message you're adding to the [`ViolationCollector`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/ViolationCollector.html) in the method annotated with [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.3/io/dropwizard/validation/selfvalidating/SelfValidation.html). Example: ```java @SelfValidation public void validateFullName(ViolationCollector col) { if (fullName.contains(\"_\")) { // Sanitize fullName variable by escaping relevant characters such as \"$\" col.addViolation(\"Full name contains invalid characters: \" + sanitizeJavaEl(fullName)); } } ``` See also: https://github.com/dropwizard/dropwizard/blob/v2.0.3/dropwizard-validation/src/main/java/io/dropwizard/validation/InterpolationHelper.java ### References * https://github.com/dropwizard/dropwizard/security/advisories/GHSA-3mcp-9wr4-cjqf * https://github.com/dropwizard/dropwizard/pull/3208 * https://github.com/dropwizard/dropwizard/pull/3209 * https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-hibernateconstraintvalidatorcontext ### For more information If you have any questions or comments about this advisory: * Open an issue in [dropwizard/dropwizard](https://github.com/dropwizard/dropwizard/issues/new) * Start a discussion on the [dropwizard-dev mailing list](https://groups.google.com/forum/#!forum/dropwizard-dev) ### Security contact If you want to responsibly disclose a security issue in Dropwizard or one of its official modules, please contact us via the published channels in our [security policy](https://github.com/dropwizard/dropwizard/security/policy): https://github.com/dropwizard/dropwizard/security/policy#reporting-a-vulnerability",
          "published": "2020-04-10T18:42:20Z",
          "updated": "2023-01-09T05:02:18Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "00bc944f-fead-400b-8bbd-0c5b56ba2b14",
          "id": "GHSA-3mcp-9wr4-cjqf",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            74
          ],
          "description": "Dropwizard-Validation before 1.3.19, and 2.0.2 may allow arbitrary code execution on the host system, with the privileges of the Dropwizard service account, by injecting arbitrary Java Expression Language expressions when using the self-validating feature. ### Summary A server-side template injection was identified in the self-validating ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html)) feature of **dropwizard-validation** enabling attackers to inject arbitrary Java EL expressions, leading to Remote Code Execution (RCE) vulnerability. If you're using a self-validating bean (via [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html)), an upgrade to Dropwizard 1.3.19 or 2.0.2 is strongly recommended. ### Impact This issue may allow Remote Code Execution (RCE), allowing to run arbitrary code on the host system (with the privileges of the Dropwizard service account privileges) by injecting arbitrary [Java Expression Language (EL)](https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-interpolation-with-message-expressions) expressions when using the self-validating feature ([`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html), [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidation.html)) in **dropwizard-validation**. ### Patches The issue has been fixed in **dropwizard-validation** **1.3.19** and **2.0.2**. We strongly recommend upgrading to one of these versions. ### Workarounds If you are not able to upgrade to one of the aforementioned versions of **dropwizard-validation** but still want to use the [`@SelfValidating`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidating.html) feature, make sure to properly sanitize any message you're adding to the [`ViolationCollector`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/ViolationCollector.html) in the method annotated with [`@SelfValidation`](https://javadoc.io/static/io.dropwizard/dropwizard-project/2.0.2/io/dropwizard/validation/selfvalidating/SelfValidation.html). Example: ```java @SelfValidation public void validateFullName(ViolationCollector col) { if (fullName.contains(\"_\")) { // Sanitize fullName variable by escaping relevant characters such as \"$\" col.addViolation(\"Full name contains invalid characters: \" + sanitizeJavaEl(fullName)); } } ``` See also: https://github.com/dropwizard/dropwizard/blob/v2.0.2/dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java#L84-L98 ### References * https://github.com/dropwizard/dropwizard/pull/3157 * https://github.com/dropwizard/dropwizard/pull/3160 * https://docs.oracle.com/javaee/7/tutorial/jsf-el.htm * https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-interpolation-with-message-expressions * https://beanvalidation.org/2.0/spec/#validationapi-message-defaultmessageinterpolation ### For more information If you have any questions or comments about this advisory: * Open an issue in [dropwizard/dropwizard](https://github.com/dropwizard/dropwizard/issues/new) * Start a discussion on the [dropwizard-dev mailing list](https://groups.google.com/forum/#!forum/dropwizard-dev) ### Security contact If you want to responsibly disclose a security issue in Dropwizard or one of its official modules, please contact us via the published channels in our [security policy](https://github.com/dropwizard/dropwizard/security/policy): https://github.com/dropwizard/dropwizard/security/policy#reporting-a-vulnerability",
          "published": "2020-02-24T17:27:27Z",
          "updated": "2024-06-05T16:42:03Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "210a5c45-88ac-4c1f-a5f4-f93c7af6f59e",
          "id": "GHSA-rvwf-54qp-4r6v",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            776
          ],
          "description": "The Alias feature in SnakeYAML 1.18 allows entity expansion during a load operation, a related issue to CVE-2003-1564.",
          "published": "2021-06-04T21:37:45Z",
          "updated": "2023-05-22T20:17:58Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "63a53dc7-5769-43dc-a053-50ccd5295d8b",
          "id": "GHSA-9w3m-gqgf-c4p9",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "medium",
              "method": "other"
            }
          ],
          "cwes": [
            121,
            787
          ],
          "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DoS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack-overflow.",
          "published": "2022-09-06T00:00:27Z",
          "updated": "2024-03-15T12:30:36Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "5ab41975-23cc-45e0-9a13-be603ea00595",
          "id": "GHSA-w37g-rhq8-7m4j",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "medium",
              "method": "other"
            }
          ],
          "cwes": [
            121,
            787
          ],
          "description": "Those using Snakeyaml to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack overflow. This effect may support a denial of service attack.",
          "published": "2022-11-11T19:00:31Z",
          "updated": "2024-06-21T21:33:52Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "dff65990-715e-4f71-aace-60d4436af108",
          "id": "GHSA-c4r9-r8fh-9vj2",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "medium",
              "method": "other"
            }
          ],
          "cwes": [
            121,
            787
          ],
          "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.",
          "published": "2022-09-06T00:00:27Z",
          "updated": "2024-03-15T12:30:36Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "d55a9a55-cf82-483f-9a7c-8bf5395ce510",
          "id": "GHSA-hhhw-99gj-p3c3",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "medium",
              "method": "other"
            }
          ],
          "cwes": [
            121,
            787
          ],
          "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.",
          "published": "2022-09-06T00:00:27Z",
          "updated": "2024-03-15T12:30:36Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "6c215a04-8ea0-421f-961b-d5cceb64fd13",
          "id": "GHSA-98wm-3w3q-mw94",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "medium",
              "method": "other"
            }
          ],
          "cwes": [
            121,
            787
          ],
          "description": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.",
          "published": "2022-09-06T00:00:27Z",
          "updated": "2024-03-15T12:30:36Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "38c08d91-3487-44c4-b258-d5a274a4ad05",
          "id": "GHSA-3mc7-4q67-w48m",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            400,
            776
          ],
          "description": "The package org.yaml:snakeyaml from 0 and before 1.31 are vulnerable to Denial of Service (DoS) due missing to nested depth limitation for collections.",
          "published": "2022-08-31T00:00:24Z",
          "updated": "2024-03-15T19:06:46Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "da9ea5d3-a3c2-4d1b-8425-a799e47a804f",
          "id": "GHSA-mjmj-j48q-9wg2",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            20,
            502
          ],
          "description": "### Summary SnakeYaml's `Constructor` class, which inherits from `SafeConstructor`, allows any type be deserialized given the following line: new Yaml(new Constructor(TestDataClass.class)).load(yamlContent); Types do not have to match the types of properties in the target class. A `ConstructorException` is thrown, but only after a malicious payload is deserialized. ### Severity High, lack of type checks during deserialization allows remote code execution. ### Proof of Concept Execute `bash run.sh`. The PoC uses Constructor to deserialize a payload for RCE. RCE is demonstrated by using a payload which performs a http request to http://127.0.0.1:8000. Example output of successful run of proof of concept: ``` $ bash run.sh [+] Downloading snakeyaml if needed [+] Starting mock HTTP server on 127.0.0.1:8000 to demonstrate RCE nc: no process found [+] Compiling and running Proof of Concept, which a payload that sends a HTTP request to mock web server. [+] An exception is expected. Exception: Cannot create property=payload for JavaBean=Main$TestDataClass@3cbbc1e0 in 'string', line 1, column 1: payload: !!javax.script.ScriptEn ... ^ Can not set java.lang.String field Main$TestDataClass.payload to javax.script.ScriptEngineManager in 'string', line 1, column 10: payload: !!javax.script.ScriptEngineManag ... ^ at org.yaml.snakeyaml.constructor.Constructor$ConstructMapping.constructJavaBean2ndStep(Constructor.java:291) at org.yaml.snakeyaml.constructor.Constructor$ConstructMapping.construct(Constructor.java:172) at org.yaml.snakeyaml.constructor.Constructor$ConstructYamlObject.construct(Constructor.java:332) at org.yaml.snakeyaml.constructor.BaseConstructor.constructObjectNoCheck(BaseConstructor.java:230) at org.yaml.snakeyaml.constructor.BaseConstructor.constructObject(BaseConstructor.java:220) at org.yaml.snakeyaml.constructor.BaseConstructor.constructDocument(BaseConstructor.java:174) at org.yaml.snakeyaml.constructor.BaseConstructor.getSingleData(BaseConstructor.java:158) at org.yaml.snakeyaml.Yaml.loadFromReader(Yaml.java:491) at org.yaml.snakeyaml.Yaml.load(Yaml.java:416) at Main.main(Main.java:37) Caused by: java.lang.IllegalArgumentException: Can not set java.lang.String field Main$TestDataClass.payload to javax.script.ScriptEngineManager at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167) at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171) at java.base/jdk.internal.reflect.UnsafeObjectFieldAccessorImpl.set(UnsafeObjectFieldAccessorImpl.java:81) at java.base/java.lang.reflect.Field.set(Field.java:780) at org.yaml.snakeyaml.introspector.FieldProperty.set(FieldProperty.java:44) at org.yaml.snakeyaml.constructor.Constructor$ConstructMapping.constructJavaBean2ndStep(Constructor.java:286) ... 9 more [+] Dumping Received HTTP Request. Will not be empty if PoC worked GET /proof-of-concept HTTP/1.1 User-Agent: Java/11.0.14 Host: localhost:8000 Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2 Connection: keep-alive ``` ### Further Analysis Potential mitigations include, leveraging SnakeYaml's SafeConstructor while parsing untrusted content. See https://bitbucket.org/snakeyaml/snakeyaml/issues/561/cve-2022-1471-vulnerability-in#comment-64581479 for discussion on the subject. A fix was released in version 2.0. See https://bitbucket.org/snakeyaml/snakeyaml/issues/561/cve-2022-1471-vulnerability-in#comment-64876314 for more information. ### Timeline **Date reported**: 4/11/2022 **Date fixed**: **Date disclosed**: 10/13/2022",
          "published": "2022-12-12T21:19:47Z",
          "updated": "2024-06-24T21:22:59Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "bdd3f85b-5284-4163-be5b-0dd84b9300ac",
          "id": "GHSA-668q-qrv7-99fm",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "medium",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "In logback version 1.2.7 and prior versions, an attacker with the required privileges to edit configurations files could craft a malicious configuration allowing to execute arbitrary code loaded from LDAP servers.",
          "published": "2021-12-17T20:00:50Z",
          "updated": "2023-01-30T05:04:55Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "0d58391c-d0fe-4b46-8f8d-6a49db7fb354",
          "id": "GHSA-vmq6-5m68-f53m",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "A serialization vulnerability in logback receiver component part of logback allows an attacker to mount a Denial-Of-Service attack by sending poisoned data. This is only exploitable if logback receiver component is deployed. See https://logback.qos.ch/manual/receivers.html",
          "published": "2023-11-29T12:30:16Z",
          "updated": "2023-12-05T21:31:13Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "0d58391c-d0fe-4b46-8f8d-6a49db7fb354",
          "id": "GHSA-vmq6-5m68-f53m",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "A serialization vulnerability in logback receiver component part of logback allows an attacker to mount a Denial-Of-Service attack by sending poisoned data. This is only exploitable if logback receiver component is deployed. See https://logback.qos.ch/manual/receivers.html",
          "published": "2023-11-29T12:30:16Z",
          "updated": "2023-12-05T21:31:13Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "17d2faa1-cd26-4ac7-8c68-c4a44ec398a8",
          "id": "GHSA-m394-8rww-3jr7",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "medium",
              "method": "other"
            }
          ],
          "cwes": [
            400
          ],
          "description": "### Impact When Jetty handles a request containing request headers with a large number of “quality” (i.e. q) parameters (such as what are seen on the `Accept`, `Accept-Encoding`, and `Accept-Language` request headers), the server may enter a denial of service (DoS) state due to high CPU usage while sorting the list of values based on their quality values. A single request can easily consume minutes of CPU time before it is even dispatched to the application. The only features within Jetty that can trigger this behavior are: - Default Error Handling - the `Accept` request header with the `QuotedQualityCSV` is used to determine what kind of content to send back to the client (html, text, json, xml, etc) - `StatisticsServlet` - uses the `Accept` request header with the `QuotedQualityCSV` to determine what kind of content to send back to the client (xml, json, text, html, etc) - `HttpServletRequest.getLocale()` - uses the `Accept-Language` request header with the `QuotedQualityCSV` to determine which “preferred” language is returned on this call. - `HttpservletRequest.getLocales()` - is similar to the above, but returns an ordered list of locales based on the quality values on the `Accept-Language` request header. - `DefaultServlet` - uses the `Accept-Encoding` request header with the `QuotedQualityCSV` to determine which kind of pre-compressed content should be sent back for static content (content that is not matched against a url-pattern in your web app) ### Versions `QuotedQualityCSV` was introduced to Jetty 9.3.9.v20160517 and the bug that introduced the vulnerability was in 9.4.6.v20170531. Currently, known vulnerable versions include: - 9.4.6.v20170531 thru to 9.4.36.v20210114 - 10.0.0 - 11.0.0 ### Workarounds Quality ordered values are used infrequently by jetty so they can be avoided by: * Do not use the default error page/handler. * Do not deploy the `StatisticsServlet` exposed to the network * Do not call `getLocale` API * Do not enable precompressed static content in the `DefaultServlet` ### Patches All patches are available for download from the Eclipse Jetty website at [https://www.eclipse.org/jetty/download.php](https://www.eclipse.org/jetty/download.php) - 9.4.37.v20210219 and greater - 10.0.1 and greater - 11.0.1 and greater",
          "published": "2021-03-10T03:46:47Z",
          "updated": "2023-02-01T05:05:09Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "f32ca540-f068-4392-bea0-c0d7b050b7d1",
          "id": "GHSA-m6cp-vxjx-65j6",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "low",
              "method": "other"
            }
          ],
          "cwes": [
            613
          ],
          "description": "### Impact If an exception is thrown from the `SessionListener#sessionDestroyed()` method, then the session ID is not invalidated in the session ID manager. On deployments with clustered sessions and multiple contexts this can result in a session not being invalidated. This can result in an application used on a shared computer being left logged in. There is no known path for an attacker to induce such an exception to be thrown, thus they must rely on an application to throw such an exception. The OP has also identified that during the call to `sessionDestroyed`, the `getLastAccessedTime()` throws an `IllegalStateException`, which potentially contrary to the servlet spec, so applications calling this method may always throw and fail to log out. If such an application was only tested on a non clustered test environment, then it may be deployed on a clustered environment with multiple contexts and fail to log out. ### Workarounds The application should catch all Throwables within their `SessionListener#sessionDestroyed()` implementations.",
          "published": "2021-06-23T20:23:04Z",
          "updated": "2023-02-01T05:05:59Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "6d35c4e5-f5ee-4572-af28-1ca71cf48158",
          "id": "GHSA-26vr-8j45-3r4w",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            400,
            551,
            755
          ],
          "description": "### Impact When using SSL/TLS with Jetty, either with HTTP/1.1, HTTP/2, or WebSocket, the server may receive an invalid large (greater than 17408) TLS frame that is incorrectly handled, causing CPU resources to eventually reach 100% usage. ### Workarounds The problem can be worked around by compiling the following class: ```java package org.eclipse.jetty.server.ssl.fix6072; import java.nio.ByteBuffer; import javax.net.ssl.SSLEngine; import javax.net.ssl.SSLEngineResult; import javax.net.ssl.SSLException; import javax.net.ssl.SSLHandshakeException; import org.eclipse.jetty.io.EndPoint; import org.eclipse.jetty.io.ssl.SslConnection; import org.eclipse.jetty.server.Connector; import org.eclipse.jetty.server.SslConnectionFactory; import org.eclipse.jetty.util.BufferUtil; import org.eclipse.jetty.util.annotation.Name; import org.eclipse.jetty.util.ssl.SslContextFactory; public class SpaceCheckingSslConnectionFactory extends SslConnectionFactory { public SpaceCheckingSslConnectionFactory(@Name(\"sslContextFactory\") SslContextFactory factory, @Name(\"next\") String nextProtocol) { super(factory, nextProtocol); } @Override protected SslConnection newSslConnection(Connector connector, EndPoint endPoint, SSLEngine engine) { return new SslConnection(connector.getByteBufferPool(), connector.getExecutor(), endPoint, engine, isDirectBuffersForEncryption(), isDirectBuffersForDecryption()) { @Override protected SSLEngineResult unwrap(SSLEngine sslEngine, ByteBuffer input, ByteBuffer output) throws SSLException { SSLEngineResult results = super.unwrap(sslEngine, input, output); if ((results.getStatus() == SSLEngineResult.Status.BUFFER_UNDERFLOW || results.getStatus() == SSLEngineResult.Status.OK && results.bytesConsumed() == 0 && results.bytesProduced() == 0) && BufferUtil.space(input) == 0) { BufferUtil.clear(input); throw new SSLHandshakeException(\"Encrypted buffer max length exceeded\"); } return results; } }; } } ``` This class can be deployed by: + The resulting class file should be put into a jar file (eg sslfix6072.jar) + The jar file should be made available to the server. For a normal distribution this can be done by putting the file into ${jetty.base}/lib + Copy the file `${jetty.home}/modules/ssl.mod` to `${jetty.base}/modules` + Edit the `${jetty.base}/modules/ssl.mod` file to have the following section: ``` [lib] lib/sslfix6072.jar ``` + Copy the file `${jetty.home}/etc/jetty-https.xml` and`${jetty.home}/etc/jetty-http2.xml` to `${jetty.base}/etc` + Edit files `${jetty.base}/etc/jetty-https.xml` and `${jetty.base}/etc/jetty-http2.xml`, changing any reference of `org.eclipse.jetty.server.SslConnectionFactory` to `org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory`. For example: ```xml <Call name=\"addIfAbsentConnectionFactory\"> <Arg> <New class=\"org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory\"> <Arg name=\"next\">http/1.1</Arg> <Arg name=\"sslContextFactory\"><Ref refid=\"sslContextFactory\"/></Arg> </New> </Arg> </Call> ``` + Restart Jetty",
          "published": "2021-04-06T17:31:30Z",
          "updated": "2023-09-26T11:11:47Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "d5c5815d-1742-46b6-953a-a4ed90fdd920",
          "id": "GHSA-p26g-97m4-6q7c",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "low",
              "method": "other"
            }
          ],
          "cwes": [
            200
          ],
          "description": "Nonstandard cookie parsing in Jetty may allow an attacker to smuggle cookies within other cookies, or otherwise perform unintended behavior by tampering with the cookie parsing mechanism. If Jetty sees a cookie VALUE that starts with `\"` (double quote), it will continue to read the cookie string until it sees a closing quote -- even if a semicolon is encountered. So, a cookie header such as: `DISPLAY_LANGUAGE=\"b; JSESSIONID=1337; c=d\"` will be parsed as one cookie, with the name `DISPLAY_LANGUAGE` and a value of `b; JSESSIONID=1337; c=d` instead of 3 separate cookies. ### Impact This has security implications because if, say, `JSESSIONID` is an `HttpOnly` cookie, and the `DISPLAY_LANGUAGE` cookie value is rendered on the page, an attacker can smuggle the `JSESSIONID` cookie into the `DISPLAY_LANGUAGE` cookie and thereby exfiltrate it. This is significant when an intermediary is enacting some policy based on cookies, so a smuggled cookie can bypass that policy yet still be seen by the Jetty server. ### Patches * 9.4.51.v20230217 - via PR #9352 * 10.0.15 - via PR #9339 * 11.0.15 - via PR #9339 ### Workarounds No workarounds ### References * https://www.rfc-editor.org/rfc/rfc2965 * https://www.rfc-editor.org/rfc/rfc6265",
          "published": "2023-04-18T22:19:57Z",
          "updated": "2023-11-06T05:01:53Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "f6ff72c7-6603-4627-899d-658f8f7c5f23",
          "id": "GHSA-qw69-rqj8-6qw8",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "medium",
              "method": "other"
            }
          ],
          "cwes": [
            400,
            770
          ],
          "description": "### Impact Servlets with multipart support (e.g. annotated with `@MultipartConfig`) that call `HttpServletRequest.getParameter()` or `HttpServletRequest.getParts()` may cause `OutOfMemoryError` when the client sends a multipart request with a part that has a name but no filename and a very large content. This happens even with the default settings of `fileSizeThreshold=0` which should stream the whole part content to disk. An attacker client may send a large multipart request and cause the server to throw `OutOfMemoryError`. However, the server may be able to recover after the `OutOfMemoryError` and continue its service -- although it may take some time. A very large number of parts may cause the same problem. ### Patches Patched in Jetty versions * 9.4.51.v20230217 - via PR #9345 * 10.0.14 - via PR #9344 * 11.0.14 - via PR #9344 ### Workarounds Multipart parameter `maxRequestSize` must be set to a non-negative value, so the whole multipart content is limited (although still read into memory). Limiting multipart parameter `maxFileSize` won't be enough because an attacker can send a large number of parts that summed up will cause memory issues. ### References * https://github.com/eclipse/jetty.project/issues/9076 * https://github.com/jakartaee/servlet/blob/6.0.0/spec/src/main/asciidoc/servlet-spec-body.adoc#32-file-upload",
          "published": "2023-04-19T18:15:45Z",
          "updated": "2023-11-06T05:02:06Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "ebc03317-a0b4-4b53-9cd0-7ae4281c02e6",
          "id": "GHSA-86wm-rrjm-8wh8",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "medium",
              "method": "other"
            }
          ],
          "cwes": [
            226
          ],
          "description": "### Impact If GZIP request body inflation is enabled and requests from different clients are multiplexed onto a single connection and if an attacker can send a request with a body that is received entirely by not consumed by the application, then a subsequent request on the same connection will see that body prepended to it's body. The attacker will not see any data, but may inject data into the body of the subsequent request CVE score is [4.8 AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:L](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:L&version=3.1) ### Workarounds The problem can be worked around by either: - Disabling compressed request body inflation by GzipHandler. - By always fully consuming the request content before sending a response. - By adding a `Connection: close` to any response where the servlet does not fully consume request content.",
          "published": "2020-12-02T18:28:18Z",
          "updated": "2024-02-21T17:23:14Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "c19b779d-2699-44de-a189-a0d18d8dc953",
          "id": "GHSA-cj7v-27pg-wf7q",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "low",
              "method": "other"
            }
          ],
          "cwes": [
            20
          ],
          "description": "### Description URI use within Jetty's `HttpURI` class can parse invalid URIs such as `http://localhost;/path` as having an authority with a host of `localhost;`. A URIs of the type `http://localhost;/path` should be interpreted to be either invalid or as `localhost;` to be the userinfo and no host. However, `HttpURI.host` returns `localhost;` which is definitely wrong. ### Impact This can lead to errors with Jetty's `HttpClient`, and Jetty's `ProxyServlet` / `AsyncProxyServlet` / `AsyncMiddleManServlet` wrongly interpreting an authority with no host as one with a host. ### Patches Patched in PR [#8146](https://github.com/eclipse/jetty.project/pull/8146) for Jetty version 9.4.47. Patched in PR [#8014](https://github.com/eclipse/jetty.project/pull/8015) for Jetty versions 10.0.10, and 11.0.10 ### Workarounds None. ### For more information If you have any questions or comments about this advisory: * Email us at security@webtide.com.",
          "published": "2022-07-07T20:55:34Z",
          "updated": "2023-01-29T05:06:01Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "a2897b13-bdeb-4a6c-802e-abf09fef10a9",
          "id": "GHSA-hmr7-m48g-48f6",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "medium",
              "method": "other"
            }
          ],
          "cwes": [
            130
          ],
          "description": "### Impact Jetty accepts the '+' character proceeding the content-length value in a HTTP/1 header field. This is more permissive than allowed by the RFC and other servers routinely reject such requests with 400 responses. There is no known exploit scenario, but it is conceivable that request smuggling could result if jetty is used in combination with a server that does not close the connection after sending such a 400 response. ### Workarounds There is no workaround as there is no known exploit scenario. ### Original Report [RFC 9110 Secion 8.6](https://www.rfc-editor.org/rfc/rfc9110#section-8.6) defined the value of Content-Length header should be a string of 0-9 digits. However we found that Jetty accepts \"+\" prefixed Content-Length, which could lead to potential HTTP request smuggling. Payload: ``` POST / HTTP/1.1 Host: a.com Content-Length: +16 Connection: close ​ 0123456789abcdef ``` When sending this payload to Jetty, it can successfully parse and identify the length. When sending this payload to NGINX, Apache HTTPd or other HTTP servers/parsers, they will return 400 bad request. This behavior can lead to HTTP request smuggling and can be leveraged to bypass WAF or IDS.",
          "published": "2023-09-14T16:17:27Z",
          "updated": "2023-11-06T05:01:59Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "4bb1fb03-b1bb-4ddf-bcf2-d5314c0c6442",
          "id": "GHSA-g3wg-6mcf-8jj6",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            378,
            379,
            552
          ],
          "description": "### Impact On Unix like systems, the system's temporary directory is shared between all users on that system. A collocated user can observe the process of creating a temporary sub directory in the shared temporary directory and race to complete the creation of the temporary subdirectory. If the attacker wins the race then they will have read and write permission to the subdirectory used to unpack web applications, including their WEB-INF/lib jar files and JSP files. If any code is ever executed out of this temporary directory, this can lead to a local privilege escalation vulnerability. Additionally, any user code uses of [WebAppContext::getTempDirectory](https://www.eclipse.org/jetty/javadoc/9.4.31.v20200723/org/eclipse/jetty/webapp/WebAppContext.html#getTempDirectory()) would similarly be vulnerable. Additionally, any user application code using the `ServletContext` attribute for the tempdir will also be impacted. See: https://javaee.github.io/javaee-spec/javadocs/javax/servlet/ServletContext.html#TEMPDIR For example: ```java import java.io.File; import java.io.IOException; import javax.servlet.ServletContext; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class ExampleServlet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { File tempDir = (File)getServletContext().getAttribute(ServletContext.TEMPDIR); // Potentially compromised // do something with that temp dir } } ``` Example: The JSP library itself will use the container temp directory for compiling the JSP source into Java classes before executing them. ### CVSSv3.1 Evaluation This vulnerability has been calculated to have a [CVSSv3.1 score of 7.8/10 (AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H&version=3.1) ### Patches Fixes were applied to the 9.4.x branch with: - https://github.com/eclipse/jetty.project/commit/53e0e0e9b25a6309bf24ee3b10984f4145701edb - https://github.com/eclipse/jetty.project/commit/9ad6beb80543b392c91653f6bfce233fc75b9d5f These will be included in releases: 9.4.33, 10.0.0.beta3, 11.0.0.beta3 ### Workarounds A work around is to set a temporary directory, either for the server or the context, to a directory outside of the shared temporary file system. For recent releases, a temporary directory can be created simple by creating a directory called `work` in the ${jetty.base} directory (the parent directory of the `webapps` directory). Alternately the java temporary directory can be set with the System Property `java.io.tmpdir`. A more detailed description of how jetty selects a temporary directory is below. The Jetty search order for finding a temporary directory is as follows: 1. If the [`WebAppContext` has a temp directory specified](https://www.eclipse.org/jetty/javadoc/current/org/eclipse/jetty/webapp/WebAppContext.html#setTempDirectory(java.io.File)), use it. 2. If the `ServletContext` has the `javax.servlet.context.tempdir` attribute set, and if directory exists, use it. 3. If a `${jetty.base}/work` directory exists, use it (since Jetty 9.1) 4. If a `ServletContext` has the `org.eclipse.jetty.webapp.basetempdir` attribute set, and if the directory exists, use it. 5. Use `System.getProperty(\"java.io.tmpdir\")` and use it. Jetty will end traversal at the first successful step. To mitigate this vulnerability the directory must be set to one that is not writable by an attacker. To avoid information leakage, the directory should also not be readable by an attacker. #### Setting a Jetty server temporary directory. Choices 3 and 5 apply to the server level, and will impact all deployed webapps on the server. For choice 3 just create that work directory underneath your `${jetty.base}` and restart Jetty. For choice 5, just specify your own `java.io.tmpdir` when you start the JVM for Jetty. ``` shell [jetty-distribution]$ java -Djava.io.tmpdir=/var/web/work -jar start.jar ``` #### Setting a Context specific temporary directory. The rest of the choices require you to configure the context for that deployed webapp (seen as `${jetty.base}/webapps/<context>.xml`) Example (excluding the DTD which is version specific): ``` xml <Configure class=\"org.eclipse.jetty.webapp.WebAppContext\"> <Set name=\"contextPath\"><Property name=\"foo\"/></Set> <Set name=\"war\">/var/web/webapps/foo.war</Set> <Set name=\"tempDirectory\">/var/web/work/foo</Set> </Configure> ``` ### References - https://github.com/eclipse/jetty.project/issues/5451 - [CWE-378: Creation of Temporary File With Insecure Permissions](https://cwe.mitre.org/data/definitions/378.html) - [CWE-379: Creation of Temporary File in Directory with Insecure Permissions](https://cwe.mitre.org/data/definitions/379.html) - [CodeQL Query PR To Detect Similar Vulnerabilities](https://github.com/github/codeql/pull/4473) ### Similar Vulnerabilities Similar, but not the same. - JUnit 4 - https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp - Google Guava - https://github.com/google/guava/issues/4011 - Apache Ant - https://nvd.nist.gov/vuln/detail/CVE-2020-1945 - JetBrains Kotlin Compiler - https://nvd.nist.gov/vuln/detail/CVE-2020-15824 ### For more information The original report of this vulnerability is below: > On Thu, 15 Oct 2020 at 21:14, Jonathan Leitschuh <jonathan.leitschuh@gmail.com> wrote: > Hi WebTide Security Team, > > I'm a security researcher writing some custom CodeQL queries to find Local Temporary Directory Hijacking Vulnerabilities. One of my queries flagged an issue in Jetty. > > https://lgtm.com/query/5615014766184643449/ > > I've recently been looking into security vulnerabilities involving the temporary directory because on unix-like systems, the system temporary directory is shared between all users. > There exists a race condition between the deletion of the temporary file and the creation of the directory. > > ```java > // ensure file will always be unique by appending random digits > tmpDir = File.createTempFile(temp, \".dir\", parent); // Attacker knows the full path of the file that will be generated > // delete the file that was created > tmpDir.delete(); // Attacker sees file is deleted and begins a race to create their own directory before Jetty. > // and make a directory of the same name > // SECURITY VULNERABILITY: Race Condition! - Attacker beats Jetty and now owns this directory > tmpDir.mkdirs(); > ``` > > https://github.com/eclipse/jetty.project/blob/1b59672b7f668b8a421690154b98b4b2b03f254b/jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java#L511-L518 > > In several cases the `parent` parameter will not be the system temporary directory. However, there is one case where it will be, as the last fallback. > > > https://github.com/eclipse/jetty.project/blob/1b59672b7f668b8a421690154b98b4b2b03f254b/jetty-webapp/src/main/java/org/eclipse/jetty/webapp/WebInfConfiguration.java#L467-L468 > > If any code is ever executed out of this temporary directory, this can lead to a local privilege escalation vulnerability. > > Would your team be willing to open a GitHub security advisory to continue the discussion and disclosure there? https://github.com/eclipse/jetty.project/security/advisories > > **This vulnerability disclosure follows Google's [90-day vulnerability disclosure policy](https://www.google.com/about/appsecurity/) (I'm not an employee of Google, I just like their policy). Full disclosure will occur either at the end of the 90-day deadline or whenever a patch is made widely available, whichever occurs first.** > > Cheers, > Jonathan Leitschuh",
          "published": "2020-11-04T17:50:24Z",
          "updated": "2023-11-27T23:07:53Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "76910119-ee18-4144-855b-b2fdab20e33c",
          "id": "GHSA-58qw-p7qm-5rvh",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "low",
              "method": "other"
            }
          ],
          "cwes": [
            611
          ],
          "description": "### From the reporter > `XmlParser` is vulnerable to XML external entity (XXE) vulnerability. > XmlParser is being used when parsing Jetty’s xml configuration files. An attacker might exploit > this vulnerability in order to achieve SSRF or cause a denial of service. > One possible scenario is importing a (remote) malicious WAR into a Jetty’s server, while the > WAR includes a malicious web.xml. ### Impact There are no circumstances in a normally deployed Jetty server where potentially hostile XML is given to the XmlParser class without the attacker already having arbitrary access to the server. I.e. in order to exploit `XmlParser` the attacker would already have the ability to deploy and execute hostile code. Specifically, Jetty has no protection against malicious web application and potentially hostile web applications should only be run on an isolated virtualisation. Thus this is not considered a vulnerability of the Jetty server itself, as any such usage of the jetty XmlParser is equally vulnerable as a direct usage of the JVM supplied SAX parser. No CVE will be allocated to this advisory. However, any direct usage of the `XmlParser` class by an application may be vulnerable. The impact would greatly depend on how the application uses `XmlParser`, but it could be a denial of service due to large entity expansion, or possibly the revealing local files if the XML results are accessible remotely. ### Patches Ability to configure the SAXParserFactory to fit the needs of your particular XML parser implementation have been merged as part of PR #10067 ### Workarounds Don't use `XmlParser` to parse data from users.",
          "published": "2023-07-10T21:52:39Z",
          "updated": "2023-09-05T22:39:32Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "d8add710-4eed-448d-b198-ecff8ffe86ea",
          "id": "GHSA-gwcr-j4wh-j3cq",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "medium",
              "method": "other"
            }
          ],
          "cwes": [
            200
          ],
          "description": "Requests to the `ConcatServlet` and `WelcomeFilter` are able to access protected resources within the `WEB-INF` directory. For example a request to the `ConcatServlet` with a URI of `/concat?/%2557EB-INF/web.xml` can retrieve the web.xml file. This can reveal sensitive information regarding the implementation of a web application. This occurs because both `ConcatServlet` and `WelcomeFilter` decode the supplied path to verify it is not within the `WEB-INF` or `META-INF` directories. It then uses this decoded path to call `RequestDispatcher` which will also do decoding of the path. This double decoding allows paths with a doubly encoded `WEB-INF` to bypass this security check. ### Impact This affects all versions of `ConcatServlet` and `WelcomeFilter` in versions before 9.4.41, 10.0.3 and 11.0.3. ### Workarounds If you cannot update to the latest version of Jetty, you can instead deploy your own version of the [`ConcatServlet`](https://github.com/eclipse/jetty.project/blob/4204526d2fdad355e233f6bf18a44bfe028ee00b/jetty-servlets/src/main/java/org/eclipse/jetty/servlets/ConcatServlet.java) and/or the [`WelcomeFilter`](https://github.com/eclipse/jetty.project/blob/4204526d2fdad355e233f6bf18a44bfe028ee00b/jetty-servlets/src/main/java/org/eclipse/jetty/servlets/WelcomeFilter.java) by using the code from the latest version of Jetty.",
          "published": "2021-06-10T15:43:22Z",
          "updated": "2023-02-01T05:05:51Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "123b8eaf-5572-4945-975d-21ed3c2f101d",
          "id": "GHSA-3gh6-v5v9-6v9j",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "low",
              "method": "other"
            }
          ],
          "cwes": [
            149
          ],
          "description": "If a user sends a request to a `org.eclipse.jetty.servlets.CGI` Servlet for a binary with a space in its name, the servlet will escape the command by wrapping it in quotation marks. This wrapped command, plus an optional command prefix, will then be executed through a call to Runtime.exec. If the original binary name provided by the user contains a quotation mark followed by a space, the resulting command line will contain multiple tokens instead of one. For example, if a request references a binary called file” name “here, the escaping algorithm will generate the command line string “file” name “here”, which will invoke the binary named file, not the one that the user requested. ```java if (execCmd.length() > 0 && execCmd.charAt(0) != '\"' && execCmd.contains(\" \")) execCmd = \"\\\"\" + execCmd + \"\\\"\"; ``` ### Exploit Scenario The cgi-bin directory contains a binary named exec and a subdirectory named exec” commands, which contains a file called bin1. The user sends to the CGI servlet a request for the filename exec” commands/bin1. This request will pass the file existence check on lines 194 through 205. The servlet will add quotation marks around this filename, resulting in the command line string “exec” commands/bin1”. When this string is passed to Runtime.exec, instead of executing the bin1 binary, the server will execute the exec binary with the argument commands/file1”. In addition to being incorrect, this behavior may bypass alias checks, and it may cause other unintended behaviors if a command prefix is configured. If the useFullPath configuration setting is off, the command need not pass the existence check. The attack would not rely on a binary and subdirectory having similar names, and the attack will succeed on a much wider variety of directory structures. ### Impact Users of the `org.eclipse.jetty.servlets.CGI` Servlet with a very specific command structure may have the wrong command executed. ### Patches No patch. In Jetty 9.x, 10.x, and 11.x the `org.eclipse.jetty.servlets.CGI` has been deprecated. In Jetty 12 (all environments) the `org.eclipse.jetty.servlets.CGI` has been entirely removed. ### Workarounds The `org.eclipse.jetty.servlets.CGI` Servlet should not be used. Fast CGI support is available instead. ### References * https://github.com/eclipse/jetty.project/pull/9516 * https://github.com/eclipse/jetty.project/pull/9889 * https://github.com/eclipse/jetty.project/pull/9888",
          "published": "2023-09-14T16:16:00Z",
          "updated": "2023-11-06T05:01:59Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "499117ae-d134-4505-8674-ed498531e7a9",
          "id": "GHSA-269g-pwp5-87pp",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "medium",
              "method": "other"
            }
          ],
          "cwes": [
            200,
            732
          ],
          "description": "### Vulnerability The JUnit4 test rule [TemporaryFolder](https://junit.org/junit4/javadoc/4.13/org/junit/rules/TemporaryFolder.html) contains a local information disclosure vulnerability. Example of vulnerable code: ```java public static class HasTempFolder { @Rule public TemporaryFolder folder = new TemporaryFolder(); @Test public void testUsingTempFolder() throws IOException { folder.getRoot(); // Previous file permissions: `drwxr-xr-x`; After fix:`drwx------` File createdFile= folder.newFile(\"myfile.txt\"); // unchanged/irrelevant file permissions File createdFolder= folder.newFolder(\"subfolder\"); // unchanged/irrelevant file permissions // ... } } ``` ### Impact On Unix like systems, the system's temporary directory is shared between all users on that system. Because of this, when files and directories are written into this directory they are, by default, readable by other users on that same system. This vulnerability **does not** allow other users to overwrite the contents of these directories or files. This is purely an information disclosure vulnerability. When analyzing the impact of this vulnerability, here are the important questions to ask: 1. Do the JUnit tests write sensitive information, like API keys or passwords, into the temporary folder? - If yes, this vulnerability impacts you, but only if you also answer 'yes' to question 2. - If no, this vulnerability does not impact you. 2. Do the JUnit tests ever execute in an environment where the OS has other untrusted users. _This may apply in CI/CD environments but normally won't be 'yes' for personal developer machines._ - If yes, and you answered 'yes' to question 1, this vulnerability impacts you. - If no, this vulnerability does not impact you. ### Patches Because certain JDK file system APIs were only added in JDK 1.7, this this fix is dependent upon the version of the JDK you are using. - Java 1.7 and higher users: this vulnerability is fixed in 4.13.1. - Java 1.6 and lower users: **no patch is available, you must use the workaround below.** ### Workarounds If you are unable to patch, or are stuck running on Java 1.6, specifying the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability. ### References - [CWE-200: Exposure of Sensitive Information to an Unauthorized Actor](https://cwe.mitre.org/data/definitions/200.html) - Fix commit https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae #### Similar Vulnerabilities - Google Guava - https://github.com/google/guava/issues/4011 - Apache Ant - https://nvd.nist.gov/vuln/detail/CVE-2020-1945 - JetBrains Kotlin Compiler - https://nvd.nist.gov/vuln/detail/CVE-2020-15824 ### For more information If you have any questions or comments about this advisory, please pen an issue in [junit-team/junit4](https://github.com/junit-team/junit4/issues).",
          "published": "2020-10-12T17:33:00Z",
          "updated": "2023-02-01T05:04:50Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "4ad3464b-09c7-40fa-ab51-754f3f196cd4",
          "id": "INT-f70z-tbpp-4o5d",
          "source": {
            "name": "INTERNAL"
          },
          "ratings": [
            {
              "source": {
                "name": "INTERNAL"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "0cdbb69e-0ac6-4efd-ad09-2f8ead5b2aad",
          "id": "INT-63e3-49kp-blqt",
          "source": {
            "name": "INTERNAL"
          },
          "ratings": [
            {
              "source": {
                "name": "INTERNAL"
              },
              "severity": "low",
              "method": "other"
            }
          ],
          "description": "testing",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "1f182b73-afb8-424c-8e08-533a0f702076",
          "id": "GHSA-j8jw-g6fq-mp7h",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            89
          ],
          "description": "A flaw was found in hibernate-core in versions prior to 5.3.20.Final and in 5.4.0.Final up to and including 5.4.23.Final. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SQL comments of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks. The highest threat from this vulnerability is to data confidentiality and integrity.",
          "published": "2022-02-09T22:57:29Z",
          "updated": "2024-06-27T16:39:59Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "8ba20df5-3877-4825-a8f2-b52e2d2f86d8",
          "id": "GHSA-8grg-q944-cch5",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "medium",
              "method": "other"
            }
          ],
          "cwes": [
            89
          ],
          "description": "A flaw was found in Hibernate ORM in versions before 5.3.18, 5.4.18 and 5.5.0.Beta1. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SELECT or GROUP BY parts of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks.",
          "published": "2022-02-10T23:05:04Z",
          "updated": "2024-06-27T18:05:49Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "55ebe39e-12f6-4360-aeba-9913ef7efb68",
          "id": "GHSA-hwj3-m3p6-hj38",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "critical",
              "method": "other"
            }
          ],
          "cwes": [
            611
          ],
          "description": "dom4j before 2.1.3 allows external DTDs and External Entities by default, which might enable XXE attacks. However, there is popular external documentation from OWASP showing how to enable the safe, non-default behavior in any application that uses dom4j. Note: This advisory applies to `dom4j:dom4j` version 1.x legacy artifacts. To resolve this a change to the latest version of `org.dom4j:dom4j` is recommended.",
          "published": "2020-06-05T16:13:36Z",
          "updated": "2023-01-27T05:02:30Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "8c0002e8-9326-40f7-9209-51020755ff02",
          "id": "GHSA-7r82-7xv7-xcpj",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "medium",
              "method": "other"
            }
          ],
          "cwes": [
            79
          ],
          "description": "Apache HttpClient versions prior to version 4.5.13 and 5.0.3 can misinterpret malformed authority component in request URIs passed to the library as java.net.URI object and pick the wrong target host for request execution.",
          "published": "2021-06-03T23:40:23Z",
          "updated": "2023-02-01T05:05:30Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "7b0674fc-e326-47d0-b34b-b5bfb523784b",
          "id": "GHSA-jvfv-hrrc-6q72",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "critical",
              "method": "other"
            }
          ],
          "cwes": [
            611
          ],
          "description": "The XMLChangeLogSAXParser() function in Liquibase prior to version 4.8.0 contains an issue that may lead to to Improper Restriction of XML External Entity Reference.",
          "published": "2022-03-05T00:00:45Z",
          "updated": "2023-01-27T05:02:46Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "c3fdf61d-7886-423b-8a29-b6ab6790c127",
          "id": "GHSA-wgmr-mf83-7x4j",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            400,
            410
          ],
          "description": "### Description Invalid HTTP/2 requests (for example, invalid URIs) are incorrectly handled by writing a blocking error response directly from the selector thread. If the client manages to exhaust the HTTP/2 flow control window, or TCP congest the connection, the selector thread will be blocked trying to write the error response. If this is repeated for all the selector threads, the server becomes unresponsive, causing the denial of service. ### Impact A malicious client may render the server unresponsive. ### Patches The fix is available in Jetty versions 9.4.47. 10.0.10, 11.0.10. ### Workarounds No workaround available within Jetty itself. One possible workaround is to filter the requests before sending them to Jetty (for example in a proxy) ### For more information If you have any questions or comments about this advisory: * Email us at security@webtide.com.",
          "published": "2022-07-07T20:55:40Z",
          "updated": "2023-07-24T19:39:20Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "affa7af3-427f-4223-8028-d9ac45e80e08",
          "id": "GHSA-qppj-fm5r-hxr3",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "medium",
              "method": "other"
            }
          ],
          "cwes": [
            400
          ],
          "description": "## HTTP/2 Rapid reset attack The HTTP/2 protocol allows clients to indicate to the server that a previous stream should be canceled by sending a RST_STREAM frame. The protocol does not require the client and server to coordinate the cancellation in any way, the client may do it unilaterally. The client may also assume that the cancellation will take effect immediately when the server receives the RST_STREAM frame, before any other data from that TCP connection is processed. Abuse of this feature is called a Rapid Reset attack because it relies on the ability for an endpoint to send a RST_STREAM frame immediately after sending a request frame, which makes the other endpoint start working and then rapidly resets the request. The request is canceled, but leaves the HTTP/2 connection open. The HTTP/2 Rapid Reset attack built on this capability is simple: The client opens a large number of streams at once as in the standard HTTP/2 attack, but rather than waiting for a response to each request stream from the server or proxy, the client cancels each request immediately. The ability to reset streams immediately allows each connection to have an indefinite number of requests in flight. By explicitly canceling the requests, the attacker never exceeds the limit on the number of concurrent open streams. The number of in-flight requests is no longer dependent on the round-trip time (RTT), but only on the available network bandwidth. In a typical HTTP/2 server implementation, the server will still have to do significant amounts of work for canceled requests, such as allocating new stream data structures, parsing the query and doing header decompression, and mapping the URL to a resource. For reverse proxy implementations, the request may be proxied to the backend server before the RST_STREAM frame is processed. The client on the other hand paid almost no costs for sending the requests. This creates an exploitable cost asymmetry between the server and the client. Multiple software artifacts implementing HTTP/2 are affected. This advisory was originally ingested from the `swift-nio-http2` repo advisory and their original conent follows. ## swift-nio-http2 specific advisory swift-nio-http2 is vulnerable to a denial-of-service vulnerability in which a malicious client can create and then reset a large number of HTTP/2 streams in a short period of time. This causes swift-nio-http2 to commit to a large amount of expensive work which it then throws away, including creating entirely new `Channel`s to serve the traffic. This can easily overwhelm an `EventLoop` and prevent it from making forward progress. swift-nio-http2 1.28 contains a remediation for this issue that applies reset counter using a sliding window. This constrains the number of stream resets that may occur in a given window of time. Clients violating this limit will have their connections torn down. This allows clients to continue to cancel streams for legitimate reasons, while constraining malicious actors.",
          "published": "2023-10-10T21:28:24Z",
          "updated": "2024-06-21T21:34:00Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "bc8ec43b-7cba-4167-9a9d-901fcb443ac8",
          "id": "GHSA-rggv-cv7r-mw98",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            400
          ],
          "description": "### Impact If an HTTP/2 connection gets TCP congested, when an idle timeout occurs the HTTP/2 session is marked as closed, and then a GOAWAY frame is queued to be written. However it is not written because the connection is TCP congested. When another idle timeout period elapses, it is then supposed to hard close the connection, but it delegates to the HTTP/2 session which reports that it has already been closed so it does not attempt to hard close the connection. This leaves the connection in ESTABLISHED state (i.e. not closed), TCP congested, and idle. An attacker can cause many connections to end up in this state, and the server may run out of file descriptors, eventually causing the server to stop accepting new connections from valid clients. The client may also be impacted (if the server does not read causing a TCP congestion), but the issue is more severe for servers. ### Patches Patched versions: * 9.4.54 * 10.0.20 * 11.0.20 * 12.0.6 ### Workarounds Disable HTTP/2 and HTTP/3 support until you can upgrade to a patched version of Jetty. HTTP/1.x is not affected. ### References * https://github.com/jetty/jetty.project/issues/11256.",
          "published": "2024-02-26T20:13:46Z",
          "updated": "2024-05-02T18:38:19Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "affa7af3-427f-4223-8028-d9ac45e80e08",
          "id": "GHSA-qppj-fm5r-hxr3",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "medium",
              "method": "other"
            }
          ],
          "cwes": [
            400
          ],
          "description": "## HTTP/2 Rapid reset attack The HTTP/2 protocol allows clients to indicate to the server that a previous stream should be canceled by sending a RST_STREAM frame. The protocol does not require the client and server to coordinate the cancellation in any way, the client may do it unilaterally. The client may also assume that the cancellation will take effect immediately when the server receives the RST_STREAM frame, before any other data from that TCP connection is processed. Abuse of this feature is called a Rapid Reset attack because it relies on the ability for an endpoint to send a RST_STREAM frame immediately after sending a request frame, which makes the other endpoint start working and then rapidly resets the request. The request is canceled, but leaves the HTTP/2 connection open. The HTTP/2 Rapid Reset attack built on this capability is simple: The client opens a large number of streams at once as in the standard HTTP/2 attack, but rather than waiting for a response to each request stream from the server or proxy, the client cancels each request immediately. The ability to reset streams immediately allows each connection to have an indefinite number of requests in flight. By explicitly canceling the requests, the attacker never exceeds the limit on the number of concurrent open streams. The number of in-flight requests is no longer dependent on the round-trip time (RTT), but only on the available network bandwidth. In a typical HTTP/2 server implementation, the server will still have to do significant amounts of work for canceled requests, such as allocating new stream data structures, parsing the query and doing header decompression, and mapping the URL to a resource. For reverse proxy implementations, the request may be proxied to the backend server before the RST_STREAM frame is processed. The client on the other hand paid almost no costs for sending the requests. This creates an exploitable cost asymmetry between the server and the client. Multiple software artifacts implementing HTTP/2 are affected. This advisory was originally ingested from the `swift-nio-http2` repo advisory and their original conent follows. ## swift-nio-http2 specific advisory swift-nio-http2 is vulnerable to a denial-of-service vulnerability in which a malicious client can create and then reset a large number of HTTP/2 streams in a short period of time. This causes swift-nio-http2 to commit to a large amount of expensive work which it then throws away, including creating entirely new `Channel`s to serve the traffic. This can easily overwhelm an `EventLoop` and prevent it from making forward progress. swift-nio-http2 1.28 contains a remediation for this issue that applies reset counter using a sliding window. This constrains the number of stream resets that may occur in a given window of time. Clients violating this limit will have their connections torn down. This allows clients to continue to cancel streams for legitimate reasons, while constraining malicious actors.",
          "published": "2023-10-10T21:28:24Z",
          "updated": "2024-06-21T21:34:00Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "c8bd5d7e-e9be-459c-b6e2-05de86a00bb9",
          "id": "GHSA-wgh7-54f2-x98r",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "high",
              "method": "other"
            }
          ],
          "cwes": [
            190
          ],
          "description": "An integer overflow in `MetaDataBuilder.checkSize` allows for HTTP/2 HPACK header values to exceed their size limit. In `MetaDataBuilder.java`, the following code determines if a header name or value exceeds the size limit, and throws an exception if the limit is exceeded: ```java 291 public void checkSize(int length, boolean huffman) throws SessionException 292 { 293 // Apply a huffman fudge factor 294 if (huffman) 295 length = (length * 4) / 3; 296 if ((_size + length) > _maxSize) 297 throw new HpackException.SessionException(\"Header too large %d > %d\", _size + length, _maxSize); 298 } ``` However, when length is very large and huffman is true, the multiplication by 4 in line 295 will overflow, and length will become negative. (_size+length) will now be negative, and the check on line 296 will not be triggered. Furthermore, `MetaDataBuilder.checkSize` allows for user-entered HPACK header value sizes to be negative, potentially leading to a very large buffer allocation later on when the user-entered size is multiplied by 2. In `MetaDataBuilder.java`, the following code determines if a header name or value exceeds the size limit, and throws an exception if the limit is exceeded: ```java public void checkSize(int length, boolean huffman) throws SessionException { // Apply a huffman fudge factor if (huffman) length = (length * 4) / 3; if ((_size + length) > _maxSize) throw new HpackException.SessionException(\"Header too large %d > %d\", _size + length, _maxSize); } ``` However, no exception is thrown in the case of a negative size. Later, in `Huffman.decode`, the user-entered length is multiplied by 2 before allocating a buffer: ```java public static String decode(ByteBuffer buffer, int length) throws HpackException.CompressionException { Utf8StringBuilder utf8 = new Utf8StringBuilder(length * 2); // ... ``` This means that if a user provides a negative length value (or, more precisely, a length value which, when multiplied by the 4/3 fudge factor, is negative), and this length value is a very large positive number when multiplied by 2, then the user can cause a very large buffer to be allocated on the server. ### Exploit Scenario 1 An attacker repeatedly sends HTTP messages with the HPACK header 0x00ffffffffff02. Each time this header is decoded: + `HpackDecode.decode` will determine that a Huffman-coded value of length 805306494 needs to be decoded. + `MetaDataBuilder.checkSize` will approve this length. + Huffman.decode will allocate a 1.6 GB string array. + Huffman.decode will have a buffer overflow error, and the array will be deallocated the next time garbage collection happens. (Note: this can be delayed by appending valid huffman-coded characters to the end of the header.) Depending on the timing of garbage collection, the number of threads, and the amount of memory available on the server, this may cause the server to run out of memory. ### Exploit Scenario 2 An attacker repeatedly sends HTTP messages with the HPACK header 0x00ff8080ffff0b. Each time this header is decoded: + HpackDecode.decode will determine that a Huffman-coded value of length -1073758081 needs to be decoded + MetaDataBuilder.checkSize will approve this length + The number will be multiplied by 2 to get 2147451134, and Huffman.decode will allocate a 2.1 GB string array + Huffman.decode will have a buffer overflow error, and the array will be deallocated the next time garbage collection happens (Note that this deallocation can be delayed by adding valid Huffman-coded characters to the end of the header) Depending on the timing of garbage collection, the number of threads, and the amount of memory available on the server, this may cause the server to run out of memory. ### Impact Users of HTTP/2 can be impacted by a remote denial of service attack. ### Patches Fixed in Jetty 10.0.16 and Jetty 11.0.16 Fixed in Jetty 9.4.53 Jetty 12.x is unaffected. ### Workarounds No workarounds possible, only patched versions of Jetty. ### References * https://github.com/eclipse/jetty.project/pull/9634",
          "published": "2023-10-10T21:16:23Z",
          "updated": "2024-06-21T21:33:57Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "f987bc98-65f5-402b-8b39-7e8e3e730ebe",
          "id": "GHSA-w4g2-9hj6-5472",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "medium",
              "method": "other"
            }
          ],
          "cwes": [
            295
          ],
          "description": "Pivotal Spring AMQP, 1.x versions prior to 1.7.10 and 2.x versions prior to 2.0.6, expose a man-in-the-middle vulnerability due to lack of hostname validation. A malicious user that has the ability to intercept traffic would be able to view data in transit.",
          "published": "2018-10-18T18:06:08Z",
          "updated": "2023-01-09T05:03:38Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "5acc2eee-8433-4a66-b9c5-3dcc7be5b29a",
          "id": "GHSA-mm8h-8587-p46h",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "medium",
              "method": "other"
            }
          ],
          "cwes": [
            400
          ],
          "description": "### Summary `maxBodyLebgth` was not used when receiving Message objects. Attackers could just send a very large Message causing a memory overflow and triggering an OOM Error. ### PoC #### RbbitMQ * Use RabbitMQ 3.11.16 as MQ and specify Message Body size 512M (here it only needs to be larger than the Consumer memory) * Start RabbitMQ #### Producer * Build a String of length 256M and send it to Consumer ``` package org.springframework.amqp.helloworld; import org.springframework.amqp.core.AmqpTemplate; import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.AnnotationConfigApplicationContext; public class Producer { public static void main(String[] args) { ApplicationContext context = new AnnotationConfigApplicationContext(HelloWorldConfiguration.class); AmqpTemplate amqpTemplate = context.getBean(AmqpTemplate.class); String s = \"A\"; for(int i=0;i<28;++i){ s = s + s; System.out.println(i); } amqpTemplate.convertAndSend(s); System.out.println(\"Send Finish\"); } } ``` #### Consumer * First set the heap memory size to 128M * Read the message sent by the Producer from the MQ and print the length ``` package org.springframework.amqp.helloworld; import org.springframework.amqp.core.AmqpTemplate; import org.springframework.amqp.core.Message; import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.AnnotationConfigApplicationContext; public class Consumer { public static void main(String[] args) { ApplicationContext context = new AnnotationConfigApplicationContext(HelloWorldConfiguration.class); AmqpTemplate amqpTemplate = context.getBean(AmqpTemplate.class); Object o = amqpTemplate.receiveAndConvert(); if(o != null){ String s = o.toString(); System.out.println(\"Received Length : \" + s.length()); }else{ System.out.println(\"null\"); } } } ``` #### Results * Run the Producer first, then the Consumer * Consumer throws OOM Exception ### Impact Users of RabbitMQ may suffer from DoS attacks from RabbitMQ Java client which will ultimately exhaust the memory of the consumer.",
          "published": "2023-10-24T01:49:09Z",
          "updated": "2023-11-05T05:04:23Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "815a1358-2bd4-4028-bd3e-8219747c78f6",
          "id": "GHSA-h376-j262-vhq6",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "critical",
              "method": "other"
            }
          ],
          "cwes": [
            502
          ],
          "description": "### Impact H2 Console in versions since 1.1.100 (2008-10-14) to 2.0.204 (2021-12-21) inclusive allows loading of custom classes from remote servers through JNDI. H2 Console doesn't accept remote connections by default. If remote access was enabled explicitly and some protection method (such as security constraint) wasn't set, an intruder can load own custom class and execute its code in a process with H2 Console (H2 Server process or a web server with H2 Console servlet). It is also possible to load them by creation a linked table in these versions, but it requires `ADMIN` privileges and user with `ADMIN` privileges has full access to the Java process by design. These privileges should never be granted to untrusted users. ### Patches Since version 2.0.206 H2 Console and linked tables explicitly forbid attempts to specify LDAP URLs for JNDI. Only local data sources can be used. ### Workarounds H2 Console should never be available to untrusted users. `-webAllowOthers` is a dangerous setting that should be avoided. H2 Console Servlet deployed on a web server can be protected with a security constraint: https://h2database.com/html/tutorial.html#usingH2ConsoleServlet If `webAllowOthers` is specified, you need to uncomment and edit `<security-role>` and `<security-constraint>` as necessary. See documentation of your web server for more details. ### References This issue was found and privately reported to H2 team by [JFrog Security](https://www.jfrog.com/)'s vulnerability research team with detailed information.",
          "published": "2022-01-06T23:55:09Z",
          "updated": "2023-02-25T00:31:20Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        },
        {
          "bom-ref": "c8a50465-16df-44e0-84e9-7acff5870a51",
          "id": "GHSA-45hx-wfhj-473x",
          "source": {
            "name": "GITHUB",
            "url": "https://github.com/advisories"
          },
          "ratings": [
            {
              "source": {
                "name": "GITHUB",
                "url": "https://github.com/advisories"
              },
              "severity": "critical",
              "method": "other"
            }
          ],
          "cwes": [
            88
          ],
          "description": "H2 Console before 2.1.210 allows remote attackers to execute arbitrary code via a jdbc:h2:mem JDBC URL containing the IGNORE_UNKNOWN_SETTINGS=TRUE;FORBID_CREATION=FALSE;INIT=RUNSCRIPT substring, a different vulnerability than CVE-2021-42392.",
          "published": "2022-01-21T23:07:39Z",
          "updated": "2023-08-18T15:47:05Z",
          "affects": [
            {
              "ref": "602de70a-7107-4ac8-9ad2-3c1c816892a7"
            }
          ]
        }
      ]
    }
  }
}