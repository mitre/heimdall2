<#
.SYNOPSIS
  Initializes a Docker-based development environment by creating a `.env` file
  and generating secrets and configuration values.

.DESCRIPTION
  This script:
    - Creates a `.env` file if it doesn't exist
    - Adds necessary environment variables like `DATABASE_PASSWORD`, `JWT_SECRET`, and `NGINX_HOST`
    - Prompts the user for optional or missing values with sensible defaults
    - Optionally enables API key support
    - Generates a self-signed SSL certificate if one does not already exist

.NOTES
  Run from the root of your project.
  Requires OpenSSL installed and available in the system path.
  The `.env` file generated by this script is written to the root directory.
#>

# Define file and path variables
$envFile = ".env"
$certPath = "nginx/certs"
$certCrt = "$certPath/ssl_certificate.crt"
$certKey = "$certPath/ssl_certificate_key.key"

# -------------------------------------------------------------------
# SUPPORTING FUNCTIONS
# -------------------------------------------------------------------

# Generates a cryptographically secure random hexadecimal string.
function New-RandomHex {
  param ([int]$Length)
  $bytes = New-Object byte[] ($Length / 2)
  [System.Security.Cryptography.RandomNumberGenerator]::Create().GetBytes($bytes)
  return ($bytes | ForEach-Object { $_.ToString("x2") }) -join ''
}

# Prompts the user for input, using a default value if no input is given.
function Read-Default {
  param (
    [string]$Prompt,
    [string]$Default
  )
  $val = Read-Host "$Prompt (leave blank to use default [$Default])"
  return if ([string]::IsNullOrWhiteSpace($val)) { $Default } else { $val }
}

# Check if the .env file already exists
if (Test-Path $envFile) {
  Write-Host ".env already exists. If you would like to regenerate nginx secrets, please delete the files in $certPath run this script."
  Write-Host "WARNING: Re-running this script will cause the database password to be reset within the .env file,"
  Write-Host "but the database will still expect the old password."
  Write-Host "Options:"
  Write-Host "  1) Change DATABASE_PASSWORD in the .env back to the old one"
  Write-Host "  2) Connect to the database and update password"
  Write-Host "  3) Delete the 'data/' folder (WARNING: deletes all data)"
} else {
  Write-Host ".env does not exist, creating..."
  New-Item -ItemType File -Path $envFile -Force | Out-Null
}

# Appends a key-value pair to the .env file only if the key is not already present.
function Write-IfMissing {
  param (
    [string]$Key,
    [string]$Value
  )
  if (-not (Select-String -Path $envFile -Pattern "^$Key=" -Quiet)) {
    Add-Content -Path $envFile -Value "$Key=$Value"
  }
}

# ---------------------- Begin main execution ----------------------
# Prompt for DATABASE_USERNAME if not set
if (-not (Select-String -Path $envFile -Pattern "^DATABASE_PASSWORD=" -Quiet)) {
  Write-Host '"DATABASE_PASSWORD" was not found within the .env file, generating secret...'
  $dbPass = New-RandomHex -Length 66
  Write-IfMissing -Key "DATABASE_PASSWORD" -Value $dbPass
}

# Prompt for JWT_EXPIRE_TIME or use default
$defaultExpire = "1d"
if (-not (Select-String -Path $envFile -Pattern "^JWT_EXPIRE_TIME=" -Quiet)) {
  Write-Host '"JWT_EXPIRE_TIME" was not found within the .env file.'
  $expire = Read-Default -Prompt "Enter JWT_EXPIRE_TIME (e.g. 1d or 25m)" -Default $defaultExpire
  Write-IfMissing -Key "JWT_EXPIRE_TIME" -Value $expire
}

# Generate JWT_SECRET if not set
if (-not (Select-String -Path $envFile -Pattern "^JWT_SECRET=" -Quiet)) {
  Write-Host '"JWT_SECRET" was not found within the .env file, generating secret...'
  $jwtSecret = New-RandomHex -Length 128
  Write-IfMissing -Key "JWT_SECRET" -Value $jwtSecret
}

# Optional: Enable API keys
if (-not (Select-String -Path $envFile -Pattern "^API_KEY_SECRET=" -Quiet)) {
  $enable = Read-Host "API_KEY_SECRET was not found. Enable API keys [Y/n]"
  if ($enable -match "^(Y|y|)$") {
    $apiKey = New-RandomHex -Length 66
    Write-IfMissing -Key "API_KEY_SECRET" -Value $apiKey
  }
}

# Prompt for NGINX_HOST if not set
if (-not (Select-String -Path $envFile -Pattern "^NGINX_HOST=" -Quiet)) {
  Write-Host '"NGINX_HOST" was not found in the .env file.'
  $defaultHost = "127.0.0.1"
  $nginxHost = Read-Default -Prompt "Enter your FQDN/Hostname/IP Address" -Default $defaultHost
  Write-IfMissing -Key "NGINX_HOST" -Value $nginxHost
}

# Generate SSL certificate if missing
if (Test-Path $certCrt) {
  Write-Host "SSL Certificate already exists. To regenerate, delete ./nginx/certs/ and re-run."
} else {
  Write-Host "SSL Certificate does not exist. Creating self-signed certificate..."
  Write-Host "Be sure your production environment is configured to work with your self-signed certificate."
  if (-not (Test-Path $certPath)) {
    New-Item -ItemType Directory -Path $certPath -Force | Out-Null
  }

  & openssl req -newkey rsa:4096 -x509 -sha256 -days 7 -nodes `
    -out $certCrt -keyout $certKey `
    -subj "/C=US/ST=SelfSigned/L=SelfSigned/O=SelfSigned/OU=SelfSigned"

  Write-Host "Certificates were generated."
}
