{
  "name": "aws-rds-crunchy-data-postgresql-stig-baseline",
  "title": "aws-rds-crunchy-data-postgresql-stig-baseline",
  "maintainer": "MITRE InSpec Team",
  "copyright": "The MITRE Corporation, 2022",
  "copyright_email": "saf@groups.mitre.org",
  "summary": "Inspec Validation Profile for AWS RDS hosted Crunchy Data PostgreSQL Security Technical Implementation Guide",
  "license": "Apache-2.0",
  "Description": "An InSpec Compliance Profile.",
  "version": "1.1.1",
  "inspec_version": ">= 4.0",
  "depends": [
    {
      "name": "crunchy-data-postgresql-stig-baseline",
      "url": "https://github.com/mitre/crunchy-data-postgresql-stig-baseline/archive/main.tar.gz",
      "status": "loaded"
    }
  ],
  "inputs": [],
  "supports": [],
  "controls": [
    {
      "title": "PostgreSQL must be configured to prohibit or restrict the use of organization-defined functions, ports, \n\tprotocols, and/or services, as defined in the PPSM CAL and vulnerability assessments.",
      "desc": "To prevent unauthorized connection of devices, unauthorized transfer of information, or unauthorized \n\ttunneling (i.e., embedding of data types within data types), organizations must disable or restrict unused or \n\tunnecessary physical and logical ports/protocols/services on information systems.\n\nApplications are capable of providing a wide variety of functions and services. Some of the functions and services \nprovided by default may not be necessary to support essential organizational operations. Additionally, it is sometimes \nconvenient to provide multiple services from a single component (e.g., email and web services); however, doing so \nincreases risk over limiting the services provided by any one component. \n\nTo support the requirements and principles of least functionality, the application must support the organizational \nrequirements providing only essential capabilities and limiting the use of ports, protocols, and/or services to only \nthose required, authorized, and approved to conduct official business or to address authorized quality of life issues.\n\nDatabase Management Systems using ports, protocols, and services deemed unsafe are open to attack through those ports, \nprotocols, and services. This can allow unauthorized access to the database and through the database to other \ncomponents of the information system.",
      "descriptions": {
        "default": "To prevent unauthorized connection of devices, unauthorized transfer of information, or unauthorized \n\ttunneling (i.e., embedding of data types within data types), organizations must disable or restrict unused or \n\tunnecessary physical and logical ports/protocols/services on information systems.\n\nApplications are capable of providing a wide variety of functions and services. Some of the functions and services \nprovided by default may not be necessary to support essential organizational operations. Additionally, it is sometimes \nconvenient to provide multiple services from a single component (e.g., email and web services); however, doing so \nincreases risk over limiting the services provided by any one component. \n\nTo support the requirements and principles of least functionality, the application must support the organizational \nrequirements providing only essential capabilities and limiting the use of ports, protocols, and/or services to only \nthose required, authorized, and approved to conduct official business or to address authorized quality of life issues.\n\nDatabase Management Systems using ports, protocols, and services deemed unsafe are open to attack through those ports, \nprotocols, and services. This can allow unauthorized access to the database and through the database to other \ncomponents of the information system.",
        "rationale": "",
        "check": "As the database administrator, run the following SQL:\n\n$ psql -c \"SHOW port\"\n$ psql -c \"SHOW listen_addresses\"\n\nIf the currently defined address:port configuration is deemed prohibited, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary \n\tcontent APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo change the listening port of the database, as the database administrator, change the following setting in \npostgresql.conf: \n\n$ sudo su - postgres \n$ vi $PGDATA/postgresql.conf \n\nChange the port parameter to the desired port. \n\nNext, restart the database: \n\n# SYSTEMD SERVER ONLY \n$ sudo systemctl restart postgresql-${PGVER?} \n\nNote: psql uses the port 5432 by default. This can be changed by specifying the port with psql or by setting the \nPGPORT environment variable: \n\n$ psql -p 5432 -c \"SHOW port\" \n$ export PGPORT=5432"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000142-DB-000094",
        "gid": "V-233511",
        "rid": "SV-233511r617335_rule",
        "stig_id": "CD12-00-000100",
        "fix_id": "F-36670r617334_fix",
        "cci": [
          "CCI-000382"
        ],
        "nist": [
          "CM-7 b"
        ]
      },
      "code": "  control \"V-233511\" do\n\n   sql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n    describe sql.query('SHOW port;', [input('pg_db')]) do\n      its('output') { should eq input('pg_port') }\n    end\n\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233511.rb",
        "line": 5
      },
      "id": "V-233511"
    },
    {
      "title": "PostgreSQL must produce audit records containing sufficient information to establish the outcome (success or \n  failure) of the events.",
      "desc": "Information system auditing capability is critical for accurate forensic analysis. Without information about \n  the outcome of events, security personnel cannot make an accurate assessment as to whether an attack was successful \n  or if changes were made to the security state of the system.\n\nEvent outcomes can include indicators of event success or failure and event-specific results (e.g., the security state \n  of the information system after the event occurred). As such, they also provide a means to measure the impact of an \n  event and help authorized personnel to determine the appropriate response.",
      "descriptions": {
        "default": "Information system auditing capability is critical for accurate forensic analysis. Without information about \n  the outcome of events, security personnel cannot make an accurate assessment as to whether an attack was successful \n  or if changes were made to the security state of the system.\n\nEvent outcomes can include indicators of event success or failure and event-specific results (e.g., the security state \n  of the information system after the event occurred). As such, they also provide a means to measure the impact of an \n  event and help authorized personnel to determine the appropriate response.",
        "rationale": "",
        "check": "Note: The following instructions use the PGLOG environment variables. See supplementary content \n  APPENDIX-I for instructions on configuring them.\n\nAs a database administrator (shown here as \"postgres\"), create a table, insert a value, alter the table and update \nthe table by running the following SQL:\n\nCREATE TABLE stig_test(id INT);\nINSERT INTO stig_test(id) VALUES (0);\nALTER TABLE stig_test ADD COLUMN name text;\nUPDATE stig_test SET id = 1 WHERE id = 0;\n\nNext, as a user without access to the stig_test table, run the following SQL:\n\nINSERT INTO stig_test(id) VALUES (1);\nALTER TABLE stig_test DROP COLUMN name;\nUPDATE stig_test SET id = 0 WHERE id = 1;\n\nThe prior SQL should generate errors:\n\nERROR: permission denied for relation stig_test\nERROR: must be owner of relation stig_test\nERROR: permission denied for relation stig_test\n\nNow, as the database administrator, drop the test table by running the following SQL:\n\nDROP TABLE stig_test;\n\nNow verify the errors were logged:\n\n$ sudo su - postgres\n$ cat ${PGLOG?}/<latest_logfile>\n< 2016-02-23 14:51:31.103 EDT psql postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT [local] >LOG: AUDIT: SESSION,1,1,DDL,CREATE TABLE,,,CREATE TABLE stig_test(id INT);,<none>\n< 2016-02-23 14:51:44.835 EDT psql postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT [local] >LOG: AUDIT: SESSION,2,1,WRITE,INSERT,,,INSERT INTO stig_test(id) VALUES (0);,<none>\n< 2016-02-23 14:53:25.805 EDT psql postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT [local] >LOG: AUDIT: SESSION,3,1,DDL,ALTER TABLE,,,ALTER TABLE stig_test ADD COLUMN name text;,<none>\n< 2016-02-23 14:53:54.381 EDT psql postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT [local] >LOG: AUDIT: SESSION,4,1,WRITE,UPDATE,,,UPDATE stig_test SET id = 1 WHERE id = 0;,<none>\n< 2016-02-23 14:54:20.832 EDT psql postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT [local] >ERROR: permission denied for relation stig_test\n< 2016-02-23 14:54:20.832 EDT psql postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT [local] >STATEMENT: INSERT INTO stig_test(id) VALUES (1);\n< 2016-02-23 14:54:41.032 EDT psql postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT [local] >ERROR: must be owner of relation stig_test\n< 2016-02-23 14:54:41.032 EDT psql postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT [local] >STATEMENT: ALTER TABLE stig_test DROP COLUMN name;\n< 2016-02-23 14:54:54.378 EDT psql postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT [local] >ERROR: permission denied for relation stig_test\n< 2016-02-23 14:54:54.378 EDT psql postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT [local] >STATEMENT: UPDATE stig_test SET id = 0 WHERE id = 1;\n< 2016-02-23 14:55:23.723 EDT psql postgres postgres 570bf307.3b0a 2016-04-11 14:55:03 EDT [local] >LOG: AUDIT: SESSION,1,1,DDL,DROP TABLE,,,DROP TABLE stig_test;,<none>\n\nIf audit records exist without the outcome of the event that occurred, this is a finding.",
        "fix": "Using pgaudit PostgreSQL can be configured to audit various facets of PostgreSQL. See supplementary \n  content APPENDIX-B for documentation on installing pgaudit. \n\nAll errors, denials, and unsuccessful requests are logged if logging is enabled. See supplementary content APPENDIX-C \nfor documentation on enabling logging. \n\nNote: The following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F \nfor instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nWith pgaudit and logging enabled, set the following configuration settings in postgresql.conf, as the database \nadministrator (shown here as \"postgres\"), to the following: \n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf \npgaudit.log_catalog='on' \npgaudit.log_level='log' \npgaudit.log_parameter='on' \npgaudit.log_statement_once='off' \npgaudit.log='all, -misc' \n\nNext, tune the following logging configurations in postgresql.conf: \n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf \nlog_line_prefix = '< %m %u %d %e: >' \nlog_error_verbosity = default \n\nLast, as the system administrator, restart PostgreSQL: \n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000099-DB-000043",
        "gid": "V-233512",
        "rid": "SV-233512r617333_rule",
        "stig_id": "CD12-00-000200",
        "fix_id": "F-36671r606760_fix",
        "cci": [
          "CCI-000134"
        ],
        "nist": [
          "AU-3"
        ]
      },
      "code": "  control \"V-233512\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233512.rb",
        "line": 3
      },
      "id": "V-233512"
    },
    {
      "title": "Security-relevant software updates to PostgreSQL must be installed within the time period directed by an \n\tauthoritative source (e.g., IAVM, CTOs, DTMs, and STIGs).",
      "desc": "Security flaws with software applications, including database management systems, are discovered daily. \n\tVendors are constantly updating and patching their products to address newly discovered security vulnerabilities. \n\tOrganizations (including any contractor to the organization) are required to promptly install security-relevant \n\tsoftware updates (e.g., patches, service packs, and hot fixes). Flaws discovered during security assessments, \n\tcontinuous monitoring, incident response activities, or information system error handling must also be addressed \n\texpeditiously.\n\nOrganization-defined time periods for updating security-relevant software may vary based on a variety of factors \nincluding, for example, the security category of the information system or the criticality of the update (i.e., \n\tseverity of the vulnerability related to the discovered flaw).\n\nThis requirement will apply to software patch management solutions that are used to install patches across the enclave \nand also to applications themselves that are not part of that patch management solution. For example, many browsers \ntoday provide the capability to install their own patch software. Patch criticality, as well as system criticality, \nwill vary. Therefore, the tactical situations regarding the patch management process will also vary. This means that \nthe time period utilized must be a configurable parameter. Time frames for application of security-relevant software \nupdates may be dependent upon the Information Assurance Vulnerability Management (IAVM) process.\n\nThe application will be configured to check for and install security-relevant software updates within an identified \ntime period from the availability of the update. The specific time period will be defined by an authoritative source \n(e.g., IAVM, CTOs, DTMs, and STIGs).",
      "descriptions": {
        "default": "Security flaws with software applications, including database management systems, are discovered daily. \n\tVendors are constantly updating and patching their products to address newly discovered security vulnerabilities. \n\tOrganizations (including any contractor to the organization) are required to promptly install security-relevant \n\tsoftware updates (e.g., patches, service packs, and hot fixes). Flaws discovered during security assessments, \n\tcontinuous monitoring, incident response activities, or information system error handling must also be addressed \n\texpeditiously.\n\nOrganization-defined time periods for updating security-relevant software may vary based on a variety of factors \nincluding, for example, the security category of the information system or the criticality of the update (i.e., \n\tseverity of the vulnerability related to the discovered flaw).\n\nThis requirement will apply to software patch management solutions that are used to install patches across the enclave \nand also to applications themselves that are not part of that patch management solution. For example, many browsers \ntoday provide the capability to install their own patch software. Patch criticality, as well as system criticality, \nwill vary. Therefore, the tactical situations regarding the patch management process will also vary. This means that \nthe time period utilized must be a configurable parameter. Time frames for application of security-relevant software \nupdates may be dependent upon the Information Assurance Vulnerability Management (IAVM) process.\n\nThe application will be configured to check for and install security-relevant software updates within an identified \ntime period from the availability of the update. The specific time period will be defined by an authoritative source \n(e.g., IAVM, CTOs, DTMs, and STIGs).",
        "rationale": "",
        "check": "If new packages are available for PostgreSQL, they can be reviewed in the package manager \n\tappropriate for the server operating system:\n\nTo list the version of installed PostgreSQL using psql:\n\n$ sudo su - postgres\n$ psql --version\n\nTo list the current version of software for RPM:\n\n$ rpm -qa | grep postgres\n\nTo list the current version of software for APT:\n\n$ apt-cache policy postgres\n\nAll versions of PostgreSQL will be listed on:\n\nhttp://www.postgresql.org/support/versioning/\n\nAll security-relevant software updates for PostgreSQL will be listed on:\n\nhttp://www.postgresql.org/support/security/\n\nIf PostgreSQL is not at the latest version, this is a finding.\n\nIf PostgreSQL is not at the latest version and the evaluated version has CVEs (IAVAs), then this is a CAT I finding.",
        "fix": "Institute and adhere to policies and procedures to ensure that patches are consistently applied to \n\tPostgreSQL within the time allowed."
      },
      "impact": 0,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000456-DB-000390",
        "gid": "V-233513",
        "rid": "SV-233513r617333_rule",
        "stig_id": "CD12-00-000300",
        "fix_id": "F-36672r606763_fix",
        "cci": [
          "CCI-002605"
        ],
        "nist": [
          "SI-2 c"
        ]
      },
      "code": "  control \"V-233513\" do\n    impact 0.0\n    describe 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on' do\n      skip 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233513.rb",
        "line": 3
      },
      "id": "V-233513"
    },
    {
      "title": "The audit information produced by PostgreSQL must be protected from unauthorized modification.",
      "desc": "If audit data were to become compromised, then competent forensic analysis and discovery of the true \n\tsource of potentially malicious system activity is impossible to achieve. \n\nTo ensure the veracity of audit data the information system and/or the application must protect audit information from \nunauthorized modification. \n\nThis requirement can be achieved through multiple methods that will depend upon system architecture and design. Some \ncommonly employed methods include ensuring log files enjoy the proper file system permissions and limiting log data \nlocations. \n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user \naccessing the data and the corresponding rights that the user enjoys in order to make access decisions regarding the \nmodification of audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to \nsuccessfully audit information system activity. \n\nModification of database audit data could mask the theft of, or the unauthorized modification of, sensitive data \nstored in the database.",
      "descriptions": {
        "default": "If audit data were to become compromised, then competent forensic analysis and discovery of the true \n\tsource of potentially malicious system activity is impossible to achieve. \n\nTo ensure the veracity of audit data the information system and/or the application must protect audit information from \nunauthorized modification. \n\nThis requirement can be achieved through multiple methods that will depend upon system architecture and design. Some \ncommonly employed methods include ensuring log files enjoy the proper file system permissions and limiting log data \nlocations. \n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user \naccessing the data and the corresponding rights that the user enjoys in order to make access decisions regarding the \nmodification of audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to \nsuccessfully audit information system activity. \n\nModification of database audit data could mask the theft of, or the unauthorized modification of, sensitive data \nstored in the database.",
        "rationale": "",
        "check": "Review locations of audit logs, both internal to the database and database audit logs located \n\tat the operating system level. \n\nVerify there are appropriate controls and permissions to protect the audit information from unauthorized modification. \n\nNote: The following instructions use the PGLOG environment variable. See supplementary content APPENDIX-I for \ninstructions on configuring PGLOG. \n\n#### stderr Logging \n\nIf the PostgreSQL server is configured to use stderr for logging, the logs will be owned by the database owner \n(usually postgres user) with a default permissions level of 0600. The permissions can be configured in postgresql.conf. \n\nTo check the permissions for log files in postgresql.conf, as the database owner (shown here as \"postgres\"), run \nthe following command: \n\n$ sudo su - postgres \n$ psql -c \"show log_file_mode;\" \n\nIf the permissions are not 0600, this is a finding. \n\nAs the database owner (shown here as \"postgres\"), list the permissions of the logs: \n\n$ sudo su - postgres \n$ ls -la ${PGLOG?} \n\nIf logs are not owned by the database owner (shown here as \"postgres\") and are not the same permissions as \nconfigured in postgresql.conf, this is a finding. \n\n#### syslog Logging \n\nIf the PostgreSQL server is configured to use syslog for logging, consult the organization syslog setting for \npermissions and ownership of logs.",
        "fix": "To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on \n\tenabling logging.\n\nNote: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for \ninstructions on configuring PGDATA and APPENDIX-I for instructions on configuring PGLOG.\n\n#### stderr Logging\n\nWith stderr logging enabled, as the database owner (shown here as \"postgres\"), set the following parameter in \npostgresql.conf:\n\n$ vi ${PGDATA?}/postgresql.conf\nlog_file_mode = 0600\n\nTo change the owner and permissions of the log files, run the following:\n\n$ chown postgres:postgres ${PGDATA?}/${PGLOG?}\n$ chmod 0700 ${PGDATA?}/${PGLOG?}\n$ chmod 600 ${PGDATA?}/${PGLOG?}/*.log\n\n#### syslog Logging\n\nIf PostgreSQL is configured to use syslog for logging, the log files must be configured to be owned by root with \n0600 permissions.\n\n$ chown root:root <log directory name>/<log_filename>\n$ chmod 0700 <log directory name>\n$ chmod 0600 <log directory name>/*.log"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000119-DB-000060",
        "gid": "V-233514",
        "rid": "SV-233514r617333_rule",
        "stig_id": "CD12-00-000400",
        "fix_id": "F-36673r606766_fix",
        "cci": [
          "CCI-000163"
        ],
        "nist": [
          "AU-9"
        ]
      },
      "code": "  control \"V-233514\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233514.rb",
        "line": 3
      },
      "id": "V-233514"
    },
    {
      "title": "PostgreSQL must integrate with an organization-level authentication/access mechanism providing account \n\tmanagement and automation for all users, groups, roles, and any other principals.",
      "desc": "Enterprise environments make account management for applications and databases challenging and complex. \n\tA manual process for account management functions adds the risk of a potential oversight or other error. Managing \n\taccounts for the same person in multiple places is inefficient and prone to problems with consistency and \n\tsynchronization.\n\nA comprehensive application account management process that includes automation helps to ensure that accounts \ndesignated as requiring attention are consistently and promptly addressed. \n\nExamples include, but are not limited to, using automation to take action on multiple accounts designated as \ninactive, suspended, or terminated, or by disabling accounts located in non-centralized account stores, such as \nmultiple servers. Account management functions can also include: assignment of group or role membership; identifying \naccount type; specifying user access authorizations (i.e., privileges); account removal, update, or termination; and \nadministrative alerts. The use of automated mechanisms can include, for example: using email or text messaging to \nnotify account managers when users are terminated or transferred; using the information system to monitor account \nusage; and using automated telephone notification to report atypical system account usage.\n\nPostgreSQL must be configured to automatically utilize organization-level account management functions, and these \nfunctions must immediately enforce the organization's current account policy. \n\nAutomation may be comprised of differing technologies that when placed together contain an overall mechanism \nsupporting an organization's automated account management requirements.",
      "descriptions": {
        "default": "Enterprise environments make account management for applications and databases challenging and complex. \n\tA manual process for account management functions adds the risk of a potential oversight or other error. Managing \n\taccounts for the same person in multiple places is inefficient and prone to problems with consistency and \n\tsynchronization.\n\nA comprehensive application account management process that includes automation helps to ensure that accounts \ndesignated as requiring attention are consistently and promptly addressed. \n\nExamples include, but are not limited to, using automation to take action on multiple accounts designated as \ninactive, suspended, or terminated, or by disabling accounts located in non-centralized account stores, such as \nmultiple servers. Account management functions can also include: assignment of group or role membership; identifying \naccount type; specifying user access authorizations (i.e., privileges); account removal, update, or termination; and \nadministrative alerts. The use of automated mechanisms can include, for example: using email or text messaging to \nnotify account managers when users are terminated or transferred; using the information system to monitor account \nusage; and using automated telephone notification to report atypical system account usage.\n\nPostgreSQL must be configured to automatically utilize organization-level account management functions, and these \nfunctions must immediately enforce the organization's current account policy. \n\nAutomation may be comprised of differing technologies that when placed together contain an overall mechanism \nsupporting an organization's automated account management requirements.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA environment variable. See supplementary content \n\tAPPENDIX-F for instructions on configuring PGDATA.\n\nIf all accounts are authenticated by the organization-level authentication/access mechanism, such as LDAP or Kerberos \nand not by PostgreSQL, this is not a finding.\n\nAs the database administrator (shown here as \"postgres\"), review pg_hba.conf authentication file settings:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/pg_hba.conf\n\nAll records must use an auth-method of gss, sspi, or ldap. For details on the specifics of these authentication \nmethods see: http://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html.\n\nIf there are any records with a different auth-method than gss, sspi, or ldap, review the system documentation for \njustification and approval of these records.\n\nIf there are any records with a different auth-method than gss, sspi, or ldap, that are not documented and approved, \nthis is a finding.",
        "fix": "Note: The following instructions use the PGDATA environment variable. See supplementary content \n\tAPPENDIX-F for instructions on configuring PGDATA.\n\nIntegrate PostgreSQL security with an organization-level authentication/access mechanism providing account management \nfor all users, groups, roles, and any other principals.\n\nAs the database administrator (shown here as \"postgres\"), edit pg_hba.conf authentication file:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/pg_hba.conf\n\nFor each PostgreSQL-managed account that is not documented and approved, either\ntransfer it to management by the external mechanism, or document the need for it\nand obtain approval, as appropriate."
      },
      "impact": 0,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "high",
        "gtitle": "SRG-APP-000023-DB-000001",
        "gid": "V-233515",
        "rid": "SV-233515r617333_rule",
        "stig_id": "CD12-00-000500",
        "fix_id": "F-36674r606769_fix",
        "cci": [
          "CCI-000015"
        ],
        "nist": [
          "AC-2 (1)"
        ]
      },
      "code": "  control \"V-233515\" do\n    impact 0.0\n    describe 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on' do\n      skip 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233515.rb",
        "line": 4
      },
      "id": "V-233515"
    },
    {
      "title": "PostgreSQL must provide non-privileged users with error messages that provide information necessary for \n\tcorrective actions without revealing information that could be exploited by adversaries.",
      "desc": "Any PostgreSQL or associated application providing too much information in error messages on the screen \n\tor printout risks compromising the data and security of the system. The structure and content of error messages \n\tneed to be carefully considered by the organization and development team.\n\nDatabases can inadvertently provide a wealth of information to an attacker through improperly handled error messages. \nIn addition to sensitive business or personal information, database errors can provide host names, IP addresses, user \nnames, and other system information not required for troubleshooting but very useful to someone targeting the system.\n\nCarefully consider the structure/content of error messages. The extent to which information systems are able to \nidentify and handle error conditions is guided by organizational policy and operational requirements. Information \nthat could be exploited by adversaries includes, for example, logon attempts with passwords entered by mistake as \nthe username, mission/business information that can be derived from (if not stated explicitly by) information \nrecorded, and personal information, such as account numbers, social security numbers, and credit card numbers.",
      "descriptions": {
        "default": "Any PostgreSQL or associated application providing too much information in error messages on the screen \n\tor printout risks compromising the data and security of the system. The structure and content of error messages \n\tneed to be carefully considered by the organization and development team.\n\nDatabases can inadvertently provide a wealth of information to an attacker through improperly handled error messages. \nIn addition to sensitive business or personal information, database errors can provide host names, IP addresses, user \nnames, and other system information not required for troubleshooting but very useful to someone targeting the system.\n\nCarefully consider the structure/content of error messages. The extent to which information systems are able to \nidentify and handle error conditions is guided by organizational policy and operational requirements. Information \nthat could be exploited by adversaries includes, for example, logon attempts with passwords entered by mistake as \nthe username, mission/business information that can be derived from (if not stated explicitly by) information \nrecorded, and personal information, such as account numbers, social security numbers, and credit card numbers.",
        "rationale": "",
        "check": "As the database administrator, run the following SQL:\n\nSELECT current_setting('client_min_messages');\n\nIf client_min_messages is not set to error, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nAs the database administrator, edit \"postgresql.conf\": \n\n$ sudo su - postgres \n$ vi $PGDATA/postgresql.conf \n\nChange the client_min_messages parameter to be \"error\": \n\nclient_min_messages = error \n\nReload the server with the new configuration (this just reloads settings currently in memory; it will not cause an \n\tinterruption): \n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000266-DB-000162",
        "gid": "V-233516",
        "rid": "SV-233516r617333_rule",
        "stig_id": "CD12-00-000600",
        "fix_id": "F-36675r606772_fix",
        "cci": [
          "CCI-001312"
        ],
        "nist": [
          "SI-11 a"
        ]
      },
      "code": "  control \"V-233516\" do\n    sql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n    describe sql.query('SHOW client_min_messages;', [input('pg_db')]) do\n      its('output') { should match /^error$/i }\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233516.rb",
        "line": 3
      },
      "id": "V-233516"
    },
    {
      "title": "Privileges to change PostgreSQL software modules must be limited.",
      "desc": "If the system were to allow any user to make changes to software libraries, those changes might be \n\timplemented without undergoing the appropriate testing and approvals that are part of a robust change management \n\tprocess.\n\nAccordingly, only qualified and authorized individuals must be allowed to obtain access to information system \ncomponents for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or \ncompromised installations.",
      "descriptions": {
        "default": "If the system were to allow any user to make changes to software libraries, those changes might be \n\timplemented without undergoing the appropriate testing and approvals that are part of a robust change management \n\tprocess.\n\nAccordingly, only qualified and authorized individuals must be allowed to obtain access to information system \ncomponents for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or \ncompromised installations.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nAs the database administrator (shown here as \"postgres\"), check the permissions of configuration files for \nthe database:\n\n$ sudo su - postgres\n$ ls -la ${PGDATA?}\n\nIf any files are not owned by the database owner or have permissions allowing others to modify (write) \nconfiguration files, this is a finding.\n\nAs the server administrator, check the permissions on the shared libraries for PostgreSQL:\n\n$ sudo ls -la /usr/pgsql-${PGVER?} \n$ sudo ls -la /usr/pgsql-${PGVER?}/bin\n$ sudo ls -la /usr/pgsql-${PGVER?}/include\n$ sudo ls -la /usr/pgsql-${PGVER?}/lib\n$ sudo ls -la /usr/pgsql-${PGVER?}/share\n\nIf any files are not owned by root or have permissions allowing others to modify (write) configuration files, this is \na finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nAs the database administrator (shown here as \"postgres\"), change the ownership and permissions of configuration \nfiles in PGDATA: \n\n$ sudo su - postgres \n$ chown postgres:postgres ${PGDATA?}/postgresql.conf \n$ chmod 0600 ${PGDATA?}/postgresql.conf \n\nAs the server administrator, change the ownership and permissions of shared objects in /usr/pgsql-${PGVER?}/*.so \n\n$ sudo chown root:root /usr/pgsql-${PGVER?}/lib/*.so \n$ sudo chmod 0755 /usr/pgsql-${PGVER?}/lib/*.so \n\nAs the service administrator, change the ownership and permissions of executables in /usr/pgsql-${PGVER?}/bin: \n\n$ sudo chown root:root /usr/pgsql-${PGVER?}/bin/* \n$ sudo chmod 0755 /usr/pgsql-${PGVER?}/bin/*"
      },
      "impact": 0,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000133-DB-000179",
        "gid": "V-233517",
        "rid": "SV-233517r617333_rule",
        "stig_id": "CD12-00-000700",
        "fix_id": "F-36676r606775_fix",
        "cci": [
          "CCI-001499"
        ],
        "nist": [
          "CM-5 (6)"
        ]
      },
      "code": "  control \"V-233517\" do\n    impact 0.0\n    describe 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on' do\n      skip 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233517.rb",
        "line": 3
      },
      "id": "V-233517"
    },
    {
      "title": "PostgreSQL must limit privileges to change functions and triggers, and links to software external to \n\tPostgreSQL.",
      "desc": "If the system were to allow any user to make changes to software libraries, those changes might be \n\timplemented without undergoing the appropriate testing and approvals that are part of a robust change management \n\tprocess.\n\nAccordingly, only qualified and authorized individuals must be allowed to obtain access to information system \ncomponents for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database code can lead to unauthorized or compromised installations.",
      "descriptions": {
        "default": "If the system were to allow any user to make changes to software libraries, those changes might be \n\timplemented without undergoing the appropriate testing and approvals that are part of a robust change management \n\tprocess.\n\nAccordingly, only qualified and authorized individuals must be allowed to obtain access to information system \ncomponents for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database code can lead to unauthorized or compromised installations.",
        "rationale": "",
        "check": "Only owners of objects can change them. To view all functions, triggers, and trigger \n\tprocedures, their ownership and source, as the database administrator (shown here as \"postgres\") run the \n\tfollowing SQL:\n\n$ sudo su - postgres\n$ psql -x -c \"df+\"\n\nOnly the OS database owner user (shown here as \"postgres\") or a PostgreSQL superuser can change links to external \nsoftware. As the database administrator (shown here as \"postgres\"), check the permissions of configuration files \nfor the database:\n\n$ sudo su - postgres\n$ ls -la ${PGDATA?}\n\nIf any files are not owned by the database owner or have permissions allowing others to modify (write) configuration \nfiles, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA environment variable. See supplementary content \n\tAPPENDIX-F for instructions on configuring PGDATA.\n\nTo change ownership of an object, as the database administrator (shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"ALTER FUNCTION function_name OWNER TO new_role_name\"\n\nTo change ownership of postgresql.conf, as the database administrator (shown here as \"postgres\"), run the \nfollowing commands:\n\n$ sudo su - postgres\n$ chown postgres:postgres ${PGDATA?}/postgresql.conf\n$ chmod 0600 ${PGDATA?}/postgresql.conf\n\nTo remove superuser from a role, as the database administrator (shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"ALTER ROLE rolename WITH NOSUPERUSER\""
      },
      "impact": 0,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000133-DB-000179",
        "gid": "V-233518",
        "rid": "SV-233518r617333_rule",
        "stig_id": "CD12-00-000710",
        "fix_id": "F-36677r606778_fix",
        "cci": [
          "CCI-001499"
        ],
        "nist": [
          "CM-5 (6)"
        ]
      },
      "code": "  control \"V-233518\" do\n    impact 0.0\n    describe 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on' do\n      skip 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233518.rb",
        "line": 3
      },
      "id": "V-233518"
    },
    {
      "title": "If passwords are used for authentication, PostgreSQL must transmit only encrypted representations of\n\t  passwords.",
      "desc": "The DoD standard for authentication is DoD-approved PKI certificates.\n  \n  Authentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate,\n  and requires Authorizing Official (AO) approval.\n  \n  In such cases, passwords need to be protected at all times, and encryption is the standard method for protecting\n  passwords during transmission.\n  \n  PostgreSQL passwords sent in clear text format across the network are vulnerable to discovery by unauthorized users.\n  Disclosure of passwords may easily lead to unauthorized access to the database.",
      "descriptions": {
        "default": "The DoD standard for authentication is DoD-approved PKI certificates.\n  \n  Authentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate,\n  and requires Authorizing Official (AO) approval.\n  \n  In such cases, passwords need to be protected at all times, and encryption is the standard method for protecting\n  passwords during transmission.\n  \n  PostgreSQL passwords sent in clear text format across the network are vulnerable to discovery by unauthorized users.\n  Disclosure of passwords may easily lead to unauthorized access to the database.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA environment variable. See supplementary\n\t  content APPENDIX-F for instructions on configuring PGDATA.\n  \n  As the database administrator (shown here as \"postgres\"), review the authentication entries in pg_hba.conf:\n  \n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_hba.conf\n  \n  If any entries use the auth_method (last column in records) \"password\" or \"md5\", this is a finding.",
        "fix": "Note: The following instructions use the PGDATA environment variable. See supplementary\n\t  content APPENDIX-F for instructions on configuring PGDATA.\n  \n  As the database administrator (shown here as \"postgres\"), edit pg_hba.conf authentication file and change all\n  entries of \"password\" to \"scram-sha-256\":\n  \n  $ sudo su - postgres\n  $ vi ${PGDATA?}/pg_hba.conf\n  host all all .example.com scram-sha-256"
      },
      "impact": 0,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000172-DB-000075",
        "gid": "V-233519",
        "rid": "SV-233519r617333_rule",
        "stig_id": "CD12-00-000800",
        "fix_id": "F-36678r606781_fix",
        "cci": [
          "CCI-000197"
        ],
        "nist": [
          "IA-5 (1) (c)"
        ]
      },
      "code": "  control \"V-233519\" do\n    impact 0.0\n    describe 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on' do\n      skip 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233519.rb",
        "line": 1
      },
      "id": "V-233519"
    },
    {
      "title": "PostgreSQL must enforce approved authorizations for logical access to information and system resources \n\tin accordance with applicable access control policies.",
      "desc": "Authentication with a DoD-approved PKI certificate does not necessarily imply authorization to access \n\tPostgreSQL. To mitigate the risk of unauthorized access to sensitive information by entities that have been \n\tissued certificates by DoD-approved PKIs, all DoD systems, including databases, must be properly configured to \n\timplement access control policies.\n\nSuccessful authentication must not automatically give an entity access to an asset or security boundary. \nAuthorization procedures and controls must be implemented to ensure each authenticated entity also has a validated \nand current authorization. Authorization is the process of determining whether an entity, once authenticated, is \npermitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to \nimplement this requirement.\n\nAccess control policies include identity-based policies, role-based policies, and attribute-based policies. Access \nenforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and \nmechanisms must be employed by the application to control access between users (or processes acting on behalf of \n\tusers) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.\n\nThis requirement is applicable to access control enforcement applications, a category that includes database \nmanagement systems. If PostgreSQL does not follow applicable policy when approving access, it may be in conflict with \nnetworks or other applications in the information system. This may result in users either gaining or being denied \naccess inappropriately and in conflict with applicable policy.",
      "descriptions": {
        "default": "Authentication with a DoD-approved PKI certificate does not necessarily imply authorization to access \n\tPostgreSQL. To mitigate the risk of unauthorized access to sensitive information by entities that have been \n\tissued certificates by DoD-approved PKIs, all DoD systems, including databases, must be properly configured to \n\timplement access control policies.\n\nSuccessful authentication must not automatically give an entity access to an asset or security boundary. \nAuthorization procedures and controls must be implemented to ensure each authenticated entity also has a validated \nand current authorization. Authorization is the process of determining whether an entity, once authenticated, is \npermitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to \nimplement this requirement.\n\nAccess control policies include identity-based policies, role-based policies, and attribute-based policies. Access \nenforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and \nmechanisms must be employed by the application to control access between users (or processes acting on behalf of \n\tusers) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.\n\nThis requirement is applicable to access control enforcement applications, a category that includes database \nmanagement systems. If PostgreSQL does not follow applicable policy when approving access, it may be in conflict with \nnetworks or other applications in the information system. This may result in users either gaining or being denied \naccess inappropriately and in conflict with applicable policy.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA environment variable. See supplementary content \n\tAPPENDIX-F for instructions on configuring PGDATA.\n\nFrom the system security plan or equivalent documentation, determine the appropriate permissions on database objects \nfor each kind (group role) of user. If this documentation is missing, this is a finding.\n\nFirst, as the database administrator (shown here as \"postgres\"), check the privileges of all roles in the database \nby running the following SQL:\n\n$ sudo su - postgres\n$ psql -c 'du'\n\nReview all roles and their associated privileges. If any roles' privileges exceed those documented, this is a finding.\n\nNext, as the database administrator (shown here as \"postgres\"), check the configured privileges for tables and \ncolumns by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c 'dp'\n\nReview all access privileges and column access privileges list. If any roles' privileges exceed those documented, \nthis is a finding.\n\nNext, as the database administrator (shown here as \"postgres\"), check the configured authentication settings in \npg_hba.conf:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/pg_hba.conf\n\nReview all entries and their associated authentication methods. If any entries do not have their documented \n\tauthentication requirements, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA environment variable. See supplementary content \n\tAPPENDIX-F for instructions on configuring PGDATA.\n\nCreate and/or maintain documentation of each group role's appropriate permissions on database objects. \n\nImplement these permissions in the database, and remove any permissions that exceed those documented. \n\n- - - - - \n\nThe following are examples of how to use role privileges in PostgreSQL to enforce access controls. For a complete \nlist of privileges, see the official documentation: https://www.postgresql.org/docs/current/static/sql-createrole.html. \n\n#### Roles Example 1 \n\nThe following example demonstrates how to create an admin role with CREATEDB and CREATEROLE privileges. \n\nAs the database administrator (shown here as \"postgres\"), run the following SQL: \n\n$ sudo su - postgres \n\n$ psql -c \"CREATE ROLE admin WITH CREATEDB CREATEROLE\" \n\n#### Roles Example 2 \n\nThe following example demonstrates how to create a role with a password that expires and makes the role a member of \nthe \"admin\" group. \n\nAs the database administrator (shown here as \"postgres\"), run the following SQL: \n\n$ sudo su - postgres \n\n$ psql -c \"CREATE ROLE joe LOGIN ENCRYPTED PASSWORD 'stig2016!' VALID UNTIL '2016-09-20' IN ROLE admin\" \n\n#### Roles Example 3 \n\nThe following demonstrates how to revoke privileges from a role using REVOKE. \n\nAs the database administrator (shown here as \"postgres\"), run the following SQL: \n\n$ sudo su - postgres \n\n$ psql -c \"REVOKE admin FROM joe\" \n\n#### Roles Example 4 \n\nThe following demonstrates how to alter privileges in a role using ALTER. \n\nAs the database administrator (shown here as \"postgres\"), run the following SQL: \n\n$ sudo su - postgres \n\n$ psql -c \"ALTER ROLE joe NOLOGIN\" \n\nThe following are examples of how to use grant privileges in PostgreSQL to enforce access controls on objects. For a \ncomplete list of privileges, see the official documentation: \nhttps://www.postgresql.org/docs/current/static/sql-grant.html. \n\n#### Grant Example 1 \n\nThe following example demonstrates how to grant INSERT on a table to a role. \n\nAs the database administrator (shown here as \"postgres\"), run the following SQL: \n\n$ sudo su - postgres \n\n$ psql -c \"GRANT SELECT ON stig_test TO joe\" \n\n#### Grant Example 2 \n\nThe following example demonstrates how to grant ALL PRIVILEGES on a table to a role. \n\nAs the database administrator (shown here as \"postgres\"), run the following SQL: \n\n$ sudo su - postgres \n\n$ psql -c \"GRANT ALL PRIVILEGES ON stig_test TO joe\" \n\n#### Grant Example 3 \n\nThe following example demonstrates how to grant a role to a role. \n\nAs the database administrator (shown here as \"postgres\"), run the following SQL: \n\n$ sudo su - postgres \n\n$ psql -c \"GRANT admin TO joe\" \n\n#### Revoke Example 1 \n\nThe following example demonstrates how to revoke access from a role. \n\nAs the database administrator (shown here as \"postgres\"), run the following SQL: \n\n$ sudo su - postgres \n\n$ psql -c \"REVOKE admin FROM joe\" \n\nTo change authentication requirements for the database, as the database administrator (shown here as \"postgres\"), \nedit pg_hba.conf: \n\n$ sudo su - postgres \n\n$ vi ${PGDATA?}/pg_hba.conf \n\nEdit authentication requirements to the organizational requirements. See the official documentation for the complete \nlist of options for authentication: http://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html. \n\nAfter changes to pg_hba.conf, reload the server: \n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000033-DB-000084",
        "gid": "V-233520",
        "rid": "SV-233520r617333_rule",
        "stig_id": "CD12-00-000900",
        "fix_id": "F-36679r606784_fix",
        "cci": [
          "CCI-000213"
        ],
        "nist": [
          "AC-3"
        ]
      },
      "code": "  control 'V-233520' do\n  if input('windows_runner')\n    describe 'Requires manual review at this time.' do\n      skip 'Requires manual review at this time.'\n    end\n  else\n    sql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n    roles_sql = 'SELECT r.rolname FROM pg_catalog.pg_roles r AND r.rolname != \\'rdsadmin\\';'\n    roles_query = sql.query(roles_sql, [input('pg_db')])\n    roles = roles_query.lines\n\n    roles.each do |role|\n      next if input('pg_superusers').include?(role)\n\n      superuser_sql = 'SELECT r.rolsuper FROM pg_catalog.pg_roles r '\\\n        \"WHERE r.rolname = '#{role}';\"\n\n      describe sql.query(superuser_sql, [input('pg_db')]) do\n        its('output') { should_not eq 't' }\n      end\n    end\n\n    authorized_owners = input('pg_superusers')\n    owners = authorized_owners.join('|')\n\n    object_granted_privileges = 'arwdDxtU'\n    object_public_privileges = 'r'\n    object_acl = \"^((((#{owners})=[#{object_granted_privileges}]+|\"\\\n      \"=[#{object_public_privileges}]+)\\/\\\\w+,?)+|)\\\\|\"\n    object_acl_regex = Regexp.new(object_acl)\n\n    objects_sql = 'SELECT n.nspname, c.relname, c.relkind '\\\n      'FROM pg_catalog.pg_class c '\\\n      'LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '\\\n      \"WHERE c.relkind IN ('r', 'v', 'm', 'S', 'f') \"\\\n      \"AND n.nspname !~ '^pg_' AND pg_catalog.pg_table_is_visible(c.oid);\"\n\n    databases_sql = 'SELECT datname FROM pg_catalog.pg_database where not datistemplate AND datname != \\'rdsadmin\\';'\n    databases_query = sql.query(databases_sql, [input('pg_db')])\n    databases = databases_query.lines\n\n    databases.each do |database|\n      rows = sql.query(objects_sql, [database])\n      next unless rows.methods.include?(:output) # Handle connection disabled on database\n\n      objects = rows.lines\n\n      objects.each do |obj|\n        schema, object, type = obj.split('|')\n        relacl_sql = \"SELECT pg_catalog.array_to_string(c.relacl, E','), \"\\\n          'n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c '\\\n          'LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '\\\n          \"WHERE n.nspname = '#{schema}' AND c.relname = '#{object}' \"\\\n          \"AND c.relkind = '#{type}';\"\n\n        describe sql.query(relacl_sql, [database]) do\n          its('output') { should match object_acl_regex }\n        end\n      end\n    end\n  end\nend      \n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233520.rb",
        "line": 3
      },
      "id": "V-233520"
    },
    {
      "title": "PostgreSQL must associate organization-defined types of security labels having organization-defined \n\tsecurity label values with information in transmission.",
      "desc": "Without the association of security labels to information, there is no basis for PostgreSQL to make \n\tsecurity-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects \n\tand objects) with respect to safeguarding information. \n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and \nare used to enable the implementation of access control and flow control policies, reflect special dissemination, \nhandling or distribution instructions, or support other aspects of the information security policy. \n\nOne example includes marking data as classified or FOUO. These security labels may be assigned manually or during \ndata processing, but, either way, it is imperative these assignments are maintained while the data is in storage. \nIf the security labels are lost when the data is stored, there is the risk of a data compromise.",
      "descriptions": {
        "default": "Without the association of security labels to information, there is no basis for PostgreSQL to make \n\tsecurity-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects \n\tand objects) with respect to safeguarding information. \n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and \nare used to enable the implementation of access control and flow control policies, reflect special dissemination, \nhandling or distribution instructions, or support other aspects of the information security policy. \n\nOne example includes marking data as classified or FOUO. These security labels may be assigned manually or during \ndata processing, but, either way, it is imperative these assignments are maintained while the data is in storage. \nIf the security labels are lost when the data is stored, there is the risk of a data compromise.",
        "rationale": "",
        "check": "If security labeling is not required, this is not a finding.\n\nFirst, as the database administrator (shown here as \"postgres\"), run the following SQL against each table that \nrequires security labels:\n\n$ sudo su - postgres\n$ psql -c \"d+ <schema_name>.<table_name>\"\n\nIf security labeling is required and the results of the SQL above do not show a policy attached to the table, this \n\tis a finding.\n\nIf security labeling is required and not implemented according to the system documentation, such as SSP, this is a \nfinding.\n\nIf security labeling requirements have been specified, but the security labeling is not implemented or does not \nreliably maintain labels on information in storage, this is a finding.",
        "fix": "In addition to the SQL-standard privilege system available through GRANT, tables can have row \n\tsecurity policies that restrict, on a per-user basis, which rows can be returned by normal queries or inserted, \n\tupdated, or deleted by data modification commands. This feature is also known as Row-Level Security (RLS).\n\nRLS policies can be very different depending on their use case. For one example of using RLS for Security Labels, \n\tsee supplementary content APPENDIX-D."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000314-DB-000310",
        "gid": "V-233521",
        "rid": "SV-233521r617333_rule",
        "stig_id": "CD12-00-001100",
        "fix_id": "F-36680r606787_fix",
        "cci": [
          "CCI-002264"
        ],
        "nist": [
          "AC-16 a"
        ]
      },
      "code": "  control \"V-233521\" do\n    describe 'A manual review is required to ensure PostgreSQL associates organization-defined types of security labels\n    having organization-defined security label values with information in transmission' do\n      skip 'A manual review is required to ensure PostgreSQL associates organization-defined types of security labels\n      having organization-defined security label values with information in transmission'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233521.rb",
        "line": 3
      },
      "id": "V-233521"
    },
    {
      "title": "PostgreSQL must limit the number of concurrent sessions to an organization-defined number per user for \n\tall accounts and/or account types.",
      "desc": "Database management includes the ability to control the number of users and user sessions utilizing \n\tPostgreSQL. Unlimited concurrent connections to PostgreSQL could allow a successful Denial of Service (DoS) \n\tattack by exhausting connection resources; and a system can also fail or be degraded by an overload of legitimate \n\tusers. Limiting the number of concurrent sessions per user is helpful in reducing these risks.\n\nThis requirement addresses concurrent session control for a single account. It does not address concurrent sessions \nby a single user via multiple system accounts; and it does not deal with the total number of sessions across all \naccounts.\n\nThe capability to limit the number of concurrent sessions per user must be configured in or added to PostgreSQL (for \n\texample, by use of a logon trigger), when this is technically feasible. Note that it is not sufficient to limit \n\tsessions via a web server or application server alone, because legitimate users and adversaries can potentially \n\tconnect to PostgreSQL by other means.\n\nThe organization will need to define the maximum number of concurrent sessions by account type, by account, or a \ncombination thereof. In deciding on the appropriate number, it is important to consider the work requirements of the \nvarious types of users. For example, 2 might be an acceptable limit for general users accessing the database via an \napplication; but 10 might be too few for a database administrator using a database management GUI tool, where each \nquery tab and navigation pane may count as a separate session.\n\n(Sessions may also be referred to as connections or logons, which for the purposes of this requirement are synonyms).",
      "descriptions": {
        "default": "Database management includes the ability to control the number of users and user sessions utilizing \n\tPostgreSQL. Unlimited concurrent connections to PostgreSQL could allow a successful Denial of Service (DoS) \n\tattack by exhausting connection resources; and a system can also fail or be degraded by an overload of legitimate \n\tusers. Limiting the number of concurrent sessions per user is helpful in reducing these risks.\n\nThis requirement addresses concurrent session control for a single account. It does not address concurrent sessions \nby a single user via multiple system accounts; and it does not deal with the total number of sessions across all \naccounts.\n\nThe capability to limit the number of concurrent sessions per user must be configured in or added to PostgreSQL (for \n\texample, by use of a logon trigger), when this is technically feasible. Note that it is not sufficient to limit \n\tsessions via a web server or application server alone, because legitimate users and adversaries can potentially \n\tconnect to PostgreSQL by other means.\n\nThe organization will need to define the maximum number of concurrent sessions by account type, by account, or a \ncombination thereof. In deciding on the appropriate number, it is important to consider the work requirements of the \nvarious types of users. For example, 2 might be an acceptable limit for general users accessing the database via an \napplication; but 10 might be too few for a database administrator using a database management GUI tool, where each \nquery tab and navigation pane may count as a separate session.\n\n(Sessions may also be referred to as connections or logons, which for the purposes of this requirement are synonyms).",
        "rationale": "",
        "check": "To check the total amount of connections allowed by the database, as the database administrator, \n\trun the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW max_connections\"\n\nIf the total amount of connections is greater than documented by an organization, this is a finding.\n\nTo check the amount of connections allowed for each role, as the database administrator, run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SELECT rolname, rolconnlimit from pg_authid\"\n\nIf any roles have more connections configured than documented, this is a finding. A value of \"-1\" indicates \nUnlimited, and is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo configure the maximum amount of connections allowed to the database, as the database administrator (shown here \n\tas \"postgres\") change the following in postgresql.conf (the value 10 is an example; set the value to suit \n\tlocal conditions): \n\n$ sudo su - postgres \n$ vi ${PGDATA?}/postgresql.conf \nmax_connections = 10 \n\nNext, restart the database: \n\n$ sudo systemctl restart postgresql-${PGVER?}\n\nTo limit the amount of connections allowed by a specific role, as the database administrator, run the following SQL: \n\n$ psql -c \"ALTER ROLE <rolname> CONNECTION LIMIT 1\";"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000001-DB-000031",
        "gid": "V-233522",
        "rid": "SV-233522r617333_rule",
        "stig_id": "CD12-00-001200",
        "fix_id": "F-36681r606790_fix",
        "cci": [
          "CCI-000054"
        ],
        "nist": [
          "AC-10"
        ]
      },
      "code": "control\t'V-233522' do\n\ttitle\t\"PostgreSQL must limit the number of concurrent sessions to an organization-defined number per user for \n\tall accounts and/or account types.\"\n\tdesc\t\"Database management includes the ability to control the number of users and user sessions utilizing \n\tPostgreSQL. Unlimited concurrent connections to PostgreSQL could allow a successful Denial of Service (DoS) \n\tattack by exhausting connection resources; and a system can also fail or be degraded by an overload of legitimate \n\tusers. Limiting the number of concurrent sessions per user is helpful in reducing these risks.\n\nThis requirement addresses concurrent session control for a single account. It does not address concurrent sessions \nby a single user via multiple system accounts; and it does not deal with the total number of sessions across all \naccounts.\n\nThe capability to limit the number of concurrent sessions per user must be configured in or added to PostgreSQL (for \n\texample, by use of a logon trigger), when this is technically feasible. Note that it is not sufficient to limit \n\tsessions via a web server or application server alone, because legitimate users and adversaries can potentially \n\tconnect to PostgreSQL by other means.\n\nThe organization will need to define the maximum number of concurrent sessions by account type, by account, or a \ncombination thereof. In deciding on the appropriate number, it is important to consider the work requirements of the \nvarious types of users. For example, 2 might be an acceptable limit for general users accessing the database via an \napplication; but 10 might be too few for a database administrator using a database management GUI tool, where each \nquery tab and navigation pane may count as a separate session.\n\n(Sessions may also be referred to as connections or logons, which for the purposes of this requirement are synonyms).\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"To check the total amount of connections allowed by the database, as the database administrator, \n\trun the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW max_connections\\\"\n\nIf the total amount of connections is greater than documented by an organization, this is a finding.\n\nTo check the amount of connections allowed for each role, as the database administrator, run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SELECT rolname, rolconnlimit from pg_authid\\\"\n\nIf any roles have more connections configured than documented, this is a finding. A value of \\\"-1\\\" indicates \nUnlimited, and is a finding.\"\n\tdesc\t'fix', \"Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo configure the maximum amount of connections allowed to the database, as the database administrator (shown here \n\tas \\\"postgres\\\") change the following in postgresql.conf (the value 10 is an example; set the value to suit \n\tlocal conditions): \n\n$ sudo su - postgres \n$ vi ${PGDATA?}/postgresql.conf \nmax_connections = 10 \n\nNext, restart the database: \n\n$ sudo systemctl restart postgresql-${PGVER?}\n\nTo limit the amount of connections allowed by a specific role, as the database administrator, run the following SQL: \n\n$ psql -c \\\"ALTER ROLE <rolname> CONNECTION LIMIT 1\\\";\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000001-DB-000031'\n  tag gid: 'V-233522'\n  tag rid: 'SV-233522r617333_rule'\n  tag stig_id: 'CD12-00-001200'\n  tag fix_id: 'F-36681r606790_fix'\n  tag cci: [\"CCI-000054\"]\n  tag nist: [\"AC-10\"]\n\n\tsql = postgres_session(input('pg_dba'), input('pg_dba_password',), input('pg_host'), input('pg_port'))\n\n\tdescribe sql.query('SHOW max_connections;', [input('pg_db')]) do\n\t  its('output.to_i') { should be <= input('pg_max_connections') }\n\tend\n  \n\tdescribe sql.query('SELECT rolname, rolconnlimit from pg_authid WHERE rolcanlogin = True EXCEPT SELECT rolname, rolconnlimit from pg_authid where rolname = \\'pg_signal_backend\\';', [input('pg_db')]) do\n\t  its('output') { should_not include '-1' }\n\tend\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233522.rb",
        "line": 3
      },
      "id": "V-233522"
    },
    {
      "title": "The role(s)/group(s) used to modify database structure (including but not necessarily limited to \n\ttables, indexes, storage, etc.) and logic modules (functions, trigger procedures, links to software external to \n\t\tPostgreSQL, etc.) must be restricted to authorized users.",
      "desc": "If PostgreSQL were to allow any user to make changes to database structure or logic, those changes might \n\tbe implemented without undergoing the appropriate testing and approvals that are part of a robust change \n\tmanagement process.\n\nAccordingly, only qualified and authorized individuals must be allowed to obtain access to information system \ncomponents for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or \ncompromised installations.",
      "descriptions": {
        "default": "If PostgreSQL were to allow any user to make changes to database structure or logic, those changes might \n\tbe implemented without undergoing the appropriate testing and approvals that are part of a robust change \n\tmanagement process.\n\nAccordingly, only qualified and authorized individuals must be allowed to obtain access to information system \ncomponents for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or \ncompromised installations.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA environment variable. See supplementary content \n\tAPPENDIX-F for instructions on configuring PGDATA.\n\nAs the database administrator (shown here as \"postgres\"), list all users and their permissions by running the \nfollowing SQL:\n\n$ sudo su - postgres\n$ psql -c \"dp *.*\"\n\nVerify that all objects have the correct privileges. If they do not, this is a finding.\n\nNext, as the database administrator (shown here as \"postgres\"), verify the permissions of the database directory \non the filesystem:\n\n$ ls -la ${PGDATA?}\n\nIf permissions of the database directory are not limited to an authorized user account, this is a finding.",
        "fix": "As the database administrator, revoke any permissions from a role that are deemed unnecessary \n\tby running the following SQL:\n\nALTER ROLE bob NOCREATEDB;\nALTER ROLE bob NOCREATEROLE;\nALTER ROLE bob NOSUPERUSER;\nALTER ROLE bob NOINHERIT;\nREVOKE SELECT ON some_function FROM bob;"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000133-DB-000362",
        "gid": "V-233523",
        "rid": "SV-233523r617333_rule",
        "stig_id": "CD12-00-001300",
        "fix_id": "F-36682r606793_fix",
        "cci": [
          "CCI-001499"
        ],
        "nist": [
          "CM-5 (6)"
        ]
      },
      "code": "  control 'V-233523' do\n    if !input('windows_runner')\n      sql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n      authorized_owners = input('pg_superusers')\n      owners = authorized_owners.join('|')\n  \n      object_granted_privileges = 'arwdDxtU'\n      object_public_privileges = 'r'\n      object_acl = \"^((((#{owners})=[#{object_granted_privileges}]+|\"\\\n        \"=[#{object_public_privileges}]+)\\/\\\\w+,?)+|)\\\\|\"\n      object_acl_regex = Regexp.new(object_acl)\n  \n      pg_settings_acl = \"^((((#{owners})=[#{object_granted_privileges}]+|\"\\\n        \"=rw)\\/\\\\w+,?)+)\\\\|pg_catalog\\\\|pg_settings\\\\|v\"\n      pg_settings_acl_regex = Regexp.new(pg_settings_acl)\n  \n      tested = []\n      objects_sql = \"SELECT n.nspname, c.relname, c.relkind \"\\\n        \"FROM pg_catalog.pg_class c \"\\\n        \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace \"\\\n        \"WHERE c.relkind IN ('r', 'v', 'm', 'S', 'f');\"\n  \n      databases_sql = 'SELECT datname FROM pg_catalog.pg_database where not datistemplate AND datname != \\'rdsadmin\\';'\n      databases_query = sql.query(databases_sql, [input('pg_db')])\n      databases = databases_query.lines\n  \n      databases.each do |database|\n        rows = sql.query(objects_sql, [database])\n        if rows.methods.include?(:output) # Handle connection disabled on database\n          objects = rows.lines\n  \n          objects.each do |obj|\n            unless tested.include?(obj)\n              schema, object, type = obj.split('|')\n              relacl_sql = \"SELECT pg_catalog.array_to_string(c.relacl, E','), \"\\\n                \"n.nspname, c.relname, c.relkind FROM pg_catalog.pg_class c \"\\\n                \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace \"\\\n                \"WHERE n.nspname = '#{schema}' AND c.relname = '#{object}' \"\\\n                \"AND c.relkind = '#{type}';\"\n  \n              sql_result=sql.query(relacl_sql, [database])\n  \n              describe.one do\n                describe sql_result do\n                  its('output') { should match object_acl_regex }\n                end\n  \n                describe sql_result do\n                  its('output') { should match pg_settings_acl_regex }\n                end\n              end\n              tested.push(obj)\n            end\n          end\n        end\n      end\n    else\n      describe 'This must be manually reviewed at this time' do\n        skip 'This must be manually reveiwed at this time'\n      end\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233523.rb",
        "line": 3
      },
      "id": "V-233523"
    },
    {
      "title": "PostgreSQL must uniquely identify and authenticate non-organizational users (or processes acting on \n\tbehalf of non-organizational users).",
      "desc": "Non-organizational users include all information system users other than organizational users, which \n\tincludes organizational employees or individuals the organization deems to have equivalent status of employees \n\t(e.g., contractors, guest researchers, individuals from allied nations). \n\nNon-organizational users must be uniquely identified and authenticated for all accesses other than those accesses \nexplicitly identified and documented by the organization when related to the use of anonymous access, such as \naccessing a web server. \n\nAccordingly, a risk assessment is used in determining the authentication needs of the organization. \n\nScalability, practicality, and security are simultaneously considered in balancing the need to ensure ease of use \nfor access to federal information and information systems with the need to protect and adequately mitigate risk to \n\torganizational operations, organizational assets, individuals, other organizations, and the Nation.",
      "descriptions": {
        "default": "Non-organizational users include all information system users other than organizational users, which \n\tincludes organizational employees or individuals the organization deems to have equivalent status of employees \n\t(e.g., contractors, guest researchers, individuals from allied nations). \n\nNon-organizational users must be uniquely identified and authenticated for all accesses other than those accesses \nexplicitly identified and documented by the organization when related to the use of anonymous access, such as \naccessing a web server. \n\nAccordingly, a risk assessment is used in determining the authentication needs of the organization. \n\nScalability, practicality, and security are simultaneously considered in balancing the need to ensure ease of use \nfor access to federal information and information systems with the need to protect and adequately mitigate risk to \n\torganizational operations, organizational assets, individuals, other organizations, and the Nation.",
        "rationale": "",
        "check": "PostgreSQL uniquely identifies and authenticates PostgreSQL users through the use of DBMS roles. \n\nTo list all roles in the database, as the database administrator (shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"du\"\n\nIf users are not uniquely identified per organizational documentation, this is a finding.",
        "fix": "To drop a role, as the database administrator (shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"DROP ROLE <role_to_drop>\"\n\nTo create a role, as the database administrator, run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"CREATE ROLE <role name> LOGIN\"\n\nFor the complete list of permissions allowed by roles, see the official documentation: \nhttps://www.postgresql.org/docs/current/static/sql-createrole.html"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000180-DB-000115",
        "gid": "V-233524",
        "rid": "SV-233524r617333_rule",
        "stig_id": "CD12-00-001400",
        "fix_id": "F-36683r606796_fix",
        "cci": [
          "CCI-000804"
        ],
        "nist": [
          "IA-8"
        ]
      },
      "code": "control\t'V-233524' do\n\ttitle\t\"PostgreSQL must uniquely identify and authenticate non-organizational users (or processes acting on \n\tbehalf of non-organizational users).\"\n\tdesc\t\"Non-organizational users include all information system users other than organizational users, which \n\tincludes organizational employees or individuals the organization deems to have equivalent status of employees \n\t(e.g., contractors, guest researchers, individuals from allied nations). \n\nNon-organizational users must be uniquely identified and authenticated for all accesses other than those accesses \nexplicitly identified and documented by the organization when related to the use of anonymous access, such as \naccessing a web server. \n\nAccordingly, a risk assessment is used in determining the authentication needs of the organization. \n\nScalability, practicality, and security are simultaneously considered in balancing the need to ensure ease of use \nfor access to federal information and information systems with the need to protect and adequately mitigate risk to \n\torganizational operations, organizational assets, individuals, other organizations, and the Nation.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"PostgreSQL uniquely identifies and authenticates PostgreSQL users through the use of DBMS roles. \n\nTo list all roles in the database, as the database administrator (shown here as \\\"postgres\\\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"\\du\\\"\n\nIf users are not uniquely identified per organizational documentation, this is a finding.\"\n\tdesc\t'fix', \"To drop a role, as the database administrator (shown here as \\\"postgres\\\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"DROP ROLE <role_to_drop>\\\"\n\nTo create a role, as the database administrator, run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"CREATE ROLE <role name> LOGIN\\\"\n\nFor the complete list of permissions allowed by roles, see the official documentation: \nhttps://www.postgresql.org/docs/current/static/sql-createrole.html\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000180-DB-000115'\n  tag gid: 'V-233524'\n  tag rid: 'SV-233524r617333_rule'\n  tag stig_id: 'CD12-00-001400'\n  tag fix_id: 'F-36683r606796_fix'\n  tag cci: [\"CCI-000804\"]\n  tag nist: [\"IA-8\"]\n\n\tsql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n\tauthorized_roles = input('pg_superusers')\n  \n\troles_sql = 'SELECT r.rolname FROM pg_catalog.pg_roles r where r.rolsuper;'\n\tdescribe sql.query(roles_sql, [input('pg_db')]) do\n\t  its('lines.sort') { should cmp authorized_roles.sort }\n\tend\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233524.rb",
        "line": 3
      },
      "id": "V-233524"
    },
    {
      "title": "PostgreSQL must associate organization-defined types of security labels having organization-defined \n\tsecurity label values with information in storage.",
      "desc": "Without the association of security labels to information, there is no basis for PostgreSQL to make \n\tsecurity-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects \n\tand objects) with respect to safeguarding information. \n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and \nare used to enable the implementation of access control and flow control policies, reflect special dissemination, \nhandling or distribution instructions, or support other aspects of the information security policy. \n\nOne example includes marking data as classified or FOUO. These security labels may be assigned manually or during \ndata processing, but, either way, it is imperative these assignments are maintained while the data is in storage. \nIf the security labels are lost when the data is stored, there is the risk of a data compromise.",
      "descriptions": {
        "default": "Without the association of security labels to information, there is no basis for PostgreSQL to make \n\tsecurity-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects \n\tand objects) with respect to safeguarding information. \n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and \nare used to enable the implementation of access control and flow control policies, reflect special dissemination, \nhandling or distribution instructions, or support other aspects of the information security policy. \n\nOne example includes marking data as classified or FOUO. These security labels may be assigned manually or during \ndata processing, but, either way, it is imperative these assignments are maintained while the data is in storage. \nIf the security labels are lost when the data is stored, there is the risk of a data compromise.",
        "rationale": "",
        "check": "If security labeling is not required, this is not a finding.\n\nFirst, as the database administrator (shown here as \"postgres\"), run the following SQL against each table that \nrequires security labels:\n\n$ sudo su - postgres\n$ psql -c \"d+ <schema_name>.<table_name>\"\n\nIf security labeling is required and the results of the SQL above do not show a policy attached to the table, this \n\tis a finding.\n\nIf security labeling is required and not implemented according to the system documentation, such as SSP, this is a \nfinding.\n\nIf security labeling requirements have been specified, but the security labeling is not implemented or does not \nreliably maintain labels on information in storage, this is a finding.",
        "fix": "In addition to the SQL-standard privilege system available through GRANT, tables can have row \n\tsecurity policies that restrict, on a per-user basis, which rows can be returned by normal queries or inserted, \n\tupdated, or deleted by data modification commands. This feature is also known as Row-Level Security (RLS).\n\nRLS policies can be very different depending on their use case. For one example of using RLS for Security Labels, \n\tsee supplementary content APPENDIX-D."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000311-DB-000308",
        "gid": "V-233525",
        "rid": "SV-233525r617333_rule",
        "stig_id": "CD12-00-001700",
        "fix_id": "F-36684r606799_fix",
        "cci": [
          "CCI-002262"
        ],
        "nist": [
          "AC-16 a"
        ]
      },
      "code": "  control \"V-233525\" do\n    describe 'A manual review is required to ensure PostgreSQL associates organization-defined types of security labels\n    having organization-defined security label values with information in storage' do\n    skip 'A manual review is required to ensure PostgreSQL associates organization-defined types of security labels\n    having organization-defined security label values with information in storage'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233525.rb",
        "line": 3
      },
      "id": "V-233525"
    },
    {
      "title": "PostgreSQL must check the validity of all data inputs except those specifically identified by the \n\torganization.",
      "desc": "Invalid user input occurs when a user inserts data or characters into an application's data entry \n\tfields and the application is unprepared to process that data. This results in unanticipated application \n\tbehavior, potentially leading to an application or information system compromise. Invalid user input is one \n\tof the primary methods employed when attempting to compromise an application.\n\nWith respect to database management systems, one class of threat is known as SQL Injection, or more generally, \ncode injection. It takes advantage of the dynamic execution capabilities of various programming languages, including \ndialects of SQL. Potentially, the attacker can gain unauthorized access to data, including security settings, and \nseverely corrupt or destroy the database.\n\nEven when no such hijacking takes place, invalid input that gets recorded in the database, whether accidental or \nmalicious, reduces the reliability and usability of the system. Available protections include data types, referential \nconstraints, uniqueness constraints, range checking, and application-specific logic. Application-specific logic can \nbe implemented within the database in stored procedures and triggers, where appropriate.\n\nThis calls for inspection of application source code, which will require collaboration with the application \ndevelopers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from \nthe application developers, and may have limited, if any, access to source code. Nevertheless, protections of this \ntype are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must \nattempt to obtain assurances from the development organization that this issue has been addressed, and must document \nwhat has been discovered.",
      "descriptions": {
        "default": "Invalid user input occurs when a user inserts data or characters into an application's data entry \n\tfields and the application is unprepared to process that data. This results in unanticipated application \n\tbehavior, potentially leading to an application or information system compromise. Invalid user input is one \n\tof the primary methods employed when attempting to compromise an application.\n\nWith respect to database management systems, one class of threat is known as SQL Injection, or more generally, \ncode injection. It takes advantage of the dynamic execution capabilities of various programming languages, including \ndialects of SQL. Potentially, the attacker can gain unauthorized access to data, including security settings, and \nseverely corrupt or destroy the database.\n\nEven when no such hijacking takes place, invalid input that gets recorded in the database, whether accidental or \nmalicious, reduces the reliability and usability of the system. Available protections include data types, referential \nconstraints, uniqueness constraints, range checking, and application-specific logic. Application-specific logic can \nbe implemented within the database in stored procedures and triggers, where appropriate.\n\nThis calls for inspection of application source code, which will require collaboration with the application \ndevelopers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from \nthe application developers, and may have limited, if any, access to source code. Nevertheless, protections of this \ntype are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must \nattempt to obtain assurances from the development organization that this issue has been addressed, and must document \nwhat has been discovered.",
        "rationale": "",
        "check": "Review PostgreSQL code (trigger procedures, functions), application code, settings, column and \n\tfield definitions, and constraints to determine whether the database is protected against invalid input.\n\nIf code exists that allows invalid data to be acted upon or input into the database, this is a finding.\n\nIf column/field definitions do not exist in the database, this is a finding.\n\nIf columns/fields do not contain constraints and validity checking where required, this is a finding.\n\nWhere a column/field is noted in the system documentation as necessarily free-form, even though its name and context \nsuggest that it should be strongly typed and constrained, the absence of these protections is not a finding.\n\nWhere a column/field is clearly identified by name, caption, or context as Notes, Comments, Description, Text, etc., \nthe absence of these protections is not a finding.\n\nCheck application code that interacts with PostgreSQL for the use of prepared statements. If prepared statements are \nnot used, this is a finding.",
        "fix": "Modify database code to properly validate data before it is put into the database or acted upon \n\tby the database.\n\nModify the database to contain constraints and validity checking on database columns and tables that require them \nfor data integrity.\n\nUse prepared statements when taking user input. \n\nDo not allow general users direct console access to PostgreSQL."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        },
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000251-DB-000160",
        "gid": "V-233526",
        "rid": "SV-233526r617333_rule",
        "stig_id": "CD12-00-001800",
        "fix_id": "F-36685r606802_fix",
        "cci": [
          "CCI-001310"
        ],
        "nist": [
          "SI-10"
        ]
      },
      "code": "  control \"V-233526\" do\n    describe 'A manual review is required to ensure PostgreSQL checks the validity of all data inputs except those\n    specifically identified by the organization' do\n    skip 'A manual review is required to ensure PostgreSQL checks the validity of all data inputs except those\n    specifically identified by the organization'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233526.rb",
        "line": 3
      },
      "id": "V-233526"
    },
    {
      "title": "PostgreSQL and associated applications must reserve the use of dynamic code execution for situations \n\tthat require it.",
      "desc": "With respect to database management systems, one class of threat is known as SQL Injection, or more \n\tgenerally, code injection. It takes advantage of the dynamic execution capabilities of various programming \n\tlanguages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are \n\tbeing processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When \n\tthe attacker identifies scenarios where SQL queries are being assembled by application code (which may be within \n\t\tthe database or separate from it) and executed dynamically, the attacker is then able to craft input strings \n\t\tthat subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, \n\t\tincluding security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary \nfunctionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings \nas input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nThis calls for inspection of application source code, which will require collaboration with the application \ndevelopers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from \nthe application developers, and may have limited, if any, access to source code. Nevertheless, protections of this \ntype are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must \nattempt to obtain assurances from the development organization that this issue has been addressed, and must document \nwhat has been discovered.",
      "descriptions": {
        "default": "With respect to database management systems, one class of threat is known as SQL Injection, or more \n\tgenerally, code injection. It takes advantage of the dynamic execution capabilities of various programming \n\tlanguages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are \n\tbeing processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When \n\tthe attacker identifies scenarios where SQL queries are being assembled by application code (which may be within \n\t\tthe database or separate from it) and executed dynamically, the attacker is then able to craft input strings \n\t\tthat subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, \n\t\tincluding security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary \nfunctionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings \nas input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nThis calls for inspection of application source code, which will require collaboration with the application \ndevelopers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from \nthe application developers, and may have limited, if any, access to source code. Nevertheless, protections of this \ntype are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must \nattempt to obtain assurances from the development organization that this issue has been addressed, and must document \nwhat has been discovered.",
        "rationale": "",
        "check": "Review PostgreSQL source code (trigger procedures, functions) and application source code, to \n\tidentify cases of dynamic code execution. Any user input should be handled through prepared statements. \n\nIf dynamic code execution is employed in circumstances where the objective could practically be satisfied by static \nexecution with strongly typed parameters, this is a finding.",
        "fix": "Where dynamic code execution is employed in circumstances where the objective could practically \n\tbe satisfied by static execution with strongly typed parameters, modify the code to do so."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000251-DB-000391",
        "gid": "V-233527",
        "rid": "SV-233527r617333_rule",
        "stig_id": "CD12-00-001900",
        "fix_id": "F-36686r606805_fix",
        "cci": [
          "CCI-001310"
        ],
        "nist": [
          "SI-10"
        ]
      },
      "code": "control\t'V-233527' do\n\ttitle\t\"PostgreSQL and associated applications must reserve the use of dynamic code execution for situations \n\tthat require it.\"\n\tdesc\t\"With respect to database management systems, one class of threat is known as SQL Injection, or more \n\tgenerally, code injection. It takes advantage of the dynamic execution capabilities of various programming \n\tlanguages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are \n\tbeing processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When \n\tthe attacker identifies scenarios where SQL queries are being assembled by application code (which may be within \n\t\tthe database or separate from it) and executed dynamically, the attacker is then able to craft input strings \n\t\tthat subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, \n\t\tincluding security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary \nfunctionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings \nas input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nThis calls for inspection of application source code, which will require collaboration with the application \ndevelopers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from \nthe application developers, and may have limited, if any, access to source code. Nevertheless, protections of this \ntype are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must \nattempt to obtain assurances from the development organization that this issue has been addressed, and must document \nwhat has been discovered.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"Review PostgreSQL source code (trigger procedures, functions) and application source code, to \n\tidentify cases of dynamic code execution. Any user input should be handled through prepared statements. \n\nIf dynamic code execution is employed in circumstances where the objective could practically be satisfied by static \nexecution with strongly typed parameters, this is a finding.\"\n\tdesc\t'fix', \"Where dynamic code execution is employed in circumstances where the objective could practically \n\tbe satisfied by static execution with strongly typed parameters, modify the code to do so.\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000251-DB-000391'\n  tag gid: 'V-233527'\n  tag rid: 'SV-233527r617333_rule'\n  tag stig_id: 'CD12-00-001900'\n  tag fix_id: 'F-36686r606805_fix'\n  tag cci: [\"CCI-001310\"]\n  tag nist: [\"SI-10\"]\n\n\tdescribe \"Review PostgreSQL source code and application source code, to identify cases of dynamic code execution.\" do\n\t\tskip \"If dynamic code execution is employed where an objective can satisfied by static execution with strongly typed parameters, this is a finding.\"\n\t  end\n\tend\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233527.rb",
        "line": 3
      },
      "id": "V-233527"
    },
    {
      "title": "PostgreSQL and associated applications, when making use of dynamic code execution, must scan input data \n\tfor invalid values that may indicate a code injection attack.",
      "desc": "With respect to database management systems, one class of threat is known as SQL Injection, or more \n\tgenerally, code injection. It takes advantage of the dynamic execution capabilities of various programming \n\tlanguages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are \n\tbeing processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When \n\tthe attacker identifies scenarios where SQL queries are being assembled by application code (which may be within \n\t\tthe database or separate from it) and executed dynamically, the attacker is then able to craft input strings \n\t\tthat subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, \n\t\tincluding security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary \nfunctionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings as \ninput parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nWhen dynamic execution is necessary, ways to mitigate the risk include the following, which should be implemented \nboth in the on-screen application and at the database level, in the stored procedures:\n-- Allow strings as input only when necessary. \n-- Rely on data typing to validate numbers, dates, etc. Do not accept invalid values. If substituting other values \nfor them, think carefully about whether this could be subverted.\n-- Limit the size of input strings to what is truly necessary.\n-- If single quotes/apostrophes, double quotes, semicolons, equals signs, angle brackets, or square brackets will \nnever be valid as input, reject them.\n-- If comment markers will never be valid as input, reject them. In SQL, these are -- or /* */ \n-- If HTML and XML tags, entities, comments, etc., will never be valid, reject them.\n-- If wildcards are present, reject them unless truly necessary. In SQL these are the underscore and the percentage \nsign, and the word ESCAPE is also a clue that wildcards are in use.\n-- If SQL key words, such as SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER, DROP, ESCAPE, UNION, GRANT, REVOKE, DENY, \nMODIFY will never be valid, reject them. Use case-insensitive comparisons when searching for these. Bear in mind that \n\tsome of these words, particularly Grant (as a person's name), could also be valid input. \n-- If there are range limits on the values that may be entered, enforce those limits.\n-- Institute procedures for inspection of programs for correct use of dynamic coding, by a party other than the \ndeveloper.\n-- Conduct rigorous testing of program modules that use dynamic coding, searching for ways to subvert the intended use.\n-- Record the inspection and testing in the system documentation.\n-- Bear in mind that all this applies not only to screen input, but also to the values in an incoming message to a \nweb service or to a stored procedure called by a software component that has not itself been hardened in these ways. \nNot only can the caller be subject to such vulnerabilities; it may itself be the attacker.",
      "descriptions": {
        "default": "With respect to database management systems, one class of threat is known as SQL Injection, or more \n\tgenerally, code injection. It takes advantage of the dynamic execution capabilities of various programming \n\tlanguages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are \n\tbeing processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When \n\tthe attacker identifies scenarios where SQL queries are being assembled by application code (which may be within \n\t\tthe database or separate from it) and executed dynamically, the attacker is then able to craft input strings \n\t\tthat subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, \n\t\tincluding security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary \nfunctionality that cannot be utilized otherwise. Use strongly typed data items rather than general-purpose strings as \ninput parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nWhen dynamic execution is necessary, ways to mitigate the risk include the following, which should be implemented \nboth in the on-screen application and at the database level, in the stored procedures:\n-- Allow strings as input only when necessary. \n-- Rely on data typing to validate numbers, dates, etc. Do not accept invalid values. If substituting other values \nfor them, think carefully about whether this could be subverted.\n-- Limit the size of input strings to what is truly necessary.\n-- If single quotes/apostrophes, double quotes, semicolons, equals signs, angle brackets, or square brackets will \nnever be valid as input, reject them.\n-- If comment markers will never be valid as input, reject them. In SQL, these are -- or /* */ \n-- If HTML and XML tags, entities, comments, etc., will never be valid, reject them.\n-- If wildcards are present, reject them unless truly necessary. In SQL these are the underscore and the percentage \nsign, and the word ESCAPE is also a clue that wildcards are in use.\n-- If SQL key words, such as SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER, DROP, ESCAPE, UNION, GRANT, REVOKE, DENY, \nMODIFY will never be valid, reject them. Use case-insensitive comparisons when searching for these. Bear in mind that \n\tsome of these words, particularly Grant (as a person's name), could also be valid input. \n-- If there are range limits on the values that may be entered, enforce those limits.\n-- Institute procedures for inspection of programs for correct use of dynamic coding, by a party other than the \ndeveloper.\n-- Conduct rigorous testing of program modules that use dynamic coding, searching for ways to subvert the intended use.\n-- Record the inspection and testing in the system documentation.\n-- Bear in mind that all this applies not only to screen input, but also to the values in an incoming message to a \nweb service or to a stored procedure called by a software component that has not itself been hardened in these ways. \nNot only can the caller be subject to such vulnerabilities; it may itself be the attacker.",
        "rationale": "",
        "check": "Review PostgreSQL source code (trigger procedures, functions) and application source code to \n\tidentify cases of dynamic code execution.\n\nIf dynamic code execution is employed without protective measures against code injection, this is a finding.",
        "fix": "Where dynamic code execution is used, modify the code to implement protections against code \n\tinjection (IE: prepared statements)."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000251-DB-000392",
        "gid": "V-233528",
        "rid": "SV-233528r617333_rule",
        "stig_id": "CD12-00-002000",
        "fix_id": "F-36687r606808_fix",
        "cci": [
          "CCI-001310"
        ],
        "nist": [
          "SI-10"
        ]
      },
      "code": "  control \"V-233528\" do\n    describe 'PostgreSQL and associated applications, when making use of dynamic code\n    execution, must scan input data for invalid values that may indicate a code injection attack' do\n    skip 'PostgreSQL and associated applications, when making use of dynamic code\n    execution, must scan input data for invalid values that may indicate a code injection attack'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233528.rb",
        "line": 3
      },
      "id": "V-233528"
    },
    {
      "title": "PostgreSQL must allocate audit record storage capacity in accordance with organization-defined audit \n\trecord storage requirements.",
      "desc": "To ensure sufficient storage capacity for the audit logs, PostgreSQL must be able to allocate audit \n\trecord storage capacity. Although another requirement (SRG-APP-000515-DB-000318) mandates that audit data be \n\toff-loaded to a centralized log management system, it remains necessary to provide space on the database server \n\tto serve as a buffer against outages and capacity limits of the off-loading mechanism.\n\nThe task of allocating audit record storage capacity is usually performed during initial installation of PostgreSQL \nand is closely associated with the DBA and system administrator (SA) roles. The DBA or SA will usually coordinate \nthe allocation of physical drive space with the application owner/installer and the application will prompt the \ninstaller to provide the capacity information, the physical location of the disk, or both.\n\nIn determining the capacity requirements, consider such factors as: total number of users; expected number of \nconcurrent users during busy periods; number and type of events being monitored; types and amounts of data being \ncaptured; the frequency/speed with which audit records are off-loaded to the central log management system; and any \nlimitations that exist on PostgreSQL's ability to reuse the space formerly occupied by off-loaded records.",
      "descriptions": {
        "default": "To ensure sufficient storage capacity for the audit logs, PostgreSQL must be able to allocate audit \n\trecord storage capacity. Although another requirement (SRG-APP-000515-DB-000318) mandates that audit data be \n\toff-loaded to a centralized log management system, it remains necessary to provide space on the database server \n\tto serve as a buffer against outages and capacity limits of the off-loading mechanism.\n\nThe task of allocating audit record storage capacity is usually performed during initial installation of PostgreSQL \nand is closely associated with the DBA and system administrator (SA) roles. The DBA or SA will usually coordinate \nthe allocation of physical drive space with the application owner/installer and the application will prompt the \ninstaller to provide the capacity information, the physical location of the disk, or both.\n\nIn determining the capacity requirements, consider such factors as: total number of users; expected number of \nconcurrent users during busy periods; number and type of events being monitored; types and amounts of data being \ncaptured; the frequency/speed with which audit records are off-loaded to the central log management system; and any \nlimitations that exist on PostgreSQL's ability to reuse the space formerly occupied by off-loaded records.",
        "rationale": "",
        "check": "Investigate whether there have been any incidents where PostgreSQL ran out of audit log space \n\tsince the last time the space was allocated or other corrective measures were taken.\n\nIf there have been incidents where PostgreSQL ran out of audit log space, this is a finding.",
        "fix": "Allocate sufficient audit file/table space to support peak demand."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000357-DB-000316",
        "gid": "V-233529",
        "rid": "SV-233529r617333_rule",
        "stig_id": "CD12-00-002100",
        "fix_id": "F-36688r606811_fix",
        "cci": [
          "CCI-001849"
        ],
        "nist": [
          "AU-4"
        ]
      },
      "code": "  control \"V-233529\" do\n    describe 'A manual review is required to ensure PostgreSQL allocates audit record storage capacity in accordance\n    with organization-defined audit record storage requirements' do\n    skip 'A manual review is required to ensure PostgreSQL allocates audit record storage capacity in accordance\n    with organization-defined audit record storage requirements'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233529.rb",
        "line": 3
      },
      "id": "V-233529"
    },
    {
      "title": "PostgreSQL must enforce discretionary access control policies, as defined by the data owner, over \n\tdefined subjects and objects.",
      "desc": "Discretionary Access Control (DAC) is based on the notion that individual users are \"owners\" of \n\tobjects and therefore have discretion over who should be authorized to access the object and in which mode \n\t(e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified \n\townership assignment. DAC allows the owner to determine who will have access to objects they control. An example \n\tof DAC includes user-controlled table permissions.\n\nWhen discretionary access control policies are implemented, subjects are not constrained with regard to what actions \nthey can take with information for which they have already been granted access. Thus, subjects that have been granted \naccess to information are not prevented from passing (i.e., the subjects have the discretion to pass) the information \nto other subjects or objects. \n\nA subject that is constrained in its operation by Mandatory Access Control policies is still able to operate under \nthe less rigorous constraints of this requirement. Thus, while Mandatory Access Control imposes constraints \npreventing a subject from passing information to another subject operating at a different sensitivity level, this \nrequirement permits the subject to pass the information to any subject at the same sensitivity level. \n\nThe policy is bounded by the information system boundary. Once the information is passed outside of the control of \nthe information system, additional means may be required to ensure the constraints remain in effect. While the older, \nmore traditional definitions of discretionary access control require identity-based access control, that limitation \nis not required for this use of discretionary access control.",
      "descriptions": {
        "default": "Discretionary Access Control (DAC) is based on the notion that individual users are \"owners\" of \n\tobjects and therefore have discretion over who should be authorized to access the object and in which mode \n\t(e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified \n\townership assignment. DAC allows the owner to determine who will have access to objects they control. An example \n\tof DAC includes user-controlled table permissions.\n\nWhen discretionary access control policies are implemented, subjects are not constrained with regard to what actions \nthey can take with information for which they have already been granted access. Thus, subjects that have been granted \naccess to information are not prevented from passing (i.e., the subjects have the discretion to pass) the information \nto other subjects or objects. \n\nA subject that is constrained in its operation by Mandatory Access Control policies is still able to operate under \nthe less rigorous constraints of this requirement. Thus, while Mandatory Access Control imposes constraints \npreventing a subject from passing information to another subject operating at a different sensitivity level, this \nrequirement permits the subject to pass the information to any subject at the same sensitivity level. \n\nThe policy is bounded by the information system boundary. Once the information is passed outside of the control of \nthe information system, additional means may be required to ensure the constraints remain in effect. While the older, \nmore traditional definitions of discretionary access control require identity-based access control, that limitation \nis not required for this use of discretionary access control.",
        "rationale": "",
        "check": "Review system documentation to identify the required discretionary access control (DAC).\n\nReview the security configuration of the database and PostgreSQL. If applicable, review the security configuration of \nthe application(s) using the database.\n\nIf the discretionary access control defined in the documentation is not implemented in the security configuration, \nthis is a finding.\n\nIf any database objects are found to be owned by users not authorized to own database objects, this is a finding.\n\nTo check the ownership of objects in the database, as the database administrator, run the following:\n\n$ sudo su - postgres\n$ psql -c \"dn *.*\"\n$ psql -c \"dt *.*\"\n$ psql -c \"ds *.*\"\n$ psql -c \"dv *.*\"\n$ psql -c \"df+ *.*\"\n\nIf any role is given privileges to objects it should not have, this is a finding.",
        "fix": "Implement the organization's DAC policy in the security configuration of the database and \n\tPostgreSQL, and, if applicable, the security configuration of the application(s) using the database.\n\nTo GRANT privileges to roles, as the database administrator (shown here as \"postgres\"), run statements like the \nfollowing examples:\n\n$ sudo su - postgres\n$ psql -c \"CREATE SCHEMA test\"\n$ psql -c \"GRANT CREATE ON SCHEMA test TO bob\"\n$ psql -c \"CREATE TABLE test.test_table(id INT)\"\n$ psql -c \"GRANT SELECT ON TABLE test.test_table TO bob\"\n\nTo REVOKE privileges to roles, as the database administrator (shown here as \"postgres\"), run statements like the \nfollowing examples:\n\n$ psql -c \"REVOKE SELECT ON TABLE test.test_table FROM bob\"\n$ psql -c \"REVOKE CREATE ON SCHEMA test FROM bob\""
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000328-DB-000301",
        "gid": "V-233530",
        "rid": "SV-233530r617333_rule",
        "stig_id": "CD12-00-002200",
        "fix_id": "F-36689r606814_fix",
        "cci": [
          "CCI-002165"
        ],
        "nist": [
          "AC-3 (4)"
        ]
      },
      "code": "  control \"V-233530\" do\n  sql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n  authorized_owners = input('pg_superusers')\n  pg_db = input('pg_db')\n  pg_owner = input('pg_owner')\n\n  databases_sql = \"SELECT datname FROM pg_catalog.pg_database where datname = '#{pg_db}';\"\n  databases_query = sql.query(databases_sql, [pg_db])\n  databases = databases_query.lines\n  types = %w(t s v) # tables, sequences views\n\n  databases.each do |database|\n    schemas_sql = ''\n    functions_sql = ''\n\n    if database == 'postgres'\n      schemas_sql = \"SELECT n.nspname, pg_catalog.pg_get_userbyid(n.nspowner) \"\\\n        \"FROM pg_catalog.pg_namespace n \"\\\n        \"WHERE pg_catalog.pg_get_userbyid(n.nspowner) <> '#{pg_owner}' AND pg_catalog.pg_get_userbyid(n.nspowner) <> 'rdsadmin';\"\n      functions_sql = \"SELECT n.nspname, p.proname, \"\\\n        \"pg_catalog.pg_get_userbyid(n.nspowner) \"\\\n        \"FROM pg_catalog.pg_proc p \"\\\n        \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace \"\\\n        \"WHERE pg_catalog.pg_get_userbyid(n.nspowner) <> '#{pg_owner}' AND pg_catalog.pg_get_userbyid(n.nspowner) <> 'rdsadmin';\"\n    else\n      schemas_sql = \"SELECT n.nspname, pg_catalog.pg_get_userbyid(n.nspowner) \"\\\n        \"FROM pg_catalog.pg_namespace n \"\\\n        \"WHERE pg_catalog.pg_get_userbyid(n.nspowner) \"\\\n        \"NOT IN (#{authorized_owners.map { |e| \"'#{e}'\" }.join(',')}) AND pg_catalog.pg_get_userbyid(n.nspowner) <> 'rdsadmin' \"\\\n        \"AND n.nspname !~ '^pg_' AND n.nspname <> 'information_schema';\"\n      functions_sql = \"SELECT n.nspname, p.proname, \"\\\n        \"pg_catalog.pg_get_userbyid(n.nspowner) \"\\\n        \"FROM pg_catalog.pg_proc p \"\\\n        \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace \"\\\n        \"WHERE pg_catalog.pg_get_userbyid(n.nspowner) \"\\\n        \"NOT IN (#{authorized_owners.map { |e| \"'#{e}'\" }.join(',')}) AND pg_catalog.pg_get_userbyid(n.nspowner) <> 'rdsadmin' \"\\\n        \"AND n.nspname <> 'pg_catalog' AND n.nspname <> 'information_schema';\"\n    end\n\n    connection_error = \"FATAL:\\\\s+database \\\"#{database}\\\" is not currently \"\\\n      \"accepting connections\"\n    connection_error_regex = Regexp.new(connection_error)\n    \n    sql_result=sql.query(schemas_sql, [database])\n\n    describe.one do\n      describe sql_result do\n        its('output') { should eq '' }\n      end\n\n      describe sql_result do\n        it { should match connection_error_regex }\n      end\n    end\n\n    sql_result=sql.query(functions_sql, [database])\n\n    describe.one do\n      describe sql_result do\n        its('output') { should eq '' }\n      end\n\n      describe sql_result do\n        it { should match connection_error_regex }\n      end\n    end\n\n    types.each do |type|\n      objects_sql = ''\n\n      if database == 'postgres'\n        objects_sql = \"SELECT n.nspname, c.relname, c.relkind, \"\\\n          \"pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_class c \"\\\n          \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace \"\\\n          \"WHERE c.relkind IN ('#{type}','s','') \"\\\n          \"AND pg_catalog.pg_get_userbyid(n.nspowner) <> '#{pg_owner}' AND pg_catalog.pg_get_userbyid(n.nspowner) <> 'rdsadmin' \"\\\n          \" AND n.nspname !~ '^pg_toast';\"\n      else\n        objects_sql = \"SELECT n.nspname, c.relname, c.relkind, \"\\\n          \"pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_class c \"\\\n          \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace \"\\\n          \"WHERE c.relkind IN ('#{type}','s','') \"\\\n          \"AND pg_catalog.pg_get_userbyid(n.nspowner) \"\\\n          \"NOT IN (#{authorized_owners.map { |e| \"'#{e}'\" }.join(',')}) AND pg_catalog.pg_get_userbyid(n.nspowner) <> 'rdsadmin' \"\\\n          \"AND n.nspname <> 'pg_catalog' AND n.nspname <> 'information_schema'\"\\\n          \" AND n.nspname !~ '^pg_toast';\"\n      end\n\n      sql_result=sql.query(objects_sql, [database])\n\n      describe.one do\n        describe sql_result do\n          its('output') { should eq '' }\n        end\n\n        describe sql_result do\n          it { should match connection_error_regex }\n        end\n      end\n    end\n  end\nend\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233530.rb",
        "line": 3
      },
      "id": "V-233530"
    },
    {
      "title": "The audit information produced by PostgreSQL must be protected from unauthorized deletion.",
      "desc": "If audit data were to become compromised, then competent forensic analysis and discovery of the true \n\tsource of potentially malicious system activity is impossible to achieve.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information \nfrom unauthorized deletion. This requirement can be achieved through multiple methods, which will depend upon system \narchitecture and design.\n\nSome commonly employed methods include: ensuring log files enjoy the proper file system permissions utilizing file \nsystem protections; restricting access; and backing up log data to ensure log data is retained.\n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user \naccessing the data and the corresponding rights the user enjoys in order make access decisions regarding the deletion \nof audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to \nsuccessfully audit information system activity.\n\nDeletion of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored \nin the database.",
      "descriptions": {
        "default": "If audit data were to become compromised, then competent forensic analysis and discovery of the true \n\tsource of potentially malicious system activity is impossible to achieve.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information \nfrom unauthorized deletion. This requirement can be achieved through multiple methods, which will depend upon system \narchitecture and design.\n\nSome commonly employed methods include: ensuring log files enjoy the proper file system permissions utilizing file \nsystem protections; restricting access; and backing up log data to ensure log data is retained.\n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user \naccessing the data and the corresponding rights the user enjoys in order make access decisions regarding the deletion \nof audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to \nsuccessfully audit information system activity.\n\nDeletion of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored \nin the database.",
        "rationale": "",
        "check": "Note: The following instructions use the PGLOG environment variable. See supplementary content \n\tAPPENDIX-I for instructions on configuring PGLOG. \n\nReview locations of audit logs, both internal to the database and database audit logs located at the operating \nsystem level. \n\nVerify there are appropriate controls and permissions to protect the audit information from unauthorized modification. \n\n#### stderr Logging \n\nIf the PostgreSQL server is configured to use stderr for logging, the logs will be owned by the database \nadministrator (shown here as \"postgres\") with a default permissions level of 0600. The permissions can be \nconfigured in postgresql.conf. \n\nTo check the permissions for log files, as the database administrator (shown here as \"postgres\"), run the \nfollowing command: \n\n$ sudo su - postgres \n$ psql -c \"show log_file_mode\" \n\nIf the permissions are not 0600, this is a finding. \n\nAs the database administrator (shown here as \"postgres\"), list the permissions of the logs: \n\n$ sudo su - postgres \n$ ls -la ${PGLOG?} \n\nIf logs are not owned by the database administrator (shown here as \"postgres\") and are not the same permissions \nas configured in postgresql.conf, this is a finding. \n\n#### syslog Logging \n\nIf the PostgreSQL server is configured to use syslog for logging, consult organization syslog setting for permissions \nand ownership of logs.",
        "fix": "To ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.\n\nNote: The following instructions use the PGDATA environment variable. See supplementary content APPENDIX-F for \ninstructions on configuring PGDATA and APPENDIX-I for instructions on configuring PGLOG.\n\n#### stderr Logging\n\nWith stderr logging enabled, as the database owner (shown here as \"postgres\"), set the following parameter in \npostgresql.conf:\n\n$ vi ${PGDATA?}/postgresql.conf\nlog_file_mode = 0600\n\nTo change the owner and permissions of the log files, run the following:\n\n$ chown postgres:postgres ${PGDATA?}/${PGLOG?}\n$ chmod 0700 ${PGDATA?}/${PGLOG?}\n$ chmod 600 ${PGDATA?}/${PGLOG?}/*.log\n\n#### syslog Logging\n\nIf PostgreSQL is configured to use syslog for logging, the log files must be configured to be owned by root with \n0600 permissions.\n\n$ chown root:root <log directory name>/<log_filename>\n$ chmod 0700 <log directory name>\n$ chmod 0600 <log directory name>/*.log"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000120-DB-000061",
        "gid": "V-233531",
        "rid": "SV-233531r617333_rule",
        "stig_id": "CD12-00-002300",
        "fix_id": "F-36690r606817_fix",
        "cci": [
          "CCI-000164"
        ],
        "nist": [
          "AU-9"
        ]
      },
      "code": "control \"V-233531\" do\n  describe 'Requires manual review of the RDS audit log system at this time.' do\n    skip 'Requires manual review of the RDS audit log system at this time.'\n  end\nend\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233531.rb",
        "line": 3
      },
      "id": "V-233531"
    },
    {
      "title": "PostgreSQL must record time stamps, in audit records and application data that can be mapped to \n\tCoordinated Universal Time (UTC, formerly GMT).",
      "desc": "If time stamps are not consistently applied and there is no common time reference, it is difficult to \n\tperform forensic analysis.\n\nTime stamps generated by PostgreSQL must include date and time. Time is commonly expressed in UTC, a modern \ncontinuation of GMT, or local time with an offset from UTC.",
      "descriptions": {
        "default": "If time stamps are not consistently applied and there is no common time reference, it is difficult to \n\tperform forensic analysis.\n\nTime stamps generated by PostgreSQL must include date and time. Time is commonly expressed in UTC, a modern \ncontinuation of GMT, or local time with an offset from UTC.",
        "rationale": "",
        "check": "When a PostgreSQL cluster is initialized using initdb, the PostgreSQL cluster will be \n\tconfigured to use the same time zone as the target server. \n\nAs the database administrator (shown here as \"postgres\"), check the current log_timezone setting by running \nthe following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_timezone\"\n\nlog_timezone\n--------------\nUTC\n(1 row)\n\nIf log_timezone is not set to the desired time zone, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo change log_timezone in postgresql.conf to use a different time zone for logs, as the database administrator \n(shown here as \"postgres\"), run the following:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\nlog_timezone='UTC'\n\nNext, restart the database:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000374-DB-000322",
        "gid": "V-233532",
        "rid": "SV-233532r617333_rule",
        "stig_id": "CD12-00-002400",
        "fix_id": "F-36691r606820_fix",
        "cci": [
          "CCI-001890"
        ],
        "nist": [
          "AU-8 b"
        ]
      },
      "code": "control\t'V-233532' do\n\ttitle\t\"PostgreSQL must record time stamps, in audit records and application data that can be mapped to \n\tCoordinated Universal Time (UTC, formerly GMT).\"\n\tdesc\t\"If time stamps are not consistently applied and there is no common time reference, it is difficult to \n\tperform forensic analysis.\n\nTime stamps generated by PostgreSQL must include date and time. Time is commonly expressed in UTC, a modern \ncontinuation of GMT, or local time with an offset from UTC.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"When a PostgreSQL cluster is initialized using initdb, the PostgreSQL cluster will be \n\tconfigured to use the same time zone as the target server. \n\nAs the database administrator (shown here as \\\"postgres\\\"), check the current log_timezone setting by running \nthe following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW log_timezone\\\"\n\nlog_timezone\n--------------\nUTC\n(1 row)\n\nIf log_timezone is not set to the desired time zone, this is a finding.\"\n\tdesc\t'fix', \"Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo change log_timezone in postgresql.conf to use a different time zone for logs, as the database administrator \n(shown here as \\\"postgres\\\"), run the following:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\nlog_timezone='UTC'\n\nNext, restart the database:\n\n$ sudo systemctl reload postgresql-${PGVER?}\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000374-DB-000322'\n  tag gid: 'V-233532'\n  tag rid: 'SV-233532r617333_rule'\n  tag stig_id: 'CD12-00-002400'\n  tag fix_id: 'F-36691r606820_fix'\n  tag cci: [\"CCI-001890\"]\n  tag nist: [\"AU-8 b\"]\n\n\tsql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n\tdescribe sql.query('SHOW log_timezone;', [input('pg_db')]) do\n\t  its('output') { should eq input('pg_timezone') }\n\tend\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233532.rb",
        "line": 3
      },
      "id": "V-233532"
    },
    {
      "title": "PostgreSQL must reveal detailed error messages only to the ISSO, ISSM, SA, and DBA.",
      "desc": "If PostgreSQL provides too much information in error logs and administrative messages to the screen, this \n  could lead to compromise. The structure and content of error messages need to be carefully considered by the \n  organization and development team. The extent to which the information system is able to identify and handle \n  error conditions is guided by organizational policy and operational requirements. \n\nSome default PostgreSQL error messages can contain information that could aid an attacker in, among others things, \nidentifying the database type, host address, or state of the database. Custom errors may contain sensitive customer \ninformation. \n\nIt is important that detailed error messages be visible only to those who are authorized to view them; that general \nusers receive only generalized acknowledgment that errors have occurred; and that these generalized messages appear \nonly when relevant to the user's task. For example, a message along the lines of, \"An error has occurred. Unable to \nsave your changes. If this problem persists, please contact your help desk.\" would be relevant. A message such as \n\"Warning: your transaction generated a large number of page splits.\" would likely not be relevant. \n\nAdministrative users authorized to review detailed error messages typically are the ISSO, ISSM, SA, and DBA. Other \nindividuals or roles may be specified according to organization-specific needs, with DBA approval.",
      "descriptions": {
        "default": "If PostgreSQL provides too much information in error logs and administrative messages to the screen, this \n  could lead to compromise. The structure and content of error messages need to be carefully considered by the \n  organization and development team. The extent to which the information system is able to identify and handle \n  error conditions is guided by organizational policy and operational requirements. \n\nSome default PostgreSQL error messages can contain information that could aid an attacker in, among others things, \nidentifying the database type, host address, or state of the database. Custom errors may contain sensitive customer \ninformation. \n\nIt is important that detailed error messages be visible only to those who are authorized to view them; that general \nusers receive only generalized acknowledgment that errors have occurred; and that these generalized messages appear \nonly when relevant to the user's task. For example, a message along the lines of, \"An error has occurred. Unable to \nsave your changes. If this problem persists, please contact your help desk.\" would be relevant. A message such as \n\"Warning: your transaction generated a large number of page splits.\" would likely not be relevant. \n\nAdministrative users authorized to review detailed error messages typically are the ISSO, ISSM, SA, and DBA. Other \nindividuals or roles may be specified according to organization-specific needs, with DBA approval.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA and PGLOG environment variables. See supplementary \n  content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-I for instructions on configuring PGLOG.\n\nCheck PostgreSQL settings and custom database code to determine if detailed error messages are ever displayed to \nunauthorized individuals.\n\nTo check the level of detail for errors exposed to clients, as the DBA (shown here as \"postgres\"), run the \nfollowing:\n\n$ sudo su - postgres\n$ psql -c \"SHOW client_min_messages;\"\n\nIf client_min_messages is set to LOG or DEBUG, this is a finding.\n\nIf detailed error messages are displayed to individuals not authorized to view them, this is a finding.\n\n#### stderr Logging\n\nLogs may contain detailed information and should only be accessible by the database owner.\n\nAs the database administrator, verify the following settings of logs.\n\nNote: Consult the organization's documentation on acceptable log privileges.\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_file_mode;\" \n\nNext, verify the log files have the set configurations.\n\n$ ls -l ${PGLOG?}\ntotal 32\n-rw-------. 1 postgres postgres 0 Apr 8 00:00 postgresql-Fri.log\n-rw-------. 1 postgres postgres 8288 Apr 11 17:36 postgresql-Mon.log\n-rw-------. 1 postgres postgres 0 Apr 9 00:00 postgresql-Sat.log\n-rw-------. 1 postgres postgres 0 Apr 10 00:00 postgresql-Sun.log\n-rw-------. 1 postgres postgres 16212 Apr 7 17:05 postgresql-Thu.log\n-rw-------. 1 postgres postgres 1130 Apr 6 17:56 postgresql-Wed.log\n\nIf logs are not owned by the database administrator or have permissions that are not 0600, this is a finding.\n\n#### syslog Logging\n\nIf PostgreSQL is configured to use syslog for logging, consult organization location and permissions for syslog \nlog files. If the logs are not owned by root or have permissions that are not 0600, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA environment variable. See supplementary content \n  APPENDIX-F for instructions on configuring PGDATA.\n\nTo set the level of detail for error messages exposed to clients, as the DBA (shown here as \"postgres\"), run the \nfollowing commands:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\nclient_min_messages = error"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000267-DB-000163",
        "gid": "V-233533",
        "rid": "SV-233533r617333_rule",
        "stig_id": "CD12-00-002500",
        "fix_id": "F-36692r606823_fix",
        "cci": [
          "CCI-001314"
        ],
        "nist": [
          "SI-11 b"
        ]
      },
      "code": "control \"V-233533\" do\n  describe 'Requires manual review of the RDS audit log system at this time.' do\n    skip 'Requires manual review of the RDS audit log system at this time.'\n  end\nend\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233533.rb",
        "line": 3
      },
      "id": "V-233533"
    },
    {
      "title": "PostgreSQL must allow only the Information System Security Manager (ISSM), or individuals or roles \n\tappointed by the ISSM, to select which auditable events are to be audited.",
      "desc": "Without the capability to restrict which roles and individuals can select which events are audited, \n\tunauthorized personnel may be able to prevent or interfere with the auditing of critical events.\n\nSuppression of auditing could permit an adversary to evade detection.\n\nMisconfigured audits can degrade the system's performance by overwhelming the audit log. Misconfigured audits may \nalso make it more difficult to establish, correlate, and investigate the events relating to an incident or identify \nthose responsible for one.",
      "descriptions": {
        "default": "Without the capability to restrict which roles and individuals can select which events are audited, \n\tunauthorized personnel may be able to prevent or interfere with the auditing of critical events.\n\nSuppression of auditing could permit an adversary to evade detection.\n\nMisconfigured audits can degrade the system's performance by overwhelming the audit log. Misconfigured audits may \nalso make it more difficult to establish, correlate, and investigate the events relating to an incident or identify \nthose responsible for one.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA environment variable. See supplementary \n\tcontent APPENDIX-F for instructions on configuring PGDATA.\n\nCheck PostgreSQL settings and documentation to determine whether designated personnel are able to select which \nauditable events are being audited.\n\nAs the database administrator (shown here as \"postgres\"), verify the permissions for PGDATA:\n\n$ ls -la ${PGDATA?}\n\nIf anything in PGDATA is not owned by the database administrator, this is a finding.\n\nNext, as the database administrator, run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"du\"\n\nReview the role permissions, if any role is listed as superuser but should not have that access, this is a \nfinding.",
        "fix": "Configure PostgreSQL's settings to allow designated personnel to select which auditable events \n\tare audited.\n\nUsing pgaudit allows administrators the flexibility to choose what they log. For an overview of the capabilities \nof pgaudit, see https://github.com/pgaudit/pgaudit. \n\nSee supplementary content APPENDIX-B for documentation on installing pgaudit.\n\nSee supplementary content APPENDIX-C for instructions on enabling logging. Only administrators/superuser can change \nPostgreSQL configurations. Access to the database administrator must be limited to designated personnel only.\n\nTo ensure that postgresql.conf is owned by the database owner:\n\n$ chown postgres:postgres ${PGDATA?}/postgresql.conf\n$ chmod 600 ${PGDATA?}/postgresql.conf"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000090-DB-000065",
        "gid": "V-233534",
        "rid": "SV-233534r617333_rule",
        "stig_id": "CD12-00-002600",
        "fix_id": "F-36693r606826_fix",
        "cci": [
          "CCI-000171"
        ],
        "nist": [
          "AU-12 b"
        ]
      },
      "code": "  control \"V-233534\" do\n    sql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n    roles_sql = 'SELECT r.rolname FROM pg_catalog.pg_roles r;'\n    roles_query = sql.query(roles_sql, [input('pg_db')])\n    roles = roles_query.lines\n\n    roles.each do |role|\n      unless input('pg_superusers').include?(role)\n        superuser_sql = \"SELECT r.rolsuper FROM pg_catalog.pg_roles r \"\\\n          \"WHERE r.rolname = '#{role}';\"\n\n        describe sql.query(superuser_sql, [input('pg_db')]) do\n          its('output') { should_not eq 't' }\n        end\n      end\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233534.rb",
        "line": 3
      },
      "id": "V-233534"
    },
    {
      "title": "PostgreSQL must provide an immediate alert to appropriate support staff of all audit log failures.",
      "desc": "It is critical for the appropriate personnel to be aware if a system is at risk of failing to process \n\taudit logs as required. Without a real-time alert, security personnel may be unaware of an impending failure of \n\tthe audit capability, and system operation may be adversely affected. \n\nThe appropriate support staff include, at a minimum, the Information System Security Officer (ISSO) and the database \nadministrator (DBA)/systems administrator (SA).\n\nA failure of database auditing will result in either the database continuing to function without auditing or in a \ncomplete halt to database operations. When audit processing fails, appropriate personnel must be alerted immediately \nto avoid further downtime or unaudited transactions.\n\nAlerts provide organizations with urgent messages. Real-time alerts provide these messages immediately (i.e., the \n\ttime from event detection to alert occurs in seconds or less).\n\nThe necessary monitoring and alerts may be implemented using features of PostgreSQL, the OS, third-party software, \ncustom code, or a combination of these. The term \"the system\" is used to encompass all of these.",
      "descriptions": {
        "default": "It is critical for the appropriate personnel to be aware if a system is at risk of failing to process \n\taudit logs as required. Without a real-time alert, security personnel may be unaware of an impending failure of \n\tthe audit capability, and system operation may be adversely affected. \n\nThe appropriate support staff include, at a minimum, the Information System Security Officer (ISSO) and the database \nadministrator (DBA)/systems administrator (SA).\n\nA failure of database auditing will result in either the database continuing to function without auditing or in a \ncomplete halt to database operations. When audit processing fails, appropriate personnel must be alerted immediately \nto avoid further downtime or unaudited transactions.\n\nAlerts provide organizations with urgent messages. Real-time alerts provide these messages immediately (i.e., the \n\ttime from event detection to alert occurs in seconds or less).\n\nThe necessary monitoring and alerts may be implemented using features of PostgreSQL, the OS, third-party software, \ncustom code, or a combination of these. The term \"the system\" is used to encompass all of these.",
        "rationale": "",
        "check": "Review DBMS, OS, or third-party logging software settings to determine whether a real-time \n\talert will be sent to the appropriate personnel when auditing fails for any reason.\n\nIf real-time alerts are not sent upon auditing failure, this is a finding.",
        "fix": "Configure the system to provide an immediate real-time alert to appropriate support staff when \n\tan audit log failure occurs.\n\nIt is possible to create scripts or implement third-party tools to enable real-time alerting for audit failures in \nPostgreSQL."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000360-DB-000320",
        "gid": "V-233535",
        "rid": "SV-233535r617333_rule",
        "stig_id": "CD12-00-002700",
        "fix_id": "F-36694r606829_fix",
        "cci": [
          "CCI-001858"
        ],
        "nist": [
          "AU-5 (2)"
        ]
      },
      "code": "  control \"V-233535\" do\n    describe 'A manual review is required to ensure PostgreSQL provides an immediate real-time alert to appropriate\n      support staff of all audit failure events requiring real-time alerts' do\n      skip 'A manual review is required to ensure PostgreSQL provides an immediate real-time alert to appropriate\n      support staff of all audit failure events requiring real-time alerts'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233535.rb",
        "line": 3
      },
      "id": "V-233535"
    },
    {
      "title": "PostgreSQL must be configurable to overwrite audit log records, oldest first (First-In-First-Out [FIFO]), \n\tin the event of unavailability of space for more audit log records.",
      "desc": "It is critical that when PostgreSQL is at risk of failing to process audit logs as required, it take \n\taction to mitigate the failure. Audit processing failures include software/hardware errors; failures in the \n\taudit capturing mechanisms; and audit storage capacity being reached or exceeded. Responses to audit failure \n\tdepend upon the nature of the failure mode. \n\nWhen availability is an overriding concern, approved actions in response to an audit failure are as follows: \n\n(i) If the failure was caused by the lack of audit record storage capacity, PostgreSQL must continue generating \naudit records, and if possible (automatically restarting the audit service if necessary), overwriting the oldest \naudit records in a first-in-first-out manner.\n(ii) If audit records are sent to a centralized collection server and communication with this server is lost or \nthe server fails, PostgreSQL must queue audit records locally until communication is restored or until the audit \nrecords are retrieved manually. Upon restoration of the connection to the centralized collection server, action \nshould be taken to synchronize the local audit data with the collection server.\n\nSystems where availability is paramount will most likely be MAC I; the final determination is the prerogative of \nthe application owner, subject to Authorizing Official concurrence. Sufficient auditing resources must be allocated \nto avoid audit data loss in all but the most extreme situations.",
      "descriptions": {
        "default": "It is critical that when PostgreSQL is at risk of failing to process audit logs as required, it take \n\taction to mitigate the failure. Audit processing failures include software/hardware errors; failures in the \n\taudit capturing mechanisms; and audit storage capacity being reached or exceeded. Responses to audit failure \n\tdepend upon the nature of the failure mode. \n\nWhen availability is an overriding concern, approved actions in response to an audit failure are as follows: \n\n(i) If the failure was caused by the lack of audit record storage capacity, PostgreSQL must continue generating \naudit records, and if possible (automatically restarting the audit service if necessary), overwriting the oldest \naudit records in a first-in-first-out manner.\n(ii) If audit records are sent to a centralized collection server and communication with this server is lost or \nthe server fails, PostgreSQL must queue audit records locally until communication is restored or until the audit \nrecords are retrieved manually. Upon restoration of the connection to the centralized collection server, action \nshould be taken to synchronize the local audit data with the collection server.\n\nSystems where availability is paramount will most likely be MAC I; the final determination is the prerogative of \nthe application owner, subject to Authorizing Official concurrence. Sufficient auditing resources must be allocated \nto avoid audit data loss in all but the most extreme situations.",
        "rationale": "",
        "check": "If the AO approved system documentation states that system availability takes precedence, this \n\trequirement is not applicable (NA).\n\nIf an externally managed and monitored partition or logical volume that can be grown dynamically is being used for \nlogging, this is not a finding. \n\nIf PostgreSQL is auditing to a directory that is not being actively checked for availability of disk space, and if \na tool, utility, script, or other mechanism is not being used to ensure sufficient disk space is available for the \ncreation of new audit logs, this is a finding.\n\nIf a tool, utility, script, or other mechanism is being used to rotate audit logs, and oldest logs are not being \nremoved to ensure sufficient space for newest logs, or oldest logs are not being replaced by newest logs, this is a \nfinding.",
        "fix": "Establish a process with accompanying tools for monitoring available disk space and ensuring \n\tthat sufficient disk space is maintained in order to continue generating audit logs, overwriting the oldest \n\texisting records if necessary."
      },
      "impact": 0.3,
      "refs": [],
      "tags": {
        "severity": "low",
        "gtitle": "SRG-APP-000109-DB-000321",
        "gid": "V-233536",
        "rid": "SV-233536r617333_rule",
        "stig_id": "CD12-00-002800",
        "fix_id": "F-36695r606832_fix",
        "cci": [
          "CCI-000140"
        ],
        "nist": [
          "AU-5 b"
        ]
      },
      "code": "control\t'V-233536' do\n\ttitle\t\"PostgreSQL must be configurable to overwrite audit log records, oldest first (First-In-First-Out [FIFO]), \n\tin the event of unavailability of space for more audit log records.\"\n\tdesc\t\"It is critical that when PostgreSQL is at risk of failing to process audit logs as required, it take \n\taction to mitigate the failure. Audit processing failures include software/hardware errors; failures in the \n\taudit capturing mechanisms; and audit storage capacity being reached or exceeded. Responses to audit failure \n\tdepend upon the nature of the failure mode. \n\nWhen availability is an overriding concern, approved actions in response to an audit failure are as follows: \n\n(i) If the failure was caused by the lack of audit record storage capacity, PostgreSQL must continue generating \naudit records, and if possible (automatically restarting the audit service if necessary), overwriting the oldest \naudit records in a first-in-first-out manner.\n(ii) If audit records are sent to a centralized collection server and communication with this server is lost or \nthe server fails, PostgreSQL must queue audit records locally until communication is restored or until the audit \nrecords are retrieved manually. Upon restoration of the connection to the centralized collection server, action \nshould be taken to synchronize the local audit data with the collection server.\n\nSystems where availability is paramount will most likely be MAC I; the final determination is the prerogative of \nthe application owner, subject to Authorizing Official concurrence. Sufficient auditing resources must be allocated \nto avoid audit data loss in all but the most extreme situations.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"If the AO approved system documentation states that system availability takes precedence, this \n\trequirement is not applicable (NA).\n\nIf an externally managed and monitored partition or logical volume that can be grown dynamically is being used for \nlogging, this is not a finding. \n\nIf PostgreSQL is auditing to a directory that is not being actively checked for availability of disk space, and if \na tool, utility, script, or other mechanism is not being used to ensure sufficient disk space is available for the \ncreation of new audit logs, this is a finding.\n\nIf a tool, utility, script, or other mechanism is being used to rotate audit logs, and oldest logs are not being \nremoved to ensure sufficient space for newest logs, or oldest logs are not being replaced by newest logs, this is a \nfinding.\"\n\tdesc\t'fix', \"Establish a process with accompanying tools for monitoring available disk space and ensuring \n\tthat sufficient disk space is maintained in order to continue generating audit logs, overwriting the oldest \n\texisting records if necessary.\"\n\timpact 0.3\n\ttag severity: 'low'\n  tag gtitle: 'SRG-APP-000109-DB-000321'\n  tag gid: 'V-233536'\n  tag rid: 'SV-233536r617333_rule'\n  tag stig_id: 'CD12-00-002800'\n  tag fix_id: 'F-36695r606832_fix'\n  tag cci: [\"CCI-000140\"]\n  tag nist: [\"AU-5 b\"]\n\n\tdescribe \"Check that audit logs are overwritten in a FIFO manner.\" do\n\t\tskip \"If audit logs are not overwritten in a FIFO manner, this is a finding.\"\n\t  end\n\tend\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233536.rb",
        "line": 3
      },
      "id": "V-233536"
    },
    {
      "title": "PostgreSQL must by default shut down upon audit failure, to include the unavailability of space for \n\tmore audit log records; or must be configurable to shut down upon audit failure.",
      "desc": "It is critical that when PostgreSQL is at risk of failing to process audit logs as required, it take \n\taction to mitigate the failure. Audit processing failures include software/hardware errors; failures in the \n\taudit capturing mechanisms; and audit storage capacity being reached or exceeded. Responses to audit failure \n\tdepend upon the nature of the failure mode. \n\nWhen the need for system availability does not outweigh the need for a complete audit trail, PostgreSQL should shut \ndown immediately, rolling back all in-flight transactions.\n\nSystems where audit trail completeness is paramount will most likely be at a lower MAC level than MAC I; the final \ndetermination being the prerogative of the application owner, subject to Authorizing Official concurrence. \nSufficient auditing resources must be allocated to avoid a shutdown in all but the most extreme situations.",
      "descriptions": {
        "default": "It is critical that when PostgreSQL is at risk of failing to process audit logs as required, it take \n\taction to mitigate the failure. Audit processing failures include software/hardware errors; failures in the \n\taudit capturing mechanisms; and audit storage capacity being reached or exceeded. Responses to audit failure \n\tdepend upon the nature of the failure mode. \n\nWhen the need for system availability does not outweigh the need for a complete audit trail, PostgreSQL should shut \ndown immediately, rolling back all in-flight transactions.\n\nSystems where audit trail completeness is paramount will most likely be at a lower MAC level than MAC I; the final \ndetermination being the prerogative of the application owner, subject to Authorizing Official concurrence. \nSufficient auditing resources must be allocated to avoid a shutdown in all but the most extreme situations.",
        "rationale": "",
        "check": "If the application owner has determined that the need for system availability outweighs the \n\tneed for a complete audit trail, this is not applicable (NA). \n\nOtherwise, review the procedures, manual and/or automated, for monitoring the space used by audit trail(s) and for \noff-loading audit records to a centralized log management system.\n\nIf the procedures do not exist, this is a finding.\n\nIf the procedures exist, request evidence that they are followed. If the evidence indicates that the procedures are \nnot followed, this is a finding.\n\nIf the procedures exist, inquire if the system has ever run out of audit trail space in the last two years or since \nthe last system upgrade, whichever is more recent. If it has run out of space in this period, and the procedures \nhave not been updated to compensate, this is a finding.",
        "fix": "Modify DBMS, OS, or third-party logging application settings to alert appropriate personnel \nwhen a specific percentage of log storage capacity is reached."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000109-DB-000049",
        "gid": "V-233537",
        "rid": "SV-233537r617333_rule",
        "stig_id": "CD12-00-002900",
        "fix_id": "F-36696r606835_fix",
        "cci": [
          "CCI-000140"
        ],
        "nist": [
          "AU-5 b"
        ]
      },
      "code": "control\t'V-233537' do\n\ttitle\t\"PostgreSQL must by default shut down upon audit failure, to include the unavailability of space for \n\tmore audit log records; or must be configurable to shut down upon audit failure.\"\n\tdesc\t\"It is critical that when PostgreSQL is at risk of failing to process audit logs as required, it take \n\taction to mitigate the failure. Audit processing failures include software/hardware errors; failures in the \n\taudit capturing mechanisms; and audit storage capacity being reached or exceeded. Responses to audit failure \n\tdepend upon the nature of the failure mode. \n\nWhen the need for system availability does not outweigh the need for a complete audit trail, PostgreSQL should shut \ndown immediately, rolling back all in-flight transactions.\n\nSystems where audit trail completeness is paramount will most likely be at a lower MAC level than MAC I; the final \ndetermination being the prerogative of the application owner, subject to Authorizing Official concurrence. \nSufficient auditing resources must be allocated to avoid a shutdown in all but the most extreme situations.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"If the application owner has determined that the need for system availability outweighs the \n\tneed for a complete audit trail, this is not applicable (NA). \n\nOtherwise, review the procedures, manual and/or automated, for monitoring the space used by audit trail(s) and for \noff-loading audit records to a centralized log management system.\n\nIf the procedures do not exist, this is a finding.\n\nIf the procedures exist, request evidence that they are followed. If the evidence indicates that the procedures are \nnot followed, this is a finding.\n\nIf the procedures exist, inquire if the system has ever run out of audit trail space in the last two years or since \nthe last system upgrade, whichever is more recent. If it has run out of space in this period, and the procedures \nhave not been updated to compensate, this is a finding.\"\n\tdesc\t'fix', \"Modify DBMS, OS, or third-party logging application settings to alert appropriate personnel \nwhen a specific percentage of log storage capacity is reached.\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000109-DB-000049'\n  tag gid: 'V-233537'\n  tag rid: 'SV-233537r617333_rule'\n  tag stig_id: 'CD12-00-002900'\n  tag fix_id: 'F-36696r606835_fix'\n  tag cci: [\"CCI-000140\"]\n  tag nist: [\"AU-5 b\"]\n\n\tdescribe \"Check that PostgreSQL will shutdown upon audit failure.\" do\n\t\tskip \"If PostgreSQL does not shut down upon audit failure or is not configurable to, this is a finding.\"\n\t  end\n\tend\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233537.rb",
        "line": 3
      },
      "id": "V-233537"
    },
    {
      "title": "PostgreSQL must maintain the confidentiality and integrity of information during reception.",
      "desc": "Information can be either unintentionally or maliciously disclosed or modified during reception, \n\tincluding, for example, during aggregation, at protocol transformation points, and during packing/unpacking. \n\tThese unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.\n\nThis requirement applies only to those applications that are either distributed or can allow access to data \nnonlocally. Use of this requirement will be limited to situations where the data owner has a strict requirement \nfor ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nWhen receiving data, PostgreSQL, associated applications, and infrastructure must leverage protection mechanisms.\n\nPostgreSQL uses OpenSSL SSLv23_method() in fe-secure-openssl.c; while the name is misleading, this function enables \nonly TLS encryption methods, not SSL.\n\nSee OpenSSL: https://mta.openssl.org/pipermail/openssl-dev/2015-May/001449.html",
      "descriptions": {
        "default": "Information can be either unintentionally or maliciously disclosed or modified during reception, \n\tincluding, for example, during aggregation, at protocol transformation points, and during packing/unpacking. \n\tThese unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.\n\nThis requirement applies only to those applications that are either distributed or can allow access to data \nnonlocally. Use of this requirement will be limited to situations where the data owner has a strict requirement \nfor ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nWhen receiving data, PostgreSQL, associated applications, and infrastructure must leverage protection mechanisms.\n\nPostgreSQL uses OpenSSL SSLv23_method() in fe-secure-openssl.c; while the name is misleading, this function enables \nonly TLS encryption methods, not SSL.\n\nSee OpenSSL: https://mta.openssl.org/pipermail/openssl-dev/2015-May/001449.html",
        "rationale": "",
        "check": "If the data owner does not have a strict requirement for ensuring data integrity and \n\tconfidentiality is maintained at every step of the data transfer and handling process, this is not a finding.\n\nAs the database administrator (shown here as \"postgres\"), verify SSL is enabled in postgresql.conf by running \nthe following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW ssl\" \n\nIf SSL is off, this is a finding.\n\nIf PostgreSQL, associated applications, and infrastructure do not employ protective measures against unauthorized \n\tdisclosure and modification during reception, this is a finding.",
        "fix": "Implement protective measures against unauthorized disclosure and modification during reception.\n\nTo configure PostgreSQL to use SSL, see supplementary content APPENDIX-G for instructions on enabling SSL."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000442-DB-000379",
        "gid": "V-233538",
        "rid": "SV-233538r617333_rule",
        "stig_id": "CD12-00-003000",
        "fix_id": "F-36697r606838_fix",
        "cci": [
          "CCI-002422"
        ],
        "nist": [
          "SC-8 (2)"
        ]
      },
      "code": "control\t'V-233538' do\n\ttitle\t\"PostgreSQL must maintain the confidentiality and integrity of information during reception.\"\n\tdesc\t\"Information can be either unintentionally or maliciously disclosed or modified during reception, \n\tincluding, for example, during aggregation, at protocol transformation points, and during packing/unpacking. \n\tThese unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.\n\nThis requirement applies only to those applications that are either distributed or can allow access to data \nnonlocally. Use of this requirement will be limited to situations where the data owner has a strict requirement \nfor ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nWhen receiving data, PostgreSQL, associated applications, and infrastructure must leverage protection mechanisms.\n\nPostgreSQL uses OpenSSL SSLv23_method() in fe-secure-openssl.c; while the name is misleading, this function enables \nonly TLS encryption methods, not SSL.\n\nSee OpenSSL: https://mta.openssl.org/pipermail/openssl-dev/2015-May/001449.html\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"If the data owner does not have a strict requirement for ensuring data integrity and \n\tconfidentiality is maintained at every step of the data transfer and handling process, this is not a finding.\n\nAs the database administrator (shown here as \\\"postgres\\\"), verify SSL is enabled in postgresql.conf by running \nthe following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW ssl\\\" \n\nIf SSL is off, this is a finding.\n\nIf PostgreSQL, associated applications, and infrastructure do not employ protective measures against unauthorized \n\tdisclosure and modification during reception, this is a finding.\"\n\tdesc\t'fix', \"Implement protective measures against unauthorized disclosure and modification during reception.\n\nTo configure PostgreSQL to use SSL, see supplementary content APPENDIX-G for instructions on enabling SSL.\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000442-DB-000379'\n  tag gid: 'V-233538'\n  tag rid: 'SV-233538r617333_rule'\n  tag stig_id: 'CD12-00-003000'\n  tag fix_id: 'F-36697r606838_fix'\n  tag cci: [\"CCI-002422\"]\n  tag nist: [\"SC-8 (2)\"]\n\n\n\tsql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n\tdescribe sql.query('SHOW ssl;', [input('pg_db')]) do\n\t  its('output') { should_not match /off|false/i }\n\tend\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233538.rb",
        "line": 3
      },
      "id": "V-233538"
    },
    {
      "title": "Database objects (including but not limited to tables, indexes, storage, trigger procedures, functions, \n\tlinks to software external to PostgreSQL, etc.) must be owned by database/DBMS principals authorized for ownership.",
      "desc": "Within the database, object ownership implies full privileges to the owned object, including the \n\tprivilege to assign access to the owned objects to other subjects. Database functions and procedures can be \n\tcoded using definer's rights. This allows anyone who utilizes the object to perform the actions if they were the \n\towner. If not properly managed, this can lead to privileged actions being taken by unauthorized individuals.\n\nConversely, if critical tables or other objects rely on unauthorized owner accounts, these objects may be lost when \nan account is removed.",
      "descriptions": {
        "default": "Within the database, object ownership implies full privileges to the owned object, including the \n\tprivilege to assign access to the owned objects to other subjects. Database functions and procedures can be \n\tcoded using definer's rights. This allows anyone who utilizes the object to perform the actions if they were the \n\towner. If not properly managed, this can lead to privileged actions being taken by unauthorized individuals.\n\nConversely, if critical tables or other objects rely on unauthorized owner accounts, these objects may be lost when \nan account is removed.",
        "rationale": "",
        "check": "Review system documentation to identify accounts authorized to own database objects. Review \n\taccounts that own objects in the database(s).\n\nIf any database objects are found to be owned by users not authorized to own database objects, this is a finding.\n\nTo check the ownership of objects in the database, as the database administrator, run the following SQL:\n\n$ sudo su - postgres\n$ psql -x -c \"dn *.*\"\n$ psql -x -c \"dt *.*\"\n$ psql -x -c \"ds *.*\"\n$ psql -x -c \"dv *.*\"\n$ psql -x -c \"df+ *.*\"\n\nIf any object is not owned by an authorized role for ownership, this is a finding.",
        "fix": "Assign ownership of authorized objects to authorized object owner accounts.\n\n#### Schema Owner\n\nTo create a schema owned by the user bob, run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"CREATE SCHEMA test AUTHORIZATION bob\" \n\nTo alter the ownership of an existing object to be owned by the user \"bob\", run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"ALTER SCHEMA test OWNER TO bob\""
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000133-DB-000200",
        "gid": "V-233539",
        "rid": "SV-233539r617333_rule",
        "stig_id": "CD12-00-003100",
        "fix_id": "F-36698r606841_fix",
        "cci": [
          "CCI-001499"
        ],
        "nist": [
          "CM-5 (6)"
        ]
      },
      "code": "  control \"V-233539\" do\n    sql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n    authorized_owners = input('pg_superusers')\n    pg_db = input('pg_db')\n    pg_owner = input('pg_owner')\n\n\n    databases_sql = \"SELECT datname FROM pg_catalog.pg_database where datname = '#{pg_db}';\"\n    databases_query = sql.query(databases_sql, [pg_db])\n    databases = databases_query.lines\n    types = %w(t s v) # tables, sequences views\n\n    databases.each do |database|\n      schemas_sql = ''\n      functions_sql = ''\n\n      if database == 'postgres'\n        schemas_sql = \"SELECT n.nspname, pg_catalog.pg_get_userbyid(n.nspowner) \"\\\n          \"FROM pg_catalog.pg_namespace n \"\\\n          \"WHERE pg_catalog.pg_get_userbyid(n.nspowner) <> '#{pg_owner}' AND pg_catalog.pg_get_userbyid(n.nspowner) <> 'rdsadmin';\"\n        functions_sql = \"SELECT n.nspname, p.proname, \"\\\n          \"pg_catalog.pg_get_userbyid(n.nspowner) \"\\\n          \"FROM pg_catalog.pg_proc p \"\\\n          \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace \"\\\n          \"WHERE pg_catalog.pg_get_userbyid(n.nspowner) <> '#{pg_owner}' AND pg_catalog.pg_get_userbyid(n.nspowner) <> 'rdsadmin';\"\n      else\n        schemas_sql = \"SELECT n.nspname, pg_catalog.pg_get_userbyid(n.nspowner) \"\\\n          \"FROM pg_catalog.pg_namespace n \"\\\n          \"WHERE pg_catalog.pg_get_userbyid(n.nspowner) \"\\\n          \"NOT IN (#{authorized_owners.map { |e| \"'#{e}'\" }.join(',')}) AND pg_catalog.pg_get_userbyid(n.nspowner) <> 'rdsadmin' \"\\\n          \"AND n.nspname !~ '^pg_' AND n.nspname <> 'information_schema';\"\n        functions_sql = \"SELECT n.nspname, p.proname, \"\\\n          \"pg_catalog.pg_get_userbyid(n.nspowner) \"\\\n          \"FROM pg_catalog.pg_proc p \"\\\n          \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace \"\\\n          \"WHERE pg_catalog.pg_get_userbyid(n.nspowner) \"\\\n          \"NOT IN (#{authorized_owners.map { |e| \"'#{e}'\" }.join(',')}) AND pg_catalog.pg_get_userbyid(n.nspowner) <> 'rdsadmin' \"\\\n          \"AND n.nspname <> 'pg_catalog' AND n.nspname <> 'information_schema';\"\n      end\n\n      connection_error = \"FATAL:\\\\s+database \\\"#{database}\\\" is not currently \"\\\n        \"accepting connections\"\n      connection_error_regex = Regexp.new(connection_error)\n\n      sql_result=sql.query(schemas_sql, [database])\n\n      describe.one do\n        describe sql_result do\n          its('output') { should eq '' }\n        end\n\n        describe sql_result do\n          it { should match connection_error_regex }\n        end\n      end\n\n      sql_result=sql.query(functions_sql, [database])\n\n      describe.one do\n        describe sql_result do\n          its('output') { should eq '' }\n        end\n\n        describe sql_result do\n          it { should match connection_error_regex }\n        end\n      end\n\n      types.each do |type|\n        objects_sql = ''\n\n        if database == 'postgres'\n          objects_sql = \"SELECT n.nspname, c.relname, c.relkind, \"\\\n            \"pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_class c \"\\\n            \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace \"\\\n            \"WHERE c.relkind IN ('#{type}','s','') \"\\\n            \"AND pg_catalog.pg_get_userbyid(n.nspowner) <> '#{pg_owner}' AND pg_catalog.pg_get_userbyid(n.nspowner) <> 'rdsadmin' \"\n            \"AND n.nspname !~ '^pg_toast';\"\n        else\n          objects_sql = \"SELECT n.nspname, c.relname, c.relkind, \"\\\n            \"pg_catalog.pg_get_userbyid(n.nspowner) FROM pg_catalog.pg_class c \"\\\n            \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace \"\\\n            \"WHERE c.relkind IN ('#{type}','s','') \"\\\n            \"AND pg_catalog.pg_get_userbyid(n.nspowner) \"\\\n            \"NOT IN (#{authorized_owners.map { |e| \"'#{e}'\" }.join(',')}) AND pg_catalog.pg_get_userbyid(n.nspowner) <> 'rdsadmin' \"\\\n            \"AND n.nspname <> 'pg_catalog' AND n.nspname <> 'information_schema'\"\\\n            \" AND n.nspname !~ '^pg_toast';\"\n        end\n\n        sql_result=sql.query(objects_sql, [database])\n\n        describe.one do\n          describe sql_result do\n            its('output') { should eq '' }\n          end\n\n          describe sql_result do\n            it { should match connection_error_regex }\n          end\n        end\n      end\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233539.rb",
        "line": 3
      },
      "id": "V-233539"
    },
    {
      "title": "The PostgreSQL software installation account must be restricted to authorized users.",
      "desc": "When dealing with change control issues, it should be noted any changes to the hardware, software, \n\tand/or firmware components of the information system and/or application can have significant effects on the \n\toverall security of the system. \n\nIf the system were to allow any user to make changes to software libraries, those changes might be implemented \nwithout undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals must be allowed access to information system components \nfor purposes of initiating changes, including upgrades and modifications.\n\nDBA and other privileged administrative or application owner accounts are granted privileges that allow actions \nthat can have a great impact on database security and operation. It is especially important to grant privileged \naccess to only those persons who are qualified and authorized to use them.",
      "descriptions": {
        "default": "When dealing with change control issues, it should be noted any changes to the hardware, software, \n\tand/or firmware components of the information system and/or application can have significant effects on the \n\toverall security of the system. \n\nIf the system were to allow any user to make changes to software libraries, those changes might be implemented \nwithout undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals must be allowed access to information system components \nfor purposes of initiating changes, including upgrades and modifications.\n\nDBA and other privileged administrative or application owner accounts are granted privileges that allow actions \nthat can have a great impact on database security and operation. It is especially important to grant privileged \naccess to only those persons who are qualified and authorized to use them.",
        "rationale": "",
        "check": "Review procedures for controlling, granting access to, and tracking use of the PostgreSQL \n\tsoftware installation account(s).\n\nIf access or use of this account is not restricted to the minimum number of personnel required or if unauthorized \naccess to the account has been granted, this is a finding.",
        "fix": "Develop, document, and implement procedures to restrict and track use of the PostgreSQL \n\tsoftware installation account."
      },
      "impact": 0,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000133-DB-000198",
        "gid": "V-233540",
        "rid": "SV-233540r617333_rule",
        "stig_id": "CD12-00-003200",
        "fix_id": "F-36699r606844_fix",
        "cci": [
          "CCI-001499"
        ],
        "nist": [
          "CM-5 (6)"
        ]
      },
      "code": "  control \"V-233540\" do\n    impact 0.0\n    describe 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on' do\n      skip 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233540.rb",
        "line": 3
      },
      "id": "V-233540"
    },
    {
      "title": "Database software, including PostgreSQL configuration files, must be stored in dedicated directories \n\tseparate from the host OS and other applications.",
      "desc": "When dealing with change control issues, it should be noted, any changes to the hardware, software, \n\tand/or firmware components of the information system and/or application can potentially have significant effects \n\ton the overall security of the system.\n\nMultiple applications can provide a cumulative negative effect. A vulnerability and subsequent exploit to one \napplication can lead to an exploit of other applications sharing the same security context. For example, an exploit \nto a web server process that leads to unauthorized administrative access to host system directories can most likely \nlead to a compromise of all applications hosted by the same system. Database software not installed using dedicated \ndirectories both threatens and is threatened by other hosted applications. Access controls defined for one \napplication may by default provide access to the other application's database objects or directories. Any method \nthat provides any level of separation of security context assists in the protection between applications.",
      "descriptions": {
        "default": "When dealing with change control issues, it should be noted, any changes to the hardware, software, \n\tand/or firmware components of the information system and/or application can potentially have significant effects \n\ton the overall security of the system.\n\nMultiple applications can provide a cumulative negative effect. A vulnerability and subsequent exploit to one \napplication can lead to an exploit of other applications sharing the same security context. For example, an exploit \nto a web server process that leads to unauthorized administrative access to host system directories can most likely \nlead to a compromise of all applications hosted by the same system. Database software not installed using dedicated \ndirectories both threatens and is threatened by other hosted applications. Access controls defined for one \napplication may by default provide access to the other application's database objects or directories. Any method \nthat provides any level of separation of security context assists in the protection between applications.",
        "rationale": "",
        "check": "Review the PostgreSQL software library directory and any subdirectories.\n\nIf any non-PostgreSQL software directories exist on the disk directory, examine or investigate their use. If any \nof the directories are used by other applications, including third-party applications that use the PostgreSQL, this \nis a finding.\n\nOnly applications that are required for the functioning and administration, not use, of the PostgreSQL software \nlibrary should be located in the same disk directory as the PostgreSQL software libraries.\n\nIf other applications are located in the same directory as PostgreSQL, this is a finding.",
        "fix": "Install all applications on directories separate from the PostgreSQL software library directory. \n\tRelocate any directories or reinstall other application software that currently shares the PostgreSQL software \n\tlibrary directory."
      },
      "impact": 0,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000133-DB-000199",
        "gid": "V-233541",
        "rid": "SV-233541r617333_rule",
        "stig_id": "CD12-00-003300",
        "fix_id": "F-36700r606847_fix",
        "cci": [
          "CCI-001499"
        ],
        "nist": [
          "CM-5 (6)"
        ]
      },
      "code": "  control \"V-233541\" do\n    impact 0.0\n    describe 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on' do\n      skip 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233541.rb",
        "line": 3
      },
      "id": "V-233541"
    },
    {
      "title": "PostgreSQL must include additional, more detailed, organization-defined information in the audit records \n\tfor audit events identified by type, location, or subject.",
      "desc": "Information system auditing capability is critical for accurate forensic analysis. Reconstruction of \n\tharmful events or forensic analysis is not possible if audit records do not contain enough information. To \n\t\tsupport analysis, some types of events will need information to be logged that exceeds the basic requirements \n\t\tof event type, time stamps, location, source, outcome, and user identity. If additional information is not \n\t\tavailable, it could negatively impact forensic investigations into user actions or other malicious events.\n\nThe organization must determine what additional information is required for complete analysis of the audited events. \nThe additional information required is dependent on the type of information (e.g., sensitivity of the data and the \n\tenvironment within which it resides). At a minimum, the organization must employ either full-text recording of \n\tprivileged commands or the individual identities of users of shared accounts, or both. The organization must\n\t maintain audit trails in sufficient detail to reconstruct events to determine the cause and impact of compromise. \n\nExamples of detailed information the organization may require in audit records are full-text recording of privileged \ncommands or the individual identities of shared account users.",
      "descriptions": {
        "default": "Information system auditing capability is critical for accurate forensic analysis. Reconstruction of \n\tharmful events or forensic analysis is not possible if audit records do not contain enough information. To \n\t\tsupport analysis, some types of events will need information to be logged that exceeds the basic requirements \n\t\tof event type, time stamps, location, source, outcome, and user identity. If additional information is not \n\t\tavailable, it could negatively impact forensic investigations into user actions or other malicious events.\n\nThe organization must determine what additional information is required for complete analysis of the audited events. \nThe additional information required is dependent on the type of information (e.g., sensitivity of the data and the \n\tenvironment within which it resides). At a minimum, the organization must employ either full-text recording of \n\tprivileged commands or the individual identities of users of shared accounts, or both. The organization must\n\t maintain audit trails in sufficient detail to reconstruct events to determine the cause and impact of compromise. \n\nExamples of detailed information the organization may require in audit records are full-text recording of privileged \ncommands or the individual identities of shared account users.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA and PGLOG environment variables. See \n\tsupplementary content APPENDIX-F and APPENDIX-I for instructions on configuring them.\n\nReview the system documentation to identify what additional information the organization has determined necessary.\n\nCheck PostgreSQL settings by examining ${PGDATA?}/postgresql.conf to ensure additional auditing is configured and \nthen examine existing audit records in ${PGLOG?}/<latest.log> to verify that all organization-defined additional, \nmore detailed information is in the audit records for audit events identified by type, location, or subject after \nexecuting SQL commands that fall under the additional audit classes.\n\nIf any additional information is defined and is not contained in the audit records, this is a finding.",
        "fix": "Configure PostgreSQL audit settings to include all organization-defined detailed information \n\tin the audit records for audit events identified by type, location, or subject.\n\nUsing pgaudit, PostgreSQL can be configured to audit these requests. See supplementary content APPENDIX-B for \ndocumentation on installing pgaudit.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000101-DB-000044",
        "gid": "V-233542",
        "rid": "SV-233542r617333_rule",
        "stig_id": "CD12-00-003500",
        "fix_id": "F-36701r606850_fix",
        "cci": [
          "CCI-000135"
        ],
        "nist": [
          "AU-3 (1)"
        ]
      },
      "code": "  control \"V-233542\" do\n    describe 'A manual review is required to ensure PostgreSQL includes additional, more detailed, organization-defined\n      information in the audit records for audit events identified by type,\n      location, or subject' do\n      skip 'A manual review is required to ensure PostgreSQL includes additional, more detailed, organization-defined\n      information in the audit records for audit events identified by type,\n      location, or subject'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233542.rb",
        "line": 3
      },
      "id": "V-233542"
    },
    {
      "title": "Execution of software modules (to include functions and trigger procedures) with elevated privileges \n\tmust be restricted to necessary cases only.",
      "desc": "In certain situations, to provide required functionality, PostgreSQL needs to execute internal logic \n\t(stored procedures, functions, triggers, etc.) and/or external code modules with elevated privileges. However, \n\tif the privileges required for execution are at a higher level than the privileges assigned to organizational \n\t\tusers invoking the functionality applications/programs, those users are indirectly provided with greater \n\t\tprivileges than assigned by organizations.\n\nPrivilege elevation must be utilized only where necessary and protected from misuse.\n\nThis calls for inspection of application source code, which will require collaboration with the application \ndevelopers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate \nfrom the application developers, and may have limited, if any, access to source code. Nevertheless, protections of \nthis type are so important to the secure operation of databases that they must not be ignored. At a minimum, the \nDBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must \ndocument what has been discovered.",
      "descriptions": {
        "default": "In certain situations, to provide required functionality, PostgreSQL needs to execute internal logic \n\t(stored procedures, functions, triggers, etc.) and/or external code modules with elevated privileges. However, \n\tif the privileges required for execution are at a higher level than the privileges assigned to organizational \n\t\tusers invoking the functionality applications/programs, those users are indirectly provided with greater \n\t\tprivileges than assigned by organizations.\n\nPrivilege elevation must be utilized only where necessary and protected from misuse.\n\nThis calls for inspection of application source code, which will require collaboration with the application \ndevelopers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate \nfrom the application developers, and may have limited, if any, access to source code. Nevertheless, protections of \nthis type are so important to the secure operation of databases that they must not be ignored. At a minimum, the \nDBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must \ndocument what has been discovered.",
        "rationale": "",
        "check": "Functions in PostgreSQL can be created with the SECURITY DEFINER\n    option. When SECURITY DEFINER functions are executed by a user, said function\n    is run with the privileges of the user who created it. \n    To list all functions that have SECURITY DEFINER, as, the database\n    administrator (shown here as \"postgres\"), run the following SQL: \n    $ sudo su - postgres \n    $ psql -c \"SELECT nspname, proname, proargtypes, prosecdef, rolname, proconfig\n    FROM pg_proc p JOIN pg_namespace n ON p.pronamespace = n.oid JOIN pg_roles a\n    ON a.oid = p.proowner WHERE prosecdef OR NOT proconfig IS NULL\" \n    In the query results, a prosecdef value of \"t\" on a row indicates that that\n    function uses privilege elevation. \n    If elevation of PostgreSQL privileges is utilized but not documented, this is a\n    finding. \n    If elevation of PostgreSQL privileges is documented, but not implemented as\n    described in the documentation, this is a finding. \n    If the privilege-elevation logic can be invoked in ways other than intended, or\n    in contexts other than intended, or by subjects/principals other than intended,\n    this is a finding.",
        "fix": "Determine where, when, how, and by what principals/subjects elevated privilege is needed.\n\nTo change a SECURITY DEFINER function to SECURITY INVOKER, as the database administrator (shown here as \"postgres\"), \nrun the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"ALTER FUNCTION <function_name> SECURITY INVOKER\""
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000342-DB-000302",
        "gid": "V-233543",
        "rid": "SV-233543r617333_rule",
        "stig_id": "CD12-00-003600",
        "fix_id": "F-36702r606853_fix",
        "cci": [
          "CCI-002233"
        ],
        "nist": [
          "AC-6 (8)"
        ]
      },
      "code": "  control \"V-233543\" do\n    desc \"check\", \"Functions in PostgreSQL can be created with the SECURITY DEFINER\n    option. When SECURITY DEFINER functions are executed by a user, said function\n    is run with the privileges of the user who created it. \n    To list all functions that have SECURITY DEFINER, as, the database\n    administrator (shown here as \\\"postgres\\\"), run the following SQL: \n    $ sudo su - postgres \n    $ psql -c \\\"SELECT nspname, proname, proargtypes, prosecdef, rolname, proconfig\n    FROM pg_proc p JOIN pg_namespace n ON p.pronamespace = n.oid JOIN pg_roles a\n    ON a.oid = p.proowner WHERE prosecdef OR NOT proconfig IS NULL\\\" \n    In the query results, a prosecdef value of \\\"t\\\" on a row indicates that that\n    function uses privilege elevation. \n    If elevation of PostgreSQL privileges is utilized but not documented, this is a\n    finding. \n    If elevation of PostgreSQL privileges is documented, but not implemented as\n    described in the documentation, this is a finding. \n    If the privilege-elevation logic can be invoked in ways other than intended, or\n    in contexts other than intended, or by subjects/principals other than intended,\n    this is a finding.\"\n\n    pg_dba = input('pg_dba')\n\n    pg_dba_password = input('pg_dba_password')\n\n    pg_db = input('pg_db')\n\n    pg_host = input('pg_host')\n\n    sql = postgres_session(pg_dba, pg_dba_password, pg_host, input('pg_port'))\n\n    security_definer_sql = \"SELECT nspname, proname, prosecdef \"\\\n      \"FROM pg_proc p JOIN pg_namespace n ON p.pronamespace = n.oid \"\\\n      \"JOIN pg_roles a ON a.oid = p.proowner WHERE prosecdef = 't';\"\n\n    databases_sql = \"SELECT datname FROM pg_catalog.pg_database where datname = '#{pg_db}';\"\n    databases_query = sql.query(databases_sql, [pg_db])\n    databases = databases_query.lines\n\n    databases.each do |database|\n      connection_error = \"FATAL:\\\\s+database \\\"#{database}\\\" is not currently \"\\\n        \"accepting connections\"\n      connection_error_regex = Regexp.new(connection_error)\n\n      sql_result=sql.query(security_definer_sql, [database])\n\n      describe.one do\n        describe sql_result do\n          its('output') { should eq '' }\n        end\n\n        describe sql_result do\n          it { should match connection_error_regex }\n        end\n      end\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233543.rb",
        "line": 3
      },
      "id": "V-233543"
    },
    {
      "title": "When invalid inputs are received, PostgreSQL must behave in a predictable and documented manner that \n\treflects organizational and system objectives.",
      "desc": "A common vulnerability is unplanned behavior when invalid inputs are received. This requirement guards \n\tagainst adverse or unintended system behavior caused by invalid inputs, where information system responses to the \n\tinvalid input may be disruptive or cause the system to fail into an unsafe state.\n\nThe behavior will be derived from the organizational and system requirements and includes, but is not limited to, \nnotification of the appropriate personnel, creating an audit record, and rejecting invalid input.",
      "descriptions": {
        "default": "A common vulnerability is unplanned behavior when invalid inputs are received. This requirement guards \n\tagainst adverse or unintended system behavior caused by invalid inputs, where information system responses to the \n\tinvalid input may be disruptive or cause the system to fail into an unsafe state.\n\nThe behavior will be derived from the organizational and system requirements and includes, but is not limited to, \nnotification of the appropriate personnel, creating an audit record, and rejecting invalid input.",
        "rationale": "",
        "check": "Review system documentation to determine how input errors from application to PostgreSQL are \n\tto be handled in general and if any special handling is defined for specific circumstances.\n\nIf it does not implement the documented behavior, this is a finding.\n\nAs the database administrator (shown here as \"postgres\"), make a small SQL syntax error in psql by running the \nfollowing:\n\n$ sudo su - postgres\n$ psql -c \"CREAT TABLEincorrect_syntax(id INT)\"\nERROR: syntax error at or near \"CREAT\"\n\nNote: The following instructions use the PGVER and PGLOG environment variables. See supplementary content \nAPPENDIX-H for instructions on configuring PGVER and APPENDIX-I for PGLOG.\n\nAs the database administrator (shown here as \"postgres\"), verify the syntax error was logged (change the log \nfile name and part to suit the circumstances):\n\n$ sudo su - postgres\n$ cat ~/${PGVER?}/data/${PGLOG?}/<latest log>\n2016-03-30 16:18:10.772 EDT postgres postgres 5706bb87.90dERROR: syntax error at or near \"CREAT\" at character 1\n2016-03-30 16:18:10.772 EDT postgres postgres 5706bb87.90dSTATEMENT: CREAT TABLE incorrect_syntax(id INT);\n\nIf no matching log entry containing the 'ERROR: syntax error' is present, this is a finding.",
        "fix": "Enable logging.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.\n\nAll errors and denials are logged if logging is enabled."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000447-DB-000393",
        "gid": "V-233544",
        "rid": "SV-233544r617333_rule",
        "stig_id": "CD12-00-003700",
        "fix_id": "F-36703r606856_fix",
        "cci": [
          "CCI-002754"
        ],
        "nist": [
          "SI-10 (3)"
        ]
      },
      "code": "  control \"V-233544\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233544.rb",
        "line": 3
      },
      "id": "V-233544"
    },
    {
      "title": "PostgreSQL must utilize centralized management of the content captured in audit records generated by \n\tall components of PostgreSQL.",
      "desc": "Without the ability to centrally manage the content captured in the audit records, identification, \n\ttroubleshooting, and correlation of suspicious behavior would be difficult and could lead to a delayed or \n\tincomplete analysis of an ongoing attack.\n\nThe content captured in audit records must be managed from a central location (necessitating automation). \nCentralized management of audit records and logs provides for efficiency in maintenance and management of records, \nas well as the backup and archiving of those records. \n\nPostgreSQL may write audit records to database tables, to files in the file system, to other kinds of local \nrepository, or directly to a centralized log management system. Whatever the method used, it must be compatible \nwith off-loading the records to the centralized system.",
      "descriptions": {
        "default": "Without the ability to centrally manage the content captured in the audit records, identification, \n\ttroubleshooting, and correlation of suspicious behavior would be difficult and could lead to a delayed or \n\tincomplete analysis of an ongoing attack.\n\nThe content captured in audit records must be managed from a central location (necessitating automation). \nCentralized management of audit records and logs provides for efficiency in maintenance and management of records, \nas well as the backup and archiving of those records. \n\nPostgreSQL may write audit records to database tables, to files in the file system, to other kinds of local \nrepository, or directly to a centralized log management system. Whatever the method used, it must be compatible \nwith off-loading the records to the centralized system.",
        "rationale": "",
        "check": "On UNIX systems, PostgreSQL can be configured to use stderr, csvlog and syslog. To send logs \n\tto a centralized location, syslog should be used.\n\nAs the database owner (shown here as \"postgres\"), ensure PostgreSQL uses syslog by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_destination\"\n\nAs the database owner (shown here as \"postgres\"), check to which log facility PostgreSQL is configured by running \nthe following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW syslog_facility\"\n\nCheck with the organization to see how syslog facilities are defined in their organization.\n\nIf PostgreSQL audit records are not written directly to or systematically transferred to a centralized log \nmanagement system, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER. \n\nTo ensure logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.\n\nWith logging enabled, as the database owner (shown here as \"postgres\"), configure the following parameters in \npostgresql.conf:\n\nNote: Consult the organization on how syslog facilities are defined in the syslog daemon configuration.\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\nlog_destination = 'syslog'\nsyslog_facility = 'LOCAL0'\nsyslog_ident = 'postgres'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000356-DB-000314",
        "gid": "V-233545",
        "rid": "SV-233545r617333_rule",
        "stig_id": "CD12-00-003800",
        "fix_id": "F-36704r606859_fix",
        "cci": [
          "CCI-001844"
        ],
        "nist": [
          "AU-3 (2)"
        ]
      },
      "code": "  control \"V-233545\" do\n    describe 'Requires manual review of the use of a centralized logging solution at this time.' do\n      skip 'Requires manual review of the use of a centralized logging solution at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233545.rb",
        "line": 3
      },
      "id": "V-233545"
    },
    {
      "title": "PostgreSQL must isolate security functions from non-security functions.",
      "desc": "An isolation boundary provides access control and protects the integrity of the hardware, software, \n\tand firmware that perform security functions.\n\nSecurity functions are the hardware, software, and/or firmware of the information system responsible for enforcing \nthe system security policy and supporting the isolation of code and data on which the protection is based.\n\nDevelopers and implementers can increase the assurance in security functions by employing well-defined security \npolicy models; structured, disciplined, and rigorous hardware and software development techniques; and sound \nsystem/security engineering principles.\n\nDatabase Management Systems typically separate security functionality from non-security functionality via separate \ndatabases or schemas. Database objects or code implementing security functionality should not be commingled with \nobjects or code implementing application logic. When security and non-security functionality are commingled, users \nwho have access to non-security functionality may be able to access security functionality.",
      "descriptions": {
        "default": "An isolation boundary provides access control and protects the integrity of the hardware, software, \n\tand firmware that perform security functions.\n\nSecurity functions are the hardware, software, and/or firmware of the information system responsible for enforcing \nthe system security policy and supporting the isolation of code and data on which the protection is based.\n\nDevelopers and implementers can increase the assurance in security functions by employing well-defined security \npolicy models; structured, disciplined, and rigorous hardware and software development techniques; and sound \nsystem/security engineering principles.\n\nDatabase Management Systems typically separate security functionality from non-security functionality via separate \ndatabases or schemas. Database objects or code implementing security functionality should not be commingled with \nobjects or code implementing application logic. When security and non-security functionality are commingled, users \nwho have access to non-security functionality may be able to access security functionality.",
        "rationale": "",
        "check": "Check PostgreSQL settings to determine whether objects or code implementing security \n\tfunctionality are located in a separate security domain, such as a separate database or schema created \n\tspecifically for security functionality.\n\nBy default, all objects in pg_catalog and information_schema are owned by the database administrator. \n\nTo check the access controls for those schemas, as the database administrator (shown here as \"postgres\"), run the \nfollowing commands to review the access privileges granted on the data dictionary and security tables, views, \nsequences, functions and trigger procedures:\n\n$ sudo su - postgres\n$ psql -x -c \"dp pg_catalog.*\"\n$ psql -x -c \"dp information_schema.*\"\n\nRepeat the dp statements for any additional schemas that contain locally defined security objects.\n\nRepeat using df+*.* to review ownership of PostgreSQL functions:\n\n$ sudo su - postgres\n$ psql -x -c \"df+ pg_catalog.*\"\n$ psql -x -c \"df+ information_schema.*\"\n\nRefer to the PostgreSQL online documentation for GRANT for help in interpreting the Access Privileges column in the \noutput from du. Note that an entry starting with an equals sign indicates privileges granted to Public (all users). \nBy default, most of the tables and views in the pg_catalog and information_schema schemas can be read by Public.\n\nIf any user besides the database administrator(s) is listed in access privileges and not documented, this is a finding.\n\nIf security-related database objects or code are not kept separate, this is a finding.",
        "fix": "Do not locate security-related database objects with application tables or schema.\n\nReview any site-specific applications security modules built into the database: determine what schema they are \nlocated in and take appropriate action.\n\nDo not grant access to pg_catalog or information_schema to anyone but the database administrator(s). Access to the \ndatabase administrator account(s) must not be granted to anyone without official approval."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000233-DB-000124",
        "gid": "V-233546",
        "rid": "SV-233546r617333_rule",
        "stig_id": "CD12-00-004000",
        "fix_id": "F-36705r606862_fix",
        "cci": [
          "CCI-001084"
        ],
        "nist": [
          "SC-3"
        ]
      },
      "code": "  control \"V-233546\" do\n    pg_owner = input('pg_owner')\n    pg_dba = input('pg_dba')\n    pg_dba_password = input('pg_dba_password')\n    pg_db = input('pg_db')\n    pg_host = input('pg_host')\n    pg_object_granted_privileges = input('pg_object_granted_privileges')\n    pg_object_public_privileges = input('pg_object_public_privileges')\n    pg_object_exceptions = input('pg_object_exceptions')\n    exceptions = \"#{pg_object_exceptions.map { |e| \"'#{e}'\" }.join(',')}\"\n    object_acl = \"^(((#{pg_owner}|rdsadmin=[#{pg_object_granted_privileges}]+|\"\\\n      \"=[#{pg_object_public_privileges}]+)\\\\/\\\\w+,?)+|)$\"\n    schemas = ['pg_catalog', 'information_schema']\n    sql = postgres_session(pg_dba, pg_dba_password, pg_host, input('pg_port'))\n\n    schemas.each do |schema|\n    objects_sql = \"SELECT n.nspname, c.relname, c.relkind, \"\\\n      \"pg_catalog.array_to_string(c.relacl, E',') FROM pg_catalog.pg_class c \"\\\n      \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace \"\\\n      \"WHERE c.relkind IN ('r', 'v', 'm', 'S', 'f') \"\\\n      \"AND n.nspname ~ '^(#{schema})$' \"\\\n      \"AND pg_catalog.array_to_string(c.relacl, E',') !~ '#{object_acl}' \"\\\n      \"AND c.relname NOT IN (#{exceptions});\"\n\n    describe sql.query(objects_sql, [pg_db]) do\n      its('output') { should eq '' }\n    end\n\n    functions_sql = \"SELECT n.nspname, p.proname, \"\\\n      \"pg_catalog.pg_get_userbyid(n.nspowner) \"\\\n      \"FROM pg_catalog.pg_proc p \"\\\n      \"LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace \"\\\n      \"WHERE n.nspname ~ '^(#{schema})$' \"\\\n      \"AND pg_catalog.pg_get_userbyid(n.nspowner) <> '#{pg_owner}' AND pg_catalog.pg_get_userbyid(n.nspowner) <> 'rdsadmin';\"\n\n    describe sql.query(functions_sql, [pg_db]) do\n      its('output') { should eq '' }\n    end\n  end\nend\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233546.rb",
        "line": 3
      },
      "id": "V-233546"
    },
    {
      "title": "PostgreSQL must produce audit records of its enforcement of access restrictions associated with changes \n\tto the configuration of PostgreSQL or database(s).",
      "desc": "Without auditing the enforcement of access restrictions against changes to configuration, it would be \n\tdifficult to identify attempted attacks and an audit trail would not be available for forensic investigation for \n\tafter-the-fact actions.\n\nEnforcement actions are the methods or mechanisms used to prevent unauthorized changes to configuration settings. \nEnforcement action methods may be as simple as denying access to a file based on the application of file permissions \n(access restriction). Audit items may consist of lists of actions blocked by access restrictions or changes \nidentified after the fact.",
      "descriptions": {
        "default": "Without auditing the enforcement of access restrictions against changes to configuration, it would be \n\tdifficult to identify attempted attacks and an audit trail would not be available for forensic investigation for \n\tafter-the-fact actions.\n\nEnforcement actions are the methods or mechanisms used to prevent unauthorized changes to configuration settings. \nEnforcement action methods may be as simple as denying access to a file based on the application of file permissions \n(access restriction). Audit items may consist of lists of actions blocked by access restrictions or changes \nidentified after the fact.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA environment variable. See supplementary \n\tcontent APPENDIX-F for instructions on configuring PGDATA and APPENDIX-I for PGLOG.\n\nTo verify that system denies are logged when unprivileged users attempt to change database configuration, as the \ndatabase administrator (shown here as \"postgres\"), run the following commands:\n\n$ sudo su - postgres\n$ psql\n\nNext, create a role with no privileges, change the current role to that user and attempt to change a configuration \nby running the following SQL:\n\nCREATE ROLE bob;\nSET ROLE bob;\nSET pgaudit.role='test';\nRESET ROLE;\nDROP ROLE bob;\n\nNow check ${PGLOG?} (use the latest log):\n\n$ cat ${PGDATA?}/${PGLOG?}/postgresql-Thu.log\n< 2016-01-28 17:57:34.092 UTC bob postgres: >ERROR: permission denied to set parameter \"pgaudit.role\"\n< 2016-01-28 17:57:34.092 UTC bob postgres: >STATEMENT: SET pgaudit.role='test';\n\nIf the denial is not logged, this is a finding.\n\nBy default PostgreSQL configuration files are owned by the postgres user and cannot be edited by non-privileged users:\n\n$ ls -la ${PGDATA?} | grep postgresql.conf\n-rw-------. 1 postgres postgres 21758 Jan 22 10:27 postgresql.conf\n\nIf postgresql.conf is not owned by the database owner and does not have read and write permissions for the owner, \nthis is a finding.",
        "fix": "Enable logging.\n\nAll denials are logged by default if logging is enabled. To ensure that logging is enabled, review supplementary \ncontent APPENDIX-C for instructions on enabling logging."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000381-DB-000361",
        "gid": "V-233547",
        "rid": "SV-233547r617333_rule",
        "stig_id": "CD12-00-004100",
        "fix_id": "F-36706r606865_fix",
        "cci": [
          "CCI-001814"
        ],
        "nist": [
          "CM-5 (1)"
        ]
      },
      "code": "  control \"V-233547\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233547.rb",
        "line": 3
      },
      "id": "V-233547"
    },
    {
      "title": "PostgreSQL must disable network functions, ports, protocols, and services deemed by the organization \n\tto be nonsecure, in accord with the Ports, Protocols, and Services Management (PPSM) guidance.",
      "desc": "Use of nonsecure network functions, ports, protocols, and services exposes the system to avoidable \n\tthreats.",
      "descriptions": {
        "default": "Use of nonsecure network functions, ports, protocols, and services exposes the system to avoidable \n\tthreats.",
        "rationale": "",
        "check": "As the database administrator, run the following SQL:\n\n$ psql -c \"SHOW port\"\n\nIf the currently defined port configuration is deemed prohibited, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo change the listening port of the database, as the database administrator, change the following setting in \npostgresql.conf: \n\n$ sudo su - postgres \n$ vi $PGDATA/postgresql.conf \n\nChange the port parameter to the desired port. \n\nNext, restart the database: \n\n$ sudo systemctl restart postgresql-${PGVER?} \n\nNote: psql uses the port 5432 by default. This can be changed by specifying the port with psql or by setting the \nPGPORT environment variable: \n\n$ psql -p 5432 -c \"SHOW port\" \n$ export PGPORT=5432"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000383-DB-000364",
        "gid": "V-233548",
        "rid": "SV-233548r617333_rule",
        "stig_id": "CD12-00-004150",
        "fix_id": "F-36707r606868_fix",
        "cci": [
          "CCI-001762"
        ],
        "nist": [
          "CM-7 (1) (b)"
        ]
      },
      "code": "control\t'V-233548' do\n\ttitle\t\"PostgreSQL must disable network functions, ports, protocols, and services deemed by the organization \n\tto be nonsecure, in accord with the Ports, Protocols, and Services Management (PPSM) guidance.\"\n\tdesc\t\"Use of nonsecure network functions, ports, protocols, and services exposes the system to avoidable \n\tthreats.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"As the database administrator, run the following SQL:\n\n$ psql -c \\\"SHOW port\\\"\n\nIf the currently defined port configuration is deemed prohibited, this is a finding.\"\n\tdesc\t'fix', \"Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo change the listening port of the database, as the database administrator, change the following setting in \npostgresql.conf: \n\n$ sudo su - postgres \n$ vi $PGDATA/postgresql.conf \n\nChange the port parameter to the desired port. \n\nNext, restart the database: \n\n$ sudo systemctl restart postgresql-${PGVER?} \n\nNote: psql uses the port 5432 by default. This can be changed by specifying the port with psql or by setting the \nPGPORT environment variable: \n\n$ psql -p 5432 -c \\\"SHOW port\\\" \n$ export PGPORT=5432\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000383-DB-000364'\n  tag gid: 'V-233548'\n  tag rid: 'SV-233548r617333_rule'\n  tag stig_id: 'CD12-00-004150'\n  tag fix_id: 'F-36707r606868_fix'\n  tag cci: [\"CCI-001762\"]\n  tag nist: [\"CM-7 (1) (b)\"]\n\n\tdescribe \"Check that all network functions, ports, protocols, and services comply with PPSM guidance\" do\n\t\tskip \"If network functions, ports, procols, and services do not comply with PPSM guidance, this is a finding.\"\n\t  end\n\tend\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233548.rb",
        "line": 3
      },
      "id": "V-233548"
    },
    {
      "title": "The audit information produced by PostgreSQL must be protected from unauthorized read access.",
      "desc": "If audit data were to become compromised, then competent forensic analysis and discovery of the true \n\tsource of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access \n\tto audit records provides information an attacker could potentially use to their advantage.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information \nfrom any and all unauthorized access. This includes read, write, copy, etc.\n\nThis requirement can be achieved through multiple methods, which will depend upon system architecture and design. \nSome commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file \nsystem protections and limiting log data location.\n\nAdditionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of \nor access to those records via the application. If the application provides access to the audit data, the application \nbecomes accountable for ensuring that audit information is protected from unauthorized access.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to \nsuccessfully audit information system activity.",
      "descriptions": {
        "default": "If audit data were to become compromised, then competent forensic analysis and discovery of the true \n\tsource of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access \n\tto audit records provides information an attacker could potentially use to their advantage.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information \nfrom any and all unauthorized access. This includes read, write, copy, etc.\n\nThis requirement can be achieved through multiple methods, which will depend upon system architecture and design. \nSome commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file \nsystem protections and limiting log data location.\n\nAdditionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of \nor access to those records via the application. If the application provides access to the audit data, the application \nbecomes accountable for ensuring that audit information is protected from unauthorized access.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to \nsuccessfully audit information system activity.",
        "rationale": "",
        "check": "Note: The following instructions use the PGLOG environment variable. See supplementary content \n\tAPPENDIX-I for instructions on configuring PGLOG.\n\nReview locations of audit logs, both internal to the database and database audit logs located at the operating \nsystem level.\n\nVerify there are appropriate controls and permissions to protect the audit information from unauthorized access.\n\n#### syslog Logging\n\nIf PostgreSQL is configured to use syslog for logging, consult organization location and permissions for syslog log \nfiles.\n\n#### stderr Logging\n\nAs the database administrator (shown here as \"postgres\"), check the current log_file_mode configuration by running \nthe following:\n\nNote: Consult the organization's documentation on acceptable log privileges.\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_file_mode\"\n\nIf log_file_mode is not 600, this is a finding.\n\nNext, verify the log files have the set permissions in ${PG_LOG?}:\n\n$ ls -l ${PGLOG?}/\ntotal 32\n-rw-------. 1 postgres postgres 0 Apr 8 00:00 postgresql-Fri.log\n-rw-------. 1 postgres postgres 8288 Apr 11 17:36 postgresql-Mon.log\n-rw-------. 1 postgres postgres 0 Apr 9 00:00 postgresql-Sat.log\n-rw-------. 1 postgres postgres 0 Apr 10 00:00 postgresql-Sun.log\n-rw-------. 1 postgres postgres 16212 Apr 7 17:05 postgresql-Thu.log \n-rw-------. 1 postgres postgres 1130 Apr 6 17:56 postgresql-Wed.log \n\nIf logs with 600 permissions do not exist in ${PG_LOG?}, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER. \n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.\n\n#### syslog Logging\n\nIf PostgreSQL is configured to use syslog for logging, consult organization location and permissions for syslog log \nfiles.\n\n#### stderr Logging\n\nIf PostgreSQL is configured to use stderr for logging, permissions of the log files can be set in postgresql.conf.\n\nAs the database administrator (shown here as \"postgres\"), edit the following settings of logs in the \npostgresql.conf file:\n\nNote: Consult the organization's documentation on acceptable log privileges.\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\nlog_file_mode = 0600\n\nNext, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000118-DB-000059",
        "gid": "V-233549",
        "rid": "SV-233549r617333_rule",
        "stig_id": "CD12-00-004200",
        "fix_id": "F-36708r606871_fix",
        "cci": [
          "CCI-000162"
        ],
        "nist": [
          "AU-9"
        ]
      },
      "code": "  control \"V-233549\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233549.rb",
        "line": 3
      },
      "id": "V-233549"
    },
    {
      "title": "When updates are applied to PostgreSQL software, any software components that have been replaced or \n\tmade unnecessary must be removed.",
      "desc": "Previous versions of PostgreSQL components that are not removed from the information system after \n\tupdates have been installed may be exploited by adversaries.\n\nSome PostgreSQL installation tools may remove older versions of software automatically from the information system. \nIn other cases, manual review and removal will be required. In planning installations and upgrades, organizations \nmust include steps (automated, manual, or both) to identify and remove the outdated modules.\n\nA transition period may be necessary when both the old and the new software are required. This should be taken into \naccount in the planning.",
      "descriptions": {
        "default": "Previous versions of PostgreSQL components that are not removed from the information system after \n\tupdates have been installed may be exploited by adversaries.\n\nSome PostgreSQL installation tools may remove older versions of software automatically from the information system. \nIn other cases, manual review and removal will be required. In planning installations and upgrades, organizations \nmust include steps (automated, manual, or both) to identify and remove the outdated modules.\n\nA transition period may be necessary when both the old and the new software are required. This should be taken into \naccount in the planning.",
        "rationale": "",
        "check": "To check software installed by packages, as the system administrator, run the following command:\n\n$ sudo rpm -qa | grep postgres\n\nIf multiple versions of postgres are installed but are unused, this is a finding.",
        "fix": "Use package managers (RPM or apt-get) for installing PostgreSQL. Unused software is removed when \n\tupdated."
      },
      "impact": 0,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000454-DB-000389",
        "gid": "V-233550",
        "rid": "SV-233550r617333_rule",
        "stig_id": "CD12-00-004300",
        "fix_id": "F-36709r606874_fix",
        "cci": [
          "CCI-002617"
        ],
        "nist": [
          "SI-2 (6)"
        ]
      },
      "code": "  control \"V-233550\" do\n    impact 0.0\n    describe 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on' do\n      skip 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233550.rb",
        "line": 3
      },
      "id": "V-233550"
    },
    {
      "title": "PostgreSQL must generate audit records when categorized information (e.g., classification \n\tlevels/security levels) is accessed.",
      "desc": "Changes in categories of information must be tracked. Without an audit trail, unauthorized access to \n\tprotected data could go undetected.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security \nCategorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security \nRequirements for Federal Information and Information Systems.",
      "descriptions": {
        "default": "Changes in categories of information must be tracked. Without an audit trail, unauthorized access to \n\tprotected data could go undetected.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security \nCategorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security \nRequirements for Federal Information and Information Systems.",
        "rationale": "",
        "check": "As the database administrator (shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW pgaudit.log\"\n\nIf pgaudit.log does not contain, \"ddl, write, role\", this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER. \n\nUsing pgaudit, the DBMS (PostgreSQL) can be configured to audit these requests. See supplementary content \nAPPENDIX-B for documentation on installing pgaudit.  \n\nWith pgaudit installed the following configurations can be made:  \n\n$ sudo su - postgres  \n\n$ vi ${PGDATA?}/postgresql.conf  \n\nAdd the following parameters (or edit existing parameters):  \n\npgaudit.log = 'ddl, write, role'  \n\nNext, as the system administrator, reload the server with the new configuration:  \n\n$ sudo systemctl reload postgresql- ${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000494-DB-000344",
        "gid": "V-233551",
        "rid": "SV-233551r617333_rule",
        "stig_id": "CD12-00-004400",
        "fix_id": "F-36710r606877_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233551\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233551.rb",
        "line": 3
      },
      "id": "V-233551"
    },
    {
      "title": "PostgreSQL must generate audit records when unsuccessful attempts to access security objects occur.",
      "desc": "Changes to the security configuration must be tracked.\n\nThis requirement applies to situations where security data is retrieved or modified via data manipulation \noperations, as opposed to via specialized security functionality.\n\nIn an SQL environment, types of access include, but are not necessarily limited to:\n\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
      "descriptions": {
        "default": "Changes to the security configuration must be tracked.\n\nThis requirement applies to situations where security data is retrieved or modified via data manipulation \noperations, as opposed to via specialized security functionality.\n\nIn an SQL environment, types of access include, but are not necessarily limited to:\n\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA and PGLOG environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-I for PGLOG.\n\nFirst, as the database administrator (shown here as \"postgres\"), setup a test schema and revoke users privileges \nfrom using it by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"CREATE SCHEMA stig_test_schema AUTHORIZATION postgres\"\n$ psql -c \"REVOKE ALL ON SCHEMA stig_test_schema FROM public\"\n$ psql -c \"GRANT ALL ON SCHEMA stig_test_schema TO postgres\"\n\nNext, create a test table, insert a value into that table for the following checks by running the following SQL:\n\n$ psql -c \"CREATE TABLE stig_test_schema.stig_test_table(id INT)\"\n$ psql -c \"INSERT INTO stig_test_schema.stig_test_table(id) VALUES (0)\"\n\n#### CREATE\nAttempt to CREATE a table in the stig_test_schema schema with a role that does not have privileges by running the \nfollowing SQL:\n\npsql -c \"CREATE ROLE bob; SET ROLE bob; CREATE TABLE stig_test_schema.test_table(id INT);\"\nERROR: permission denied for schema stig_test_schema\n\nNext, as a database administrator (shown here as \"postgres\"), verify that the denial was logged:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n< 2016-03-09 09:55:19.423 EST postgres 56e0393f.186b postgres: >ERROR: permission denied for schema stig_test_schema \nat character 14\n< 2016-03-09 09:55:19.423 EST postgres 56e0393f.186b postgres: >STATEMENT: CREATE TABLE \nstig_test_schema.test_table(id INT);\n\nIf the denial is not logged, this is a finding.\n\n#### INSERT\nAs role bob, attempt to INSERT into the table created earlier, stig_test_table by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SET ROLE bob; INSERT INTO stig_test_schema.stig_test_table(id) VALUES (0);\"\n\nNext, as a database administrator (shown here as \"postgres\"), verify that the denial was logged:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n< 2016-03-09 09:58:30.709 EST postgres 56e0393f.186b postgres: >ERROR: permission denied for schema \nstig_test_schema at character 13\n< 2016-03-09 09:58:30.709 EST postgres 56e0393f.186b postgres: >STATEMENT: INSERT INTO \nstig_test_schema.stig_test_table(id) VALUES (0);\n\nIf the denial is not logged, this is a finding.\n\n#### SELECT\nAs role bob, attempt to SELECT from the table created earlier, stig_test_table by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SET ROLE bob; SELECT * FROM stig_test_schema.stig_test_table;\"\n\nNext, as a database administrator (shown here as \"postgres\"), verify that the denial was logged:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n< 2016-03-09 09:57:58.327 EST postgres 56e0393f.186b postgres: >ERROR: permission denied for schema \nstig_test_schema at character 15\n< 2016-03-09 09:57:58.327 EST postgres 56e0393f.186b postgres: >STATEMENT: SELECT * FROM \nstig_test_schema.stig_test_table;\n\nIf the denial is not logged, this is a finding.\n\n#### ALTER\nAs role bob, attempt to ALTER the table created earlier, stig_test_table by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SET ROLE bob; ALTER TABLE stig_test_schema.stig_test_table ADD COLUMN name TEXT;\"\n\nNext, as a database administrator (shown here as \"postgres\"), verify that the denial was logged:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n< 2016-03-09 10:03:43.765 EST postgres 56e0393f.186b postgres: >STATEMENT: ALTER TABLE \nstig_test_schema.stig_test_table ADD COLUMN name TEXT;\n\nIf the denial is not logged, this is a finding.\n\n#### UPDATE\nAs role bob, attempt to UPDATE a row created earlier, stig_test_table by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SET ROLE bob; UPDATE stig_test_schema.stig_test_table SET id=1 WHERE id=0;\"\n\nNext, as a database administrator (shown here as \"postgres\"), verify that the denial was logged:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n< 2016-03-09 10:08:27.696 EST postgres 56e0393f.186b postgres: >ERROR: permission denied for schema \nstig_test_schema at character 8\n< 2016-03-09 10:08:27.696 EST postgres 56e0393f.186b postgres: >STATEMENT: UPDATE \nstig_test_schema.stig_test_table SET id=1 WHERE id=0;\n\nIf the denial is not logged, this is a finding.\n\n#### DELETE\nAs role bob, attempt to DELETE a row created earlier, stig_test_table by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SET ROLE bob; DELETE FROM stig_test_schema.stig_test_table WHERE id=0;\"\n\nNext, as a database administrator (shown here as \"postgres\"), verify that the denial was logged:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n< 2016-03-09 10:09:29.607 EST postgres 56e0393f.186b postgres: >ERROR: permission denied for schema \nstig_test_schema at character 13\n< 2016-03-09 10:09:29.607 EST postgres 56e0393f.186b postgres: >STATEMENT: DELETE FROM \nstig_test_schema.stig_test_table WHERE id=0;\n\nIf the denial is not logged, this is a finding.\n\n#### PREPARE \nAs role bob, attempt to execute a prepared system using PREPARE by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SET ROLE bob; PREPARE stig_test_plan(int) AS SELECT id FROM stig_test_schema.stig_test_table \nWHERE id=$1;\"\n\nNext, as a database administrator (shown here as \"postgres\"), verify that the denial was logged:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n< 2016-03-09 10:16:22.628 EST postgres 56e03e02.18e4 postgres: >ERROR: permission denied for schema \nstig_test_schema at character 46\n< 2016-03-09 10:16:22.628 EST postgres 56e03e02.18e4 postgres: >STATEMENT: PREPARE stig_test_plan(int) AS \nSELECT id FROM stig_test_schema.stig_test_table WHERE id=$1;\n\nIf the denial is not logged, this is a finding.\n\n#### DROP\nAs role bob, attempt to DROP the table created earlier stig_test_table by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SET ROLE bob; DROP TABLE stig_test_schema.stig_test_table;\"\n\nNext, as a database administrator (shown here as \"postgres\"), verify that the denial was logged:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n< 2016-03-09 10:18:55.255 EST postgres 56e03e02.18e4 postgres: >ERROR: permission denied for schema \nstig_test_schema\n< 2016-03-09 10:18:55.255 EST postgres 56e03e02.18e4 postgres: >STATEMENT: DROP TABLE \nstig_test_schema.stig_test_table;\n\nIf the denial is not logged, this is a finding.",
        "fix": "Configure PostgreSQL to produce audit records when unsuccessful attempts to access security \n\tobjects occur.\n\nAll denials are logged if logging is enabled. To ensure that logging is enabled, review supplementary content \nAPPENDIX-C for instructions on enabling logging."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000492-DB-000333",
        "gid": "V-233552",
        "rid": "SV-233552r617333_rule",
        "stig_id": "CD12-00-004500",
        "fix_id": "F-36711r606880_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233552\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233552.rb",
        "line": 3
      },
      "id": "V-233552"
    },
    {
      "title": "PostgreSQL must generate audit records when unsuccessful logons or connection attempts occur.",
      "desc": "For completeness of forensic analysis, it is necessary to track failed attempts to log on to \n\tPostgreSQL. While positive identification may not be possible in a case of failed authentication, as much \n\t\tinformation as possible about the incident must be captured.",
      "descriptions": {
        "default": "For completeness of forensic analysis, it is necessary to track failed attempts to log on to \n\tPostgreSQL. While positive identification may not be possible in a case of failed authentication, as much \n\t\tinformation as possible about the incident must be captured.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA and PGLOG environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-I on PGLOG.\n\nIn this example the user \"joe\" will log in to the Postgres database unsuccessfully:\n\n$ psql -d postgres -U joe\n\nAs the database administrator (shown here as \"postgres\"), check ${PGLOG?} for a FATAL connection audit trail:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/${PGLOG?}/{latest_log>\n< 2016-02-16 16:18:13.027 EST joe 56c65135.b5f postgres: >LOG: connection authorized: user=joe database=postgres\n< 2016-02-16 16:18:13.027 EST joe 56c65135.b5f postgres: >FATAL: role \"joe\" does not exist\n\nIf an audit record is not generated each time a user (or other principal) attempts, but fails to log on or \nconnect to PostgreSQL (including attempts where the user ID is invalid/unknown), this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.\n\nIf logging is enabled the following configurations must be made to log unsuccessful connections, date/time, \nusername, and session identifier.\n\nFirst, as the database administrator (shown here as \"postgres\"), edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nEdit the following parameters:\n\nlog_connections = on\nlog_line_prefix = '< %m %u %c: >'\n\nWhere:\n* %m is the time and date\n* %u is the username\n* %c is the session ID for the connection\n\nNext, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000503-DB-000351",
        "gid": "V-233553",
        "rid": "SV-233553r617333_rule",
        "stig_id": "CD12-00-004600",
        "fix_id": "F-36712r606883_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233553\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233553.rb",
        "line": 3
      },
      "id": "V-233553"
    },
    {
      "title": "PostgreSQL must generate audit records showing starting and ending time for user access to the \n\tdatabase(s).",
      "desc": "For completeness of forensic analysis, it is necessary to know how long a user's (or other principal's) \n\tconnection to PostgreSQL lasts. This can be achieved by recording disconnections, in addition to \n\tlogons/connections, in the audit logs.\n\nDisconnection may be initiated by the user or forced by the system (as in a timeout) or result from a system or \nnetwork failure. To the greatest extent possible, all disconnections must be logged.",
      "descriptions": {
        "default": "For completeness of forensic analysis, it is necessary to know how long a user's (or other principal's) \n\tconnection to PostgreSQL lasts. This can be achieved by recording disconnections, in addition to \n\tlogons/connections, in the audit logs.\n\nDisconnection may be initiated by the user or forced by the system (as in a timeout) or result from a system or \nnetwork failure. To the greatest extent possible, all disconnections must be logged.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA and PGLOG environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-I for PGLOG.\n\nFirst, log into the database with the postgres user by running the following commands:\n\n$ sudo su - postgres\n$ psql -U postgres\n\nNext, as the database administrator, verify the log for a connection audit trail:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n< 2016-02-23 20:25:39.931 EST postgres 56cfa993.7a72 postgres: >LOG: connection authorized: user=postgres \ndatabase=postgres\n< 2016-02-23 20:27:45.428 EST postgres 56cfa993.7a72 postgres: >LOG: AUDIT: SESSION,1,1,READ,SELECT,,,SELECT \ncurrent_user;,<none>\n< 2016-02-23 20:27:47.988 EST postgres 56cfa993.7a72 postgres: >LOG: disconnection: session time: 0:00:08.057 \nuser=postgres database=postgres host=[local]\n\nIf connections are not logged, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.\n\nIf logging is enabled the following configurations must be made to log connections, date/time, username, and \nsession identifier.\n\nFirst, as the database administrator (shown here as \"postgres\"), edit postgresql.conf by running the following:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nEdit the following parameters:\n\nlog_connections = on\nlog_disconnections = on\nlog_line_prefix = '< %m %u %c: >'\n\nWhere:\n* %m is the time and date\n* %u is the username\n* %c is the session ID for the connection\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000505-DB-000352",
        "gid": "V-233554",
        "rid": "SV-233554r617333_rule",
        "stig_id": "CD12-00-004700",
        "fix_id": "F-36713r606886_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233554\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233554.rb",
        "line": 3
      },
      "id": "V-233554"
    },
    {
      "title": "PostgreSQL must generate audit records when unsuccessful attempts to modify security objects occur.",
      "desc": "Changes in the database objects (tables, views, procedures, functions) that record and control \n\tpermissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, \n\tunauthorized changes to the security subsystem could go undetected. The database could be severely compromised \n\tor rendered inoperative.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
      "descriptions": {
        "default": "Changes in the database objects (tables, views, procedures, functions) that record and control \n\tpermissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, \n\tunauthorized changes to the security subsystem could go undetected. The database could be severely compromised \n\tor rendered inoperative.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA and PGLOG environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-I for PGLOG.\n\nAs the database administrator (shown here as \"postgres\"), create a test role by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"CREATE ROLE bob\"\n\nNext, to test if audit records are generated from unsuccessful attempts at modifying security objects, run the \nfollowing SQL:\n\n$ sudo su - postgres\n$ psql -c \"SET ROLE bob; UPDATE pg_authid SET rolsuper = 't' WHERE rolname = 'bob';\"\n\nNext, as the database administrator (shown here as \"postgres\"), verify the denials were logged:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n< 2016-03-17 10:34:00.017 EDT bob 56eabf52.b62 postgres: >ERROR: permission denied for relation pg_authid\n< 2016-03-17 10:34:00.017 EDT bob 56eabf52.b62 postgres: >STATEMENT: UPDATE pg_authid SET rolsuper = 't' WHERE \nrolname = 'bob';\n\nIf denials are not logged, this is a finding.",
        "fix": "Configure PostgreSQL to produce audit records when unsuccessful attempts to modify security \n\tobjects occur.\n\nUnsuccessful attempts to modify security objects can be logged if logging is enabled. To ensure logging is enabled,\n review supplementary content APPENDIX-C for instructions on enabling logging."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000496-DB-000335",
        "gid": "V-233555",
        "rid": "SV-233555r617333_rule",
        "stig_id": "CD12-00-004800",
        "fix_id": "F-36714r606889_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233555\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233555.rb",
        "line": 3
      },
      "id": "V-233555"
    },
    {
      "title": "PostgreSQL must generate audit records when privileges/permissions are added.",
      "desc": "Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without \n\tan audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges \n\tgive users access to information and functionality that they should not have; restricted privileges wrongly deny \n\taccess to authorized users.\n\nIn a SQL environment, adding permissions is typically done via the GRANT command, or, in the negative, the REVOKE \ncommand.",
      "descriptions": {
        "default": "Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without \n\tan audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges \n\tgive users access to information and functionality that they should not have; restricted privileges wrongly deny \n\taccess to authorized users.\n\nIn a SQL environment, adding permissions is typically done via the GRANT command, or, in the negative, the REVOKE \ncommand.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA and PGLOG environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-I for PGLOG.\n\nFirst, as the database administrator (shown here as \"postgres\"), create a role by running the following SQL:\n\nChange the privileges of another user:\n\n$ sudo su - postgres\n$ psql -c \"CREATE ROLE bob\"\n\nNext, GRANT then REVOKE privileges from the role:\n\n$ psql -c \"GRANT CONNECT ON DATABASE postgres TO bob\"\n$ psql -c \"REVOKE CONNECT ON DATABASE postgres FROM bob\"\n\npostgres=# REVOKE CONNECT ON DATABASE postgres FROM bob;\nREVOKE\n\npostgres=# GRANT CONNECT ON DATABASE postgres TO bob;\nGRANT\n\nNext, as the database administrator (shown here as \"postgres\"), verify the events were logged:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n< 2016-07-13 16:25:21.103 EDT postgres postgres LOG: > AUDIT: SESSION,1,1,ROLE,GRANT,,,GRANT CONNECT ON DATABASE \npostgres TO bob,<none>\n< 2016-07-13 16:25:25.520 EDT postgres postgres LOG: > AUDIT: SESSION,1,1,ROLE,REVOKE,,,REVOKE CONNECT ON DATABASE \npostgres FROM bob,<none>\n\nIf the above steps cannot verify that audit records are produced when privileges/permissions/role memberships are \nadded, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nUsing pgaudit, PostgreSQL can be configured to audit these requests. See supplementary content APPENDIX-B for \ndocumentation on installing pgaudit.\n\nWith pgaudit installed, the following configurations can be made:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.log = 'role'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000495-DB-000326",
        "gid": "V-233556",
        "rid": "SV-233556r617333_rule",
        "stig_id": "CD12-00-004900",
        "fix_id": "F-36715r606892_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233556\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233556.rb",
        "line": 3
      },
      "id": "V-233556"
    },
    {
      "title": "PostgreSQL must generate audit records when unsuccessful attempts to delete categorized information \n\t(e.g., classification levels/security levels) occur.",
      "desc": "Changes in categorized information must be tracked. Without an audit trail, unauthorized access to \n\tprotected data could go undetected.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security \nCategorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security \nRequirements for Federal Information and Information Systems.",
      "descriptions": {
        "default": "Changes in categorized information must be tracked. Without an audit trail, unauthorized access to \n\tprotected data could go undetected.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security \nCategorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security \nRequirements for Federal Information and Information Systems.",
        "rationale": "",
        "check": "First, as the database administrator, verify pgaudit is enabled by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf the output does not contain \"pgaudit\", this is a finding.\n\nNext, verify that role, read, write, and ddl auditing are enabled:\n\n$ psql -c \"SHOW pgaudit.log\"\n\nIf the output does not contain role, read, write, and ddl, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nAll errors and denials are logged if logging is enabled. To ensure logging is enabled, review supplementary content \nAPPENDIX-C for instructions on enabling logging.\n\nUsing pgaudit PostgreSQL can be configured to audit these requests. See supplementary content APPENDIX-B for \ndocumentation on installing pgaudit.\n\nWith pgaudit installed the following configurations can be made:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.log='ddl, role, read, write'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000502-DB-000349",
        "gid": "V-233557",
        "rid": "SV-233557r617333_rule",
        "stig_id": "CD12-00-005000",
        "fix_id": "F-36716r606895_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233557\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233557.rb",
        "line": 3
      },
      "id": "V-233557"
    },
    {
      "title": "PostgreSQL must generate audit records when successful logons or connections occur.",
      "desc": "For completeness of forensic analysis, it is necessary to track who/what (a user or other principal) \n\tlogs on to PostgreSQL.",
      "descriptions": {
        "default": "For completeness of forensic analysis, it is necessary to track who/what (a user or other principal) \n\tlogs on to PostgreSQL.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA and PGLOG environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-I for PGLOG.\n\nFirst, as the database administrator (shown here as \"postgres\"), check if log_connections is enabled by running \nthe following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_connections\"\n\nIf log_connections is off, this is a finding.\n\nNext, verify the logs that the previous connection to the database was logged:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n< 2016-02-16 15:54:03.934 EST postgres postgres 56c64b8b.aeb: >LOG: connection authorized: user=postgres \ndatabase=postgres\n\nIf an audit record is not generated each time a user (or other principal) logs on or connects to PostgreSQL, this is \na finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.\n\nIf logging is enabled the following configurations must be made to log connections, date/time, username, and session \nidentifier.\n\nFirst, as the database administrator (shown here as \"postgres\"), edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nEdit the following parameters as such:\n\nlog_connections = on\nlog_line_prefix = '< %m %u %d %c: >'\n\nWhere:\n* %m is the time and date\n* %u is the username\n* %d is the database\n* %c is the session ID for the connection\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000503-DB-000350",
        "gid": "V-233558",
        "rid": "SV-233558r617333_rule",
        "stig_id": "CD12-00-005100",
        "fix_id": "F-36717r606898_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233558\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233558.rb",
        "line": 3
      },
      "id": "V-233558"
    },
    {
      "title": "PostgreSQL must generate audit records when security objects are deleted.",
      "desc": "The removal of security objects from the database/PostgreSQL would seriously degrade a system's \n\tinformation assurance posture. If such an event occurs, it must be logged.",
      "descriptions": {
        "default": "The removal of security objects from the database/PostgreSQL would seriously degrade a system's \n\tinformation assurance posture. If such an event occurs, it must be logged.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA and PGLOG environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-I for PGLOG.\n\nFirst, as the database administrator (shown here as \"postgres\"), create a test table stig_test, enable row level \nsecurity, and create a policy by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"CREATE TABLE stig_test(id INT)\"\n$ psql -c \"ALTER TABLE stig_test ENABLE ROW LEVEL SECURITY\"\n$ psql -c \"CREATE POLICY lock_table ON stig_test USING ('postgres' = current_user)\"\n\nNext, drop the policy and disable row level security:\n\n$ psql -c \"DROP POLICY lock_table ON stig_test\"\n$ psql -c \"ALTER TABLE stig_test DISABLE ROW LEVEL SECURITY\"\n\nNow, as the database administrator (shown here as \"postgres\"), verify the security objects deletions were logged:\n\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n2016-03-30 14:54:18.991 EDT postgres postgres LOG: AUDIT: SESSION,11,1,DDL,DROP POLICY,,,DROP POLICY lock_table ON \nstig_test;,<none>\n2016-03-30 14:54:42.373 EDT postgres postgres LOG: AUDIT: SESSION,12,1,DDL,ALTER TABLE,,,ALTER TABLE stig_test \nDISABLE ROW LEVEL SECURITY;,<none>\n\nIf audit records are not produced when security objects are dropped, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See supplementary \n\tcontent APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nUsing pgaudit PostgreSQL can be configured to audit these requests. See supplementary content APPENDIX-B for \ndocumentation on installing pgaudit.\n\nWith pgaudit installed the following configurations can be made:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.log = 'ddl'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000501-DB-000336",
        "gid": "V-233559",
        "rid": "SV-233559r617333_rule",
        "stig_id": "CD12-00-005200",
        "fix_id": "F-36718r606901_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233559\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233559.rb",
        "line": 3
      },
      "id": "V-233559"
    },
    {
      "title": "PostgreSQL must generate audit records when unsuccessful attempts to retrieve privileges/permissions \n\toccur.",
      "desc": "Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role \n\tinformation. Therefore, it must be possible to configure auditing to do this. PostgreSQLs typically make such \n\t\tinformation available through views or functions.\n\nThis requirement addresses explicit requests for privilege/permission/role membership information. It does not refer \nto the implicit retrieval of privileges/permissions/role memberships that PostgreSQL continually performs to \ndetermine if any and every action on the database is permitted.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
      "descriptions": {
        "default": "Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role \n\tinformation. Therefore, it must be possible to configure auditing to do this. PostgreSQLs typically make such \n\t\tinformation available through views or functions.\n\nThis requirement addresses explicit requests for privilege/permission/role membership information. It does not refer \nto the implicit retrieval of privileges/permissions/role memberships that PostgreSQL continually performs to \ndetermine if any and every action on the database is permitted.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
        "rationale": "",
        "check": "Note: The following instructions use the PGLOG environment variables. See supplementary content \n\tAPPENDIX-I for instructions on configuring PGLOG.\n\nFirst, as the database administrator (shown here as \"postgres\"), create a role \"bob\" by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"CREATE ROLE bob\"\n\nNext, attempt to retrieve information from the pg_authid table:\n\n$ psql -c \"SET ROLE bob; SELECT * FROM pg_authid\"\n$ psql -c \"DROP ROLE bob;\"\n\nNow, as the database administrator (shown here as \"postgres\"), verify the event was logged in pg_log:\n\n$ sudo su - postgres\n$ cat ${PGLOG?}/<latest_log>\n< 2016-07-13 16:49:58.864 EDT postgres postgres ERROR: > permission denied for relation pg_authid\n< 2016-07-13 16:49:58.864 EDT postgres postgres STATEMENT: > SELECT * FROM pg_authid;\n\nIf the above steps cannot verify that audit records are produced when PostgreSQL denies retrieval of \nprivileges/permissions/role memberships, this is a finding.",
        "fix": "Configure PostgreSQL to produce audit records when unsuccessful attempts to access privileges \n\toccur.\n\nAll denials are logged if logging is enabled. To ensure that logging is enabled, review supplementary content \nAPPENDIX-C for instructions on enabling logging."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000091-DB-000325",
        "gid": "V-233560",
        "rid": "SV-233560r617333_rule",
        "stig_id": "CD12-00-005300",
        "fix_id": "F-36719r606904_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233560\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233560.rb",
        "line": 3
      },
      "id": "V-233560"
    },
    {
      "title": "PostgreSQL must generate audit records when unsuccessful attempts to delete privileges/permissions occur.",
      "desc": "Failed attempts to change the permissions, privileges, and roles granted to users and roles must be \n\ttracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected.\n\nIn a SQL environment, deleting permissions is typically done via the REVOKE command.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
      "descriptions": {
        "default": "Failed attempts to change the permissions, privileges, and roles granted to users and roles must be \n\ttracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected.\n\nIn a SQL environment, deleting permissions is typically done via the REVOKE command.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA and PGLOG environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-I for PGLOG.\n\nFirst, as the database administrator (shown here as \"postgres\"), create the roles \"joe\" and \"bob\" with LOGIN \nby running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"CREATE ROLE joe LOGIN\"\n$ psql -c \"CREATE ROLE bob LOGIN\"\n\nNext, set current role to \"bob\" and attempt to alter the role \"joe\":\n\n$ psql -c \"SET ROLE bob; ALTER ROLE joe NOLOGIN;\"\n\nNow, as the database administrator (shown here as \"postgres\"), verify the denials are logged:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n< 2016-03-17 11:28:10.004 EDT bob 56eacd05.cda postgres: >ERROR: permission denied to alter role\n< 2016-03-17 11:28:10.004 EDT bob 56eacd05.cda postgres: >STATEMENT: ALTER ROLE joe;\n\nIf audit logs are not generated when unsuccessful attempts to delete privileges/permissions occur, this is a finding.",
        "fix": "Configure PostgreSQL to produce audit records when unsuccessful attempts to delete privileges occur.\n\nAll denials are logged if logging is enabled. To ensure logging is enabled, review supplementary content APPENDIX-C \nfor instructions on enabling logging."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000499-DB-000331",
        "gid": "V-233561",
        "rid": "SV-233561r617333_rule",
        "stig_id": "CD12-00-005400",
        "fix_id": "F-36720r606907_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233561\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233561.rb",
        "line": 3
      },
      "id": "V-233561"
    },
    {
      "title": "PostgreSQL must be able to generate audit records when privileges/permissions are retrieved.",
      "desc": "Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role \n\tinformation. Therefore, it must be possible to configure auditing to do this. PostgreSQLs typically make such \n\t\tinformation available through views or functions.\n\nThis requirement addresses explicit requests for privilege/permission/role membership information. It does not \nrefer to the implicit retrieval of privileges/permissions/role memberships that PostgreSQL continually performs \nto determine if any and every action on the database is permitted.",
      "descriptions": {
        "default": "Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role \n\tinformation. Therefore, it must be possible to configure auditing to do this. PostgreSQLs typically make such \n\t\tinformation available through views or functions.\n\nThis requirement addresses explicit requests for privilege/permission/role membership information. It does not \nrefer to the implicit retrieval of privileges/permissions/role memberships that PostgreSQL continually performs \nto determine if any and every action on the database is permitted.",
        "rationale": "",
        "check": "Note: The following instructions use the PGLOG environment variable. See supplementary \n\tcontent APPENDIX-I for instructions on configuring PGLOG.\n\nFirst, as the database administrator (shown here as \"postgres\"), check if pgaudit is enabled by running the \nfollowing SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf pgaudit is not found in the results, this is a finding.\n\nNext, as the database administrator (shown here as \"postgres\"), list all role memberships for the database:\n\n$ sudo su - postgres\n$ psql -c \"du\"\n\nNext, verify the query was logged:\n\n$ sudo su - postgres\n$ cat ${PGLOG?}/<latest_log>\n\nThis should, as an example, return (among other rows):\n2016-01-28 19:43:12.126 UTC postgres postgres: >LOG: AUDIT: SESSION,1,1,READ,SELECT,,,\"SELECT r.rolname, \nr.rolsuper, r.rolinherit,\nr.rolcreaterole, r.rolcreatedb, r.rolcanlogin,\nr.rolconnlimit, r.rolvaliduntil,\nARRAY(SELECT b.rolname\nFROM pg_catalog.pg_auth_members m\nJOIN pg_catalog.pg_roles b ON (m.roleid = b.oid)\nWHERE m.member = r.oid) as memberof\n, r.rolreplication\n, r.rolbypassrls\nFROM pg_catalog.pg_roles r\nORDER BY 1;\",<none>\n\nIf audit records are not produced, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nUsing pgaudit PostgreSQL can be configured to audit these requests. See supplementary content APPENDIX-B \nfor documentation on installing pgaudit.\n\nWith pgaudit installed the following configurations can be made:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters): \n\npgaudit.log_catalog = 'on'\npgaudit.log = 'read'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000091-DB-000066",
        "gid": "V-233562",
        "rid": "SV-233562r617333_rule",
        "stig_id": "CD12-00-005500",
        "fix_id": "F-36721r606910_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233562\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233562.rb",
        "line": 3
      },
      "id": "V-233562"
    },
    {
      "title": "PostgreSQL must generate audit records when unsuccessful attempts to modify categorized \n\tinformation (e.g., classification levels/security levels) occur.",
      "desc": "Changes in categorized information must be tracked. Without an audit trail, unauthorized access \n\tto protected data could go undetected.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security \nCategorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security \nRequirements for Federal Information and Information Systems.",
      "descriptions": {
        "default": "Changes in categorized information must be tracked. Without an audit trail, unauthorized access \n\tto protected data could go undetected.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security \nCategorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security \nRequirements for Federal Information and Information Systems.",
        "rationale": "",
        "check": "First, as the database administrator, verify pgaudit is enabled by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf the output does not contain \"pgaudit\", this is a finding.\n\nNext, verify that role, read, write, and ddl auditing are enabled:\n\n$ psql -c \"SHOW pgaudit.log\"\n\nIf the output does not contain role, read, write, and ddl, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nConfigure PostgreSQL to produce audit records when unsuccessful attempts to modify categories of information occur.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging. \nAll denials are logged when logging is enabled.\n\nWith pgaudit installed the following configurations can be made:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.log='ddl, role, read, write'\n\nNext, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000498-DB-000347",
        "gid": "V-233563",
        "rid": "SV-233563r617333_rule",
        "stig_id": "CD12-00-005600",
        "fix_id": "F-36722r606913_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233563\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233563.rb",
        "line": 3
      },
      "id": "V-233563"
    },
    {
      "title": "PostgreSQL must generate audit records when unsuccessful accesses to objects occur.",
      "desc": "Without tracking all or selected types of access to all or selected objects (tables, views, procedures, \n  functions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an incident \n  or identify those responsible for one. \n\nIn a SQL environment, types of access include, but are not necessarily limited to:\n\nSELECT\nINSERT\nUPDATE\nDROP\nEXECUTE\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
      "descriptions": {
        "default": "Without tracking all or selected types of access to all or selected objects (tables, views, procedures, \n  functions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an incident \n  or identify those responsible for one. \n\nIn a SQL environment, types of access include, but are not necessarily limited to:\n\nSELECT\nINSERT\nUPDATE\nDROP\nEXECUTE\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA and PGLOG environment variables. See supplementary \n  content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-I for PGLOG.\n\nFirst, as the database administrator (shown here as \"postgres\"), create a schema, test_schema, create a table, \ntest_table, within test_schema, and insert a value:\n\n$ sudo su - postgres\n$ psql -c \"CREATE SCHEMA test_schema\"\n$ psql -c \"CREATE TABLE test_schema.test_table(id INT)\"\n$ psql -c \"INSERT INTO test_schema.test_table(id) VALUES (0)\"\n\nNext, create a role \"bob\" and attempt to SELECT, INSERT, UPDATE, and DROP from the test table: \n\n$ psql -c \"CREATE ROLE BOB\"\n$ psql -c \"SET ROLE bob; SELECT * FROM test_schema.test_table\"\n\n$ psql -c \"SET ROLE bob; INSERT INTO test_schema.test_table VALUES (0)\"\n$ psql -c \"SET ROLE bob; UPDATE test_schema.test_table SET id = 1 WHERE id = 0\"\n$ psql -c \"SET ROLE bob; DROP TABLE test_schema.test_table\"\n$ psql -c \"SET ROLE bob; DROP SCHEMA test_schema\"\n\nNow, as the database administrator (shown here as \"postgres\"), review PostgreSQL/database security and audit \nsettings to verify that audit records are created for unsuccessful attempts at the specified access to the \nspecified objects:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n2016-03-30 17:23:41.254 EDT postgres postgres ERROR: permission denied for schema test_schema at character 15\n2016-03-30 17:23:41.254 EDT postgres postgres STATEMENT: SELECT * FROM test_schema.test_table;\n2016-03-30 17:23:53.973 EDT postgres postgres ERROR: permission denied for schema test_schema at character 13\n2016-03-30 17:23:53.973 EDT postgres postgres STATEMENT: INSERT INTO test_schema.test_table VALUES (0);\n2016-03-30 17:24:32.647 EDT postgres postgres ERROR: permission denied for schema test_schema at character 8\n2016-03-30 17:24:32.647 EDT postgres postgres STATEMENT: UPDATE test_schema.test_table SET id = 1 WHERE id = 0;\n2016-03-30 17:24:46.197 EDT postgres postgres ERROR: permission denied for schema test_schema\n2016-03-30 17:24:46.197 EDT postgres postgres STATEMENT: DROP TABLE test_schema.test_table;\n2016-03-30 17:24:51.582 EDT postgres postgres ERROR: must be owner of schema test_schema\n2016-03-30 17:24:51.582 EDT postgres postgres STATEMENT: DROP SCHEMA test_schema;\n\nIf any of the above steps did not create audit records for SELECT, INSERT, UPDATE, and DROP, this is a finding.",
        "fix": "Configure PostgreSQL to produce audit records when unsuccessful attempts to access objects occur.\n\nAll errors and denials are logged if logging is enabled. To ensure that logging is enabled, review supplementary \ncontent APPENDIX-C for instructions on enabling logging."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000507-DB-000357",
        "gid": "V-233564",
        "rid": "SV-233564r617333_rule",
        "stig_id": "CD12-00-005700",
        "fix_id": "F-36723r606916_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233564\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233564.rb",
        "line": 3
      },
      "id": "V-233564"
    },
    {
      "title": "PostgreSQL must generate audit records for all privileged activities or other system-level access.",
      "desc": "Without tracking privileged activity, it would be difficult to establish, correlate, and investigate \n\tthe events relating to an incident or identify those responsible for one. \n\nSystem documentation should include a definition of the functionality considered privileged. \n\nA privileged function in this context is any operation that modifies the structure of the database, its built-in \nlogic, or its security settings. This would include all Data Definition Language (DDL) statements and all \nsecurity-related statements. In a SQL environment, it encompasses, but is not necessarily limited to: \n\nCREATE \nALTER \nDROP \nGRANT \nREVOKE \n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as \nprivileged. Possible examples in SQL include: \n\nTRUNCATE TABLE, DELETE, or DELETE affecting more than n rows, for some n, or DELETE without a WHERE clause.\n\nUPDATE or UPDATE affecting more than n rows, for some n, or UPDATE without a WHERE clause.\n\nAny SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security \nprincipal. \n\nDepending on the capabilities of PostgreSQL and the design of the database and associated applications, audit \nlogging may be achieved by means of DBMS auditing features, database triggers, other mechanisms, or a combination \nof these. \n\nNote: It is particularly important to audit, and tightly control, any action that weakens the implementation of this \nrequirement itself, since the objective is to have a complete audit trail of all administrative activity.",
      "descriptions": {
        "default": "Without tracking privileged activity, it would be difficult to establish, correlate, and investigate \n\tthe events relating to an incident or identify those responsible for one. \n\nSystem documentation should include a definition of the functionality considered privileged. \n\nA privileged function in this context is any operation that modifies the structure of the database, its built-in \nlogic, or its security settings. This would include all Data Definition Language (DDL) statements and all \nsecurity-related statements. In a SQL environment, it encompasses, but is not necessarily limited to: \n\nCREATE \nALTER \nDROP \nGRANT \nREVOKE \n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as \nprivileged. Possible examples in SQL include: \n\nTRUNCATE TABLE, DELETE, or DELETE affecting more than n rows, for some n, or DELETE without a WHERE clause.\n\nUPDATE or UPDATE affecting more than n rows, for some n, or UPDATE without a WHERE clause.\n\nAny SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security \nprincipal. \n\nDepending on the capabilities of PostgreSQL and the design of the database and associated applications, audit \nlogging may be achieved by means of DBMS auditing features, database triggers, other mechanisms, or a combination \nof these. \n\nNote: It is particularly important to audit, and tightly control, any action that weakens the implementation of this \nrequirement itself, since the objective is to have a complete audit trail of all administrative activity.",
        "rationale": "",
        "check": "First, as the database administrator, verify pgaudit is enabled by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf the output does not contain pgaudit, this is a finding.\n\nNext, verify that role, read, write, and ddl auditing are enabled:\n\n$ psql -c \"SHOW pgaudit.log\"\n\nIf the output does not contain role, read, write, and ddl, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nUsing pgaudit PostgreSQL can be configured to audit these requests. See supplementary content APPENDIX-B for \ndocumentation on installing pgaudit.\n\nWith pgaudit installed the following configurations can be made:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\nshared_preload_libraries = 'pgaudit'\npgaudit.log='ddl, role, read, write'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000504-DB-000354",
        "gid": "V-233565",
        "rid": "SV-233565r617333_rule",
        "stig_id": "CD12-00-005800",
        "fix_id": "F-36724r606919_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "control\t'V-233565' do\n\ttitle\t\"PostgreSQL must generate audit records for all privileged activities or other system-level access.\"\n\tdesc\t\"Without tracking privileged activity, it would be difficult to establish, correlate, and investigate \n\tthe events relating to an incident or identify those responsible for one. \n\nSystem documentation should include a definition of the functionality considered privileged. \n\nA privileged function in this context is any operation that modifies the structure of the database, its built-in \nlogic, or its security settings. This would include all Data Definition Language (DDL) statements and all \nsecurity-related statements. In a SQL environment, it encompasses, but is not necessarily limited to: \n\nCREATE \nALTER \nDROP \nGRANT \nREVOKE \n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as \nprivileged. Possible examples in SQL include: \n\nTRUNCATE TABLE, DELETE, or DELETE affecting more than n rows, for some n, or DELETE without a WHERE clause.\n\nUPDATE or UPDATE affecting more than n rows, for some n, or UPDATE without a WHERE clause.\n\nAny SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security \nprincipal. \n\nDepending on the capabilities of PostgreSQL and the design of the database and associated applications, audit \nlogging may be achieved by means of DBMS auditing features, database triggers, other mechanisms, or a combination \nof these. \n\nNote: It is particularly important to audit, and tightly control, any action that weakens the implementation of this \nrequirement itself, since the objective is to have a complete audit trail of all administrative activity.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"First, as the database administrator, verify pgaudit is enabled by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW shared_preload_libraries\\\"\n\nIf the output does not contain pgaudit, this is a finding.\n\nNext, verify that role, read, write, and ddl auditing are enabled:\n\n$ psql -c \\\"SHOW pgaudit.log\\\"\n\nIf the output does not contain role, read, write, and ddl, this is a finding.\"\n\tdesc\t'fix', \"Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nUsing pgaudit PostgreSQL can be configured to audit these requests. See supplementary content APPENDIX-B for \ndocumentation on installing pgaudit.\n\nWith pgaudit installed the following configurations can be made:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\nshared_preload_libraries = 'pgaudit'\npgaudit.log='ddl, role, read, write'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000504-DB-000354'\n  tag gid: 'V-233565'\n  tag rid: 'SV-233565r617333_rule'\n  tag stig_id: 'CD12-00-005800'\n  tag fix_id: 'F-36724r606919_fix'\n  tag cci: [\"CCI-000172\"]\n  tag nist: [\"AU-12 c\"]\n\n\tsql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n\tdescribe sql.query('SHOW shared_preload_libraries;', [input('pg_db')]) do\n\t  its('output') { should include 'pgaudit' }\n\tend\n  \n\tpgaudit_types = %w(ddl read role write)\n  \n\tpgaudit_types.each do |type|\n\t  describe sql.query('SHOW pgaudit.log;', [input('pg_db')]) do\n\t\tits('output') { should include type }\n\t  end\n\tend\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233565.rb",
        "line": 3
      },
      "id": "V-233565"
    },
    {
      "title": "PostgreSQL must generate audit records when unsuccessful attempts to access categorized information \n\t(e.g., classification levels/security levels) occur.",
      "desc": "Changes in categories of information must be tracked. Without an audit trail, unauthorized access to \n\tprotected data could go undetected.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security \nCategorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security \nRequirements for Federal Information and Information Systems.",
      "descriptions": {
        "default": "Changes in categories of information must be tracked. Without an audit trail, unauthorized access to \n\tprotected data could go undetected.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security \nCategorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security \nRequirements for Federal Information and Information Systems.",
        "rationale": "",
        "check": "As the database administrator (shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW pgaudit.log\"\n\nIf pgaudit.log does not contain, \"ddl, write, role\", this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nConfigure PostgreSQL to produce audit records when unsuccessful attempts to access categories of information occur.\n\nAll denials are logged if logging is enabled. To ensure that logging is enabled, review supplementary content \nAPPENDIX-C for instructions on enabling logging.\n\nWith pgaudit installed the following configurations can be made:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.log = 'ddl, write, role'\n\nNext, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000494-DB-000345",
        "gid": "V-233566",
        "rid": "SV-233566r617333_rule",
        "stig_id": "CD12-00-005900",
        "fix_id": "F-36725r606922_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233566\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233566.rb",
        "line": 3
      },
      "id": "V-233566"
    },
    {
      "title": "PostgreSQL must be able to generate audit records when security objects are accessed.",
      "desc": "Changes to the security configuration must be tracked.\n\nThis requirement applies to situations where security data is retrieved or modified via data manipulation \noperations, as opposed to via specialized security functionality.\n\nIn a SQL environment, types of access include, but are not necessarily limited to:\n\nCREATE\nSELECT\nINSERT\nUPDATE\nDELETE\nPREPARE\nEXECUTE\nALTER\nDROP",
      "descriptions": {
        "default": "Changes to the security configuration must be tracked.\n\nThis requirement applies to situations where security data is retrieved or modified via data manipulation \noperations, as opposed to via specialized security functionality.\n\nIn a SQL environment, types of access include, but are not necessarily limited to:\n\nCREATE\nSELECT\nINSERT\nUPDATE\nDELETE\nPREPARE\nEXECUTE\nALTER\nDROP",
        "rationale": "",
        "check": "First, as the database administrator, verify pgaudit is enabled by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf the output does not contain pgaudit, this is a finding.\n\nNext, verify that role, read, write, and ddl auditing are enabled:\n\n$ psql -c \"SHOW pgaudit.log\"\n\nIf the output does not contain role, read, write, and ddl, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nUsing pgaudit PostgreSQL can be configured to audit these requests. See supplementary content APPENDIX-B for \ndocumentation on installing pgaudit.\n\nWith pgaudit installed, the following configurations can be made:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.log='ddl, role, read, write'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000492-DB-000332",
        "gid": "V-233567",
        "rid": "SV-233567r617333_rule",
        "stig_id": "CD12-00-006000",
        "fix_id": "F-36726r606925_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233567\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233567.rb",
        "line": 3
      },
      "id": "V-233567"
    },
    {
      "title": "PostgreSQL must generate audit records when privileges/permissions are deleted.",
      "desc": "Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without \n\tan audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges \n\tgive users access to information and functionality that they should not have; restricted privileges wrongly deny \n\taccess to authorized users.\n\nIn a SQL environment, deleting permissions is typically done via the REVOKE command.",
      "descriptions": {
        "default": "Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without \n\tan audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges \n\tgive users access to information and functionality that they should not have; restricted privileges wrongly deny \n\taccess to authorized users.\n\nIn a SQL environment, deleting permissions is typically done via the REVOKE command.",
        "rationale": "",
        "check": "First, as the database administrator, verify pgaudit is enabled by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf the output does not contain pgaudit, this is a finding.\n\nNext, verify that role, read, write, and ddl auditing are enabled:\n\n$ psql -c \"SHOW pgaudit.log\"\n\nIf the output does not contain role, read, write, and ddl, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nUsing pgaudit PostgreSQL can be configured to audit these requests. See supplementary content APPENDIX-B for \ndocumentation on installing pgaudit.\n\nWith pgaudit installed, the following configurations can be made:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.log = 'role'\n\nNext, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000499-DB-000330",
        "gid": "V-233568",
        "rid": "SV-233568r617333_rule",
        "stig_id": "CD12-00-006100",
        "fix_id": "F-36727r606928_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233568\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233568.rb",
        "line": 3
      },
      "id": "V-233568"
    },
    {
      "title": "PostgreSQL must generate audit records when concurrent logons/connections by the same user from \n\tdifferent workstations occur.",
      "desc": "For completeness of forensic analysis, it is necessary to track who logs on to PostgreSQL.\n\nConcurrent connections by the same user from multiple workstations may be valid use of the system; or such \nconnections may be due to improper circumvention of the requirement to use the CAC for authentication, may indicate \nunauthorized account sharing, or may be because an account has been compromised.\n\n(If the fact of multiple, concurrent logons by a given user can be reliably reconstructed from the log entries for \n\tother events (logons/connections; voluntary and involuntary disconnections), then it is not mandatory to create \n\tadditional log entries specifically for this).",
      "descriptions": {
        "default": "For completeness of forensic analysis, it is necessary to track who logs on to PostgreSQL.\n\nConcurrent connections by the same user from multiple workstations may be valid use of the system; or such \nconnections may be due to improper circumvention of the requirement to use the CAC for authentication, may indicate \nunauthorized account sharing, or may be because an account has been compromised.\n\n(If the fact of multiple, concurrent logons by a given user can be reliably reconstructed from the log entries for \n\tother events (logons/connections; voluntary and involuntary disconnections), then it is not mandatory to create \n\tadditional log entries specifically for this).",
        "rationale": "",
        "check": "First, as the database administrator, verify that log_connections\n    and log_disconnections are enabled by running the following SQL:\n    $ sudo su - postgres\n    $ psql -c \"SHOW log_connections\"\n    $ psql -c \"SHOW log_disconnections\"\n    If either is off, this is a finding.\n    Next, verify that log_line_prefix contains sufficient information by running\n    the following SQL:\n    $ sudo su - postgres\n    $ psql -c \"SHOW log_line_prefix\"\n    If log_line_prefix does not contain at least %t %u %d %p, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER\n    environment variables. See supplementary content APPENDIX-F for instructions on\n    configuring PGDATA and APPENDIX-H for PGVER.\n    To ensure that logging is enabled, review supplementary content APPENDIX-C for\n    instructions on enabling logging. \n    First, as the database administrator (shown here as \"postgres\"), edit\n    postgresql.conf: \n    $ sudo su - postgres \n    $ vi ${PGDATA?}/postgresql.conf \n    Edit the following parameters as such: \n    log_connections = on \n    log_disconnections = on \n    log_line_prefix = '< %t %u %d %p: >' \n    Where: \n    * %t is the time and date without milliseconds\n    * %u is the username \n    * %d is the database \n    * %p is the Process ID for the connection \n    Now, as the system administrator, reload the server with the new configuration: \n    # SYSTEMD SERVER ONLY \n    $ sudo systemctl reload postgresql-${PGVER?}\n    # INITD SERVER ONLY \n    $ sudo service postgresql-${PGVER?} reload"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000506-DB-000353",
        "gid": "V-233569",
        "rid": "SV-233569r617333_rule",
        "stig_id": "CD12-00-006200",
        "fix_id": "F-36728r606931_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233569\" do\n    desc \"check\", \"First, as the database administrator, verify that log_connections\n    and log_disconnections are enabled by running the following SQL:\n    $ sudo su - postgres\n    $ psql -c \\\"SHOW log_connections\\\"\n    $ psql -c \\\"SHOW log_disconnections\\\"\n    If either is off, this is a finding.\n    Next, verify that log_line_prefix contains sufficient information by running\n    the following SQL:\n    $ sudo su - postgres\n    $ psql -c \\\"SHOW log_line_prefix\\\"\n    If log_line_prefix does not contain at least %t %u %d %p, this is a finding.\"\n\n    desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\n    environment variables. See supplementary content APPENDIX-F for instructions on\n    configuring PGDATA and APPENDIX-H for PGVER.\n    To ensure that logging is enabled, review supplementary content APPENDIX-C for\n    instructions on enabling logging. \n    First, as the database administrator (shown here as \\\"postgres\\\"), edit\n    postgresql.conf: \n    $ sudo su - postgres \n    $ vi ${PGDATA?}/postgresql.conf \n    Edit the following parameters as such: \n    log_connections = on \n    log_disconnections = on \n    log_line_prefix = '< %t %u %d %p: >' \n    Where: \n    * %t is the time and date without milliseconds\n    * %u is the username \n    * %d is the database \n    * %p is the Process ID for the connection \n    Now, as the system administrator, reload the server with the new configuration: \n    # SYSTEMD SERVER ONLY \n    $ sudo systemctl reload postgresql-${PGVER?}\n    # INITD SERVER ONLY \n    $ sudo service postgresql-${PGVER?} reload\"\n\n    pg_ver = input('pg_version')\n\n    pg_dba = input('pg_dba')\n\n    pg_dba_password = input('pg_dba_password')\n\n    pg_db = input('pg_db')\n\n    pg_host = input('pg_host')\n\n    sql = postgres_session(pg_dba, pg_dba_password, pg_host, input('pg_port'))\n\n    describe sql.query('SHOW log_connections;', [pg_db]) do\n      its('output') { should_not match /off|false/i }\n    end\n\n    describe sql.query('SHOW log_disconnections;', [pg_db]) do\n      its('output') { should_not match /off|false/i }\n    end\n\n    log_line_prefix_escapes = %w(%t %u %d %p)\n\n    log_line_prefix_escapes.each do |escape|\n      describe sql.query('SHOW log_line_prefix;', [pg_db]) do\n        its('output') { should include escape }\n      end\n    end\nend\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233569.rb",
        "line": 3
      },
      "id": "V-233569"
    },
    {
      "title": "PostgreSQL must generate audit records when unsuccessful attempts to delete security objects occur.",
      "desc": "The removal of security objects from the database/PostgreSQL would seriously degrade a system's \n\tinformation assurance posture. If such an action is attempted, it must be logged.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
      "descriptions": {
        "default": "The removal of security objects from the database/PostgreSQL would seriously degrade a system's \n\tinformation assurance posture. If such an action is attempted, it must be logged.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
        "rationale": "",
        "check": "First, as the database administrator, verify pgaudit is enabled by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf the output does not contain pgaudit, this is a finding.\n\nNext, verify that role, read, write, and ddl auditing are enabled:\n\n$ psql -c \"SHOW pgaudit.log\"\n\nIf the output does not contain role, read, write, and ddl, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nConfigure PostgreSQL to produce audit records when unsuccessful attempts to delete security objects occur.\n\nAll errors and denials are logged if logging is enabled. To ensure that logging is enabled, review supplementary \ncontent APPENDIX-C for instructions on enabling logging.\n\nWith pgaudit installed the following configurations can be made:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.log='ddl, role, read, write'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000501-DB-000337",
        "gid": "V-233570",
        "rid": "SV-233570r617333_rule",
        "stig_id": "CD12-00-006300",
        "fix_id": "F-36729r606934_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233570\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233570.rb",
        "line": 3
      },
      "id": "V-233570"
    },
    {
      "title": "PostgreSQL must generate audit records when privileges/permissions are modified.",
      "desc": "Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without \n\tan audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give \n\tusers access to information and functionality that they should not have; restricted privileges wrongly deny \n\taccess to authorized users.\n\nIn a SQL environment, modifying permissions is typically done via the GRANT and REVOKE commands.",
      "descriptions": {
        "default": "Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without \n\tan audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give \n\tusers access to information and functionality that they should not have; restricted privileges wrongly deny \n\taccess to authorized users.\n\nIn a SQL environment, modifying permissions is typically done via the GRANT and REVOKE commands.",
        "rationale": "",
        "check": "First, as the database administrator, verify pgaudit is enabled by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf the output does not contain pgaudit, this is a finding.\n\nNext, verify that role is enabled:\n\n$ psql -c \"SHOW pgaudit.log\"\n\nIf the output does not contain role, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nUsing pgaudit PostgreSQL can be configured to audit these requests. See supplementary content APPENDIX-B for \ndocumentation on installing pgaudit.\n\nWith pgaudit installed, the following configurations can be made:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.log='role'\n\nNext, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000495-DB-000328",
        "gid": "V-233571",
        "rid": "SV-233571r617333_rule",
        "stig_id": "CD12-00-006400",
        "fix_id": "F-36730r606937_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233571\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233571.rb",
        "line": 3
      },
      "id": "V-233571"
    },
    {
      "title": "PostgreSQL must generate audit records when unsuccessful attempts to execute privileged activities or \n\tother system-level access occur.",
      "desc": "Without tracking privileged activity, it would be difficult to establish, correlate, and investigate \n\tthe events relating to an incident or identify those responsible for one.\n\nSystem documentation should include a definition of the functionality considered privileged.\n\nA privileged function in this context is any operation that modifies the structure of the database, its built-in \nlogic, or its security settings. This would include all Data Definition Language (DDL) statements and all \nsecurity-related statements. In an SQL environment, it encompasses, but is not necessarily limited to:\n\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\n\nNote: It is particularly important to audit, and tightly control, any action that weakens the implementation of this \nrequirement itself, since the objective is to have a complete audit trail of all administrative activity.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
      "descriptions": {
        "default": "Without tracking privileged activity, it would be difficult to establish, correlate, and investigate \n\tthe events relating to an incident or identify those responsible for one.\n\nSystem documentation should include a definition of the functionality considered privileged.\n\nA privileged function in this context is any operation that modifies the structure of the database, its built-in \nlogic, or its security settings. This would include all Data Definition Language (DDL) statements and all \nsecurity-related statements. In an SQL environment, it encompasses, but is not necessarily limited to:\n\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\n\nNote: It is particularly important to audit, and tightly control, any action that weakens the implementation of this \nrequirement itself, since the objective is to have a complete audit trail of all administrative activity.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA and PGLOG environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-I on PGLOG.\n\nAs the database administrator (shown here as \"postgres\"), create the role \"bob\" by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"CREATE ROLE bob\"\n\nNext, change the current role to bob and attempt to execute privileged activity:\n\n$ psql -c \"CREATE ROLE stig_test SUPERUSER\"\n$ psql -c \"CREATE ROLE stig_test CREATEDB\"\n$ psql -c \"CREATE ROLE stig_test CREATEROLE\"\n$ psql -c \"CREATE ROLE stig_test CREATEUSER\"\n\nNow, as the database administrator (shown here as \"postgres\"), verify that an audit event was produced (use the \nlatest log):\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n< 2016-02-23 20:16:32.396 EST postgres 56cfa74f.79eb postgres: >ERROR: must be superuser to create superusers\n< 2016-02-23 20:16:32.396 EST postgres 56cfa74f.79eb postgres: >STATEMENT: CREATE ROLE stig_test SUPERUSER;\n< 2016-02-23 20:16:48.725 EST postgres 56cfa74f.79eb postgres: >ERROR: permission denied to create role\n< 2016-02-23 20:16:48.725 EST postgres 56cfa74f.79eb postgres: >STATEMENT: CREATE ROLE stig_test CREATEDB;\n< 2016-02-23 20:16:54.365 EST postgres 56cfa74f.79eb postgres: >ERROR: permission denied to create role\n< 2016-02-23 20:16:54.365 EST postgres 56cfa74f.79eb postgres: >STATEMENT: CREATE ROLE stig_test CREATEROLE;\n< 2016-02-23 20:17:05.949 EST postgres 56cfa74f.79eb postgres: >ERROR: must be superuser to create superusers\n< 2016-02-23 20:17:05.949 EST postgres 56cfa74f.79eb postgres: >STATEMENT: CREATE ROLE stig_test CREATEUSER;\n\nIf audit records are not produced, this is a finding.",
        "fix": "Configure PostgreSQL to produce audit records when unsuccessful attempts to execute privileged SQL.\n\nAll denials are logged by default if logging is enabled. To ensure that logging is enabled, review supplementary \ncontent APPENDIX-C for instructions on enabling logging."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000504-DB-000355",
        "gid": "V-233572",
        "rid": "SV-233572r617333_rule",
        "stig_id": "CD12-00-006500",
        "fix_id": "F-36731r606940_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233572\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233572.rb",
        "line": 3
      },
      "id": "V-233572"
    },
    {
      "title": "PostgreSQL must generate audit records when security objects are modified.",
      "desc": "Changes in the database objects (tables, views, procedures, functions) that record and control \n\tpermissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, \n\tunauthorized changes to the security subsystem could go undetected. The database could be severely compromised \n\tor rendered inoperative.",
      "descriptions": {
        "default": "Changes in the database objects (tables, views, procedures, functions) that record and control \n\tpermissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, \n\tunauthorized changes to the security subsystem could go undetected. The database could be severely compromised \n\tor rendered inoperative.",
        "rationale": "",
        "check": "First, as the database administrator, verify pgaudit is enabled by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf the results does not contain pgaudit, this is a finding.\n\nNext, verify that role, read, write, and ddl auditing are enabled:\n\n$ psql -c \"SHOW pgaudit.log\"\n\nIf the output does not contain role, read, write, and ddl, this is a finding.\n\nNext, verify that accessing the catalog is audited by running the following SQL:\n\n$ psql -c \"SHOW pgaudit.log_catalog\"\n\nIf log_catalog is not on, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.\n\nUsing pgaudit the DBMS (PostgreSQL) can be configured to audit these requests. See supplementary content APPENDIX-B \nfor documentation on installing pgaudit.\n\nWith pgaudit installed, the following configurations can be made:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.log_catalog = 'on'\npgaudit.log='ddl, role, read, write'\n\nNext, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000496-DB-000334",
        "gid": "V-233573",
        "rid": "SV-233573r617333_rule",
        "stig_id": "CD12-00-006600",
        "fix_id": "F-36732r606943_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233573\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233573.rb",
        "line": 3
      },
      "id": "V-233573"
    },
    {
      "title": "PostgreSQL must generate audit records when categories of information (e.g., classification \n\tlevels/security levels) is modified.",
      "desc": "Changes in categories of information must be tracked. Without an audit trail, unauthorized access to \n\tprotected data could go undetected.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security \nCategorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security \nRequirements for Federal Information and Information Systems.",
      "descriptions": {
        "default": "Changes in categories of information must be tracked. Without an audit trail, unauthorized access to \n\tprotected data could go undetected.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security \nCategorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security \nRequirements for Federal Information and Information Systems.",
        "rationale": "",
        "check": "If category tracking is not required in the database, this is not applicable.\n\nFirst, as the database administrator, verify pgaudit is enabled by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf the output does not contain pgaudit, this is a finding.\n\nNext, verify that role, read, write, and ddl auditing are enabled:\n\n$ psql -c \"SHOW pgaudit.log\"\n\nIf the output does not contain role, read, write, and ddl, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.\n\nUsing pgaudit PostgreSQL can be configured to audit these requests. See supplementary content APPENDIX-B for \ndocumentation on installing pgaudit.\n\nWith pgaudit installed the following configurations can be made:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.log='ddl, role, read, write'\n\nNext, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000498-DB-000346",
        "gid": "V-233574",
        "rid": "SV-233574r617333_rule",
        "stig_id": "CD12-00-006700",
        "fix_id": "F-36733r606946_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233574\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233574.rb",
        "line": 3
      },
      "id": "V-233574"
    },
    {
      "title": "PostgreSQL must generate audit records when unsuccessful attempts to modify privileges/permissions occur.",
      "desc": "Failed attempts to change the permissions, privileges, and roles granted to users and roles must be \n\ttracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected.\n\nModifying permissions is done via the GRANT and REVOKE commands.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
      "descriptions": {
        "default": "Failed attempts to change the permissions, privileges, and roles granted to users and roles must be \n\ttracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected.\n\nModifying permissions is done via the GRANT and REVOKE commands.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA and PGLOG environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-I for PGLOG.\n\nFirst, as the database administrator (shown here as \"postgres\"), create a role \"bob\" and a test table by \nrunning the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"CREATE ROLE bob; CREATE TABLE test(id INT)\"\n\nNext, set current role to \"bob\" and attempt to modify privileges:\n\n$ psql -c \"SET ROLE bob; GRANT ALL PRIVILEGES ON test TO bob;\"\n$ psql -c \"SET ROLE bob; REVOKE ALL PRIVILEGES ON test FROM bob;\"\n\nNow, as the database administrator (shown here as \"postgres\"), verify the unsuccessful attempt was logged:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n2016-07-14 18:12:23.208 EDT postgres postgres ERROR: permission denied for relation test\n2016-07-14 18:12:23.208 EDT postgres postgres STATEMENT: GRANT ALL PRIVILEGES ON test TO bob;\n2016-07-14 18:14:52.895 EDT postgres postgres ERROR: permission denied for relation test\n2016-07-14 18:14:52.895 EDT postgres postgres STATEMENT: REVOKE ALL PRIVILEGES ON test FROM bob;\n\nIf audit logs are not generated when unsuccessful attempts to modify privileges/permissions occur, this is a finding.",
        "fix": "Configure PostgreSQL to produce audit records when unsuccessful attempts to modify privileges occur.\n\nAll denials are logged by default if logging is enabled. To ensure that logging is enabled, review supplementary \ncontent APPENDIX-C for instructions on enabling logging."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000495-DB-000329",
        "gid": "V-233575",
        "rid": "SV-233575r617333_rule",
        "stig_id": "CD12-00-006800",
        "fix_id": "F-36734r606949_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233575\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233575.rb",
        "line": 3
      },
      "id": "V-233575"
    },
    {
      "title": "PostgreSQL must generate audit records when unsuccessful attempts to add privileges/permissions occur.",
      "desc": "Failed attempts to change the permissions, privileges, and roles granted to users and roles must be \n\ttracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected.\n\nIn a SQL environment, adding permissions is typically done via the GRANT command, or, in the negative, the REVOKE \ncommand.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
      "descriptions": {
        "default": "Failed attempts to change the permissions, privileges, and roles granted to users and roles must be \n\ttracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected.\n\nIn a SQL environment, adding permissions is typically done via the GRANT command, or, in the negative, the REVOKE \ncommand.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA and PGLOG environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-I for PGLOG.\n\nFirst, as the database administrator (shown here as \"postgres\"), create a role \"bob\" and a test table by running \nthe following SQL:\n\n$ sudo su - postgres\n$ psql -c \"CREATE ROLE bob; CREATE TABLE test(id INT);\"\n\nNext, set current role to \"bob\" and attempt to modify privileges:\n\n$ psql -c \"SET ROLE bob; GRANT ALL PRIVILEGES ON test TO bob;\"\n\nNext, as the database administrator (shown here as \"postgres\"), verify the unsuccessful attempt was logged:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n2016-07-14 18:12:23.208 EDT postgres postgres ERROR: permission denied for relation test\n2016-07-14 18:12:23.208 EDT postgres postgres STATEMENT: GRANT ALL PRIVILEGES ON test TO bob;\n\nIf audit logs are not generated when unsuccessful attempts to add privileges/permissions occur, this is a finding.",
        "fix": "Configure PostgreSQL to produce audit records when unsuccessful attempts to add privileges occur.\n\nAll denials are logged by default if logging is enabled. To ensure logging is enabled, review supplementary content \nAPPENDIX-C for instructions on enabling logging."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000495-DB-000327",
        "gid": "V-233576",
        "rid": "SV-233576r617333_rule",
        "stig_id": "CD12-00-006900",
        "fix_id": "F-36735r606952_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233576\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233576.rb",
        "line": 3
      },
      "id": "V-233576"
    },
    {
      "title": "PostgreSQL, when utilizing PKI-based authentication, must validate certificates by performing RFC \n\t5280-compliant certification path validation.",
      "desc": "The DoD standard for authentication is DoD-approved PKI certificates.\n\nA certificate's certification path is the path from the end entity certificate to a trusted root certification \nauthority (CA). Certification path validation is necessary for a relying party to make an informed decision \nregarding acceptance of an end entity certificate. Certification path validation includes checks such as certificate \nissuer trust, time validity, and revocation status for each certificate in the certification path. Revocation \nstatus information for CA and subject certificates in a certification path is commonly provided via certificate \nrevocation lists (CRLs) or online certificate status protocol (OCSP) responses.\n\nDatabase Management Systems that do not validate certificates by performing RFC 5280-compliant certification path \n\tvalidation are in danger of accepting certificates that are invalid and/or counterfeit. This could allow \n\tunauthorized access to the database.",
      "descriptions": {
        "default": "The DoD standard for authentication is DoD-approved PKI certificates.\n\nA certificate's certification path is the path from the end entity certificate to a trusted root certification \nauthority (CA). Certification path validation is necessary for a relying party to make an informed decision \nregarding acceptance of an end entity certificate. Certification path validation includes checks such as certificate \nissuer trust, time validity, and revocation status for each certificate in the certification path. Revocation \nstatus information for CA and subject certificates in a certification path is commonly provided via certificate \nrevocation lists (CRLs) or online certificate status protocol (OCSP) responses.\n\nDatabase Management Systems that do not validate certificates by performing RFC 5280-compliant certification path \n\tvalidation are in danger of accepting certificates that are invalid and/or counterfeit. This could allow \n\tunauthorized access to the database.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA environment variable. See supplementary \n\tcontent APPENDIX-F for instructions on configuring PGDATA.\n\nTo verify that a CRL file exists, as the database administrator (shown here as \"postgres\"), run the following:\n\n$ sudo su - postgres\n$ psql -c \"SELECT                                                                 CASE WHEN length(setting) > 0 THEN                                                                       CASE WHEN substring(setting, 1, 1) = '/' THEN                                                            setting                                                                                          ELSE (SELECT setting FROM pg_settings WHERE name = 'data_directory') || '/' || setting               END                                                                                              ELSE ''                                                                                              END AS ssl_crl_file                                                                              FROM pg_settings                                                                                     WHERE name = 'ssl_crl_file';\"\n\nIf this is not set to a CRL file, this is a finding.\n\nNext verify the existence of the CRL file by checking the directory from above:\n\n$ sudo su - postgres\n$ ls -ld <ssl_crl_file>\n\nIf the CRL file does not exist, this is a finding.\n\nNext, verify that hostssl entries in pg_hba.conf have \"cert\" and \"clientcert=1\" enabled:\n\n$ sudo su - postgres\n$ grep '^hostssl.*cert.*clientcert=1' ${PGDATA?}/pg_hba.conf\n\nIf hostssl entries are not returned, this is a finding.\n\nIf certificates are not being validated by performing RFC 5280-compliant certification path validation, this is a \nfinding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo configure PostgreSQL to use SSL, see supplementary content APPENDIX-G.\n\nTo generate a Certificate Revocation List, see the official Red Hat Documentation: \nhttps://access.redhat.com/documentation/en-US/Red_Hat_Update_Infrastructure/2.1/html/Administration_Guide/chap-Red_Hat_Update_Infrastructure-Administration_Guide-Certification_Revocation_List_CRL.html\n\nAs the database administrator (shown here as \"postgres\"), copy the CRL file into the data directory:\n\nFirst, as the system administrator, copy the CRL file into the PostgreSQL Data Directory:\n\n$ sudo cp root.crl ${PGDATA?}/root.crl\n\nAs the database administrator (shown here as \"postgres\"), set the ssl_crl_file parameter to the filename of the CRL:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\nssl_crl_file = 'root.crl'\n\nNext, in pg_hba.conf, require ssl authentication:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/pg_hba.conf\nhostssl <database> <user> <address> cert clientcert=1\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000175-DB-000067",
        "gid": "V-233577",
        "rid": "SV-233577r617333_rule",
        "stig_id": "CD12-00-007000",
        "fix_id": "F-36736r606955_fix",
        "cci": [
          "CCI-000185"
        ],
        "nist": [
          "IA-5 (2) (a)"
        ]
      },
      "code": "  control \"V-233577\" do\n    impact 0.0\n    describe 'This control is not applicable on postgres within aws rds, as aws manages this capability' do\n      skip 'This control is not applicable on postgres within aws rds, as aws manages this capability'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233577.rb",
        "line": 3
      },
      "id": "V-233577"
    },
    {
      "title": "PostgreSQL must produce audit records containing sufficient information to establish where the events \n\toccurred.",
      "desc": "Information system auditing capability is critical for accurate forensic analysis. Without establishing \n\twhere events occurred, it is impossible to establish, correlate, and investigate the events relating to an incident.\n\nTo compile an accurate risk assessment and provide forensic analysis, it is essential for security personnel to \nknow where events occurred, such as application components, modules, session identifiers, filenames, host names, \nand functionality. \n\nAssociating information about where the event occurred within the application provides a means of investigating an \nattack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.",
      "descriptions": {
        "default": "Information system auditing capability is critical for accurate forensic analysis. Without establishing \n\twhere events occurred, it is impossible to establish, correlate, and investigate the events relating to an incident.\n\nTo compile an accurate risk assessment and provide forensic analysis, it is essential for security personnel to \nknow where events occurred, such as application components, modules, session identifiers, filenames, host names, \nand functionality. \n\nAssociating information about where the event occurred within the application provides a means of investigating an \nattack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA environment\n    variable. See supplementary content APPENDIX-F for instructions on configuring\n    PGDATA.\n    First, as the database administrator (shown here as \"postgres\"), check the\n    current log_line_prefix setting by running the following SQL:\n    $ psql -c \"SHOW log_line_prefix\"\n    If log_line_prefix does not contain %t %u %d, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA environment\n    variable. See supplementary content APPENDIX-F for instructions on configuring\n    PGDATA.\n    To check that logging is enabled, review supplementary content APPENDIX-C for\n    instructions on enabling logging.\n    Extra parameters can be added to the setting log_line_prefix to log application\n    related information:\n    # %a = application name\n    # %u = user name\n    # %d = database name\n    # %r = remote host and port\n    # %p = process ID\n    # %m = timestamp with milliseconds\n    # %t = timestamp without milliseconds\n    # %i = command tag\n    # %s = session startup\n    # %e = SQL state\n    For example:\n    log_line_prefix = '< %t %a %u %d %r %p %i %e %s>’\n    Now, as the system administrator, reload the server with the new configuration"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000097-DB-000041",
        "gid": "V-233578",
        "rid": "SV-233578r617333_rule",
        "stig_id": "CD12-00-007100",
        "fix_id": "F-36737r606958_fix",
        "cci": [
          "CCI-000132"
        ],
        "nist": [
          "AU-3"
        ]
      },
      "code": "  control \"V-233578\" do\n    desc \"check\", \"Note: The following instructions use the PGDATA environment\n    variable. See supplementary content APPENDIX-F for instructions on configuring\n    PGDATA.\n    First, as the database administrator (shown here as \\\"postgres\\\"), check the\n    current log_line_prefix setting by running the following SQL:\n    $ psql -c \\\"SHOW log_line_prefix\\\"\n    If log_line_prefix does not contain %t %u %d, this is a finding.\"\n\n    desc \"fix\", \"Note: The following instructions use the PGDATA environment\n    variable. See supplementary content APPENDIX-F for instructions on configuring\n    PGDATA.\n    To check that logging is enabled, review supplementary content APPENDIX-C for\n    instructions on enabling logging.\n    Extra parameters can be added to the setting log_line_prefix to log application\n    related information:\n    # %a = application name\n    # %u = user name\n    # %d = database name\n    # %r = remote host and port\n    # %p = process ID\n    # %m = timestamp with milliseconds\n    # %t = timestamp without milliseconds\n    # %i = command tag\n    # %s = session startup\n    # %e = SQL state\n    For example:\n    log_line_prefix = '< %t %a %u %d %r %p %i %e %s>’\n    Now, as the system administrator, reload the server with the new configuration\"\n\n    pg_dba = input('pg_dba')\n\n    pg_dba_password = input('pg_dba_password')\n\n    pg_db = input('pg_db')\n\n    pg_host = input('pg_host')\n\n    sql = postgres_session(pg_dba, pg_dba_password, pg_host, input('pg_port'))\n\n    log_line_prefix_escapes = %w(%t %u %d)\n\n    log_line_prefix_escapes.each do |escape|\n      describe sql.query('SHOW log_line_prefix;', [pg_db]) do\n        its('output') { should include escape }\n      end\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233578.rb",
        "line": 3
      },
      "id": "V-233578"
    },
    {
      "title": "PostgreSQL must maintain the confidentiality and integrity of information during preparation for \n\ttransmission.",
      "desc": "Information can be either unintentionally or maliciously disclosed or modified during preparation for \n\ttransmission, including, for example, during aggregation, at protocol transformation points, and during \n\tpacking/unpacking. These unauthorized disclosures or modifications compromise the confidentiality or integrity \n\tof the information.\n\nUse of this requirement will be limited to situations where the data owner has a strict requirement for ensuring \ndata integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nWhen transmitting data, PostgreSQL, associated applications, and infrastructure must leverage transmission \nprotection mechanisms.\n\nPostgreSQL uses OpenSSL SSLv23_method() in fe-secure-openssl.c, while the name is misleading, this function enables \nonly TLS encryption methods, not SSL.\n\nSee OpenSSL: https://mta.openssl.org/pipermail/openssl-dev/2015-May/001449.html",
      "descriptions": {
        "default": "Information can be either unintentionally or maliciously disclosed or modified during preparation for \n\ttransmission, including, for example, during aggregation, at protocol transformation points, and during \n\tpacking/unpacking. These unauthorized disclosures or modifications compromise the confidentiality or integrity \n\tof the information.\n\nUse of this requirement will be limited to situations where the data owner has a strict requirement for ensuring \ndata integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nWhen transmitting data, PostgreSQL, associated applications, and infrastructure must leverage transmission \nprotection mechanisms.\n\nPostgreSQL uses OpenSSL SSLv23_method() in fe-secure-openssl.c, while the name is misleading, this function enables \nonly TLS encryption methods, not SSL.\n\nSee OpenSSL: https://mta.openssl.org/pipermail/openssl-dev/2015-May/001449.html",
        "rationale": "",
        "check": "If the data owner does not have a strict requirement for ensuring data integrity and \n\tconfidentiality is maintained at every step of the data transfer and handling process, this is not a finding.\n\nAs the database administrator (shown here as \"postgres\"), verify SSL is enabled by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW ssl\"\n\nIf SSL is not enabled, this is a finding.\n\nIf PostgreSQL does not employ protective measures against unauthorized disclosure and modification during \npreparation for transmission, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nImplement protective measures against unauthorized disclosure and modification during preparation for transmission.\n\nTo configure PostgreSQL to use SSL, as a database administrator (shown here as \"postgres\"), edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameter:\n\nssl = on\n\nNext, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content APPENDIX-G."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000441-DB-000378",
        "gid": "V-233579",
        "rid": "SV-233579r617333_rule",
        "stig_id": "CD12-00-007200",
        "fix_id": "F-36738r606961_fix",
        "cci": [
          "CCI-002420"
        ],
        "nist": [
          "SC-8 (2)"
        ]
      },
      "code": "control\t'V-233579' do\n\ttitle\t\"PostgreSQL must maintain the confidentiality and integrity of information during preparation for \n\ttransmission.\"\n\tdesc\t\"Information can be either unintentionally or maliciously disclosed or modified during preparation for \n\ttransmission, including, for example, during aggregation, at protocol transformation points, and during \n\tpacking/unpacking. These unauthorized disclosures or modifications compromise the confidentiality or integrity \n\tof the information.\n\nUse of this requirement will be limited to situations where the data owner has a strict requirement for ensuring \ndata integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nWhen transmitting data, PostgreSQL, associated applications, and infrastructure must leverage transmission \nprotection mechanisms.\n\nPostgreSQL uses OpenSSL SSLv23_method() in fe-secure-openssl.c, while the name is misleading, this function enables \nonly TLS encryption methods, not SSL.\n\nSee OpenSSL: https://mta.openssl.org/pipermail/openssl-dev/2015-May/001449.html\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"If the data owner does not have a strict requirement for ensuring data integrity and \n\tconfidentiality is maintained at every step of the data transfer and handling process, this is not a finding.\n\nAs the database administrator (shown here as \\\"postgres\\\"), verify SSL is enabled by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW ssl\\\"\n\nIf SSL is not enabled, this is a finding.\n\nIf PostgreSQL does not employ protective measures against unauthorized disclosure and modification during \npreparation for transmission, this is a finding.\"\n\tdesc\t'fix', \"Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nImplement protective measures against unauthorized disclosure and modification during preparation for transmission.\n\nTo configure PostgreSQL to use SSL, as a database administrator (shown here as \\\"postgres\\\"), edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameter:\n\nssl = on\n\nNext, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content APPENDIX-G.\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000441-DB-000378'\n  tag gid: 'V-233579'\n  tag rid: 'SV-233579r617333_rule'\n  tag stig_id: 'CD12-00-007200'\n  tag fix_id: 'F-36738r606961_fix'\n  tag cci: [\"CCI-002420\"]\n  tag nist: [\"SC-8 (2)\"]\n\n\tsql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n\tdescribe sql.query('SHOW ssl;', [input('pg_db')]) do\n\t  its('output') { should match /on|true/i }\n\tend\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233579.rb",
        "line": 3
      },
      "id": "V-233579"
    },
    {
      "title": "PostgreSQL must be configured to provide audit record generation for DoD-defined auditable events \n\twithin all DBMS/database components.",
      "desc": "Without the capability to generate audit records, it would be difficult to establish, correlate, and \n\tinvestigate the events relating to an incident or identify those responsible for one. \n\nAudit records can be generated from various components within PostgreSQL (e.g., process, module). Certain specific \napplication functionalities may be audited as well. The list of audited events is the set of events for which audits \nare to be generated. This set of events is typically a subset of the list of all events for which the system is \ncapable of generating audit records.\n\nDoD has defined the list of events for which PostgreSQL will provide an audit record generation capability as the \nfollowing: \n\n(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, \nor categories of information (e.g., classification levels);\n(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities, or other \nsystem-level access, starting and ending time for user access to the system, concurrent logons from different \nworkstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the \ninformation system; and\n(iii) All account creation, modification, disabling, and termination actions.\n\nOrganizations may define additional events requiring continuous or ad hoc auditing.",
      "descriptions": {
        "default": "Without the capability to generate audit records, it would be difficult to establish, correlate, and \n\tinvestigate the events relating to an incident or identify those responsible for one. \n\nAudit records can be generated from various components within PostgreSQL (e.g., process, module). Certain specific \napplication functionalities may be audited as well. The list of audited events is the set of events for which audits \nare to be generated. This set of events is typically a subset of the list of all events for which the system is \ncapable of generating audit records.\n\nDoD has defined the list of events for which PostgreSQL will provide an audit record generation capability as the \nfollowing: \n\n(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, \nor categories of information (e.g., classification levels);\n(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities, or other \nsystem-level access, starting and ending time for user access to the system, concurrent logons from different \nworkstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the \ninformation system; and\n(iii) All account creation, modification, disabling, and termination actions.\n\nOrganizations may define additional events requiring continuous or ad hoc auditing.",
        "rationale": "",
        "check": "Note: The following instructions use the PGLOG environment variables. See supplementary \n\tcontent APPENDIX-I for instructions on configuring PGVER.\n\nCheck PostgreSQL audit logs to determine whether organization-defined auditable events are being audited by the system.\n\nFor example, if the organization defines 'CREATE TABLE' as an auditable event, issuing the following command should \nreturn a result:\n\n$ sudo su - postgres\n$ psql -c \"CREATE TABLE example (id int)\"\n$ grep 'AUDIT:.*,CREATE TABLE.*example' ${PGLOG?}/<latest_log>\n$ psql -c 'DROP TABLE example;'\n\nIf organization-defined auditable events are not being audited, this is a finding.",
        "fix": "Configure PostgreSQL to generate audit records for at least the DoD minimum set of events.\n\nUsing \"pgaudit\", PostgreSQL can be configured to audit these requests. See supplementary content APPENDIX-B for \ndocumentation on installing pgaudit.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000089-DB-000064",
        "gid": "V-233580",
        "rid": "SV-233580r617333_rule",
        "stig_id": "CD12-00-007400",
        "fix_id": "F-36739r606964_fix",
        "cci": [
          "CCI-000169"
        ],
        "nist": [
          "AU-12 a"
        ]
      },
      "code": "control\t'V-233580' do\n\ttitle\t\"PostgreSQL must be configured to provide audit record generation for #{input('org_name')[:acronym]}-defined auditable events \n\twithin all DBMS/database components.\"\n\tdesc\t\"Without the capability to generate audit records, it would be difficult to establish, correlate, and \n\tinvestigate the events relating to an incident or identify those responsible for one. \n\nAudit records can be generated from various components within PostgreSQL (e.g., process, module). Certain specific \napplication functionalities may be audited as well. The list of audited events is the set of events for which audits \nare to be generated. This set of events is typically a subset of the list of all events for which the system is \ncapable of generating audit records.\n\n#{input('org_name')[:acronym]} has defined the list of events for which PostgreSQL will provide an audit record generation capability as the \nfollowing: \n\n(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, \nor categories of information (e.g., classification levels);\n(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities, or other \nsystem-level access, starting and ending time for user access to the system, concurrent logons from different \nworkstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the \ninformation system; and\n(iii) All account creation, modification, disabling, and termination actions.\n\nOrganizations may define additional events requiring continuous or ad hoc auditing.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"Note: The following instructions use the PGLOG environment variables. See supplementary \n\tcontent APPENDIX-I for instructions on configuring PGVER.\n\nCheck PostgreSQL audit logs to determine whether organization-defined auditable events are being audited by the system.\n\nFor example, if the organization defines 'CREATE TABLE' as an auditable event, issuing the following command should \nreturn a result:\n\n$ sudo su - postgres\n$ psql -c \\\"CREATE TABLE example (id int)\\\"\n$ grep 'AUDIT:.*,CREATE TABLE.*example' ${PGLOG?}/<latest_log>\n$ psql -c 'DROP TABLE example;'\n\nIf organization-defined auditable events are not being audited, this is a finding.\"\n\tdesc\t'fix', \"Configure PostgreSQL to generate audit records for at least the #{input('org_name')[:acronym]} minimum set of events.\n\nUsing \\\"pgaudit\\\", PostgreSQL can be configured to audit these requests. See supplementary content APPENDIX-B for \ndocumentation on installing pgaudit.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000089-DB-000064'\n  tag gid: 'V-233580'\n  tag rid: 'SV-233580r617333_rule'\n  tag stig_id: 'CD12-00-007400'\n  tag fix_id: 'F-36739r606964_fix'\n  tag cci: [\"CCI-000169\"]\n  tag nist: [\"AU-12 a\"]\n\n\tdescribe \"Check PostgreSQL auditing to determine whether organization-defined auditable events are being audited by the system\" do\n\t\tskip \"If organization-defined auditable events are not being audited, this is a finding.\"\n\t  end\n\tend\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233580.rb",
        "line": 3
      },
      "id": "V-233580"
    },
    {
      "title": "PostgreSQL must generate time stamps, for audit records and application data, with a minimum \n\tgranularity of one second.",
      "desc": "Without sufficient granularity of time stamps, it is not possible to adequately determine the \n\tchronological order of records. \n\nTime stamps generated by PostgreSQL must include date and time. Granularity of time measurements refers to the \nprecision available in time stamp values. Granularity coarser than one second is not sufficient for audit trail \npurposes. Time stamp values are typically presented with three or more decimal places of seconds; however, the \nactual granularity may be coarser than the apparent precision. For example, PostgreSQL will always return at least \nmillisecond timestamps but it can be truncated using EXTRACT functions: SELECT EXTRACT(MINUTE FROM TIMESTAMP \n\t'2001-02-16 20:38:40');",
      "descriptions": {
        "default": "Without sufficient granularity of time stamps, it is not possible to adequately determine the \n\tchronological order of records. \n\nTime stamps generated by PostgreSQL must include date and time. Granularity of time measurements refers to the \nprecision available in time stamp values. Granularity coarser than one second is not sufficient for audit trail \npurposes. Time stamp values are typically presented with three or more decimal places of seconds; however, the \nactual granularity may be coarser than the apparent precision. For example, PostgreSQL will always return at least \nmillisecond timestamps but it can be truncated using EXTRACT functions: SELECT EXTRACT(MINUTE FROM TIMESTAMP \n\t'2001-02-16 20:38:40');",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA environment\n    variable. See supplementary content APPENDIX-F for instructions on configuring\n    PGDATA.\n    First, as the database administrator (shown here as \"postgres\"), verify the\n    current log_line_prefix setting by running the following SQL:\n    $ sudo su - postgres\n    $ psql -c \"SHOW log_line_prefix\"\n    If log_line_prefix does not contain %t, this is a finding.\n    Next check the logs to verify time stamps are being logged:\n    $ sudo su - postgres\n    $ cat ${PGDATA?}/pg_log/<latest_log>\n    < 2016-02-23 12:53:33.947 EDT postgres postgres 570bd68d.3912 >LOG: connection\n    authorized: user=postgres database=postgres\n    < 2016-02-23 12:53:41.576 EDT postgres postgres 570bd68d.3912 >LOG: AUDIT:\n    SESSION,1,1,DDL,CREATE TABLE,,,CREATE TABLE test_srg(id INT);,<none>\n    < 2016-02-23 12:53:44.372 EDT postgres postgres 570bd68d.3912 >LOG:\n    disconnection: session time: 0:00:10.426 user=postgres database=postgres\n    host=[local]\n    If time stamps are not being logged, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER\n    environment variables. See supplementary content APPENDIX-F for instructions on\n    configuring PGDATA and APPENDIX-H for PGVER.\n    PostgreSQL will not log anything if logging is not enabled. To ensure that\n    logging is enabled, review supplementary content APPENDIX-C for instructions on\n    enabling logging. \n    If logging is enabled the following configurations must be made to log events\n    with time stamps:  \n    First, as the database administrator (shown here as \"postgres\"), edit\n    postgresql.conf: \n    $ sudo su - postgres \n    $ vi ${PGDATA?}/postgresql.conf \n    Add %m to log_line_prefix to enable time stamps with milliseconds: \n    log_line_prefix = '< %t >' \n    Now, as the system administrator, reload the server with the new configuration: \n    # SYSTEMD SERVER ONLY \n    $ sudo systemctl reload postgresql-${PGVER?}\n    # INITD SERVER ONLY \n    $ sudo service postgresql-${PGVER?} reload"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000375-DB-000323",
        "gid": "V-233581",
        "rid": "SV-233581r617333_rule",
        "stig_id": "CD12-00-007700",
        "fix_id": "F-36740r606967_fix",
        "cci": [
          "CCI-001889"
        ],
        "nist": [
          "AU-8 b"
        ]
      },
      "code": "  control \"V-233581\" do\n    desc \"check\", \"Note: The following instructions use the PGDATA environment\n    variable. See supplementary content APPENDIX-F for instructions on configuring\n    PGDATA.\n    First, as the database administrator (shown here as \\\"postgres\\\"), verify the\n    current log_line_prefix setting by running the following SQL:\n    $ sudo su - postgres\n    $ psql -c \\\"SHOW log_line_prefix\\\"\n    If log_line_prefix does not contain %t, this is a finding.\n    Next check the logs to verify time stamps are being logged:\n    $ sudo su - postgres\n    $ cat ${PGDATA?}/pg_log/<latest_log>\n    < 2016-02-23 12:53:33.947 EDT postgres postgres 570bd68d.3912 >LOG: connection\n    authorized: user=postgres database=postgres\n    < 2016-02-23 12:53:41.576 EDT postgres postgres 570bd68d.3912 >LOG: AUDIT:\n    SESSION,1,1,DDL,CREATE TABLE,,,CREATE TABLE test_srg(id INT);,<none>\n    < 2016-02-23 12:53:44.372 EDT postgres postgres 570bd68d.3912 >LOG:\n    disconnection: session time: 0:00:10.426 user=postgres database=postgres\n    host=[local]\n    If time stamps are not being logged, this is a finding.\"\n\n    desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\n    environment variables. See supplementary content APPENDIX-F for instructions on\n    configuring PGDATA and APPENDIX-H for PGVER.\n    PostgreSQL will not log anything if logging is not enabled. To ensure that\n    logging is enabled, review supplementary content APPENDIX-C for instructions on\n    enabling logging. \n    If logging is enabled the following configurations must be made to log events\n    with time stamps:  \n    First, as the database administrator (shown here as \\\"postgres\\\"), edit\n    postgresql.conf: \n    $ sudo su - postgres \n    $ vi ${PGDATA?}/postgresql.conf \n    Add %m to log_line_prefix to enable time stamps with milliseconds: \n    log_line_prefix = '< %t >' \n    Now, as the system administrator, reload the server with the new configuration: \n    # SYSTEMD SERVER ONLY \n    $ sudo systemctl reload postgresql-${PGVER?}\n    # INITD SERVER ONLY \n    $ sudo service postgresql-${PGVER?} reload\"\n\n    pg_ver = input('pg_version')\n\n    pg_dba = input('pg_dba')\n\n    pg_dba_password = input('pg_dba_password')\n\n    pg_db = input('pg_db')\n\n    pg_host = input('pg_host')\n    \n    sql = postgres_session(pg_dba, pg_dba_password, pg_host, input('pg_port'))\n\n    describe sql.query('SHOW log_line_prefix;', [pg_db]) do\n      its('output') { should match '%t' }\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233581.rb",
        "line": 3
      },
      "id": "V-233581"
    },
    {
      "title": "PostgreSQL must produce audit records containing sufficient information to establish the identity of \n\tany user/subject or process associated with the event.",
      "desc": "Information system auditing capability is critical for accurate forensic analysis. Without information \n\tthat establishes the identity of the subjects (i.e., users or processes acting on behalf of users) associated \n\twith the events, security personnel cannot determine responsibility for the potentially harmful event.\n\nIdentifiers (if authenticated or otherwise known) include, but are not limited to, user database tables, primary key \nvalues, user names, or process identifiers.\n\n1) Linux's sudo and su feature enables a user (with sufficient OS privileges) to emulate another user, and it is the \nidentity of the emulated user that is seen by PostgreSQL and logged in the audit trail. Therefore, care must be taken \n(outside of Postgresql) to restrict sudo/su to the minimum set of users necessary.\n\n2) PostgreSQL's SET ROLE feature enables a user (with sufficient PostgreSQL privileges) to emulate another user \nrunning statements under the permission set of the emulated user. In this case, it is the emulating user's identity, \n\tand not that of the emulated user, that gets logged in the audit trail. While this is definitely better than the \n\tother way around, ideally, both identities would be recorded.",
      "descriptions": {
        "default": "Information system auditing capability is critical for accurate forensic analysis. Without information \n\tthat establishes the identity of the subjects (i.e., users or processes acting on behalf of users) associated \n\twith the events, security personnel cannot determine responsibility for the potentially harmful event.\n\nIdentifiers (if authenticated or otherwise known) include, but are not limited to, user database tables, primary key \nvalues, user names, or process identifiers.\n\n1) Linux's sudo and su feature enables a user (with sufficient OS privileges) to emulate another user, and it is the \nidentity of the emulated user that is seen by PostgreSQL and logged in the audit trail. Therefore, care must be taken \n(outside of Postgresql) to restrict sudo/su to the minimum set of users necessary.\n\n2) PostgreSQL's SET ROLE feature enables a user (with sufficient PostgreSQL privileges) to emulate another user \nrunning statements under the permission set of the emulated user. In this case, it is the emulating user's identity, \n\tand not that of the emulated user, that gets logged in the audit trail. While this is definitely better than the \n\tother way around, ideally, both identities would be recorded.",
        "rationale": "",
        "check": "Check PostgreSQL settings and existing audit records to verify a\n    user name associated with the event is being captured and stored with the audit\n    records. If audit records exist without specific user information, this is a\n    finding.\n    First, as the database administrator (shown here as \"postgres\"), verify the\n    current setting of log_line_prefix by running the following SQL:\n    $ sudo su - postgres\n    $ psql -c \"SHOW log_line_prefix\"\n    If log_line_prefix does not contain %t, %u, %d, %p, %r, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER\n    environment variables. See supplementary content APPENDIX-F for instructions on\n    configuring PGDATA and APPENDIX-H for PGVER.\n    Logging must be enabled in order to capture the identity of any user/subject or\n    process associated with an event. To ensure that logging is enabled, review\n    supplementary content APPENDIX-C for instructions on enabling logging. \n    To enable username, database name, process ID, remote host/port and application\n    name in logging, as the database administrator (shown here as \"postgres\"),\n    edit the following in postgresql.conf: \n    $ sudo su - postgres \n    $ vi ${PGDATA?}/postgresql.conf \n    log_line_prefix = '< %t %u %d %p %r >' \n    Now, as the system administrator, reload the server with the new configuration: \n    # SYSTEMD SERVER ONLY \n    $ sudo systemctl reload postgresql-${PGVER?}\n    # INITD SERVER ONLY \n    $ sudo service postgresql-${PGVER?} reload"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000100-DB-000201",
        "gid": "V-233582",
        "rid": "SV-233582r617333_rule",
        "stig_id": "CD12-00-007800",
        "fix_id": "F-36741r606970_fix",
        "cci": [
          "CCI-001487"
        ],
        "nist": [
          "AU-3"
        ]
      },
      "code": "  control \"V-233582\" do\n    desc \"check\", \"Check PostgreSQL settings and existing audit records to verify a\n    user name associated with the event is being captured and stored with the audit\n    records. If audit records exist without specific user information, this is a\n    finding.\n    First, as the database administrator (shown here as \\\"postgres\\\"), verify the\n    current setting of log_line_prefix by running the following SQL:\n    $ sudo su - postgres\n    $ psql -c \\\"SHOW log_line_prefix\\\"\n    If log_line_prefix does not contain %t, %u, %d, %p, %r, this is a finding.\"\n\n    desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\n    environment variables. See supplementary content APPENDIX-F for instructions on\n    configuring PGDATA and APPENDIX-H for PGVER.\n    Logging must be enabled in order to capture the identity of any user/subject or\n    process associated with an event. To ensure that logging is enabled, review\n    supplementary content APPENDIX-C for instructions on enabling logging. \n    To enable username, database name, process ID, remote host/port and application\n    name in logging, as the database administrator (shown here as \\\"postgres\\\"),\n    edit the following in postgresql.conf: \n    $ sudo su - postgres \n    $ vi ${PGDATA?}/postgresql.conf \n    log_line_prefix = '< %t %u %d %p %r >' \n    Now, as the system administrator, reload the server with the new configuration: \n    # SYSTEMD SERVER ONLY \n    $ sudo systemctl reload postgresql-${PGVER?}\n    # INITD SERVER ONLY \n    $ sudo service postgresql-${PGVER?} reload\"\n\n    pg_ver = input('pg_version')\n\n    pg_dba = input('pg_dba')\n\n    pg_dba_password = input('pg_dba_password')\n\n    pg_db = input('pg_db')\n\n    pg_host = input('pg_host')\n\n    sql = postgres_session(pg_dba, pg_dba_password, pg_host, input('pg_port'))\n\n    log_line_prefix_escapes = %w(%t %u %d %p %r)\n\n    log_line_prefix_escapes.each do |escape|\n      describe sql.query('SHOW log_line_prefix;', [pg_db]) do\n        its('output') { should include escape }\n      end\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233582.rb",
        "line": 3
      },
      "id": "V-233582"
    },
    {
      "title": "PostgreSQL must implement NIST FIPS 140-2 validated cryptographic modules to generate and validate \n\tcryptographic hashes.",
      "desc": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect \n\tdata. The application must implement cryptographic modules adhering to the higher standards approved by the \n\tfederal government since this provides assurance they have been tested and validated.\n\nFor detailed information, refer to NIST FIPS Publication 140-2, Security Requirements For Cryptographic Modules. \nNote that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant.",
      "descriptions": {
        "default": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect \n\tdata. The application must implement cryptographic modules adhering to the higher standards approved by the \n\tfederal government since this provides assurance they have been tested and validated.\n\nFor detailed information, refer to NIST FIPS Publication 140-2, Security Requirements For Cryptographic Modules. \nNote that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant.",
        "rationale": "",
        "check": "First, as the system administrator, run the following to see if FIPS is enabled:\n\n$ cat /proc/sys/crypto/fips_enabled\n\nIf fips_enabled is not \"1\", this is a finding.",
        "fix": "Configure OpenSSL to be FIPS compliant.\n\nPostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be FIPS 140-2 compliant, see the official \nRHEL Documentation:\n https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/sect-Security_Guide-Federal_Standards_And_Regulations-Federal_Information_Processing_Standard.html.\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary\ncontent APPENDIX-G."
      },
      "impact": 0,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "high",
        "gtitle": "SRG-APP-000514-DB-000382",
        "gid": "V-233583",
        "rid": "SV-233583r617333_rule",
        "stig_id": "CD12-00-008000",
        "fix_id": "F-36742r606973_fix",
        "cci": [
          "CCI-002450"
        ],
        "nist": [
          "SC-13"
        ]
      },
      "code": "  control \"V-233583\" do\n    impact 0.0\n    describe 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on' do\n      skip 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233583.rb",
        "line": 3
      },
      "id": "V-233583"
    },
    {
      "title": "PostgreSQL must use NSA-approved cryptography to protect classified information in accordance with the \n\tdata owner’s requirements.",
      "desc": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect \n\tdata. The application must implement cryptographic modules adhering to the higher standards approved by the \n\tfederal government since this provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal \nlaws, Executive Orders, directives, policies, regulations, and standards.\n\nNSA-approved cryptography for classified networks is hardware based. This requirement addresses the compatibility of \nPostgreSQL with the encryption devices.",
      "descriptions": {
        "default": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect \n\tdata. The application must implement cryptographic modules adhering to the higher standards approved by the \n\tfederal government since this provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal \nlaws, Executive Orders, directives, policies, regulations, and standards.\n\nNSA-approved cryptography for classified networks is hardware based. This requirement addresses the compatibility of \nPostgreSQL with the encryption devices.",
        "rationale": "",
        "check": "If PostgreSQL is deployed in an unclassified environment, this is not applicable (NA).\n\nIf PostgreSQL is not using NSA-approved cryptography to protect classified information in accordance with applicable \nfederal laws, Executive Orders, directives, policies, regulations, and standards, this is a finding.\n\nTo check if PostgreSQL is configured to use SSL, as the database administrator (shown here as \"postgres\"), run the \nfollowing SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW ssl\"\n\nIf SSL is off, this is a finding.\n\nConsult network administration staff to determine whether the server is protected by NSA-approved encrypting devices. \nIf not, this a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo configure PostgreSQL to use SSL as a database administrator (shown here as \"postgres\"), edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameter:\n\nssl = on\n\nNext, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content APPENDIX-G.\n\nDeploy NSA-approved encrypting devices to protect the server on the network."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000416-DB-000380",
        "gid": "V-233584",
        "rid": "SV-233584r617333_rule",
        "stig_id": "CD12-00-008100",
        "fix_id": "F-36743r606976_fix",
        "cci": [
          "CCI-002450"
        ],
        "nist": [
          "SC-13"
        ]
      },
      "code": "control\t'V-233584' do\n\ttitle\t\"PostgreSQL must use NSA-approved cryptography to protect classified information in accordance with the \n\tdata owner’s requirements.\"\n\tdesc\t\"Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect \n\tdata. The application must implement cryptographic modules adhering to the higher standards approved by the \n\tfederal government since this provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal \nlaws, Executive Orders, directives, policies, regulations, and standards.\n\nNSA-approved cryptography for classified networks is hardware based. This requirement addresses the compatibility of \nPostgreSQL with the encryption devices.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"If PostgreSQL is deployed in an unclassified environment, this is not applicable (NA).\n\nIf PostgreSQL is not using NSA-approved cryptography to protect classified information in accordance with applicable \nfederal laws, Executive Orders, directives, policies, regulations, and standards, this is a finding.\n\nTo check if PostgreSQL is configured to use SSL, as the database administrator (shown here as \\\"postgres\\\"), run the \nfollowing SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW ssl\\\"\n\nIf SSL is off, this is a finding.\n\nConsult network administration staff to determine whether the server is protected by NSA-approved encrypting devices. \nIf not, this a finding.\"\n\tdesc\t'fix', \"Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo configure PostgreSQL to use SSL as a database administrator (shown here as \\\"postgres\\\"), edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameter:\n\nssl = on\n\nNext, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content APPENDIX-G.\n\nDeploy NSA-approved encrypting devices to protect the server on the network.\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000416-DB-000380'\n  tag gid: 'V-233584'\n  tag rid: 'SV-233584r617333_rule'\n  tag stig_id: 'CD12-00-008100'\n  tag fix_id: 'F-36743r606976_fix'\n  tag cci: [\"CCI-002450\"]\n  tag nist: [\"SC-13\"]\n\n\tsql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n\tdescribe sql.query('SHOW ssl;', [input('pg_db')]) do\n\t  its('output') { should match /on|true/i }\n\tend\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233584.rb",
        "line": 3
      },
      "id": "V-233584"
    },
    {
      "title": "PostgreSQL must implement NIST FIPS 140-2 validated cryptographic modules to protect unclassified \n\tinformation requiring confidentiality and cryptographic protection, in accordance with the data owner’s \n\trequirements.",
      "desc": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect \n\tdata. The application must implement cryptographic modules adhering to the higher standards approved by the \n\tfederal government since this provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal \nlaws, Executive Orders, directives, policies, regulations, and standards.\n\nFor detailed information, refer to NIST FIPS Publication 140-2, Security Requirements For Cryptographic Modules. \nNote that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant.",
      "descriptions": {
        "default": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect \n\tdata. The application must implement cryptographic modules adhering to the higher standards approved by the \n\tfederal government since this provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal \nlaws, Executive Orders, directives, policies, regulations, and standards.\n\nFor detailed information, refer to NIST FIPS Publication 140-2, Security Requirements For Cryptographic Modules. \nNote that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant.",
        "rationale": "",
        "check": "First, as the system administrator, run the following to see if FIPS is enabled:\n\n$ cat /proc/sys/crypto/fips_enabled\n\nIf fips_enabled is not \"1\", this is a finding.",
        "fix": "Configure OpenSSL to be FIPS compliant.\n\nPostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be FIPS 140-2 compliant, see the \nofficial RHEL Documentation: \nhttps://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security_Guide/sect-Security_Guide-Federal_Standards_And_Regulations-Federal_Information_Processing_Standard.html\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary\ncontent APPENDIX-G."
      },
      "impact": 0,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "high",
        "gtitle": "SRG-APP-000514-DB-000383",
        "gid": "V-233585",
        "rid": "SV-233585r617333_rule",
        "stig_id": "CD12-00-008200",
        "fix_id": "F-36744r606979_fix",
        "cci": [
          "CCI-002450"
        ],
        "nist": [
          "SC-13"
        ]
      },
      "code": "  control \"V-233585\" do\n    impact 0.0\n    describe 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on' do\n      skip 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233585.rb",
        "line": 3
      },
      "id": "V-233585"
    },
    {
      "title": "PostgreSQL must protect the confidentiality and integrity of all information at rest.",
      "desc": "This control is intended to address the confidentiality and integrity of information at rest in \n\tnon-mobile devices and covers user information and system information. Information at rest refers to the state \n\tof information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an \n\torganizational information system. Applications and application users generate information throughout the course \n\tof their application use. \n\nUser data generated, as well as application-specific configuration data, needs to be protected. Organizations may \nchoose to employ different mechanisms to achieve confidentiality and integrity protections, as appropriate. \n\nIf the confidentiality and integrity of application data is not protected, the data will be open to compromise and \nunauthorized modification.",
      "descriptions": {
        "default": "This control is intended to address the confidentiality and integrity of information at rest in \n\tnon-mobile devices and covers user information and system information. Information at rest refers to the state \n\tof information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an \n\torganizational information system. Applications and application users generate information throughout the course \n\tof their application use. \n\nUser data generated, as well as application-specific configuration data, needs to be protected. Organizations may \nchoose to employ different mechanisms to achieve confidentiality and integrity protections, as appropriate. \n\nIf the confidentiality and integrity of application data is not protected, the data will be open to compromise and \nunauthorized modification.",
        "rationale": "",
        "check": "If the application owner and Authorizing Official have determined that encryption of data at \n\trest is NOT required, this is not a finding.\n\nOne possible way to encrypt data within PostgreSQL is to use the pgcrypto extension.\n\nTo check if pgcrypto is installed on PostgreSQL, as a database administrator (shown here as \"postgres\"), run \nthe following command:\n\n$ sudo su - postgres\n$ psql -c \"SELECT * FROM pg_available_extensions where name='pgcrypto'\"\n\nIf data in the database requires encryption and pgcrypto is not available, this is a finding.\n\nIf disk or filesystem requires encryption, ask the system owner, database administrator (DBA), and system \nadministrator (SA) to demonstrate the use of disk-level encryption. If this is required and is not found, this is a \nfinding.\n\nIf controls do not exist or are not enabled, this is a finding.",
        "fix": "Apply appropriate controls to protect the confidentiality and integrity of data at rest in the \n\tdatabase.\n\nThe pgcrypto module provides cryptographic functions for PostgreSQL. See supplementary content APPENDIX-E for \ndocumentation on installing pgcrypto.\n\nWith pgcrypto installed, it is possible to insert encrypted data into the database:\n\nINSERT INTO accounts(username, password) VALUES ('bob', crypt('a_secure_password', gen_salt('xdes')));"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000231-DB-000154",
        "gid": "V-233586",
        "rid": "SV-233586r617333_rule",
        "stig_id": "CD12-00-008300",
        "fix_id": "F-36745r606982_fix",
        "cci": [
          "CCI-001199"
        ],
        "nist": [
          "SC-28"
        ]
      },
      "code": "control\t'V-233586' do\n\ttitle\t\"PostgreSQL must protect the confidentiality and integrity of all information at rest.\"\n\tdesc\t\"This control is intended to address the confidentiality and integrity of information at rest in \n\tnon-mobile devices and covers user information and system information. Information at rest refers to the state \n\tof information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an \n\torganizational information system. Applications and application users generate information throughout the course \n\tof their application use. \n\nUser data generated, as well as application-specific configuration data, needs to be protected. Organizations may \nchoose to employ different mechanisms to achieve confidentiality and integrity protections, as appropriate. \n\nIf the confidentiality and integrity of application data is not protected, the data will be open to compromise and \nunauthorized modification.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"If the application owner and Authorizing Official have determined that encryption of data at \n\trest is NOT required, this is not a finding.\n\nOne possible way to encrypt data within PostgreSQL is to use the pgcrypto extension.\n\nTo check if pgcrypto is installed on PostgreSQL, as a database administrator (shown here as \\\"postgres\\\"), run \nthe following command:\n\n$ sudo su - postgres\n$ psql -c \\\"SELECT * FROM pg_available_extensions where name='pgcrypto'\\\"\n\nIf data in the database requires encryption and pgcrypto is not available, this is a finding.\n\nIf disk or filesystem requires encryption, ask the system owner, database administrator (DBA), and system \nadministrator (SA) to demonstrate the use of disk-level encryption. If this is required and is not found, this is a \nfinding.\n\nIf controls do not exist or are not enabled, this is a finding.\"\n\tdesc\t'fix', \"Apply appropriate controls to protect the confidentiality and integrity of data at rest in the \n\tdatabase.\n\nThe pgcrypto module provides cryptographic functions for PostgreSQL. See supplementary content APPENDIX-E for \ndocumentation on installing pgcrypto.\n\nWith pgcrypto installed, it is possible to insert encrypted data into the database:\n\nINSERT INTO accounts(username, password) VALUES ('bob', crypt('a_secure_password', gen_salt('xdes')));\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000231-DB-000154'\n  tag gid: 'V-233586'\n  tag rid: 'SV-233586r617333_rule'\n  tag stig_id: 'CD12-00-008300'\n  tag fix_id: 'F-36745r606982_fix'\n  tag cci: [\"CCI-001199\"]\n  tag nist: [\"SC-28\"]\n\n\n\tsql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n\tpgcrypto_sql = \"SELECT * FROM pg_available_extensions where name='pgcrypto'\"\n  \n\tdescribe sql.query(pgcrypto_sql, [input('pg_db')]) do\n\t  its('output') { should_not eq '' }\n\tend\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233586.rb",
        "line": 3
      },
      "id": "V-233586"
    },
    {
      "title": "PostgreSQL must prohibit user installation of logic modules (functions, trigger procedures, views, etc.) \n\twithout explicit privileged status.",
      "desc": "Allowing regular users to install software, without explicit privileges, creates the risk that untested \n\tor potentially malicious software will be installed on the system. Explicit privileges (escalated or \n\t\tadministrative privileges) provide the regular user with explicit capabilities and control that exceed the \n\t\trights of a regular user.\n\nPostgreSQL functionality and the nature and requirements of databases will vary; so while users are not permitted to \ninstall unapproved software, there may be instances where the organization allows the user to install approved \nsoftware packages such as from an approved software repository. The requirements for production servers will be more \nrestrictive than those used for development and research.\n\nPostgreSQL must enforce software installation by users based upon what types of software installations are permitted \n(e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., \n\tsoftware whose pedigree with regard to being potentially malicious is unknown or suspect) by the organization). \n\nIn the case of a database management system, this requirement covers stored procedures, functions, triggers, views, \n\tetc.",
      "descriptions": {
        "default": "Allowing regular users to install software, without explicit privileges, creates the risk that untested \n\tor potentially malicious software will be installed on the system. Explicit privileges (escalated or \n\t\tadministrative privileges) provide the regular user with explicit capabilities and control that exceed the \n\t\trights of a regular user.\n\nPostgreSQL functionality and the nature and requirements of databases will vary; so while users are not permitted to \ninstall unapproved software, there may be instances where the organization allows the user to install approved \nsoftware packages such as from an approved software repository. The requirements for production servers will be more \nrestrictive than those used for development and research.\n\nPostgreSQL must enforce software installation by users based upon what types of software installations are permitted \n(e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., \n\tsoftware whose pedigree with regard to being potentially malicious is unknown or suspect) by the organization). \n\nIn the case of a database management system, this requirement covers stored procedures, functions, triggers, views, \n\tetc.",
        "rationale": "",
        "check": "If PostgreSQL supports only software development, experimentation and/or developer-level \n\ttesting (that is, excluding production systems, integration testing, stress testing, and user acceptance \n\t\ttesting), this is not a finding.\n\nReview PostgreSQL and database security settings with respect to non-administrative users ability to create, alter, \nor replace logic modules, to include but not necessarily only stored procedures, functions, triggers, and views.\n\nTo list the privileges for all tables and schemas, as the database administrator (shown here as \"postgres\"), run \nthe following:\n\n$ sudo su - postgres\n$ psql -c \"dp\"\n$ psql -c \"dn+\"\n\nThe privileges are as follows:\n\nrolename=xxxx -- privileges granted to a role\n=xxxx -- privileges granted to PUBLIC\n\nr -- SELECT (\"read\")\nw -- UPDATE (\"write\")\na -- INSERT (\"append\")\nd -- DELETE\nD -- TRUNCATE\nx -- REFERENCES\nt -- TRIGGER\nX -- EXECUTE\nU -- USAGE\nC -- CREATE\nc -- CONNECT\nT -- TEMPORARY\narwdDxt -- ALL PRIVILEGES (for tables, varies for other objects)\n* -- grant option for preceding privilege\n\n/yyyy -- role that granted this privilege\n\nIf any such permissions exist and are not documented and approved, this is a finding.",
        "fix": "Document and obtain approval for any non-administrative users who require the ability to \n\tcreate, alter, or replace logic modules.\n\nImplement the approved permissions. Revoke any unapproved permissions."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000378-DB-000365",
        "gid": "V-233587",
        "rid": "SV-233587r617333_rule",
        "stig_id": "CD12-00-008400",
        "fix_id": "F-36746r606985_fix",
        "cci": [
          "CCI-001812"
        ],
        "nist": [
          "CM-11 (2)"
        ]
      },
      "code": "control\t'V-233587' do\n\ttitle\t\"PostgreSQL must prohibit user installation of logic modules (functions, trigger procedures, views, etc.) \n\twithout explicit privileged status.\"\n\tdesc\t\"Allowing regular users to install software, without explicit privileges, creates the risk that untested \n\tor potentially malicious software will be installed on the system. Explicit privileges (escalated or \n\t\tadministrative privileges) provide the regular user with explicit capabilities and control that exceed the \n\t\trights of a regular user.\n\nPostgreSQL functionality and the nature and requirements of databases will vary; so while users are not permitted to \ninstall unapproved software, there may be instances where the organization allows the user to install approved \nsoftware packages such as from an approved software repository. The requirements for production servers will be more \nrestrictive than those used for development and research.\n\nPostgreSQL must enforce software installation by users based upon what types of software installations are permitted \n(e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., \n\tsoftware whose pedigree with regard to being potentially malicious is unknown or suspect) by the organization). \n\nIn the case of a database management system, this requirement covers stored procedures, functions, triggers, views, \n\tetc.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"If PostgreSQL supports only software development, experimentation and/or developer-level \n\ttesting (that is, excluding production systems, integration testing, stress testing, and user acceptance \n\t\ttesting), this is not a finding.\n\nReview PostgreSQL and database security settings with respect to non-administrative users ability to create, alter, \nor replace logic modules, to include but not necessarily only stored procedures, functions, triggers, and views.\n\nTo list the privileges for all tables and schemas, as the database administrator (shown here as \\\"postgres\\\"), run \nthe following:\n\n$ sudo su - postgres\n$ psql -c \\\"\\dp\\\"\n$ psql -c \\\"\\dn+\\\"\n\nThe privileges are as follows:\n\nrolename=xxxx -- privileges granted to a role\n=xxxx -- privileges granted to PUBLIC\n\nr -- SELECT (\\\"read\\\")\nw -- UPDATE (\\\"write\\\")\na -- INSERT (\\\"append\\\")\nd -- DELETE\nD -- TRUNCATE\nx -- REFERENCES\nt -- TRIGGER\nX -- EXECUTE\nU -- USAGE\nC -- CREATE\nc -- CONNECT\nT -- TEMPORARY\narwdDxt -- ALL PRIVILEGES (for tables, varies for other objects)\n* -- grant option for preceding privilege\n\n/yyyy -- role that granted this privilege\n\nIf any such permissions exist and are not documented and approved, this is a finding.\"\n\tdesc\t'fix', \"Document and obtain approval for any non-administrative users who require the ability to \n\tcreate, alter, or replace logic modules.\n\nImplement the approved permissions. Revoke any unapproved permissions.\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000378-DB-000365'\n  tag gid: 'V-233587'\n  tag rid: 'SV-233587r617333_rule'\n  tag stig_id: 'CD12-00-008400'\n  tag fix_id: 'F-36746r606985_fix'\n  tag cci: [\"CCI-001812\"]\n  tag nist: [\"CM-11 (2)\"]\n\n\tdescribe \"Review PostgreSQL and database security settings with respect to non-administrative users' permissions.\" do\n\t\tskip \"If any such permissions exist and are not documented and approved, this is a finding\"\n\t  end\n\tend\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233587.rb",
        "line": 3
      },
      "id": "V-233587"
    },
    {
      "title": "PostgreSQL must separate user functionality (including user interface services) from database \n\tmanagement functionality.",
      "desc": "Information system management functionality includes functions necessary to administer databases, \n\tnetwork components, workstations, or servers and typically requires privileged user access. \n\nThe separation of user functionality from information system management functionality is either physical or logical \nand is accomplished by using different computers, different central processing units, different instances of the \noperating system, different network addresses, combinations of these methods, or other methods, as appropriate. \n\nAn example of this type of separation is observed in web administrative interfaces that use separate authentication \nmethods for users of any other information system resources. \n\nThis may include isolating the administrative interface on a different domain and with additional access controls.\n\nIf administrative functionality or information regarding PostgreSQL management is presented on an interface available \nfor users, information on DBMS settings may be inadvertently made available to the user.",
      "descriptions": {
        "default": "Information system management functionality includes functions necessary to administer databases, \n\tnetwork components, workstations, or servers and typically requires privileged user access. \n\nThe separation of user functionality from information system management functionality is either physical or logical \nand is accomplished by using different computers, different central processing units, different instances of the \noperating system, different network addresses, combinations of these methods, or other methods, as appropriate. \n\nAn example of this type of separation is observed in web administrative interfaces that use separate authentication \nmethods for users of any other information system resources. \n\nThis may include isolating the administrative interface on a different domain and with additional access controls.\n\nIf administrative functionality or information regarding PostgreSQL management is presented on an interface available \nfor users, information on DBMS settings may be inadvertently made available to the user.",
        "rationale": "",
        "check": "Check PostgreSQL settings and vendor documentation to verify that administrative functionality \n\tis separate from user functionality.\n\nAs the database administrator (shown here as \"postgres\"), list all roles and permissions for the database:\n\n$ sudo su - postgres\n$ psql -c \"du\"\n\nIf any non-administrative role has the attribute \"Superuser\", \"Create role\", \"Create DB\" or \"Bypass RLS\", \nthis is a finding.\n\nIf administrator and general user functionality are not separated either physically or logically, this is a finding.",
        "fix": "Configure PostgreSQL to separate database administration and general user functionality.\n\nDo not grant superuser, create role, create db, or bypass rls role attributes to users that do not require it.\n\nTo remove privileges, see the following example:\n\nALTER ROLE <username> NOSUPERUSER NOCREATEDB NOCREATEROLE NOBYPASSRLS;"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000211-DB-000122",
        "gid": "V-233588",
        "rid": "SV-233588r617333_rule",
        "stig_id": "CD12-00-008500",
        "fix_id": "F-36747r606988_fix",
        "cci": [
          "CCI-001082"
        ],
        "nist": [
          "SC-2"
        ]
      },
      "code": "  control \"V-233588\" do\n    sql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n    pg_superusers = input('pg_superusers')\n    rds_superusers = input('rds_superusers')\n    pg_db = input('pg_db')\n    pg_owner = input('pg_owner')\n\n    privileges = %w(rolcreatedb rolcreaterole rolsuper)\n    \n    roles_sql = 'SELECT r.rolname FROM pg_catalog.pg_roles r;'\n    roles_query = sql.query(roles_sql, [pg_db])\n    roles = roles_query.lines\n\n    roles.each do |role|\n      unless pg_superusers.include?(role) || rds_superusers.include?(role)\n        privileges.each do |privilege|\n          privilege_sql = \"SELECT r.#{privilege} FROM pg_catalog.pg_roles r \"\\\n            \"WHERE r.rolname = '#{role}';\"\n\n          describe sql.query(privilege_sql, [pg_db]) do\n            its('output') { should_not eq 't' }\n          end\n        end\n      end\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233588.rb",
        "line": 3
      },
      "id": "V-233588"
    },
    {
      "title": "PostgreSQL must initiate session auditing upon startup.",
      "desc": "Session auditing is for use when a user's activities are under investigation. To ensure the capture \n\tof all activity during those periods when session auditing is in use, it needs to be in operation for the whole \n\ttime PostgreSQL is running.",
      "descriptions": {
        "default": "Session auditing is for use when a user's activities are under investigation. To ensure the capture \n\tof all activity during those periods when session auditing is in use, it needs to be in operation for the whole \n\ttime PostgreSQL is running.",
        "rationale": "",
        "check": "As the database administrator (shown here as \"postgres\"), check the current settings by \n\trunning the following SQL: \n\n$ sudo su - postgres \n$ psql -c \"SHOW shared_preload_libraries\" \n\nIf pgaudit is not in the current setting, this is a finding. \n\nAs the database administrator (shown here as \"postgres\"), check the current settings by running the following SQL: \n\n$ psql -c \"SHOW log_destination\" \n\nIf stderr or syslog are not in the current setting, this is a finding.",
        "fix": "Configure PostgreSQL to enable auditing.\n\nTo ensure logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.\n\nFor session logging, using pgaudit is recommended. For instructions on how to setup pgaudit, see supplementary \ncontent APPENDIX-B."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000092-DB-000208",
        "gid": "V-233589",
        "rid": "SV-233589r617333_rule",
        "stig_id": "CD12-00-008600",
        "fix_id": "F-36748r606991_fix",
        "cci": [
          "CCI-001464"
        ],
        "nist": [
          "AU-14 (1)"
        ]
      },
      "code": "control\t'V-233589' do\n\ttitle\t\"PostgreSQL must initiate session auditing upon startup.\"\n\tdesc\t\"Session auditing is for use when a user's activities are under investigation. To ensure the capture \n\tof all activity during those periods when session auditing is in use, it needs to be in operation for the whole \n\ttime PostgreSQL is running.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"As the database administrator (shown here as \\\"postgres\\\"), check the current settings by \n\trunning the following SQL: \n\n$ sudo su - postgres \n$ psql -c \\\"SHOW shared_preload_libraries\\\" \n\nIf pgaudit is not in the current setting, this is a finding. \n\nAs the database administrator (shown here as \\\"postgres\\\"), check the current settings by running the following SQL: \n\n$ psql -c \\\"SHOW log_destination\\\" \n\nIf stderr or syslog are not in the current setting, this is a finding.\"\n\tdesc\t'fix', \"Configure PostgreSQL to enable auditing.\n\nTo ensure logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.\n\nFor session logging, using pgaudit is recommended. For instructions on how to setup pgaudit, see supplementary \ncontent APPENDIX-B.\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000092-DB-000208'\n  tag gid: 'V-233589'\n  tag rid: 'SV-233589r617333_rule'\n  tag stig_id: 'CD12-00-008600'\n  tag fix_id: 'F-36748r606991_fix'\n  tag cci: [\"CCI-001464\"]\n  tag nist: [\"AU-14 (1)\"]\n\n\tsql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n\tdescribe sql.query('SHOW shared_preload_libraries;', [input('pg_db')]) do\n\t  its('output') { should include 'pgaudit' }\n\tend\n  \n\tdescribe sql.query('SHOW log_destination;', [input('pg_db')]) do\n\t  its('output') { should match /stderr|syslog/i }\n\tend\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233589.rb",
        "line": 3
      },
      "id": "V-233589"
    },
    {
      "title": "PostgreSQL must implement cryptographic mechanisms to prevent unauthorized modification of \n\torganization-defined information at rest (to include, at a minimum, PII and classified information) on \n\torganization-defined information system components.",
      "desc": "PostgreSQLs handling data requiring data-at-rest protections must employ cryptographic mechanisms to \n\tprevent unauthorized disclosure and modification of the information at rest. These cryptographic mechanisms may \n\tbe native to PostgreSQL or implemented via additional software or operating system/file system settings, as \n\tappropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. \nThe strength of the mechanism is commensurate with the security category and/or classification of the information. \nOrganizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) \nor encrypt specific data structures (e.g., files, records, or fields). \n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures \ntaken to secure the equipment and media on which the information resides.",
      "descriptions": {
        "default": "PostgreSQLs handling data requiring data-at-rest protections must employ cryptographic mechanisms to \n\tprevent unauthorized disclosure and modification of the information at rest. These cryptographic mechanisms may \n\tbe native to PostgreSQL or implemented via additional software or operating system/file system settings, as \n\tappropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. \nThe strength of the mechanism is commensurate with the security category and/or classification of the information. \nOrganizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) \nor encrypt specific data structures (e.g., files, records, or fields). \n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures \ntaken to secure the equipment and media on which the information resides.",
        "rationale": "",
        "check": "Review the system documentation to determine whether the organization has defined the \n\tinformation at rest that is to be protected from modification, which must include, at a minimum, PII and \n\tclassified information.\n\nIf no information is identified as requiring such protection, this is not a finding.\n\nReview the configuration of PostgreSQL, operating system/file system, and additional software as relevant.\n\nIf any of the information defined as requiring cryptographic protection from modification is not encrypted in a \nmanner that provides the required level of protection, this is a finding.\n\nOne possible way to encrypt data within PostgreSQL is to use pgcrypto extension.\n\nTo check if pgcrypto is installed on PostgreSQL, as a database administrator (shown here as \"postgres\"), run the \nfollowing command:\n\n$ sudo su - postgres\n$ psql -c \"SELECT * FROM pg_available_extensions where name='pgcrypto'\"\n\nIf data in the database requires encryption and pgcrypto is not available, this is a finding.\n\nIf disk or filesystem requires encryption, ask the system owner, DBA, and SA to demonstrate filesystem or disk level \nencryption.\n\nIf this is required and is not found, this is a finding.",
        "fix": "Configure PostgreSQL, operating system/file system, and additional software as relevant, to \n\tprovide the required level of cryptographic protection.\n\nThe pgcrypto module provides cryptographic functions for PostgreSQL. See supplementary content APPENDIX-E for \ndocumentation on installing pgcrypto.\n\nWith pgcrypto installed, it is possible to insert encrypted data into the database:\n\nINSERT INTO accounts(username, password) VALUES ('bob', crypt('mypass', gen_salt('bf', 4));"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000428-DB-000386",
        "gid": "V-233590",
        "rid": "SV-233590r617333_rule",
        "stig_id": "CD12-00-008700",
        "fix_id": "F-36749r606994_fix",
        "cci": [
          "CCI-002475"
        ],
        "nist": [
          "SC-28 (1)"
        ]
      },
      "code": "control\t'V-233590' do\n\ttitle\t\"PostgreSQL must implement cryptographic mechanisms to prevent unauthorized modification of \n\torganization-defined information at rest (to include, at a minimum, PII and classified information) on \n\torganization-defined information system components.\"\n\tdesc\t\"PostgreSQLs handling data requiring data-at-rest protections must employ cryptographic mechanisms to \n\tprevent unauthorized disclosure and modification of the information at rest. These cryptographic mechanisms may \n\tbe native to PostgreSQL or implemented via additional software or operating system/file system settings, as \n\tappropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. \nThe strength of the mechanism is commensurate with the security category and/or classification of the information. \nOrganizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) \nor encrypt specific data structures (e.g., files, records, or fields). \n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures \ntaken to secure the equipment and media on which the information resides.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"Review the system documentation to determine whether the organization has defined the \n\tinformation at rest that is to be protected from modification, which must include, at a minimum, PII and \n\tclassified information.\n\nIf no information is identified as requiring such protection, this is not a finding.\n\nReview the configuration of PostgreSQL, operating system/file system, and additional software as relevant.\n\nIf any of the information defined as requiring cryptographic protection from modification is not encrypted in a \nmanner that provides the required level of protection, this is a finding.\n\nOne possible way to encrypt data within PostgreSQL is to use pgcrypto extension.\n\nTo check if pgcrypto is installed on PostgreSQL, as a database administrator (shown here as \\\"postgres\\\"), run the \nfollowing command:\n\n$ sudo su - postgres\n$ psql -c \\\"SELECT * FROM pg_available_extensions where name='pgcrypto'\\\"\n\nIf data in the database requires encryption and pgcrypto is not available, this is a finding.\n\nIf disk or filesystem requires encryption, ask the system owner, DBA, and SA to demonstrate filesystem or disk level \nencryption.\n\nIf this is required and is not found, this is a finding.\"\n\tdesc\t'fix', \"Configure PostgreSQL, operating system/file system, and additional software as relevant, to \n\tprovide the required level of cryptographic protection.\n\nThe pgcrypto module provides cryptographic functions for PostgreSQL. See supplementary content APPENDIX-E for \ndocumentation on installing pgcrypto.\n\nWith pgcrypto installed, it is possible to insert encrypted data into the database:\n\nINSERT INTO accounts(username, password) VALUES ('bob', crypt('mypass', gen_salt('bf', 4));\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000428-DB-000386'\n  tag gid: 'V-233590'\n  tag rid: 'SV-233590r617333_rule'\n  tag stig_id: 'CD12-00-008700'\n  tag fix_id: 'F-36749r606994_fix'\n  tag cci: [\"CCI-002475\"]\n  tag nist: [\"SC-28 (1)\"]\n\n\tsql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n\tpgcrypto_sql = \"SELECT * FROM pg_available_extensions where name='pgcrypto'\"\n  \n\tdescribe sql.query(pgcrypto_sql, [input('pg_db')]) do\n\t  its('output') { should_not eq '' }\n\tend\n  \n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233590.rb",
        "line": 3
      },
      "id": "V-233590"
    },
    {
      "title": "PostgreSQL must produce audit records containing sufficient information to establish the sources \n\t(origins) of the events.",
      "desc": "Information system auditing capability is critical for accurate forensic analysis. Without \n\testablishing the source of the event, it is impossible to establish, correlate, and investigate the events \n\trelating to an incident.\n\nTo compile an accurate risk assessment and provide forensic analysis, it is essential for security personnel to \nknow where events occurred, such as application components, modules, session identifiers, filenames, host names, \nand functionality. \n\nIn addition to logging where events occur within the application, the application must also produce audit records \nthat identify the application itself as the source of the event.\n\nAssociating information about the source of the event within the application provides a means of investigating an \nattack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.",
      "descriptions": {
        "default": "Information system auditing capability is critical for accurate forensic analysis. Without \n\testablishing the source of the event, it is impossible to establish, correlate, and investigate the events \n\trelating to an incident.\n\nTo compile an accurate risk assessment and provide forensic analysis, it is essential for security personnel to \nknow where events occurred, such as application components, modules, session identifiers, filenames, host names, \nand functionality. \n\nIn addition to logging where events occur within the application, the application must also produce audit records \nthat identify the application itself as the source of the event.\n\nAssociating information about the source of the event within the application provides a means of investigating an \nattack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application.",
        "rationale": "",
        "check": "Check PostgreSQL settings and existing audit records to verify information specific to the \n\tsource (origin) of the event is being captured and stored with audit records.\n\nAs the database administrator (usually postgres, check the current log_line_prefix and log_hostname setting by \n\trunning the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_line_prefix\"\n$ psql -c \"SHOW log_hostname\"\n\nFor a complete list of extra information that can be added to log_line_prefix, see the official documentation: \nhttps://www.postgresql.org/docs/current/static/runtime-config-logging.html#GUC-LOG-LINE-PREFIX.\n\nIf the current settings do not provide enough information regarding the source of the event, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER\n    environment variables. See supplementary content APPENDIX-F for instructions on\n    configuring PGDATA and APPENDIX-H for PGVER.\n    To ensure that logging is enabled, review supplementary content APPENDIX-C for\n    instructions on enabling logging. \n    If logging is enabled the following configurations can be made to log the\n    source of an event. \n    First, as the database administrator, edit postgresql.conf: \n    $ sudo su - postgres \n    $ vi ${PGDATA?}/postgresql.conf \n    ###### Log Line Prefix \n    Extra parameters can be added to the setting log_line_prefix to log source of\n    event: \n    # %u = user name \n    # %d = database name \n    # %r = remote host and port \n    # %p = process ID \n    # %t = timestamp\n    For example: \n    log_line_prefix = '< %u %d %r %p %t >' \n    ###### Log Hostname \n    By default only IP address is logged. To also log the hostname the following\n    parameter can also be set in postgresql.conf: \n    log_hostname = on \n    Now, as the system administrator, reload the server with the new configuration: \n    # SYSTEMD SERVER ONLY \n    $ sudo systemctl reload postgresql-${PGVER?}\n    # INITD SERVER ONLY \n    $ sudo service postgresql-${PGVER?} reload"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000098-DB-000042",
        "gid": "V-233591",
        "rid": "SV-233591r617333_rule",
        "stig_id": "CD12-00-008800",
        "fix_id": "F-36750r606997_fix",
        "cci": [
          "CCI-000133"
        ],
        "nist": [
          "AU-3"
        ]
      },
      "code": "  control \"V-233591\" do\n    desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\n    environment variables. See supplementary content APPENDIX-F for instructions on\n    configuring PGDATA and APPENDIX-H for PGVER.\n    To ensure that logging is enabled, review supplementary content APPENDIX-C for\n    instructions on enabling logging. \n    If logging is enabled the following configurations can be made to log the\n    source of an event. \n    First, as the database administrator, edit postgresql.conf: \n    $ sudo su - postgres \n    $ vi ${PGDATA?}/postgresql.conf \n    ###### Log Line Prefix \n    Extra parameters can be added to the setting log_line_prefix to log source of\n    event: \n    # %u = user name \n    # %d = database name \n    # %r = remote host and port \n    # %p = process ID \n    # %t = timestamp\n    For example: \n    log_line_prefix = '< %u %d %r %p %t >' \n    ###### Log Hostname \n    By default only IP address is logged. To also log the hostname the following\n    parameter can also be set in postgresql.conf: \n    log_hostname = on \n    Now, as the system administrator, reload the server with the new configuration: \n    # SYSTEMD SERVER ONLY \n    $ sudo systemctl reload postgresql-${PGVER?}\n    # INITD SERVER ONLY \n    $ sudo service postgresql-${PGVER?} reload\"\n\n    pg_ver = input('pg_version')\n\n    pg_dba = input('pg_dba')\n\n    pg_dba_password = input('pg_dba_password')\n\n    pg_db = input('pg_db')\n\n    pg_host = input('pg_host')\n\n    sql = postgres_session(pg_dba, pg_dba_password, pg_host, input('pg_port'))\n\n    log_line_prefix_escapes = %w(%u %d %r %p %t)\n    log_line_prefix_escapes.each do |escape|\n      describe sql.query('SHOW log_line_prefix;', [pg_db]) do\n        its('output') { should include escape }\n      end\n    end\n\n    describe sql.query('SHOW log_hostname;', [pg_db]) do\n      its('output') { should match /(on|true)/i }\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233591.rb",
        "line": 3
      },
      "id": "V-233591"
    },
    {
      "title": "Unused database components, PostgreSQL software, and database objects must be removed.",
      "desc": "Information systems are capable of providing a wide variety of functions and services. Some of the \n\tfunctions and services, provided by default, may not be necessary to support essential organizational operations \n\t(e.g., key missions, functions). \n\nIt is detrimental for software products to provide, or install by default, functionality exceeding requirements or \nmission objectives. \n\nPostgreSQL must adhere to the principles of least functionality by providing only essential capabilities.",
      "descriptions": {
        "default": "Information systems are capable of providing a wide variety of functions and services. Some of the \n\tfunctions and services, provided by default, may not be necessary to support essential organizational operations \n\t(e.g., key missions, functions). \n\nIt is detrimental for software products to provide, or install by default, functionality exceeding requirements or \nmission objectives. \n\nPostgreSQL must adhere to the principles of least functionality by providing only essential capabilities.",
        "rationale": "",
        "check": "To get a list of all extensions installed, use the following commands:\n\n$ sudo su - postgres\n$ psql -c \"select * from pg_extension where extname != 'plpgsql'\"\n\nIf any extensions exist that are not approved, this is a finding.",
        "fix": "To remove extensions, use the following commands:\n\n$ sudo su - postgres\n$ psql -c \"DROP EXTENSION <extension_name>\"\n\nNote: It is recommended that plpgsql not be removed."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000141-DB-000091",
        "gid": "V-233592",
        "rid": "SV-233592r617333_rule",
        "stig_id": "CD12-00-008900",
        "fix_id": "F-36751r607000_fix",
        "cci": [
          "CCI-000381"
        ],
        "nist": [
          "CM-7 a"
        ]
      },
      "code": "control\t'V-233592' do\n\ttitle\t\"Unused database components, PostgreSQL software, and database objects must be removed.\"\n\tdesc\t\"Information systems are capable of providing a wide variety of functions and services. Some of the \n\tfunctions and services, provided by default, may not be necessary to support essential organizational operations \n\t(e.g., key missions, functions). \n\nIt is detrimental for software products to provide, or install by default, functionality exceeding requirements or \nmission objectives. \n\nPostgreSQL must adhere to the principles of least functionality by providing only essential capabilities.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"To get a list of all extensions installed, use the following commands:\n\n$ sudo su - postgres\n$ psql -c \\\"select * from pg_extension where extname != 'plpgsql'\\\"\n\nIf any extensions exist that are not approved, this is a finding.\"\n\tdesc\t'fix', \"To remove extensions, use the following commands:\n\n$ sudo su - postgres\n$ psql -c \\\"DROP EXTENSION <extension_name>\\\"\n\nNote: It is recommended that plpgsql not be removed.\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000141-DB-000091'\n  tag gid: 'V-233592'\n  tag rid: 'SV-233592r617333_rule'\n  tag stig_id: 'CD12-00-008900'\n  tag fix_id: 'F-36751r607000_fix'\n  tag cci: [\"CCI-000381\"]\n  tag nist: [\"CM-7 a\"]\n\n\tsql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n\tinstalled_extensions = sql.query('select extname from pg_extension where extname != \\'plpgsql\\';').lines\n\t\n\t  unless installed_extensions.empty?\n\t\tinstalled_extensions.each do |extension|\n\t\t  describe \"The installed extension: #{extension}\" do\n\t\t\tsubject { extension }\n\t\t\t  it { should  be_in input('approved_ext') }\n\t\t  end\n\t\tend\n\t  else\n\t\t  describe \"The list of installed extensions\" do\n\t\t\tsubject { installed_extensions }\n\t\t\t  it { should be_empty }\n\t\t  end\n\t  end\n\tend\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233592.rb",
        "line": 3
      },
      "id": "V-233592"
    },
    {
      "title": "Access to external executables must be disabled or restricted.",
      "desc": "Information systems are capable of providing a wide variety of functions and services. Some of the \n\tfunctions and services, provided by default, may not be necessary to support essential organizational operations \n\t(e.g., key missions, functions).\n\nIt is detrimental for applications to provide, or install by default, functionality exceeding requirements or \nmission objectives. \n\nApplications must adhere to the principles of least functionality by providing only essential capabilities.\n\nPostgreSQLs may spawn additional external processes to execute procedures that are defined in PostgreSQL but stored \nin external host files (external procedures). The spawned process used to execute the external procedure may operate \nwithin a different OS security context than PostgreSQL and provide unauthorized access to the host system.",
      "descriptions": {
        "default": "Information systems are capable of providing a wide variety of functions and services. Some of the \n\tfunctions and services, provided by default, may not be necessary to support essential organizational operations \n\t(e.g., key missions, functions).\n\nIt is detrimental for applications to provide, or install by default, functionality exceeding requirements or \nmission objectives. \n\nApplications must adhere to the principles of least functionality by providing only essential capabilities.\n\nPostgreSQLs may spawn additional external processes to execute procedures that are defined in PostgreSQL but stored \nin external host files (external procedures). The spawned process used to execute the external procedure may operate \nwithin a different OS security context than PostgreSQL and provide unauthorized access to the host system.",
        "rationale": "",
        "check": "PostgreSQL's Copy command can interact with the underlying OS. Only superuser has access to \n\tthis command.\n\nFirst, as the database administrator (shown here as \"postgres\"), run the following SQL to list all roles and their \nprivileges:\n\n$ sudo su - postgres\n$ psql -x -c \"du\"\n\nIf any role has \"superuser\" that should not, this is a finding.\n\nIt is possible for an extension to contain code that could access external executables via SQL. To list all installed \nextensions, as the database administrator (shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -x -c \"SELECT * FROM pg_available_extensions WHERE installed_version IS NOT NULL\"\n\nIf any extensions are installed that are not approved, this is a finding.",
        "fix": "To remove superuser from a role, as the database administrator (shown here as \"postgres\"), run \n\tthe following SQL:\n\n$ sudo su - postgres\n$ psql -c \"ALTER ROLE <role-name> WITH NOSUPERUSER\"\n\nTo remove extensions from PostgreSQL, as the database administrator (shown here as \"postgres\"), run the following \nSQL:\n\n$ sudo su - postgres\n$ psql -c \"DROP EXTENSION extension_name\""
      },
      "impact": 0,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000141-DB-000093",
        "gid": "V-233593",
        "rid": "SV-233593r617333_rule",
        "stig_id": "CD12-00-009100",
        "fix_id": "F-36752r607003_fix",
        "cci": [
          "CCI-000381"
        ],
        "nist": [
          "CM-7 a"
        ]
      },
      "code": "  control \"V-233593\" do\n    impact 0.0\n    describe 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on' do\n      skip 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233593.rb",
        "line": 3
      },
      "id": "V-233593"
    },
    {
      "title": "Unused database components that are integrated in PostgreSQL and cannot be uninstalled must be disabled.",
      "desc": "Information systems are capable of providing a wide variety of functions and services. Some of the \n\tfunctions and services, provided by default, may not be necessary to support essential organizational operations \n\t(e.g., key missions, functions).\n\nIt is detrimental for software products to provide, or install by default, functionality exceeding requirements or \nmission objectives. \n\nPostgreSQL must adhere to the principles of least functionality by providing only essential capabilities. \n\nUnused, unnecessary PostgreSQL components increase the attack vector for PostgreSQL by introducing additional \ntargets for attack. By minimizing the services and applications installed on the system, the number of potential \nvulnerabilities is reduced. Components of the system that are unused and cannot be uninstalled must be disabled. \nThe techniques available for disabling components will vary by DBMS product, OS, and the nature of the component \nand may include DBMS configuration settings, OS service settings, OS file access security, and DBMS user/role \npermissions.",
      "descriptions": {
        "default": "Information systems are capable of providing a wide variety of functions and services. Some of the \n\tfunctions and services, provided by default, may not be necessary to support essential organizational operations \n\t(e.g., key missions, functions).\n\nIt is detrimental for software products to provide, or install by default, functionality exceeding requirements or \nmission objectives. \n\nPostgreSQL must adhere to the principles of least functionality by providing only essential capabilities. \n\nUnused, unnecessary PostgreSQL components increase the attack vector for PostgreSQL by introducing additional \ntargets for attack. By minimizing the services and applications installed on the system, the number of potential \nvulnerabilities is reduced. Components of the system that are unused and cannot be uninstalled must be disabled. \nThe techniques available for disabling components will vary by DBMS product, OS, and the nature of the component \nand may include DBMS configuration settings, OS service settings, OS file access security, and DBMS user/role \npermissions.",
        "rationale": "",
        "check": "To list all installed packages, as the system administrator, run the following:\n\n# RHEL/CENT 8 Systems\n$ sudo dnf list installed | grep postgres\n\n# RHEL/CENT 7 Systems\n$ sudo yum list installed | grep postgres\n\n# Debian Systems\n$ dpkg --get-selections | grep postgres\n\nIf any packages are installed that are not required, this is a finding.",
        "fix": "To remove any unneeded executables, as the system administrator, run the following:\n\n# RHEL/CENT Systems\n$ sudo yum erase <package_name>\n\n# Debian Systems\n$ sudo apt-get remove <package_name>"
      },
      "impact": 0,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000141-DB-000092",
        "gid": "V-233594",
        "rid": "SV-233594r617333_rule",
        "stig_id": "CD12-00-009200",
        "fix_id": "F-36753r607006_fix",
        "cci": [
          "CCI-000381"
        ],
        "nist": [
          "CM-7 a"
        ]
      },
      "code": "  control \"V-233594\" do\n    impact 0.0\n    describe 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on' do\n      skip 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233594.rb",
        "line": 3
      },
      "id": "V-233594"
    },
    {
      "title": "PostgreSQL must associate organization-defined types of security labels having organization-defined \n\tsecurity label values with information in process.",
      "desc": "Without the association of security labels to information, there is no basis for PostgreSQL to make \n\tsecurity-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects \n\tand objects) with respect to safeguarding information. \n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and \nare used to enable the implementation of access control and flow control policies, reflect special dissemination, \nhandling or distribution instructions, or support other aspects of the information security policy. \n\nOne example includes marking data as classified or FOUO. These security labels may be assigned manually or during \ndata processing, but, either way, it is imperative these assignments are maintained while the data is in storage. \nIf the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be the sepgsql feature of PostgreSQL, a third-party product, \nor custom application code.",
      "descriptions": {
        "default": "Without the association of security labels to information, there is no basis for PostgreSQL to make \n\tsecurity-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects \n\tand objects) with respect to safeguarding information. \n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and \nare used to enable the implementation of access control and flow control policies, reflect special dissemination, \nhandling or distribution instructions, or support other aspects of the information security policy. \n\nOne example includes marking data as classified or FOUO. These security labels may be assigned manually or during \ndata processing, but, either way, it is imperative these assignments are maintained while the data is in storage. \nIf the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be the sepgsql feature of PostgreSQL, a third-party product, \nor custom application code.",
        "rationale": "",
        "check": "If security labeling is not required, this is not a finding.\n\nFirst, as the database administrator (shown here as \"postgres\"), run the following SQL against each table that \nrequires security labels:\n\n$ sudo su - postgres\n$ psql -c \"d+ <schema_name>.<table_name>\"\n\nIf security labeling requirements have been specified, but the security labeling is not implemented or does not \nreliably maintain labels on information in process, this is a finding.",
        "fix": "In addition to the SQL-standard privilege system available through GRANT, tables can have row \n\tsecurity policies that restrict, on a per-user basis, which rows can be returned by normal queries or inserted, \n\tupdated, or deleted by data modification commands. This feature is also known as Row-Level Security (RLS).\n\nRLS policies can be very different depending on their use case. For one example of using RLS for Security Labels, \n\tsee supplementary content APPENDIX-D."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000313-DB-000309",
        "gid": "V-233595",
        "rid": "SV-233595r617333_rule",
        "stig_id": "CD12-00-009400",
        "fix_id": "F-36754r607009_fix",
        "cci": [
          "CCI-002263"
        ],
        "nist": [
          "AC-16 a"
        ]
      },
      "code": "  control \"V-233595\" do\n    describe 'A manual review is required to ensure PostgreSQL associates organization-defined types of security labels\n      having organization-defined security label values with information in process' do\n      skip 'A manual review is required to ensure PostgreSQL associates organization-defined types of security labels\n      having organization-defined security label values with information in process'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233595.rb",
        "line": 3
      },
      "id": "V-233595"
    },
    {
      "title": "If passwords are used for authentication, PostgreSQL must store only hashed, salted representations of \n\tpasswords.",
      "desc": "The DoD standard for authentication is DoD-approved PKI certificates.\n\nAuthentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate, \nand requires Authorizing Official (AO) approval.\n\nIn such cases, database passwords stored in clear text, using reversible encryption, or using unsalted hashes would \nbe vulnerable to unauthorized disclosure. Database passwords must always be in the form of one-way, salted hashes \nwhen stored internally or externally to PostgreSQL.",
      "descriptions": {
        "default": "The DoD standard for authentication is DoD-approved PKI certificates.\n\nAuthentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate, \nand requires Authorizing Official (AO) approval.\n\nIn such cases, database passwords stored in clear text, using reversible encryption, or using unsalted hashes would \nbe vulnerable to unauthorized disclosure. Database passwords must always be in the form of one-way, salted hashes \nwhen stored internally or externally to PostgreSQL.",
        "rationale": "",
        "check": "To check if password encryption is enabled, as the database\n    administrator (shown here as \"postgres\"), run the following SQL:\n    $ psql -c \"SHOW password_encryption\"",
        "fix": "Set password_encryption to 'on' or 'true'"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000171-DB-000074",
        "gid": "V-233596",
        "rid": "SV-233596r617333_rule",
        "stig_id": "CD12-00-009500",
        "fix_id": "F-36755r607012_fix",
        "cci": [
          "CCI-000196"
        ],
        "nist": [
          "IA-5 (1) (c)"
        ]
      },
      "code": "  control \"V-233596\" do\n    desc \"check\", \"To check if password encryption is enabled, as the database\n    administrator (shown here as \\\"postgres\\\"), run the following SQL:\n    $ psql -c \\\"SHOW password_encryption\\\" \"\n\n    desc \"fix\", \"Set password_encryption to 'on' or 'true'\"\n    \n    pg_ver = input('pg_version')\n\n    pg_dba = input('pg_dba')\n\n    pg_dba_password = input('pg_dba_password')\n\n    pg_db = input('pg_db')\n\n    pg_host = input('pg_host')\n\n    sql = postgres_session(pg_dba, pg_dba_password, pg_host, input('pg_port'))\n\n    describe sql.query('SHOW password_encryption;', [pg_db]) do\n      its('output') { should match /on|true/i }\n    end\n\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233596.rb",
        "line": 3
      },
      "id": "V-233596"
    },
    {
      "title": "PostgreSQL must enforce access restrictions associated with changes to the configuration of PostgreSQL \n\tor database(s).",
      "desc": "Failure to provide logical access restrictions associated with changes to configuration may have \n\tsignificant effects on the overall security of the system.\n\nWhen dealing with access restrictions pertaining to change control, it should be noted that any changes to the \nhardware, software, and/or firmware components of the information system can potentially have significant effects \non the overall security of the system.\n\nAccordingly, only qualified and authorized individuals should be allowed to obtain access to system components for \nthe purposes of initiating changes, including upgrades and modifications.",
      "descriptions": {
        "default": "Failure to provide logical access restrictions associated with changes to configuration may have \n\tsignificant effects on the overall security of the system.\n\nWhen dealing with access restrictions pertaining to change control, it should be noted that any changes to the \nhardware, software, and/or firmware components of the information system can potentially have significant effects \non the overall security of the system.\n\nAccordingly, only qualified and authorized individuals should be allowed to obtain access to system components for \nthe purposes of initiating changes, including upgrades and modifications.",
        "rationale": "",
        "check": "To list all the permissions of individual roles, as the database\n    administrator (shown here as \"postgres\"), run the following SQL:\n    $ psql -c \"\\du\n    If any role has SUPERUSER that should not, this is a finding.\n    Next, list all the permissions of databases and schemas by running the following SQL:\n    $ psql -c \"\\l\"\n    $ psql -c \"\\dn+\"\n    If any database or schema has update (\"W\") or create (\"C\") privileges and should\n    not, this is a finding.",
        "fix": "Configure PostgreSQL to enforce access restrictions associated with\n    changes to the configuration of PostgreSQL or database(s).\n    Use ALTER ROLE to remove accesses from roles:\n    $ psql -c \"ALTER ROLE <role_name> NOSUPERUSER\"\n    Use REVOKE to remove privileges from databases and schemas:\n    $ psql -c \"REVOKE ALL PRIVILEGES ON <table> FROM <role_name>;"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000380-DB-000360",
        "gid": "V-233597",
        "rid": "SV-233597r617333_rule",
        "stig_id": "CD12-00-009600",
        "fix_id": "F-36756r607015_fix",
        "cci": [
          "CCI-001813"
        ],
        "nist": [
          "CM-5 (1)"
        ]
      },
      "code": "  control \"V-233597\" do\n    desc \"check\", \"To list all the permissions of individual roles, as the database\n    administrator (shown here as \\\"postgres\\\"), run the following SQL:\n    $ psql -c \\\"\\\\du\n    If any role has SUPERUSER that should not, this is a finding.\n    Next, list all the permissions of databases and schemas by running the following SQL:\n    $ psql -c \\\"\\\\l\\\"\n    $ psql -c \\\"\\\\dn+\\\"\n    If any database or schema has update (\\\"W\\\") or create (\\\"C\\\") privileges and should\n    not, this is a finding.\"\n    desc \"fix\", \"Configure PostgreSQL to enforce access restrictions associated with\n    changes to the configuration of PostgreSQL or database(s).\n    Use ALTER ROLE to remove accesses from roles:\n    $ psql -c \\\"ALTER ROLE <role_name> NOSUPERUSER\\\"\n    Use REVOKE to remove privileges from databases and schemas:\n    $ psql -c \\\"REVOKE ALL PRIVILEGES ON <table> FROM <role_name>;\"\n\n    sql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n    pg_superusers = input('pg_superusers')\n    pg_db = input('pg_db')\n    pg_owner = input('pg_owner')\n\n    roles_sql = 'SELECT r.rolname FROM pg_catalog.pg_roles r;'\n    roles_query = sql.query(roles_sql, [pg_db])\n    roles = roles_query.lines\n\n    roles.each do |role|\n      unless pg_superusers.include?(role)\n        superuser_sql = \"SELECT r.rolsuper FROM pg_catalog.pg_roles r \"\\\n          \"WHERE r.rolname = '#{role}';\"\n\n        describe sql.query(superuser_sql, [pg_db]) do\n          its('output') { should_not eq 't' }\n        end\n      end\n    end\n\n    authorized_owners = pg_superusers\n    owners = authorized_owners.join('|')\n\n    database_granted_privileges = 'CTc'\n    database_public_privileges = 'c'\n    database_acl = \"^((((#{owners})=[#{database_granted_privileges}]+|\"\\\n      \"=[#{database_public_privileges}]+)\\/\\\\w+,?)+|)\\\\|\"\n    database_acl_regex = Regexp.new(database_acl)\n\n    schema_granted_privileges = 'UC'\n    schema_public_privileges = 'U'\n    schema_acl = \"^((((#{owners})=[#{schema_granted_privileges}]+|\"\\\n      \"=[#{schema_public_privileges}]+)\\/\\\\w+,?)+|)\\\\|\"\n    schema_acl_regex = Regexp.new(schema_acl)\n\n    databases_sql = 'SELECT datname FROM pg_catalog.pg_database where not datistemplate AND datname != \\'rdsadmin\\';'\n    databases_query = sql.query(databases_sql, [pg_db])\n    databases = databases_query.lines\n\n    databases.each do |database|\n      datacl_sql = \"SELECT pg_catalog.array_to_string(datacl, E','), datname \"\\\n        \"FROM pg_catalog.pg_database WHERE datname = '#{database}';\"\n\n      describe sql.query(datacl_sql, [pg_db]) do\n        its('output') { should match database_acl_regex }\n      end\n\n      schemas_sql = \"SELECT n.nspname, FROM pg_catalog.pg_namespace n \"\\\n        \"WHERE n.nspname !~ '^pg_' AND n.nspname <> 'information_schema';\"\n      schemas_query = sql.query(schemas_query, [database])\n      # Handle connection disabled on database\n      if schemas_query.methods.include?(:output)\n        schemas = schemas_query.lines\n\n        schemas.each do |schema|\n          nspacl_sql = \"SELECT pg_catalog.array_to_string(n.nspacl, E','), \"\\\n            \"n.nspname FROM pg_catalog.pg_namespace n \"\\\n            \"WHERE n.nspname = '#{schema}';\"\n\n          describe sql.query(nspacl_sql) do\n            its('output') { should match schema_acl_regex }\n          end\n        end\n      end\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233597.rb",
        "line": 3
      },
      "id": "V-233597"
    },
    {
      "title": "PostgreSQL must protect against a user falsely repudiating having performed organization-defined actions.",
      "desc": "Non-repudiation of actions taken is required in order to maintain data integrity. Examples of particular \n\tactions taken by individuals include creating information, sending a message, approving information (e.g., \n\t\tindicating concurrence or signing a contract), and receiving a message. \n\nNon-repudiation protects against later claims by a user of not having created, modified, or deleted a particular \ndata item or collection of data in the database.\n\nIn designing a database, the organization must define the types of data and the user actions that must be protected \nfrom repudiation. The implementation must then include building audit features into the application data tables, \nand configuring PostgreSQL audit tools to capture the necessary audit trail. Design and implementation must ensure \nthat applications pass individual user identification to PostgreSQL, even where the application connects to \nPostgreSQL with a standard, shared account.",
      "descriptions": {
        "default": "Non-repudiation of actions taken is required in order to maintain data integrity. Examples of particular \n\tactions taken by individuals include creating information, sending a message, approving information (e.g., \n\t\tindicating concurrence or signing a contract), and receiving a message. \n\nNon-repudiation protects against later claims by a user of not having created, modified, or deleted a particular \ndata item or collection of data in the database.\n\nIn designing a database, the organization must define the types of data and the user actions that must be protected \nfrom repudiation. The implementation must then include building audit features into the application data tables, \nand configuring PostgreSQL audit tools to capture the necessary audit trail. Design and implementation must ensure \nthat applications pass individual user identification to PostgreSQL, even where the application connects to \nPostgreSQL with a standard, shared account.",
        "rationale": "",
        "check": "First, as the database administrator, review the current\n    log_line_prefix settings by running the following SQL: \n    $ sudo su - postgres \n    $ psql -c \"SHOW log_line_prefix\" \n    If log_line_prefix does not contain at least '< %t %u %d %r %p %t >', this\n    is a finding. \n    Next, review the current shared_preload_libraries settings by running the\n    following SQL: \n    $ psql -c \"SHOW shared_preload_libraries\" \n    If shared_preload_libraries does not contain \"pgaudit\", this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER\n    environment variables. See supplementary content APPENDIX-F for instructions on\n    configuring PGDATA and APPENDIX-H for PGVER.\n    Configure the database to supply additional auditing information to protect\n    against a user falsely repudiating having performed organization-defined\n    actions. \n    Using pgaudit PostgreSQL can be configured to audit these requests. See\n    supplementary content APPENDIX-B for documentation on installing pgaudit. \n    To ensure that logging is enabled, review supplementary content APPENDIX-C for\n    instructions on enabling logging. \n    Modify the configuration of audit logs to include details identifying the\n    individual user: \n    First, as the database administrator (shown here as \"postgres\"), edit\n    postgresql.conf: \n    $ sudo su - postgres \n    $ vi ${PGDATA?}/postgresql.conf \n    Extra parameters can be added to the setting log_line_prefix to identify the\n    user: \n    log_line_prefix = '< %t %u %d %r %p %t >' \n    Now, as the system administrator, reload the server with the new configuration: \n    # SYSTEMD SERVER ONLY \n    $ sudo systemctl reload postgresql-${PGVER?}\n    # INITD SERVER ONLY \n    $ sudo service postgresql-${PGVER?} reload \n    Use accounts assigned to individual users. Where the application connects to\n    PostgreSQL using a standard, shared account, ensure that it also captures the\n    individual user identification and passes it to PostgreSQL."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000080-DB-000063",
        "gid": "V-233598",
        "rid": "SV-233598r617333_rule",
        "stig_id": "CD12-00-009700",
        "fix_id": "F-36757r607018_fix",
        "cci": [
          "CCI-000166"
        ],
        "nist": [
          "AU-10"
        ]
      },
      "code": "  control \"V-233598\" do\n    desc \"check\", \"First, as the database administrator, review the current\n    log_line_prefix settings by running the following SQL: \n    $ sudo su - postgres \n    $ psql -c \\\"SHOW log_line_prefix\\\" \n    If log_line_prefix does not contain at least '< %t %u %d %r %p %t >', this\n    is a finding. \n    Next, review the current shared_preload_libraries settings by running the\n    following SQL: \n    $ psql -c \\\"SHOW shared_preload_libraries\\\" \n    If shared_preload_libraries does not contain \\\"pgaudit\\\", this is a finding.\"\n\n    desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\n    environment variables. See supplementary content APPENDIX-F for instructions on\n    configuring PGDATA and APPENDIX-H for PGVER.\n    Configure the database to supply additional auditing information to protect\n    against a user falsely repudiating having performed organization-defined\n    actions. \n    Using pgaudit PostgreSQL can be configured to audit these requests. See\n    supplementary content APPENDIX-B for documentation on installing pgaudit. \n    To ensure that logging is enabled, review supplementary content APPENDIX-C for\n    instructions on enabling logging. \n    Modify the configuration of audit logs to include details identifying the\n    individual user: \n    First, as the database administrator (shown here as \\\"postgres\\\"), edit\n    postgresql.conf: \n    $ sudo su - postgres \n    $ vi ${PGDATA?}/postgresql.conf \n    Extra parameters can be added to the setting log_line_prefix to identify the\n    user: \n    log_line_prefix = '< %t %u %d %r %p %t >' \n    Now, as the system administrator, reload the server with the new configuration: \n    # SYSTEMD SERVER ONLY \n    $ sudo systemctl reload postgresql-${PGVER?}\n    # INITD SERVER ONLY \n    $ sudo service postgresql-${PGVER?} reload \n    Use accounts assigned to individual users. Where the application connects to\n    PostgreSQL using a standard, shared account, ensure that it also captures the\n    individual user identification and passes it to PostgreSQL.\"\n\n    pg_ver = input('pg_version')\n\n    pg_dba = input('pg_dba')\n\n    pg_dba_password = input('pg_dba_password')\n\n    pg_db = input('pg_db')\n\n    pg_host = input('pg_host')\n\n    sql = postgres_session(pg_dba, pg_dba_password, pg_host, input('pg_port'))\n\n    log_line_prefix_escapes = %w(%t %u %d %p %r)\n\n    log_line_prefix_escapes.each do |escape|\n      describe sql.query('SHOW log_line_prefix;', [pg_db]) do\n        its('output') { should include escape }\n      end\n    end\n\n    describe sql.query('SHOW shared_preload_libraries;', [pg_db]) do\n      its('output') { should include 'pgaudit' }\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233598.rb",
        "line": 3
      },
      "id": "V-233598"
    },
    {
      "title": "The system must provide a warning to appropriate support staff when allocated audit record storage \n\tvolume reaches 75 percent of maximum audit record storage capacity.",
      "desc": "Organizations are required to use a central log management system, so under normal conditions, the audit \n\tspace allocated to PostgreSQL on its own server will not be an issue. However, space will still be required on \n\tPostgreSQL server for audit records in transit, and, under abnormal conditions, this could fill up. Since a \n\trequirement exists to halt processing upon audit failure, a service outage would result.\n\nIf support personnel are not notified immediately upon storage volume utilization reaching 75 percent, they are \nunable to plan for storage capacity expansion. \n\nThe appropriate support staff include, at a minimum, the Information System Security Officer (ISSO) and the database \nadministrator (DBA)/systems administrator (SA).",
      "descriptions": {
        "default": "Organizations are required to use a central log management system, so under normal conditions, the audit \n\tspace allocated to PostgreSQL on its own server will not be an issue. However, space will still be required on \n\tPostgreSQL server for audit records in transit, and, under abnormal conditions, this could fill up. Since a \n\trequirement exists to halt processing upon audit failure, a service outage would result.\n\nIf support personnel are not notified immediately upon storage volume utilization reaching 75 percent, they are \nunable to plan for storage capacity expansion. \n\nThe appropriate support staff include, at a minimum, the Information System Security Officer (ISSO) and the database \nadministrator (DBA)/systems administrator (SA).",
        "rationale": "",
        "check": "Review system configuration.\n\nIf no script/tool is monitoring the partition for the PostgreSQL log directories, this is a finding.\n\nIf appropriate support staff are not notified immediately upon storage volume utilization reaching 75 percent, this \nis a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nConfigure the system to notify appropriate support staff immediately upon storage volume utilization reaching 75 \npercent.\n\nPostgreSQL does not monitor storage, however, it is possible to monitor storage with a script.\n\n##### Example Monitoring Script\n\n#!/bin/bash\n\nPGDATA=/var/lib/psql/${PGVER?}/data\nCURRENT=$(df ${PGDATA?} | grep / | awk '{ print $5}' | sed 's/%//g')\nTHRESHOLD=75\n\nif [ \"$CURRENT\" -gt \"$THRESHOLD\" ] ; then\nmail -s 'Disk Space Alert' mail@support.com << EOF\nThe data directory volume is almost full. Used: $CURRENT\n%EOF\nfi\n\nSchedule this script in cron to run around the clock."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000359-DB-000319",
        "gid": "V-233599",
        "rid": "SV-233599r617333_rule",
        "stig_id": "CD12-00-009900",
        "fix_id": "F-36758r607021_fix",
        "cci": [
          "CCI-001855"
        ],
        "nist": [
          "AU-5 (1)"
        ]
      },
      "code": "  control \"V-233599\" do\n    describe \"A manual review is required to ensure the system provides a warning to appropriate support staff when\n      allocated audit record storage volume reaches 75% of maximum audit record storage capacity\" do\n      skip \"A manual review is required to ensure the system provides a warning to appropriate support staff when\n      allocated audit record storage volume reaches 75% of maximum audit record storage capacity\"\n    end \n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233599.rb",
        "line": 3
      },
      "id": "V-233599"
    },
    {
      "title": "PostgreSQL must provide the means for individuals in authorized roles to change the auditing to be \n\tperformed on all application components, based on all selectable event criteria within organization-defined \n\ttime thresholds.",
      "desc": "If authorized individuals do not have the ability to modify auditing parameters in response to a \n\tchanging threat environment, the organization may not be able to effectively respond, and important forensic \n\tinformation may be lost.\n\nThis requirement enables organizations to extend or limit auditing as necessary to meet organizational requirements. \nAuditing that is limited to conserve information system resources may be extended to address certain threat \nsituations. In addition, auditing may be limited to a specific set of events to facilitate audit reduction, analysis, \nand reporting. Organizations can establish time thresholds in which audit actions are changed, for example, near real \ntime, within minutes, or within hours.",
      "descriptions": {
        "default": "If authorized individuals do not have the ability to modify auditing parameters in response to a \n\tchanging threat environment, the organization may not be able to effectively respond, and important forensic \n\tinformation may be lost.\n\nThis requirement enables organizations to extend or limit auditing as necessary to meet organizational requirements. \nAuditing that is limited to conserve information system resources may be extended to address certain threat \nsituations. In addition, auditing may be limited to a specific set of events to facilitate audit reduction, analysis, \nand reporting. Organizations can establish time thresholds in which audit actions are changed, for example, near real \ntime, within minutes, or within hours.",
        "rationale": "",
        "check": "First, as the database administrator, check if pgaudit is present in shared_preload_libraries:\n\n$ sudo su - postgres\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf pgaudit is not present in the result from the query, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA, PGLOG, and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA, APPENDIX-H for PGVER, and APPENDIX-I \n\tfor PGLOG.\n\nTo ensure logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.\n\nFor audit logging using pgaudit is recommended. For instructions on how to setup pgaudit, see supplementary content \nAPPENDIX-B.\n\nAs a superuser (postgres), any pgaudit parameter can be changed in postgresql.conf. Configurations can only be \nchanged by a superuser.\n\n### Example: Change Auditing To Log Any ROLE Statements\n\nNote: This will override any setting already configured.\n\nAlter the configuration to do role-based logging:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.log = 'role'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}\n\n### Example: Set An Auditing Role And Grant Privileges\n\nAn audit role can be configured and granted privileges to specific tables and columns that need logging.\n\n##### Create Test Table\n\n$ sudo su - postgres\n$ psql -c \"CREATE TABLE public.stig_audit_example(id INT, name TEXT, password TEXT);\"\n\n##### Define Auditing Role\n\nAs PostgreSQL superuser (such as postgres), add the following to postgresql.conf or any included configuration files.\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.role = 'auditor'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?} \n\nNext in PostgreSQL create a new role:\n\npostgres=# CREATE ROLE auditor;\npostgres=# GRANT select(password) ON public.stig_audit_example TO auditor;\n\nNote: This role is created with NOLOGIN privileges by default.\n\nNow any SELECT on the column password will be logged:\n\n$ sudo su - postgres\n$ psql -c \"SELECT password FROM public.stig_audit_example;\"\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n< 2016-01-28 16:46:09.038 UTC bob postgres: >LOG: AUDIT: OBJECT,6,1,READ,SELECT,TABLE,public.stig_audit_example,\nSELECT password FROM stig_audit_example;,<none>\n\n## Change Configurations During A Specific Timeframe\n\nDeploy PostgreSQL that allows audit configuration changes to take effect within the timeframe required by the \napplication owner and without involving actions or events that the application owner rules unacceptable.\n\nCrontab can be used to do this.\n\nFor a specific audit role:\n\n# Grant specific audit privileges to an auditing role at 5 PM every day of the week, month, year at the 0 minute mark.\n0 5 * * * postgres /usr/bin/psql -c \"GRANT select(password) ON public.stig_audit_example TO auditor;\"\n# Revoke specific audit privileges to an auditing role at 5 PM every day of the week, month, year at the 0 minute mark.\n0 17 * * * postgres /usr/bin/psql -c \"REVOKE select(password) ON public.stig_audit_example FROM auditor;\""
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000516-DB-000363",
        "gid": "V-233600",
        "rid": "SV-233600r617339_rule",
        "stig_id": "CD12-00-010000",
        "fix_id": "F-36759r617338_fix",
        "cci": [
          "CCI-001914"
        ],
        "nist": [
          "AU-12 (3)"
        ]
      },
      "code": "control\t'V-233600' do\n\ttitle\t\"PostgreSQL must provide the means for individuals in authorized roles to change the auditing to be \n\tperformed on all application components, based on all selectable event criteria within organization-defined \n\ttime thresholds.\"\n\tdesc\t\"If authorized individuals do not have the ability to modify auditing parameters in response to a \n\tchanging threat environment, the organization may not be able to effectively respond, and important forensic \n\tinformation may be lost.\n\nThis requirement enables organizations to extend or limit auditing as necessary to meet organizational requirements. \nAuditing that is limited to conserve information system resources may be extended to address certain threat \nsituations. In addition, auditing may be limited to a specific set of events to facilitate audit reduction, analysis, \nand reporting. Organizations can establish time thresholds in which audit actions are changed, for example, near real \ntime, within minutes, or within hours.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"First, as the database administrator, check if pgaudit is present in shared_preload_libraries:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW shared_preload_libraries\\\"\n\nIf pgaudit is not present in the result from the query, this is a finding.\"\n\tdesc\t'fix', \"Note: The following instructions use the PGDATA, PGLOG, and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA, APPENDIX-H for PGVER, and APPENDIX-I \n\tfor PGLOG.\n\nTo ensure logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.\n\nFor audit logging using pgaudit is recommended. For instructions on how to setup pgaudit, see supplementary content \nAPPENDIX-B.\n\nAs a superuser (postgres), any pgaudit parameter can be changed in postgresql.conf. Configurations can only be \nchanged by a superuser.\n\n### Example: Change Auditing To Log Any ROLE Statements\n\nNote: This will override any setting already configured.\n\nAlter the configuration to do role-based logging:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.log = 'role'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}\n\n### Example: Set An Auditing Role And Grant Privileges\n\nAn audit role can be configured and granted privileges to specific tables and columns that need logging.\n\n##### Create Test Table\n\n$ sudo su - postgres\n$ psql -c \\\"CREATE TABLE public.stig_audit_example(id INT, name TEXT, password TEXT);\\\"\n\n##### Define Auditing Role\n\nAs PostgreSQL superuser (such as postgres), add the following to postgresql.conf or any included configuration files.\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.role = 'auditor'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?} \n\nNext in PostgreSQL create a new role:\n\npostgres=# CREATE ROLE auditor;\npostgres=# GRANT select(password) ON public.stig_audit_example TO auditor;\n\nNote: This role is created with NOLOGIN privileges by default.\n\nNow any SELECT on the column password will be logged:\n\n$ sudo su - postgres\n$ psql -c \\\"SELECT password FROM public.stig_audit_example;\\\"\n$ cat ${PGDATA?}/${PGLOG?}/<latest_log>\n< 2016-01-28 16:46:09.038 UTC bob postgres: >LOG: AUDIT: OBJECT,6,1,READ,SELECT,TABLE,public.stig_audit_example,\nSELECT password FROM stig_audit_example;,<none>\n\n## Change Configurations During A Specific Timeframe\n\nDeploy PostgreSQL that allows audit configuration changes to take effect within the timeframe required by the \napplication owner and without involving actions or events that the application owner rules unacceptable.\n\nCrontab can be used to do this.\n\nFor a specific audit role:\n\n# Grant specific audit privileges to an auditing role at 5 PM every day of the week, month, year at the 0 minute mark.\n0 5 * * * postgres /usr/bin/psql -c \\\"GRANT select(password) ON public.stig_audit_example TO auditor;\\\"\n# Revoke specific audit privileges to an auditing role at 5 PM every day of the week, month, year at the 0 minute mark.\n0 17 * * * postgres /usr/bin/psql -c \\\"REVOKE select(password) ON public.stig_audit_example FROM auditor;\\\"\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000516-DB-000363'\n  tag gid: 'V-233600'\n  tag rid: 'SV-233600r617339_rule'\n  tag stig_id: 'CD12-00-010000'\n  tag fix_id: 'F-36759r617338_fix'\n  tag cci: [\"CCI-001914\"]\n  tag nist: [\"AU-12 (3)\"]\n\n\tsql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n\tdescribe sql.query('SHOW shared_preload_libraries;', [input('pg_db')]) do\n\t  its('output') { should include 'pgaudit' }\n\tend\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233600.rb",
        "line": 3
      },
      "id": "V-233600"
    },
    {
      "title": "PostgreSQL must require users to reauthenticate when organization-defined circumstances or situations \n\trequire reauthentication.",
      "desc": "The DoD standard for authentication of an interactive user is the presentation of a Common Access \n\tCard (CAC) or other physical token bearing a valid, current, DoD-issued Public Key Infrastructure (PKI) \n\tcertificate, coupled with a Personal Identification Number (PIN) to be entered by the user at the beginning of \n\teach session and whenever reauthentication is required.\n\nWithout reauthentication, users may access resources or perform tasks for which they do not have authorization.\n\nWhen applications provide the capability to change security roles or escalate the functional capability of the \napplication, it is critical the user re-authenticate.\n\nIn addition to the reauthentication requirements associated with session locks, organizations may require \nreauthentication of individuals and/or devices in other situations, including (but not limited to) the following \ncircumstances:\n\n(i) When authenticators change;\n(ii) When roles change;\n(iii) When security categorized information systems change;\n(iv) When the execution of privileged functions occurs;\n(v) After a fixed period of time; or\n(vi) Periodically.\n\nWithin the DoD, the minimum circumstances requiring reauthentication are privilege escalation and role changes.",
      "descriptions": {
        "default": "The DoD standard for authentication of an interactive user is the presentation of a Common Access \n\tCard (CAC) or other physical token bearing a valid, current, DoD-issued Public Key Infrastructure (PKI) \n\tcertificate, coupled with a Personal Identification Number (PIN) to be entered by the user at the beginning of \n\teach session and whenever reauthentication is required.\n\nWithout reauthentication, users may access resources or perform tasks for which they do not have authorization.\n\nWhen applications provide the capability to change security roles or escalate the functional capability of the \napplication, it is critical the user re-authenticate.\n\nIn addition to the reauthentication requirements associated with session locks, organizations may require \nreauthentication of individuals and/or devices in other situations, including (but not limited to) the following \ncircumstances:\n\n(i) When authenticators change;\n(ii) When roles change;\n(iii) When security categorized information systems change;\n(iv) When the execution of privileged functions occurs;\n(v) After a fixed period of time; or\n(vi) Periodically.\n\nWithin the DoD, the minimum circumstances requiring reauthentication are privilege escalation and role changes.",
        "rationale": "",
        "check": "Determine all situations where a user must re-authenticate. Check if the mechanisms that \n\thandle such situations use the following SQL:\n\nTo make a single user re-authenticate, the following must be present:\n\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user='<username>'\n\nTo make all users re-authenticate, run the following:\n\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user LIKE '%'\n\nIf the provided SQL does not force re-authentication, this is a finding.",
        "fix": "Modify and/or configure PostgreSQL and related applications and tools so that users are always \n\trequired to reauthenticate when changing role or escalating privileges.\n\nTo make a single user re-authenticate, the following must be present:\n\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user='<username>'\n\nTo make all users re-authenticate, the following must be present:\n\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user LIKE '%'"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000389-DB-000372",
        "gid": "V-233601",
        "rid": "SV-233601r617333_rule",
        "stig_id": "CD12-00-010100",
        "fix_id": "F-36760r607027_fix",
        "cci": [
          "CCI-002038"
        ],
        "nist": [
          "IA-11"
        ]
      },
      "code": "  control \"V-233601\" do\n    describe \"A manual review is required to ensure PostgreSQL requires users to reauthenticate when organization-defined\n      circumstances or situations require reauthentication\" do\n      skip  \"A manual review is required to ensure PostgreSQL requires users to reauthenticate when organization-defined\n      circumstances or situations require reauthentication\"\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233601.rb",
        "line": 3
      },
      "id": "V-233601"
    },
    {
      "title": "PostgreSQL must enforce authorized access to all PKI private keys stored/utilized by PostgreSQL.",
      "desc": "The DoD standard for authentication is DoD-approved PKI certificates. PKI certificate-based \n\tauthentication is performed by requiring the certificate holder to cryptographically prove possession of the \n\tcorresponding private key.\n\nIf the private key is stolen, an attacker can use the private key(s) to impersonate the certificate holder. In \ncases where PostgreSQL-stored private keys are used to authenticate PostgreSQL to the system's clients, loss of the \ncorresponding private keys would allow an attacker to successfully perform undetected man-in-the-middle attacks \nagainst PostgreSQL system and its clients.\n\nBoth the holder of a digital certificate and the issuing authority must take careful measures to protect the \ncorresponding private key. Private keys should always be generated and protected in FIPS 140-2 validated \ncryptographic modules.\n\nAll access to the private key(s) of PostgreSQL must be restricted to authorized and authenticated users. If \nunauthorized users have access to one or more of PostgreSQL's private keys, an attacker could gain access to the \nkey(s) and use them to impersonate the database on the network or otherwise perform unauthorized actions.",
      "descriptions": {
        "default": "The DoD standard for authentication is DoD-approved PKI certificates. PKI certificate-based \n\tauthentication is performed by requiring the certificate holder to cryptographically prove possession of the \n\tcorresponding private key.\n\nIf the private key is stolen, an attacker can use the private key(s) to impersonate the certificate holder. In \ncases where PostgreSQL-stored private keys are used to authenticate PostgreSQL to the system's clients, loss of the \ncorresponding private keys would allow an attacker to successfully perform undetected man-in-the-middle attacks \nagainst PostgreSQL system and its clients.\n\nBoth the holder of a digital certificate and the issuing authority must take careful measures to protect the \ncorresponding private key. Private keys should always be generated and protected in FIPS 140-2 validated \ncryptographic modules.\n\nAll access to the private key(s) of PostgreSQL must be restricted to authorized and authenticated users. If \nunauthorized users have access to one or more of PostgreSQL's private keys, an attacker could gain access to the \nkey(s) and use them to impersonate the database on the network or otherwise perform unauthorized actions.",
        "rationale": "",
        "check": "First, as the database administrator (shown here as \"postgres\"), verify the following \n\tsettings:\n\n$ sudo su - postgres\n$ psql -c \"select name,                                                         case when setting = '' then                                                                            '<undefined>'                                                                                      when substring(setting, 1, 1) = '/' then                                                               setting                                                                                            else (select setting from pg_settings where name = 'data_directory') || '/' || setting               end as setting                                                                                     from pg_settings                                                                                     where name in ('ssl_ca_file', 'ssl_cert_file', 'ssl_crl_file', 'ssl_key_file');\"\n\nIf the directory in which these files are stored is not protected, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nStore all PostgreSQL PKI private keys in a FIPS 140-2-validated cryptographic module. \n\nEnsure access to PostgreSQL PKI private keys is restricted to only authenticated and authorized users.\n\nPostgreSQL private key(s) can be stored in $PGDATA directory, which is only accessible by the database owner \n(usually postgres, DBA) user. Do not allow access to this system account to unauthorized users.\n\nTo put the keys in a different directory, as the database administrator (shown here as \"postgres\"), set the \nfollowing settings to a protected directory:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\nssl_ca_file = \"/some/protected/directory/root.crt\"\nssl_crl_file = \"/some/protected/directory/root.crl\"\nssl_cert_file = \"/some/protected/directory/server.crt\"\nssl_key_file = \"/some/protected/directory/server.key\"\n\nNow, as the system administrator, restart the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl restart postgresql-${PGVER?}\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary\ncontent APPENDIX-G."
      },
      "impact": 0,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "high",
        "gtitle": "SRG-APP-000176-DB-000068",
        "gid": "V-233602",
        "rid": "SV-233602r617333_rule",
        "stig_id": "CD12-00-010200",
        "fix_id": "F-36761r607030_fix",
        "cci": [
          "CCI-000186"
        ],
        "nist": [
          "IA-5 (2) (b)"
        ]
      },
      "code": "  control \"V-233602\" do\n    impact 0.0\n    describe 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on' do\n      skip 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233602.rb",
        "line": 3
      },
      "id": "V-233602"
    },
    {
      "title": "PostgreSQL must only accept end entity certificates issued by DoD PKI or DoD-approved PKI \n\tCertification Authorities (CAs) for the establishment of all encrypted sessions.",
      "desc": "Only DoD-approved external PKIs have been evaluated to ensure security controls and identity vetting \n\tprocedures are in place that are sufficient for DoD systems to rely on the identity asserted in the certificate. \n\tPKIs lacking sufficient security controls and identity vetting procedures risk being compromised and issuing \n\tcertificates that enable adversaries to impersonate legitimate users. \n\nThe authoritative list of DoD-approved PKIs is published at https://cyber.mil/pki-pke/interoperability\n\nThis requirement focuses on communications protection for PostgreSQL session rather than for the network packet.",
      "descriptions": {
        "default": "Only DoD-approved external PKIs have been evaluated to ensure security controls and identity vetting \n\tprocedures are in place that are sufficient for DoD systems to rely on the identity asserted in the certificate. \n\tPKIs lacking sufficient security controls and identity vetting procedures risk being compromised and issuing \n\tcertificates that enable adversaries to impersonate legitimate users. \n\nThe authoritative list of DoD-approved PKIs is published at https://cyber.mil/pki-pke/interoperability\n\nThis requirement focuses on communications protection for PostgreSQL session rather than for the network packet.",
        "rationale": "",
        "check": "As the database administrator (shown here as \"postgres\"), verify the following setting in \n\tpostgresql.conf:\n\n$ sudo su - postgres\n$ psql -c \"SHOW ssl_ca_file\"\n$ psql -c \"SHOW ssl_cert_file\"\n\nIf the database is not configured to use only DoD-approved certificates, this is a finding.",
        "fix": "Revoke trust in any certificates not issued by a DoD-approved certificate authority.\n\nConfigure PostgreSQL to accept only DoD and DoD-approved PKI end-entity certificates.\n\nTo configure PostgreSQL to accept approved CAs, see the official PostgreSQL documentation: \nhttp://www.postgresql.org/docs/current/static/ssl-tcp.html\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content APPENDIX-G."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000427-DB-000385",
        "gid": "V-233603",
        "rid": "SV-233603r617340_rule",
        "stig_id": "CD12-00-010300",
        "fix_id": "F-36762r607033_fix",
        "cci": [
          "CCI-002470"
        ],
        "nist": [
          "SC-23 (5)"
        ]
      },
      "code": "control\t'V-233603' do\n\ttitle\t\"PostgreSQL must only accept end entity certificates issued by #{input('org_name')[:acronym]} PKI or #{input('org_name')[:acronym]}-approved PKI \n\tCertification Authorities (CAs) for the establishment of all encrypted sessions.\"\n\tdesc\t\"Only #{input('org_name')[:acronym]}-approved external PKIs have been evaluated to ensure security controls and identity vetting \n\tprocedures are in place that are sufficient for #{input('org_name')[:acronym]} systems to rely on the identity asserted in the certificate. \n\tPKIs lacking sufficient security controls and identity vetting procedures risk being compromised and issuing \n\tcertificates that enable adversaries to impersonate legitimate users. \n\nThe authoritative list of #{input('org_name')[:acronym]}-approved PKIs is published at https://cyber.mil/pki-pke/interoperability\n\nThis requirement focuses on communications protection for PostgreSQL session rather than for the network packet.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"As the database administrator (shown here as \\\"postgres\\\"), verify the following setting in \n\tpostgresql.conf:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW ssl_ca_file\\\"\n$ psql -c \\\"SHOW ssl_cert_file\\\"\n\nIf the database is not configured to use only #{input('org_name')[:acronym]}-approved certificates, this is a finding.\"\n\tdesc\t'fix', \"Revoke trust in any certificates not issued by a #{input('org_name')[:acronym]}-approved certificate authority.\n\nConfigure PostgreSQL to accept only #{input('org_name')[:acronym]} and #{input('org_name')[:acronym]}-approved PKI end-entity certificates.\n\nTo configure PostgreSQL to accept approved CAs, see the official PostgreSQL documentation: \nhttp://www.postgresql.org/docs/current/static/ssl-tcp.html\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content APPENDIX-G.\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000427-DB-000385'\n  tag gid: 'V-233603'\n  tag rid: 'SV-233603r617340_rule'\n  tag stig_id: 'CD12-00-010300'\n  tag fix_id: 'F-36762r607033_fix'\n  tag cci: [\"CCI-002470\"]\n  tag nist: [\"SC-23 (5)\"]\n\n\tsql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n\tdescribe sql.query('SHOW ssl_ca_file;', [input('pg_db')]) do\n\t  its('output') { should_not eq '' }\n\tend\n  \n\tdescribe sql.query('SHOW ssl_cert_file;', [input('pg_db')]) do\n\t  its('output') { should_not eq '' }\n\tend\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233603.rb",
        "line": 3
      },
      "id": "V-233603"
    },
    {
      "title": "PostgreSQL must produce audit records containing sufficient information to establish what type of \n\tevents occurred.",
      "desc": "Information system auditing capability is critical for accurate forensic analysis. Without establishing \n\twhat type of event occurred, it would be difficult to establish, correlate, and investigate the events relating \n\tto an incident or identify those responsible for one. \n\nAudit record content that may be necessary to satisfy the requirement of this policy includes, for example, time \nstamps, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access \ncontrol or flow control rules invoked.\n\nAssociating event types with detected events in the application and audit logs provides a means of investigating an \nattack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application. \n\nDatabase software is capable of a range of actions on data stored within the database. It is important, for accurate \nforensic analysis, to know exactly what actions were performed. This requires specific information regarding the \nevent type to which an audit record refers. If event type information is not recorded and stored with the audit \nrecord, the record itself is of very limited use.",
      "descriptions": {
        "default": "Information system auditing capability is critical for accurate forensic analysis. Without establishing \n\twhat type of event occurred, it would be difficult to establish, correlate, and investigate the events relating \n\tto an incident or identify those responsible for one. \n\nAudit record content that may be necessary to satisfy the requirement of this policy includes, for example, time \nstamps, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access \ncontrol or flow control rules invoked.\n\nAssociating event types with detected events in the application and audit logs provides a means of investigating an \nattack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application. \n\nDatabase software is capable of a range of actions on data stored within the database. It is important, for accurate \nforensic analysis, to know exactly what actions were performed. This requires specific information regarding the \nevent type to which an audit record refers. If event type information is not recorded and stored with the audit \nrecord, the record itself is of very limited use.",
        "rationale": "",
        "check": "As the database administrator (shown here as \"postgres\"),\n    verify the current log_line_prefix setting:\n    $ psql -c \"SHOW log_line_prefix\"\n\n    Verify that the current settings are appropriate for the organization.\n\n    The following is what is possible for logged information:\n\n    # %a = application name\n    # %u = user name\n    # %d = database name\n    # %r = remote host and port\n    # %h = remote host\n    # %p = process ID\n    # %t = timestamp without milliseconds\n    # %m = timestamp with milliseconds\n    # %i = command tag\n    # %e = SQL state\n    # %c = session ID\n    # %l = session line number\n    # %s = session start timestamp\n    # %v = virtual transaction ID\n    # %x = transaction ID (0 if none)\n    # %q = stop here in non-session processes\n\n    If the audit record does not log events required by the organization, this is a\n    finding.\n\n    Next, verify the current settings of log_connections and log_disconnections by\n    running the following SQL:\n\n    $ psql -c \"SHOW log_connections\"\n    $ psql -c \"SHOW log_disconnections\"\n\n    If both settings are off, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER\n    environment variables. See supplementary content APPENDIX-F for instructions on\n    configuring PGDATA and APPENDIX-H for PGVER.\n\n    To ensure that logging is enabled, review supplementary content APPENDIX-C for\n    instructions on enabling logging. \n\n    If logging is enabled the following configurations must be made to log\n    connections, date/time, username and session identifier. \n\n    Edit the following parameters based on the organization's needs (minimum\n    requirements are as follows): \n\n    log_connections = on \n    log_disconnections = on \n    log_line_prefix = '< %t %u %d %p >' \n\n    Now, as the system administrator, reload the server with the new configuration"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000095-DB-000039",
        "gid": "V-233604",
        "rid": "SV-233604r617333_rule",
        "stig_id": "CD12-00-010400",
        "fix_id": "F-36763r607036_fix",
        "cci": [
          "CCI-000130"
        ],
        "nist": [
          "AU-3"
        ]
      },
      "code": "  control \"V-233604\" do\n    desc \"check\", \"As the database administrator (shown here as \\\"postgres\\\"),\n    verify the current log_line_prefix setting:\n    $ psql -c \\\"SHOW log_line_prefix\\\"\n\n    Verify that the current settings are appropriate for the organization.\n\n    The following is what is possible for logged information:\n\n    # %a = application name\n    # %u = user name\n    # %d = database name\n    # %r = remote host and port\n    # %h = remote host\n    # %p = process ID\n    # %t = timestamp without milliseconds\n    # %m = timestamp with milliseconds\n    # %i = command tag\n    # %e = SQL state\n    # %c = session ID\n    # %l = session line number\n    # %s = session start timestamp\n    # %v = virtual transaction ID\n    # %x = transaction ID (0 if none)\n    # %q = stop here in non-session processes\n\n    If the audit record does not log events required by the organization, this is a\n    finding.\n\n    Next, verify the current settings of log_connections and log_disconnections by\n    running the following SQL:\n\n    $ psql -c \\\"SHOW log_connections\\\"\n    $ psql -c \\\"SHOW log_disconnections\\\"\n\n    If both settings are off, this is a finding.\"\n\n    desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\n    environment variables. See supplementary content APPENDIX-F for instructions on\n    configuring PGDATA and APPENDIX-H for PGVER.\n\n    To ensure that logging is enabled, review supplementary content APPENDIX-C for\n    instructions on enabling logging. \n\n    If logging is enabled the following configurations must be made to log\n    connections, date/time, username and session identifier. \n\n    Edit the following parameters based on the organization's needs (minimum\n    requirements are as follows): \n\n    log_connections = on \n    log_disconnections = on \n    log_line_prefix = '< %t %u %d %p >' \n\n    Now, as the system administrator, reload the server with the new configuration\"\n\n    pg_ver = input('pg_version')\n\n    pg_dba = input('pg_dba')\n\n    pg_dba_password = input('pg_dba_password')\n\n    pg_db = input('pg_db')\n\n    pg_host = input('pg_host')\n\n    sql = postgres_session(pg_dba, pg_dba_password, pg_host, input('pg_port'))\n\n    log_line_prefix_escapes = %w(%t %u %d %p)\n    log_line_prefix_escapes.each do |escape|\n      describe sql.query('SHOW log_line_prefix;', [pg_db]) do\n        its('output') { should include escape }\n      end\n    end\n\n    describe sql.query('SHOW log_connections;', [pg_db]) do\n      its('output') { should_not match /off|false/i }\n    end\n\n    describe sql.query('SHOW log_disconnections;', [pg_db]) do\n      its('output') { should_not match /off|false/i }\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233604.rb",
        "line": 3
      },
      "id": "V-233604"
    },
    {
      "title": "PostgreSQL must implement cryptographic mechanisms preventing the unauthorized disclosure of \n\torganization-defined information at rest on organization-defined information system components.",
      "desc": "PostgreSQLs handling data requiring data-at-rest protections must employ cryptographic mechanisms to \n\tprevent unauthorized disclosure and modification of the information at rest. These cryptographic mechanisms may \n\tbe native to PostgreSQL or implemented via additional software or operating system/file system settings, as \n\tappropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. \nThe strength of the mechanism is commensurate with the security category and/or classification of the information. \nOrganizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) \nor encrypt specific data structures (e.g., files, records, or fields). \n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures \ntaken to secure the equipment and media on which the information resides.",
      "descriptions": {
        "default": "PostgreSQLs handling data requiring data-at-rest protections must employ cryptographic mechanisms to \n\tprevent unauthorized disclosure and modification of the information at rest. These cryptographic mechanisms may \n\tbe native to PostgreSQL or implemented via additional software or operating system/file system settings, as \n\tappropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. \nThe strength of the mechanism is commensurate with the security category and/or classification of the information. \nOrganizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) \nor encrypt specific data structures (e.g., files, records, or fields). \n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures \ntaken to secure the equipment and media on which the information resides.",
        "rationale": "",
        "check": "To check if pgcrypto is installed on PostgreSQL, as a database administrator (shown here as \n\t\"postgres\"), run the following command:\n\n$ sudo su - postgres\n$ psql -c \"SELECT * FROM pg_available_extensions where name='pgcrypto'\"\n\nIf data in the database requires encryption and pgcrypto is not available, this is a finding.\n\nIf a disk or filesystem requires encryption, ask the system owner, DBA, and SA to demonstrate the use of filesystem \nand/or disk-level encryption. If this is required and is not found, this is a finding.",
        "fix": "Configure PostgreSQL, operating system/file system, and additional software as relevant, to \n\tprovide the required level of cryptographic protection for information requiring cryptographic protection \n\tagainst disclosure.\n\nSecure the premises, equipment, and media to provide the required level of physical protection.\n\nThe pgcrypto module provides cryptographic functions for PostgreSQL. See supplementary content APPENDIX-E for \ndocumentation on installing pgcrypto.\n\nWith pgcrypto installed, it is possible to insert encrypted data into the database:\n\nINSERT INTO accounts(username, password) VALUES ('bob', crypt('mypass', gen_salt('bf', 4));"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000429-DB-000387",
        "gid": "V-233605",
        "rid": "SV-233605r617333_rule",
        "stig_id": "CD12-00-010500",
        "fix_id": "F-36764r607039_fix",
        "cci": [
          "CCI-002476"
        ],
        "nist": [
          "SC-28 (1)"
        ]
      },
      "code": "control\t'V-233605' do\n\ttitle\t\"PostgreSQL must implement cryptographic mechanisms preventing the unauthorized disclosure of \n\torganization-defined information at rest on organization-defined information system components.\"\n\tdesc\t\"PostgreSQLs handling data requiring data-at-rest protections must employ cryptographic mechanisms to \n\tprevent unauthorized disclosure and modification of the information at rest. These cryptographic mechanisms may \n\tbe native to PostgreSQL or implemented via additional software or operating system/file system settings, as \n\tappropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. \nThe strength of the mechanism is commensurate with the security category and/or classification of the information. \nOrganizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) \nor encrypt specific data structures (e.g., files, records, or fields). \n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures \ntaken to secure the equipment and media on which the information resides.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"To check if pgcrypto is installed on PostgreSQL, as a database administrator (shown here as \n\t\\\"postgres\\\"), run the following command:\n\n$ sudo su - postgres\n$ psql -c \\\"SELECT * FROM pg_available_extensions where name='pgcrypto'\\\"\n\nIf data in the database requires encryption and pgcrypto is not available, this is a finding.\n\nIf a disk or filesystem requires encryption, ask the system owner, DBA, and SA to demonstrate the use of filesystem \nand/or disk-level encryption. If this is required and is not found, this is a finding.\"\n\tdesc\t'fix', \"Configure PostgreSQL, operating system/file system, and additional software as relevant, to \n\tprovide the required level of cryptographic protection for information requiring cryptographic protection \n\tagainst disclosure.\n\nSecure the premises, equipment, and media to provide the required level of physical protection.\n\nThe pgcrypto module provides cryptographic functions for PostgreSQL. See supplementary content APPENDIX-E for \ndocumentation on installing pgcrypto.\n\nWith pgcrypto installed, it is possible to insert encrypted data into the database:\n\nINSERT INTO accounts(username, password) VALUES ('bob', crypt('mypass', gen_salt('bf', 4));\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000429-DB-000387'\n  tag gid: 'V-233605'\n  tag rid: 'SV-233605r617333_rule'\n  tag stig_id: 'CD12-00-010500'\n  tag fix_id: 'F-36764r607039_fix'\n  tag cci: [\"CCI-002476\"]\n  tag nist: [\"SC-28 (1)\"]\n\n\tsql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n\tpgcrypto_sql = \"SELECT * FROM pg_available_extensions where name='pgcrypto'\"\n  \n\tdescribe sql.query(pgcrypto_sql, [input('pg_db')]) do\n\t  its('output') { should_not eq '' }\n\tend\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233605.rb",
        "line": 3
      },
      "id": "V-233605"
    },
    {
      "title": "PostgreSQL must invalidate session identifiers upon user logout or other session termination.",
      "desc": "Captured sessions can be reused in \"replay\" attacks. This requirement limits the ability of \n\tadversaries to capture and continue to employ previously valid session IDs.\n\nThis requirement focuses on communications protection for PostgreSQL session rather than for the network packet. \nThe intent of this control is to establish grounds for confidence at each end of a communications session in the \nongoing identity of the other party and in the validity of the information being transmitted. \n\nSession IDs are tokens generated by PostgreSQLs to uniquely identify a user's (or process's) session. DBMSs will \nmake access decisions and execute logic based on the session ID.\n\nUnique session IDs help to reduce predictability of said identifiers. Unique session IDs address man-in-the-middle \nattacks, including session hijacking or insertion of false information into a session. If the attacker is unable to \nidentify or guess the session information related to pending application traffic, they will have more difficulty in \nhijacking the session or otherwise manipulating valid sessions. \n\nWhen a user logs out, or when any other session termination event occurs, PostgreSQL must terminate the user \nsession(s) to minimize the potential for sessions to be hijacked.",
      "descriptions": {
        "default": "Captured sessions can be reused in \"replay\" attacks. This requirement limits the ability of \n\tadversaries to capture and continue to employ previously valid session IDs.\n\nThis requirement focuses on communications protection for PostgreSQL session rather than for the network packet. \nThe intent of this control is to establish grounds for confidence at each end of a communications session in the \nongoing identity of the other party and in the validity of the information being transmitted. \n\nSession IDs are tokens generated by PostgreSQLs to uniquely identify a user's (or process's) session. DBMSs will \nmake access decisions and execute logic based on the session ID.\n\nUnique session IDs help to reduce predictability of said identifiers. Unique session IDs address man-in-the-middle \nattacks, including session hijacking or insertion of false information into a session. If the attacker is unable to \nidentify or guess the session information related to pending application traffic, they will have more difficulty in \nhijacking the session or otherwise manipulating valid sessions. \n\nWhen a user logs out, or when any other session termination event occurs, PostgreSQL must terminate the user \nsession(s) to minimize the potential for sessions to be hijacked.",
        "rationale": "",
        "check": "As the database administrator (shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW tcp_keepalives_idle\"\n$ psql -c \"SHOW tcp_keepalives_interval\"\n$ psql -c \"SHOW tcp_keepalives_count\"\n$ psql -c \"SHOW statement_timeout\"\n\nIf these settings are not set to something other than zero, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nAs the database administrator (shown here as \"postgres\"), edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi $PGDATA/postgresql.conf\n\nSet the following parameters to organizational requirements:\n\nstatement_timeout = 10000 #milliseconds\ntcp_keepalives_idle = 10 # seconds\ntcp_keepalives_interval = 10 # seconds\ntcp_keepalives_count = 10\n\nNow, as the system administrator, restart the server with the new configuration:\n\n$ sudo systemctl restart postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000220-DB-000149",
        "gid": "V-233606",
        "rid": "SV-233606r617333_rule",
        "stig_id": "CD12-00-010600",
        "fix_id": "F-36765r607042_fix",
        "cci": [
          "CCI-001185"
        ],
        "nist": [
          "SC-23 (1)"
        ]
      },
      "code": "control\t'V-233606' do\n\ttitle\t\"PostgreSQL must invalidate session identifiers upon user logout or other session termination.\"\n\tdesc\t\"Captured sessions can be reused in \\\"replay\\\" attacks. This requirement limits the ability of \n\tadversaries to capture and continue to employ previously valid session IDs.\n\nThis requirement focuses on communications protection for PostgreSQL session rather than for the network packet. \nThe intent of this control is to establish grounds for confidence at each end of a communications session in the \nongoing identity of the other party and in the validity of the information being transmitted. \n\nSession IDs are tokens generated by PostgreSQLs to uniquely identify a user's (or process's) session. DBMSs will \nmake access decisions and execute logic based on the session ID.\n\nUnique session IDs help to reduce predictability of said identifiers. Unique session IDs address man-in-the-middle \nattacks, including session hijacking or insertion of false information into a session. If the attacker is unable to \nidentify or guess the session information related to pending application traffic, they will have more difficulty in \nhijacking the session or otherwise manipulating valid sessions. \n\nWhen a user logs out, or when any other session termination event occurs, PostgreSQL must terminate the user \nsession(s) to minimize the potential for sessions to be hijacked.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"As the database administrator (shown here as \\\"postgres\\\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW tcp_keepalives_idle\\\"\n$ psql -c \\\"SHOW tcp_keepalives_interval\\\"\n$ psql -c \\\"SHOW tcp_keepalives_count\\\"\n$ psql -c \\\"SHOW statement_timeout\\\"\n\nIf these settings are not set to something other than zero, this is a finding.\"\n\tdesc\t'fix', \"Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nAs the database administrator (shown here as \\\"postgres\\\"), edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi $PGDATA/postgresql.conf\n\nSet the following parameters to organizational requirements:\n\nstatement_timeout = 10000 #milliseconds\ntcp_keepalives_idle = 10 # seconds\ntcp_keepalives_interval = 10 # seconds\ntcp_keepalives_count = 10\n\nNow, as the system administrator, restart the server with the new configuration:\n\n$ sudo systemctl restart postgresql-${PGVER?}\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000220-DB-000149'\n  tag gid: 'V-233606'\n  tag rid: 'SV-233606r617333_rule'\n  tag stig_id: 'CD12-00-010600'\n  tag fix_id: 'F-36765r607042_fix'\n  tag cci: [\"CCI-001185\"]\n  tag nist: [\"SC-23 (1)\"]\n\n\tsql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n\tdescribe sql.query('SHOW tcp_keepalives_idle;', [input('pg_db')]) do\n\t  its('output') { should_not cmp 0 }\n\tend\n  \n\tdescribe sql.query('SHOW tcp_keepalives_interval;', [input('pg_db')]) do\n\t  its('output') { should_not cmp 0 }\n\tend\n  \n\tdescribe sql.query('SHOW tcp_keepalives_count;', [input('pg_db')]) do\n\t  its('output') { should_not cmp 0 }\n\tend\n  \n\tdescribe sql.query('SHOW statement_timeout;', [input('pg_db')]) do\n\t  its('output') { should_not cmp 0 }\n\tend\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233606.rb",
        "line": 3
      },
      "id": "V-233606"
    },
    {
      "title": "PostgreSQL must protect its audit features from unauthorized access.",
      "desc": "Protecting audit data also includes identifying and protecting the tools used to view and manipulate \n\tlog data. \n\nDepending upon the log format and application, system and application log tools may provide the only means to \nmanipulate and manage application and system log data. It is, therefore, imperative that access to audit tools be \ncontrolled and protected from unauthorized access. \n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the \nuser accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the \naccess to audit tools.\n\nAudit tools include, but are not limited to, OS-provided audit tools, vendor-provided audit tools, and open source \naudit tools needed to successfully view and manipulate audit information system activity and records. \n\nIf an attacker were to gain access to audit tools, he could analyze audit logs for system weaknesses or weaknesses \nin the auditing itself. An attacker could also manipulate logs to hide evidence of malicious activity.",
      "descriptions": {
        "default": "Protecting audit data also includes identifying and protecting the tools used to view and manipulate \n\tlog data. \n\nDepending upon the log format and application, system and application log tools may provide the only means to \nmanipulate and manage application and system log data. It is, therefore, imperative that access to audit tools be \ncontrolled and protected from unauthorized access. \n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the \nuser accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the \naccess to audit tools.\n\nAudit tools include, but are not limited to, OS-provided audit tools, vendor-provided audit tools, and open source \naudit tools needed to successfully view and manipulate audit information system activity and records. \n\nIf an attacker were to gain access to audit tools, he could analyze audit logs for system weaknesses or weaknesses \nin the auditing itself. An attacker could also manipulate logs to hide evidence of malicious activity.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA, APPENDIX-H for PGVER, and APPENDIX-I \n\tfor PGLOG. Only the database owner and superuser can alter configuration of PostgreSQL.\n\nEnsure the PGLOG directory is owned by postgres user and group:\n\n$ sudo su - postgres\n$ ls -la ${PGLOG?} \n\nIf PGLOG is not owned by the database owner, this is a finding. \n\nEnsure the data directory is owned by postgres user and group. \n\n$ sudo su - postgres\n$ ls -la ${PGDATA?}\n\nIf PGDATA is not owned by the database owner, this is a finding.\n\nEnsure pgaudit installation is owned by root:\n\n$ sudo su - postgres\n$ ls -la /usr/pgsql-${PGVER?}/share/contrib/pgaudit\n\nIf pgaudit installation is not owned by root, this is a finding.\n\nNext, as the database administrator (shown here as \"postgres\"), run the following SQL to list all roles and their \nprivileges:\n\n$ sudo su - postgres\n$ psql -x -c \"du\"\n\nIf any role has \"superuser\" that should not, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA, APPENDIX-H for PGVER and APPENDIX-I \n\tfor PGLOG.\n\nIf PGLOG or PGDATA are not owned by postgres user and group, configure them as follows: \n\n$ sudo chown -R postgres:postgres ${PGDATA?}\n$ sudo chown -R postgres:postgres ${PGLOG?}\n\nIf the pgaudit installation is not owned by root user and group, configure it as follows:\n\n$ sudo chown -R root:root /usr/pgsql-${PGVER?}/share/contrib/pgaudit\n\nTo remove superuser from a role, as the database administrator (shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"ALTER ROLE <role-name> WITH NOSUPERUSER\""
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000121-DB-000202",
        "gid": "V-233607",
        "rid": "SV-233607r617333_rule",
        "stig_id": "CD12-00-010700",
        "fix_id": "F-36766r607045_fix",
        "cci": [
          "CCI-001493"
        ],
        "nist": [
          "AU-9"
        ]
      },
      "code": "  control \"V-233607\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233607.rb",
        "line": 3
      },
      "id": "V-233607"
    },
    {
      "title": "PostgreSQL must produce audit records containing time stamps to establish when the events occurred.",
      "desc": "Information system auditing capability is critical for accurate forensic analysis. Without establishing \nwhen events occurred, it is impossible to establish, correlate, and investigate the events relating to an incident.\n\nIn order to compile an accurate risk assessment and provide forensic analysis, it is essential for security personnel \nto know the date and time when events occurred.\n\nAssociating the date and time with detected events in the application and audit logs provides a means of \ninvestigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly \nconfigured application. \n\nDatabase software is capable of a range of actions on data stored within the database. It is important, for accurate \nforensic analysis, to know exactly when specific actions were performed. This requires the date and time to which an \naudit record refers. If date and time information is not recorded and stored with the audit record, the record itself \nis of very limited use.",
      "descriptions": {
        "default": "Information system auditing capability is critical for accurate forensic analysis. Without establishing \nwhen events occurred, it is impossible to establish, correlate, and investigate the events relating to an incident.\n\nIn order to compile an accurate risk assessment and provide forensic analysis, it is essential for security personnel \nto know the date and time when events occurred.\n\nAssociating the date and time with detected events in the application and audit logs provides a means of \ninvestigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly \nconfigured application. \n\nDatabase software is capable of a range of actions on data stored within the database. It is important, for accurate \nforensic analysis, to know exactly when specific actions were performed. This requires the date and time to which an \naudit record refers. If date and time information is not recorded and stored with the audit record, the record itself \nis of very limited use.",
        "rationale": "",
        "check": "As the database administrator (usually postgres), run the\n    following SQL: \n    $ psql -c \"SHOW log_line_prefix\" \n    If the query result does not contain \"%t\", this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER\n    environment variables. See supplementary content APPENDIX-F for instructions on\n    configuring PGDATA and APPENDIX-H for PGVER.\n    Logging must be enabled in order to capture timestamps. To ensure that logging\n    is enabled, review supplementary content APPENDIX-C for instructions on\n    enabling logging. \n    If logging is enabled the following configurations must be made to log events\n    with timestamps: \n\n    Add %m to log_line_prefix to enable timestamps with milliseconds: \n    log_line_prefix = '< %t >' \n    Now, as the system administrator, reload the server with the new configuration"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000096-DB-000040",
        "gid": "V-233608",
        "rid": "SV-233608r617333_rule",
        "stig_id": "CD12-00-011100",
        "fix_id": "F-36767r607048_fix",
        "cci": [
          "CCI-000131"
        ],
        "nist": [
          "AU-3"
        ]
      },
      "code": "  control \"V-233608\" do\n    desc \"check\", \"As the database administrator (usually postgres), run the\n    following SQL: \n    $ psql -c \\\"SHOW log_line_prefix\\\" \n    If the query result does not contain \\\"%t\\\", this is a finding.\"\n\n    desc \"fix\", \"Note: The following instructions use the PGDATA and PGVER\n    environment variables. See supplementary content APPENDIX-F for instructions on\n    configuring PGDATA and APPENDIX-H for PGVER.\n    Logging must be enabled in order to capture timestamps. To ensure that logging\n    is enabled, review supplementary content APPENDIX-C for instructions on\n    enabling logging. \n    If logging is enabled the following configurations must be made to log events\n    with timestamps: \n\n    Add %m to log_line_prefix to enable timestamps with milliseconds: \n    log_line_prefix = '< %t >' \n    Now, as the system administrator, reload the server with the new configuration\"\n\n    pg_ver = input('pg_version')\n\n    pg_dba = input('pg_dba')\n\n    pg_dba_password = input('pg_dba_password')\n\n    pg_db = input('pg_db')\n\n    pg_host = input('pg_host')\n\n    sql = postgres_session(pg_dba, pg_dba_password, pg_host, input('pg_port'))\n\n    log_line_prefix_escapes = ['%t']\n\n    log_line_prefix_escapes.each do |escape|\n      describe sql.query('SHOW log_line_prefix;', [pg_db]) do\n        its('output') { should include escape }\n      end\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233608.rb",
        "line": 3
      },
      "id": "V-233608"
    },
    {
      "title": "PostgreSQL must protect its audit features from unauthorized removal.",
      "desc": "Protecting audit data also includes identifying and protecting the tools used to view and manipulate \n\tlog data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the \nuser accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the \ndeletion of audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view \nand manipulate audit information system activity and records. Audit tools include custom queries and report generators.",
      "descriptions": {
        "default": "Protecting audit data also includes identifying and protecting the tools used to view and manipulate \n\tlog data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the \nuser accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the \ndeletion of audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view \nand manipulate audit information system activity and records. Audit tools include custom queries and report generators.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nAs the database administrator (shown here as \"postgres\"), verify the permissions of PGDATA: \n\n$ sudo su - postgres \n$ ls -la ${PGDATA?} \n\nIf PGDATA is not owned by postgres:postgres or if files can be accessed by others, this is a finding. \n\nAs the system administrator, verify the permissions of pgsql shared objects and compiled binaries: \n\n$ ls -la /usr/pgsql-${PGVER?}/bin\n$ ls -la /usr/pgsql-${PGVER?}/include\n$ ls -la /usr/pgsql-${PGVER?}/lib\n$ ls -la /usr/pgsql-${PGVER?}/share \n\nIf any of these are not owned by root:root, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nAs the system administrator, change the permissions of PGDATA: \n\n$ sudo chown -R postgres:postgres ${PGDATA?} \n$ sudo chmod 700 ${PGDATA?} \n\nAs the system administrator, change the permissions of pgsql: \n\n$ sudo chown -R root:root /usr/pgsql-${PGVER?}"
      },
      "impact": 0,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000123-DB-000204",
        "gid": "V-233609",
        "rid": "SV-233609r617333_rule",
        "stig_id": "CD12-00-011200",
        "fix_id": "F-36768r607051_fix",
        "cci": [
          "CCI-001495"
        ],
        "nist": [
          "AU-9"
        ]
      },
      "code": "  control \"V-233609\" do\n    impact 0.0\n    describe 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on' do\n      skip 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233609.rb",
        "line": 3
      },
      "id": "V-233609"
    },
    {
      "title": "PostgreSQL must off-load audit data to a separate log management facility; this must be continuous \n\tand in near real time for systems with a network connection to the storage facility and weekly or more often \n\tfor stand-alone systems.",
      "desc": "Information stored in one location is vulnerable to accidental or incidental deletion or alteration.\n\nOff-loading is a common process in information systems with limited audit storage capacity. \n\nPostgreSQL may write audit records to database tables, to files in the file system, to other kinds of local \nrepository, or directly to a centralized log management system. Whatever the method used, it must be compatible \nwith off-loading the records to the centralized system.",
      "descriptions": {
        "default": "Information stored in one location is vulnerable to accidental or incidental deletion or alteration.\n\nOff-loading is a common process in information systems with limited audit storage capacity. \n\nPostgreSQL may write audit records to database tables, to files in the file system, to other kinds of local \nrepository, or directly to a centralized log management system. Whatever the method used, it must be compatible \nwith off-loading the records to the centralized system.",
        "rationale": "",
        "check": "First, as the database administrator (shown here as \"postgres\"), ensure PostgreSQL uses \n\tsyslog by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_destination\"\n\nIf log_destination is not syslog, this is a finding.\n\nNext, as the database administrator, check which log facility is configured by running the following SQL:\n\n$ psql -c \"SHOW syslog_facility\" \n\nCheck with the organization to see how syslog facilities are defined in their organization.\n\nIf the wrong facility is configured, this is a finding.\n\nIf PostgreSQL does not have a continuous network connection to the centralized log management system, and \nPostgreSQL audit records are not transferred to the centralized log management system weekly or more often, this is \na finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nConfigure PostgreSQL or deploy and configure software tools to transfer audit records to a centralized log management \nsystem, continuously and in near-real time where a continuous network connection to the log management system exists, \nor at least weekly in the absence of such a connection.\n\nTo ensure logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.\n\nWith logging enabled, as the database administrator (shown here as \"postgres\"), configure the following parameters \nin postgresql.conf (the example uses the default values - tailor for environment):\n\nNote: Consult the organization on how syslog facilities are defined in the syslog daemon configuration.\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\nlog_destination = 'syslog'\nsyslog_facility = 'LOCAL0'\nsyslog_ident = 'postgres'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000515-DB-000318",
        "gid": "V-233610",
        "rid": "SV-233610r617333_rule",
        "stig_id": "CD12-00-011300",
        "fix_id": "F-36769r607054_fix",
        "cci": [
          "CCI-001851"
        ],
        "nist": [
          "AU-4 (1)"
        ]
      },
      "code": "  control \"V-233610\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233610.rb",
        "line": 3
      },
      "id": "V-233610"
    },
    {
      "title": "PostgreSQL must maintain the authenticity of communications sessions by guarding against \n\tman-in-the-middle attacks that guess at Session ID values.",
      "desc": "One class of man-in-the-middle, or session hijacking, attack involves the adversary guessing at valid \n\tsession identifiers based on patterns in identifiers already known.\n\nThe preferred technique for thwarting guesses at Session IDs is the generation of unique session identifiers using a \nFIPS 140-2 approved random number generator.\n\nHowever, it is recognized that available PostgreSQL products do not all implement the preferred technique yet may \n\thave other protections against session hijacking. Therefore, other techniques are acceptable, provided they are demonstrated to be effective.",
      "descriptions": {
        "default": "One class of man-in-the-middle, or session hijacking, attack involves the adversary guessing at valid \n\tsession identifiers based on patterns in identifiers already known.\n\nThe preferred technique for thwarting guesses at Session IDs is the generation of unique session identifiers using a \nFIPS 140-2 approved random number generator.\n\nHowever, it is recognized that available PostgreSQL products do not all implement the preferred technique yet may \n\thave other protections against session hijacking. Therefore, other techniques are acceptable, provided they are demonstrated to be effective.",
        "rationale": "",
        "check": "To check if PostgreSQL is configured to use ssl, as the database administrator (shown here as \n\t\"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW ssl\"\n\nIf this is not set to on, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo configure PostgreSQL to use SSL, as a database owner (shown here as \"postgres\"), edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameter:\n\nssl = on\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}\n\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content APPENDIX-G.\n\nFor further SSL configurations, see the official documentation: \nhttps://www.postgresql.org/docs/current/static/ssl-tcp.html"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000224-DB-000384",
        "gid": "V-233611",
        "rid": "SV-233611r617333_rule",
        "stig_id": "CD12-00-011400",
        "fix_id": "F-36770r607057_fix",
        "cci": [
          "CCI-001188"
        ],
        "nist": [
          "SC-23 (3)"
        ]
      },
      "code": "control\t'V-233611' do\n\ttitle\t\"PostgreSQL must maintain the authenticity of communications sessions by guarding against \n\tman-in-the-middle attacks that guess at Session ID values.\"\n\tdesc\t\"One class of man-in-the-middle, or session hijacking, attack involves the adversary guessing at valid \n\tsession identifiers based on patterns in identifiers already known.\n\nThe preferred technique for thwarting guesses at Session IDs is the generation of unique session identifiers using a \nFIPS 140-2 approved random number generator.\n\nHowever, it is recognized that available PostgreSQL products do not all implement the preferred technique yet may \n\thave other protections against session hijacking. Therefore, other techniques are acceptable, provided they are demonstrated to be effective.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"To check if PostgreSQL is configured to use ssl, as the database administrator (shown here as \n\t\\\"postgres\\\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW ssl\\\"\n\nIf this is not set to on, this is a finding.\"\n\tdesc\t'fix', \"Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo configure PostgreSQL to use SSL, as a database owner (shown here as \\\"postgres\\\"), edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameter:\n\nssl = on\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}\n\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content APPENDIX-G.\n\nFor further SSL configurations, see the official documentation: \nhttps://www.postgresql.org/docs/current/static/ssl-tcp.html\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000224-DB-000384'\n  tag gid: 'V-233611'\n  tag rid: 'SV-233611r617333_rule'\n  tag stig_id: 'CD12-00-011400'\n  tag fix_id: 'F-36770r607057_fix'\n  tag cci: [\"CCI-001188\"]\n  tag nist: [\"SC-23 (3)\"]\n\n\tsql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n\tdescribe sql.query('SHOW ssl;', [input('pg_db')]) do\n\t  its('output') { should match /on|true/i }\n\tend\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233611.rb",
        "line": 3
      },
      "id": "V-233611"
    },
    {
      "title": "PostgreSQL must uniquely identify and authenticate organizational users (or processes acting on behalf \n\tof organizational users).",
      "desc": "To ensure accountability and prevent unauthenticated access, organizational users must be identified \n\tand authenticated to prevent potential misuse and compromise of the system. \n\nOrganizational users include organizational employees or individuals the organization deems to have equivalent status \nof employees (e.g., contractors). Organizational users (and any processes acting on behalf of users) must be uniquely \nidentified and authenticated for all accesses, except the following:\n\n(i) Accesses explicitly identified and documented by the organization. Organizations document specific user actions \nthat can be performed on the information system without identification or authentication; and \n(ii) Accesses that occur through authorized use of group authenticators without individual authentication. \nOrganizations may require unique identification of individuals using shared accounts, for detailed accountability of \nindividual activity.",
      "descriptions": {
        "default": "To ensure accountability and prevent unauthenticated access, organizational users must be identified \n\tand authenticated to prevent potential misuse and compromise of the system. \n\nOrganizational users include organizational employees or individuals the organization deems to have equivalent status \nof employees (e.g., contractors). Organizational users (and any processes acting on behalf of users) must be uniquely \nidentified and authenticated for all accesses, except the following:\n\n(i) Accesses explicitly identified and documented by the organization. Organizations document specific user actions \nthat can be performed on the information system without identification or authentication; and \n(ii) Accesses that occur through authorized use of group authenticators without individual authentication. \nOrganizations may require unique identification of individuals using shared accounts, for detailed accountability of \nindividual activity.",
        "rationale": "",
        "check": "Review PostgreSQL settings to determine whether organizational users\n    are uniquely identified and authenticated when logging on/connecting to the system.\n    To list all roles in the database, as the database administrator (shown here as\n    \"postgres\"), run the following SQL:\n    $ psql -c \"\\du\"\n    If organizational users are not uniquely identified and authenticated, this is a\n    finding.",
        "fix": "Note: The following instructions use the PGDATA environment variable.\n    See supplementary content APPENDIX-F for instructions on configuring PGDATA.\n    Configure PostgreSQL settings to uniquely identify and authenticate all\n    organizational users who log on/connect to the system.\n    To create roles, use the following SQL:\n    CREATE ROLE <role_name> [OPTIONS]\n    For more information on CREATE ROLE, see the official documentation:\n    https://www.postgresql.org/docs/current/static/sql-createrole.html"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000148-DB-000103",
        "gid": "V-233612",
        "rid": "SV-233612r617333_rule",
        "stig_id": "CD12-00-011500",
        "fix_id": "F-36771r607060_fix",
        "cci": [
          "CCI-000764"
        ],
        "nist": [
          "IA-2"
        ]
      },
      "code": "  control \"V-233612\" do\n    desc \"check\", \"Review PostgreSQL settings to determine whether organizational users\n    are uniquely identified and authenticated when logging on/connecting to the system.\n    To list all roles in the database, as the database administrator (shown here as\n    \\\"postgres\\\"), run the following SQL:\n    $ psql -c \\\"\\\\du\\\"\n    If organizational users are not uniquely identified and authenticated, this is a\n    finding.\"\n\n    desc \"fix\", \"Note: The following instructions use the PGDATA environment variable.\n    See supplementary content APPENDIX-F for instructions on configuring PGDATA.\n    Configure PostgreSQL settings to uniquely identify and authenticate all\n    organizational users who log on/connect to the system.\n    To create roles, use the following SQL:\n    CREATE ROLE <role_name> [OPTIONS]\n    For more information on CREATE ROLE, see the official documentation:\n    https://www.postgresql.org/docs/current/static/sql-createrole.html\"\n\n    sql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n    pg_users = input('pg_users')\n    pg_db = input('pg_db')\n\n    authorized_roles = pg_users\n\n    roles_sql = 'SELECT r.rolname FROM pg_catalog.pg_roles r;'\n\n    describe sql.query(roles_sql, [pg_db]) do\n      its('lines.sort') { should cmp authorized_roles.sort}\n    end\n\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233612.rb",
        "line": 3
      },
      "id": "V-233612"
    },
    {
      "title": "PostgreSQL must automatically terminate a user session after organization-defined conditions or \n\ttrigger events requiring session disconnect.",
      "desc": "This addresses the termination of user-initiated logical sessions in contrast to the termination of \n\tnetwork connections that are associated with communications sessions (i.e., network disconnect). A logical \n\tsession (for local, network, and remote access) is initiated whenever a user (or process acting on behalf of a \n\t\tuser) accesses an organizational information system. Such user sessions can be terminated (and thus terminate \n\t\t\tuser access) without terminating network sessions. \n\nSession termination ends all processes associated with a user's logical session except those batch processes/jobs \nthat are specifically created by the user (i.e., session owner) to continue after the session is terminated. \n\nConditions or trigger events requiring automatic session termination can include, for example, organization-defined \nperiods of user inactivity, targeted responses to certain types of incidents, and time-of-day restrictions on \ninformation system use.\n\nThis capability is typically reserved for specific cases where the system owner, data owner, or organization requires \nadditional assurance.",
      "descriptions": {
        "default": "This addresses the termination of user-initiated logical sessions in contrast to the termination of \n\tnetwork connections that are associated with communications sessions (i.e., network disconnect). A logical \n\tsession (for local, network, and remote access) is initiated whenever a user (or process acting on behalf of a \n\t\tuser) accesses an organizational information system. Such user sessions can be terminated (and thus terminate \n\t\t\tuser access) without terminating network sessions. \n\nSession termination ends all processes associated with a user's logical session except those batch processes/jobs \nthat are specifically created by the user (i.e., session owner) to continue after the session is terminated. \n\nConditions or trigger events requiring automatic session termination can include, for example, organization-defined \nperiods of user inactivity, targeted responses to certain types of incidents, and time-of-day restrictions on \ninformation system use.\n\nThis capability is typically reserved for specific cases where the system owner, data owner, or organization requires \nadditional assurance.",
        "rationale": "",
        "check": "Review system documentation to obtain the organization's definition of circumstances requiring \n\tautomatic session termination. If the documentation explicitly states that such termination is not required or \n\tis prohibited, this is not a finding.\n\nIf the documentation requires automatic session termination, but PostgreSQL is not configured accordingly, this is a \nfinding.",
        "fix": "Configure PostgreSQL to automatically terminate a user session after organization-defined \n\tconditions or trigger events requiring session termination.\n\nExamples follow.\n\n### Change a role to nologin and disconnect the user\n\nALTER ROLE '<username>' NOLOGIN;\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE usename='<usename>';\n\n### Disconnecting users during a specific time range\nSee supplementary content APPENDIX-A for a bash script for this example.\n\nThe script found in APPENDIX-A using the -l command can disable all users with rolcanlogin=t from logging in. \nThe script keeps track of who it disables in a .restore_login file. After the specified time is over, the same \nscript can be run with the -r command to restore all login connections.\n\nThis script would be added to a cron job:\n\n# lock at 5 am every day of the week, month, year at the 0 minute mark.\n0 5 * * * postgres /var/lib/pgsql/no_login.sh -d postgres -l\n# restore at 5 pm every day of the week, month, year at the 0 minute mark.\n0 17 * * * postgres /var/lib/pgsql/no_login.sh -d postgres -r"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000295-DB-000305",
        "gid": "V-233613",
        "rid": "SV-233613r617333_rule",
        "stig_id": "CD12-00-011600",
        "fix_id": "F-36772r607063_fix",
        "cci": [
          "CCI-002361"
        ],
        "nist": [
          "AC-12"
        ]
      },
      "code": "  control \"V-233613\" do\n    describe 'A manual review is required to ensure PostgreSQ automatically terminates a user session after\n      organization-defined conditions or trigger events requiring session disconnect' do\n      skip 'A manual review is required to ensure PostgreSQ automatically terminates a user session after\n      organization-defined conditions or trigger events requiring session disconnect'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233613.rb",
        "line": 3
      },
      "id": "V-233613"
    },
    {
      "title": "PostgreSQL must prevent non-privileged users from executing privileged functions, to include disabling, \n\tcircumventing, or altering implemented security safeguards/countermeasures.",
      "desc": "Preventing non-privileged users from executing privileged functions mitigates the risk that unauthorized \n\tindividuals or processes may gain unnecessary access to information or privileges. \n\nSystem documentation should include a definition of the functionality considered privileged.\n\nDepending on circumstances, privileged functions can include, for example, establishing accounts, performing system \nintegrity checks, or administering cryptographic key management activities. Non-privileged users are individuals \nthat do not possess appropriate authorizations. Circumventing intrusion detection and prevention mechanisms or \n\tmalicious code protection mechanisms are examples of privileged functions that require protection from \n\tnon-privileged users.\n\nA privileged function in PostgreSQL/database context is any operation that modifies the structure of the database, \nits built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and \nall security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to: \n\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as \nprivileged. Possible examples include:\n\nTRUNCATE TABLE;\nDELETE, or\nDELETE affecting more than n rows, for some n, or\nDELETE without a WHERE clause;\n\nUPDATE or\nUPDATE affecting more than n rows, for some n, or\nUPDATE without a WHERE clause;\n\nany SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security \nprincipal.\n\nDepending on the capabilities of PostgreSQL and the design of the database and associated applications, the \nprevention of unauthorized use of privileged functions may be achieved by means of DBMS security features, database \ntriggers, other mechanisms, or a combination of these.\n\nHowever, the use of procedural languages within PostgreSQL, such as pl/R and pl/Python, introduce security risk. \nAny user on the PostgreSQL who is granted access to pl/R or pl/Python is able to run UDFs to escalate privileges \nand perform unintended functions. Procedural languages such as pl/Perl and pl/Java have \"untrusted\" mode of \noperation, which do not allow a non-privileged PostgreSQL user to escalate privileges or perform actions as a \n\tdatabase administrator.",
      "descriptions": {
        "default": "Preventing non-privileged users from executing privileged functions mitigates the risk that unauthorized \n\tindividuals or processes may gain unnecessary access to information or privileges. \n\nSystem documentation should include a definition of the functionality considered privileged.\n\nDepending on circumstances, privileged functions can include, for example, establishing accounts, performing system \nintegrity checks, or administering cryptographic key management activities. Non-privileged users are individuals \nthat do not possess appropriate authorizations. Circumventing intrusion detection and prevention mechanisms or \n\tmalicious code protection mechanisms are examples of privileged functions that require protection from \n\tnon-privileged users.\n\nA privileged function in PostgreSQL/database context is any operation that modifies the structure of the database, \nits built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and \nall security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to: \n\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as \nprivileged. Possible examples include:\n\nTRUNCATE TABLE;\nDELETE, or\nDELETE affecting more than n rows, for some n, or\nDELETE without a WHERE clause;\n\nUPDATE or\nUPDATE affecting more than n rows, for some n, or\nUPDATE without a WHERE clause;\n\nany SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security \nprincipal.\n\nDepending on the capabilities of PostgreSQL and the design of the database and associated applications, the \nprevention of unauthorized use of privileged functions may be achieved by means of DBMS security features, database \ntriggers, other mechanisms, or a combination of these.\n\nHowever, the use of procedural languages within PostgreSQL, such as pl/R and pl/Python, introduce security risk. \nAny user on the PostgreSQL who is granted access to pl/R or pl/Python is able to run UDFs to escalate privileges \nand perform unintended functions. Procedural languages such as pl/Perl and pl/Java have \"untrusted\" mode of \noperation, which do not allow a non-privileged PostgreSQL user to escalate privileges or perform actions as a \n\tdatabase administrator.",
        "rationale": "",
        "check": "Review the system documentation to obtain the definition of the PostgreSQL functionality \n\tconsidered privileged in the context of the system in question.\n\nReview the PostgreSQL security configuration and/or other means used to protect privileged functionality from \nunauthorized use.\n\nIf the configuration does not protect all of the actions defined as privileged, this is a finding.\n\nIf PostgreSQL instance uses procedural languages, such as pl/Python or pl/R, without Authorizing Official (AO) \nauthorization, this is a finding.",
        "fix": "Configure PostgreSQL security to protect all privileged functionality. \n\nIf pl/R and pl/Python are used, document their intended use, document users that have access to pl/R and pl/Python, \nas well as their business use case, such as data-analytics or data-mining. Because of the risks associated with \n\tusing pl/R and pl/Python, their use must have AO risk acceptance.\n\nTo remove unwanted extensions, use:\n\nDROP EXTENSION <extension_name>\n\nTo remove unwanted privileges from a role, use the REVOKE command. \n\nSee the PostgreSQL documentation for more details:\nhttp://www.postgresql.org/docs/current/static/sql-revoke.html."
      },
      "impact": 0.7,
      "refs": [],
      "tags": {
        "severity": "high",
        "gtitle": "SRG-APP-000340-DB-000304",
        "gid": "V-233614",
        "rid": "SV-233614r617333_rule",
        "stig_id": "CD12-00-011700",
        "fix_id": "F-36773r607066_fix",
        "cci": [
          "CCI-002235"
        ],
        "nist": [
          "AC-6 (10)"
        ]
      },
      "code": "control\t'V-233614' do\n\ttitle\t\"PostgreSQL must prevent non-privileged users from executing privileged functions, to include disabling, \n\tcircumventing, or altering implemented security safeguards/countermeasures.\"\n\tdesc\t\"Preventing non-privileged users from executing privileged functions mitigates the risk that unauthorized \n\tindividuals or processes may gain unnecessary access to information or privileges. \n\nSystem documentation should include a definition of the functionality considered privileged.\n\nDepending on circumstances, privileged functions can include, for example, establishing accounts, performing system \nintegrity checks, or administering cryptographic key management activities. Non-privileged users are individuals \nthat do not possess appropriate authorizations. Circumventing intrusion detection and prevention mechanisms or \n\tmalicious code protection mechanisms are examples of privileged functions that require protection from \n\tnon-privileged users.\n\nA privileged function in PostgreSQL/database context is any operation that modifies the structure of the database, \nits built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and \nall security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to: \n\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as \nprivileged. Possible examples include:\n\nTRUNCATE TABLE;\nDELETE, or\nDELETE affecting more than n rows, for some n, or\nDELETE without a WHERE clause;\n\nUPDATE or\nUPDATE affecting more than n rows, for some n, or\nUPDATE without a WHERE clause;\n\nany SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security \nprincipal.\n\nDepending on the capabilities of PostgreSQL and the design of the database and associated applications, the \nprevention of unauthorized use of privileged functions may be achieved by means of DBMS security features, database \ntriggers, other mechanisms, or a combination of these.\n\nHowever, the use of procedural languages within PostgreSQL, such as pl/R and pl/Python, introduce security risk. \nAny user on the PostgreSQL who is granted access to pl/R or pl/Python is able to run UDFs to escalate privileges \nand perform unintended functions. Procedural languages such as pl/Perl and pl/Java have \\\"untrusted\\\" mode of \noperation, which do not allow a non-privileged PostgreSQL user to escalate privileges or perform actions as a \n\tdatabase administrator.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"Review the system documentation to obtain the definition of the PostgreSQL functionality \n\tconsidered privileged in the context of the system in question.\n\nReview the PostgreSQL security configuration and/or other means used to protect privileged functionality from \nunauthorized use.\n\nIf the configuration does not protect all of the actions defined as privileged, this is a finding.\n\nIf PostgreSQL instance uses procedural languages, such as pl/Python or pl/R, without Authorizing Official (AO) \nauthorization, this is a finding.\"\n\tdesc\t'fix', \"Configure PostgreSQL security to protect all privileged functionality. \n\nIf pl/R and pl/Python are used, document their intended use, document users that have access to pl/R and pl/Python, \nas well as their business use case, such as data-analytics or data-mining. Because of the risks associated with \n\tusing pl/R and pl/Python, their use must have AO risk acceptance.\n\nTo remove unwanted extensions, use:\n\nDROP EXTENSION <extension_name>\n\nTo remove unwanted privileges from a role, use the REVOKE command. \n\nSee the PostgreSQL documentation for more details:\nhttp://www.postgresql.org/docs/current/static/sql-revoke.html.\"\n  impact 0.7\n\ttag severity: 'high'\n  tag gtitle: 'SRG-APP-000340-DB-000304'\n  tag gid: 'V-233614'\n  tag rid: 'SV-233614r617333_rule'\n  tag stig_id: 'CD12-00-011700'\n  tag fix_id: 'F-36773r607066_fix'\n  tag cci: [\"CCI-002235\"]\n  tag nist: [\"AC-6 (10)\"]\n\n\tdescribe \"Review the system documentation to obtain the definition of the PostgreSQL functionality considered privileged in the context of the system in question.\" do\n\t\tskip \"If the configuration does not protect all of the actions defined as privileged, this is a finding.\"\n\t\tskip \"If PostgreSQL instance uses procedural languages, such as pl/Python or pl/R, without AO authorization, this is a finding.\"\n\t\tend\n\t  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233614.rb",
        "line": 3
      },
      "id": "V-233614"
    },
    {
      "title": "PostgreSQL must map the PKI-authenticated identity to an associated user account.",
      "desc": "The DoD standard for authentication is DoD-approved PKI certificates. Once a PKI certificate has been \n\tvalidated, it must be mapped to PostgreSQL user account for the authenticated identity to be meaningful to \n\tPostgreSQL and useful for authorization decisions.",
      "descriptions": {
        "default": "The DoD standard for authentication is DoD-approved PKI certificates. Once a PKI certificate has been \n\tvalidated, it must be mapped to PostgreSQL user account for the authenticated identity to be meaningful to \n\tPostgreSQL and useful for authorization decisions.",
        "rationale": "",
        "check": "The Common Name (cn) attribute of the certificate will be compared to the requested database \n\tuser name and, if they match, the login will be allowed. \n\nTo check the cn of the certificate, using openssl, do the following:\n\n$ openssl x509 -noout -subject -in client_cert\n\nIf the cn does not match the users listed in PostgreSQL and no user mapping is used, this is a finding.\n\nUser name mapping can be used to allow cn to be different from the database user name. If User Name Maps are used, \nrun the following as the database administrator (shown here as \"postgres\"), to get a list of maps used for \nauthentication:\n\n$ sudo su - postgres\n$ grep \"map\" ${PGDATA?}/pg_hba.conf\n\nWith the names of the maps used, check those maps against the user name mappings in pg_ident.conf:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/pg_ident.conf\n\nIf user accounts are not being mapped to authenticated identities, this is a finding.\n\nIf the cn and the username mapping do not match, this is a finding.",
        "fix": "Configure PostgreSQL to map authenticated identities directly to PostgreSQL user accounts.\n\nFor information on configuring PostgreSQL to use SSL, see supplementary content APPENDIX-G."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000177-DB-000069",
        "gid": "V-233615",
        "rid": "SV-233615r617333_rule",
        "stig_id": "CD12-00-011800",
        "fix_id": "F-36774r607069_fix",
        "cci": [
          "CCI-000187"
        ],
        "nist": [
          "IA-5 (2) (c)"
        ]
      },
      "code": "  control \"V-233615\" do\n    describe 'A manual review is required to ensure PostgreSQL maps the PKI-authenticated identity to an associated user\n      account' do \n      skip 'A manual review is required to ensure PostgreSQL maps the PKI-authenticated identity to an associated user\n      account'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233615.rb",
        "line": 3
      },
      "id": "V-233615"
    },
    {
      "title": "Database contents must be protected from unauthorized and unintended information transfer by enforcement \n\tof a data-transfer policy.",
      "desc": "Applications, including PostgreSQL, must prevent unauthorized and unintended information transfer via \n\tshared system resources.\n\nData used for the development and testing of applications often involves copying data from production. It is \nimportant that specific procedures exist for this process, to include the conditions under which such transfer may \ntake place, where the copies may reside, and the rules for ensuring sensitive data are not exposed.\n\nCopies of sensitive data must not be misplaced or left in a temporary location without the proper controls.",
      "descriptions": {
        "default": "Applications, including PostgreSQL, must prevent unauthorized and unintended information transfer via \n\tshared system resources.\n\nData used for the development and testing of applications often involves copying data from production. It is \nimportant that specific procedures exist for this process, to include the conditions under which such transfer may \ntake place, where the copies may reside, and the rules for ensuring sensitive data are not exposed.\n\nCopies of sensitive data must not be misplaced or left in a temporary location without the proper controls.",
        "rationale": "",
        "check": "Review the procedures for the refreshing of development/test data from production.\n\nReview any scripts or code that exists for the movement of production data to development/test systems, or to any \nother location or for any other purpose.\n\nVerify that copies of production data are not left in unprotected locations. \n\nIf the code that exists for data movement does not comply with the organization-defined data transfer policy and/or \nfails to remove any copies of production data from unprotected locations, this is a finding.",
        "fix": "Modify any code used for moving data from production to development/test systems to comply with \n\tthe organization-defined data transfer policy, and to ensure copies of production data are not left in unsecured \n\tlocations."
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000243-DB-000128",
        "gid": "V-233616",
        "rid": "SV-233616r617333_rule",
        "stig_id": "CD12-00-011900",
        "fix_id": "F-36775r607072_fix",
        "cci": [
          "CCI-001090"
        ],
        "nist": [
          "SC-4"
        ]
      },
      "code": "  control \"V-233616\" do\n    describe 'A manual review is required to ensure the database contents are protected from unauthorized and unintended\n      information transfer by enforcement of a data-transfer policy' do\n      skip 'A manual review is required to ensure the database contents are protected from unauthorized and unintended\n      information transfer by enforcement of a data-transfer policy'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233616.rb",
        "line": 3
      },
      "id": "V-233616"
    },
    {
      "title": "Access to database files must be limited to relevant processes and to authorized, administrative users.",
      "desc": "Applications, including PostgreSQL, must prevent unauthorized and unintended information transfer \n\tvia shared system resources. Permitting only DBMS processes and authorized, administrative users to have access \n\tto the files where the database resides helps ensure that those files are not shared inappropriately and are not \n\topen to backdoor access and manipulation.",
      "descriptions": {
        "default": "Applications, including PostgreSQL, must prevent unauthorized and unintended information transfer \n\tvia shared system resources. Permitting only DBMS processes and authorized, administrative users to have access \n\tto the files where the database resides helps ensure that those files are not shared inappropriately and are not \n\topen to backdoor access and manipulation.",
        "rationale": "",
        "check": "Note: The following instructions use the PGDATA environment variable. See supplementary content \n\tAPPENDIX-F for instructions on configuring PGDATA.\n\nReview the permissions granted to users by the operating system/file system on the database files, database log \nfiles and database backup files. \n\nTo verify that all files are owned by the database administrator and have the correct permissions, run the following \nas the database administrator (shown here as \"postgres\"):\n\n$ sudo su - postgres\n$ ls -lR ${PGDATA?}\n\nIf any files are not owned by the database administrator or allow anyone but the database administrator to \nread/write/execute, this is a finding.\n\nIf any user/role that is not an authorized system administrator with a need-to-know or database administrator with a \nneed-to-know, or a system account for running PostgreSQL processes, is permitted to read/view any of these files, \nthis is a finding.",
        "fix": "Note: The following instructions use the PGDATA environment variable. See supplementary content \n\tAPPENDIX-F for instructions on configuring PGDATA.\n\nConfigure the permissions granted by the operating system/file system on the database files, database log files, and \ndatabase backup files so that only relevant system accounts and authorized system administrators and database \nadministrators with a need to know are permitted to read/view these files.\n\nAny files (for example: extra configuration files) created in ${PGDATA?} must be owned by the database administrator, \nwith only owner permissions to read, write, and execute."
      },
      "impact": 0,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000243-DB-000374",
        "gid": "V-233617",
        "rid": "SV-233617r617333_rule",
        "stig_id": "CD12-00-012000",
        "fix_id": "F-36776r607075_fix",
        "cci": [
          "CCI-001090"
        ],
        "nist": [
          "SC-4"
        ]
      },
      "code": "  control \"V-233617\" do\n    impact 0.0\n    describe 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on' do\n      skip 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233617.rb",
        "line": 3
      },
      "id": "V-233617"
    },
    {
      "title": "PostgreSQL must protect its audit configuration from unauthorized modification.",
      "desc": "Protecting audit data also includes identifying and protecting the tools used to view and manipulate \n\tlog data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the \nuser accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the \nmodification of audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view \nand manipulate audit information system activity and records. Audit tools include custom queries and report generators.",
      "descriptions": {
        "default": "Protecting audit data also includes identifying and protecting the tools used to view and manipulate \n\tlog data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the \nuser accessing the tools and the corresponding rights the user enjoys in order make access decisions regarding the \nmodification of audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view \nand manipulate audit information system activity and records. Audit tools include custom queries and report generators.",
        "rationale": "",
        "check": "All configurations for auditing and logging can be found in the postgresql.conf configuration \n\tfile. By default, this file is owned by the database administrator account. \n\nTo check that the permissions of the postgresql.conf are owned by the database administrator with permissions of \n0600, run the following as the database administrator (shown here as \"postgres\"):\n\n$ sudo su - postgres\n$ ls -la ${PGDATA?}\n\nIf postgresql.conf is not owned by the database administrator or does not have 0600 permissions, this is a finding.\n\n#### stderr Logging\n\nTo check that logs are created with 0600 permissions, check the following setting:\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_file_mode\"\n\nIf permissions are not 0600, this is a finding.\n\n#### syslog Logging\n\nIf PostgreSQL is configured to use syslog, verify that the logs are owned by root and have 0600 permissions. If they \nare not, this is a finding.",
        "fix": "Apply or modify access controls and permissions (both within PostgreSQL and in the file \n\tsystem/operating system) to tools used to view or modify audit log data. Tools must be configurable by authorized \n\tpersonnel only.\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\nlog_file_mode = 0600\n\nNext, as the database administrator (shown here as \"postgres\"), change the ownership and permissions of \nconfiguration files in PGDATA:\n\n$ sudo su - postgres\n$ chown postgres:postgres ${PGDATA?}/*.conf\n$ chmod 0600 ${PGDATA?}/*.conf"
      },
      "impact": 0,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000122-DB-000203",
        "gid": "V-233618",
        "rid": "SV-233618r617333_rule",
        "stig_id": "CD12-00-012200",
        "fix_id": "F-36777r607078_fix",
        "cci": [
          "CCI-001494"
        ],
        "nist": [
          "AU-9"
        ]
      },
      "code": "  control \"V-233618\" do\n    impact 0.0\n    describe 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on' do\n      skip 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233618.rb",
        "line": 3
      },
      "id": "V-233618"
    },
    {
      "title": "PostgreSQL must use NIST FIPS 140-2 validated cryptographic modules for cryptographic operations.",
      "desc": "Use of weak or not validated cryptographic algorithms undermines the purposes of utilizing encryption \n\tand digital signatures to protect data. Weak algorithms can be easily broken and not validated cryptographic \n\tmodules may not implement algorithms correctly. Unapproved cryptographic modules or algorithms should not be \n\trelied on for authentication, confidentiality, or integrity. Weak cryptography could allow an attacker to gain \n\taccess to and modify data stored in the database as well as the administration settings of the DBMS.\n\nApplications, including DBMSs, utilizing cryptography are required to use approved NIST FIPS 140-2 validated \ncryptographic modules that meet the requirements of applicable federal laws, Executive Orders, directives, policies, \nregulations, standards, and guidance.\n\nThe security functions validated as part of FIPS 140-2 for cryptographic modules are described in FIPS 140-2 Annex A.\n\nNSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based encryption modules.",
      "descriptions": {
        "default": "Use of weak or not validated cryptographic algorithms undermines the purposes of utilizing encryption \n\tand digital signatures to protect data. Weak algorithms can be easily broken and not validated cryptographic \n\tmodules may not implement algorithms correctly. Unapproved cryptographic modules or algorithms should not be \n\trelied on for authentication, confidentiality, or integrity. Weak cryptography could allow an attacker to gain \n\taccess to and modify data stored in the database as well as the administration settings of the DBMS.\n\nApplications, including DBMSs, utilizing cryptography are required to use approved NIST FIPS 140-2 validated \ncryptographic modules that meet the requirements of applicable federal laws, Executive Orders, directives, policies, \nregulations, standards, and guidance.\n\nThe security functions validated as part of FIPS 140-2 for cryptographic modules are described in FIPS 140-2 Annex A.\n\nNSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based encryption modules.",
        "rationale": "",
        "check": "As the system administrator, run the following:\n\n$ openssl version\n\nIf \"fips\" is not included in the OpenSSL version, this is a finding.",
        "fix": "Configure OpenSSL to meet FIPS Compliance using the following documentation in section 9.1:\n\nhttp://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140sp/140sp1758.pdf\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary\ncontent APPENDIX-G."
      },
      "impact": 0,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "high",
        "gtitle": "SRG-APP-000179-DB-000114",
        "gid": "V-233619",
        "rid": "SV-233619r617333_rule",
        "stig_id": "CD12-00-012300",
        "fix_id": "F-36778r607081_fix",
        "cci": [
          "CCI-000803"
        ],
        "nist": [
          "IA-7"
        ]
      },
      "code": "  control \"V-233619\" do\n    impact 0.0\n    describe 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on' do\n      skip 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233619.rb",
        "line": 3
      },
      "id": "V-233619"
    },
    {
      "title": "Audit records must be generated when categorized information (e.g., classification levels/security \n\tlevels) is deleted.",
      "desc": "Changes in categorized information must be tracked. Without an audit trail, unauthorized access to \n\tprotected data could go undetected.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security \nCategorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security \nRequirements for Federal Information and Information Systems.",
      "descriptions": {
        "default": "Changes in categorized information must be tracked. Without an audit trail, unauthorized access to \n\tprotected data could go undetected.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security \nCategorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security \nRequirements for Federal Information and Information Systems.",
        "rationale": "",
        "check": "As the database administrator, verify pgaudit is enabled by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf the output does not contain \"pgaudit\", this is a finding.\n\nVerify that role, read, write, and ddl auditing are enabled:\n\n$ psql -c \"SHOW pgaudit.log\"\n\nIf the output does not contain role, read, write, and ddl, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo ensure logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.\n\nUsing pgaudit PostgreSQL can be configured to audit these requests. See supplementary content APPENDIX-B for \ndocumentation on installing pgaudit.\n\nWith pgaudit installed, the following configurations can be made:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.log='ddl, role, read, write'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000502-DB-000348",
        "gid": "V-233620",
        "rid": "SV-233620r617333_rule",
        "stig_id": "CD12-00-012500",
        "fix_id": "F-36779r607084_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233620\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233620.rb",
        "line": 3
      },
      "id": "V-233620"
    },
    {
      "title": "PostgreSQL must generate audit records when successful accesses to objects occur.",
      "desc": "Without tracking all or selected types of access to all or selected objects (tables, views, procedures, \n\tfunctions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an \n\tincident, or identify those responsible for one.\n\nIn a SQL environment, types of access include, but are not necessarily limited to:\n\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE",
      "descriptions": {
        "default": "Without tracking all or selected types of access to all or selected objects (tables, views, procedures, \n\tfunctions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an \n\tincident, or identify those responsible for one.\n\nIn a SQL environment, types of access include, but are not necessarily limited to:\n\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE",
        "rationale": "",
        "check": "As the database administrator, verify pgaudit is enabled by running the following SQL: \n\n$ sudo su - postgres \n$ psql -c \"SHOW shared_preload_libraries\" \n\nIf the output does not contain \"pgaudit\", this is a finding. \n\nVerify that role, read, write, and ddl auditing are enabled: \n\n$ psql -c \"SHOW pgaudit.log\" \n\nIf the output does not contain role, read, write, and ddl, this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER. To ensure \n\tlogging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging. \n\nIf logging is enabled, the following configurations must be made to log unsuccessful connections, date/time, \nusername, and session identifier. \n\nAs the database administrator (shown here as \"postgres\"), edit postgresql.conf: \n\n$ sudo su - postgres \n$ vi ${PGDATA?}/postgresql.conf \n\nEdit the following parameters: \n\nlog_connections = on \nlog_line_prefix = '< %m %u %c: >' \npgaudit.log = 'read, write' \n\nWhere: \n* %m is the time and date \n* %u is the username \n* %c is the session ID for the connection \n\nAs the system administrator, reload the server with the new configuration: \n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000507-DB-000356",
        "gid": "V-233621",
        "rid": "SV-233621r617333_rule",
        "stig_id": "CD12-00-012600",
        "fix_id": "F-36780r607087_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "  control \"V-233621\" do\n    describe 'Requires manual review of the RDS audit log system at this time.' do\n      skip 'Requires manual review of the RDS audit log system at this time.'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233621.rb",
        "line": 3
      },
      "id": "V-233621"
    },
    {
      "title": "PostgreSQL must generate audit records for all direct access to the database(s).",
      "desc": "In this context, direct access is any query, command, or call to the DBMS that comes from any source \n\tother than the application(s) that it supports. Examples would be the command line or a database management \n\tutility program. The intent is to capture all activity from administrative and non-standard sources.",
      "descriptions": {
        "default": "In this context, direct access is any query, command, or call to the DBMS that comes from any source \n\tother than the application(s) that it supports. Examples would be the command line or a database management \n\tutility program. The intent is to capture all activity from administrative and non-standard sources.",
        "rationale": "",
        "check": "As the database administrator, verify pgaudit is enabled by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf the output does not contain \"pgaudit\", this is a finding.\n\nVerify that connections and disconnections are being logged by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_connections\"\n$ psql -c \"SHOW log_disconnections\"\n\nIf the output does not contain \"on\", this is a finding.",
        "fix": "Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo ensure logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.\n\nUsing pgaudit, PostgreSQL can be configured to audit these requests. See supplementary content APPENDIX-B for \ndocumentation on installing pgaudit.\n\nWith pgaudit installed, the following configurations should be made:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.log='ddl, role, read, write'\nlog_connections='on'\nlog_disconnections='on'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000508-DB-000358",
        "gid": "V-233622",
        "rid": "SV-233622r617333_rule",
        "stig_id": "CD12-00-012700",
        "fix_id": "F-36781r607090_fix",
        "cci": [
          "CCI-000172"
        ],
        "nist": [
          "AU-12 c"
        ]
      },
      "code": "control\t'V-233622' do\n\ttitle\t\"PostgreSQL must generate audit records for all direct access to the database(s).\"\n\tdesc\t\"In this context, direct access is any query, command, or call to the DBMS that comes from any source \n\tother than the application(s) that it supports. Examples would be the command line or a database management \n\tutility program. The intent is to capture all activity from administrative and non-standard sources.\"\n\tdesc\t'rationale', ''\n\tdesc\t'check', \"As the database administrator, verify pgaudit is enabled by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW shared_preload_libraries\\\"\n\nIf the output does not contain \\\"pgaudit\\\", this is a finding.\n\nVerify that connections and disconnections are being logged by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW log_connections\\\"\n$ psql -c \\\"SHOW log_disconnections\\\"\n\nIf the output does not contain \\\"on\\\", this is a finding.\"\n\tdesc\t'fix', \"Note: The following instructions use the PGDATA and PGVER environment variables. See \n\tsupplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\n\nTo ensure logging is enabled, review supplementary content APPENDIX-C for instructions on enabling logging.\n\nUsing pgaudit, PostgreSQL can be configured to audit these requests. See supplementary content APPENDIX-B for \ndocumentation on installing pgaudit.\n\nWith pgaudit installed, the following configurations should be made:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.log='ddl, role, read, write'\nlog_connections='on'\nlog_disconnections='on'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n$ sudo systemctl reload postgresql-${PGVER?}\"\n\timpact 0.5\n\ttag severity: 'medium'\n  tag gtitle: 'SRG-APP-000508-DB-000358'\n  tag gid: 'V-233622'\n  tag rid: 'SV-233622r617333_rule'\n  tag stig_id: 'CD12-00-012700'\n  tag fix_id: 'F-36781r607090_fix'\n  tag cci: [\"CCI-000172\"]\n  tag nist: [\"AU-12 c\"]\n\n  \n\tsql = postgres_session(input('pg_dba'), input('pg_dba_password'), input('pg_host'), input('pg_port'))\n\n\tdescribe sql.query('SHOW shared_preload_libraries;', [input('pg_db')]) do\n\t  its('output') { should include 'pgaudit' }\n\tend\n  \n\tdescribe sql.query('SHOW log_connections;', [input('pg_db')]) do\n\t  its('output') { should match /on|true/i }\n\tend\n  \n\tdescribe sql.query('SHOW log_disconnections;', [input('pg_db')]) do\n\t  its('output') { should match /on|true/i }\n\tend\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233622.rb",
        "line": 3
      },
      "id": "V-233622"
    },
    {
      "title": "The DBMS must be configured on a platform that has a NIST certified FIPS 140-2 installation of OpenSSL.",
      "desc": "fixInstall PostgreSQL with FIPS-compliant cryptography enabled on an OS found in\nthe CMVP\n(https://csrc.nist.gov/projects/cryptographic-module-validation-program/validated-modules)\nor by other means, ensure that FIPS 140-2-certified OpenSSL libraries are used\nby the DBMS.",
      "descriptions": {
        "default": "fixInstall PostgreSQL with FIPS-compliant cryptography enabled on an OS found in\nthe CMVP\n(https://csrc.nist.gov/projects/cryptographic-module-validation-program/validated-modules)\nor by other means, ensure that FIPS 140-2-certified OpenSSL libraries are used\nby the DBMS.",
        "rationale": "",
        "check": "If the deployment incorporates a custom build of the operating system and PostgreSQL \n\tguaranteeing the use of FIPS 140-2- compliant OpenSSL, this is not a finding. \n\nIf PostgreSQL is not installed on an OS found in the CMVP \n(https://csrc.nist.gov/projects/cryptographic-module-validation-program/validated-modules), this is a finding. \n\nIf FIPS encryption is not enabled, this is a finding."
      },
      "impact": 0,
      "refs": [
        {
          "ref": []
        }
      ],
      "tags": {
        "severity": "high",
        "gtitle": "SRG-APP-000179-DB-000114",
        "gid": "V-233623",
        "rid": "SV-233623r617333_rule",
        "stig_id": "CD12-00-012800",
        "fix_id": "F-36782r607093_fix",
        "cci": [
          "CCI-000803"
        ],
        "nist": [
          "IA-7"
        ]
      },
      "code": "  control \"V-233623\" do\n    impact 0.0\n    describe 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on' do\n      skip 'This control is not applicable on postgres within aws rds, as aws manages the operating system in which the postgres database is running on'\n    end\n  end\n",
      "source_location": {
        "ref": "crunchy-data-postgresql-stig-baseline-main/controls/V-233623.rb",
        "line": 3
      },
      "id": "V-233623"
    }
  ],
  "groups": [
    {
      "title": null,
      "controls": [
        "V-233511"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233511.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233512"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233512.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233513"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233513.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233514"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233514.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233515"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233515.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233516"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233516.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233517"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233517.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233518"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233518.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233519"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233519.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233520"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233520.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233521"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233521.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233522"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233522.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233523"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233523.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233524"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233524.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233525"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233525.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233526"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233526.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233527"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233527.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233528"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233528.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233529"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233529.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233530"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233530.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233531"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233531.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233532"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233532.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233533"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233533.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233534"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233534.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233535"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233535.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233536"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233536.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233537"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233537.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233538"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233538.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233539"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233539.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233540"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233540.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233541"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233541.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233542"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233542.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233543"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233543.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233544"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233544.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233545"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233545.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233546"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233546.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233547"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233547.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233548"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233548.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233549"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233549.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233550"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233550.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233551"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233551.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233552"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233552.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233553"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233553.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233554"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233554.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233555"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233555.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233556"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233556.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233557"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233557.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233558"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233558.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233559"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233559.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233560"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233560.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233561"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233561.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233562"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233562.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233563"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233563.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233564"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233564.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233565"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233565.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233566"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233566.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233567"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233567.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233568"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233568.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233569"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233569.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233570"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233570.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233571"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233571.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233572"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233572.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233573"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233573.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233574"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233574.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233575"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233575.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233576"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233576.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233577"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233577.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233578"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233578.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233579"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233579.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233580"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233580.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233581"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233581.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233582"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233582.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233583"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233583.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233584"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233584.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233585"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233585.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233586"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233586.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233587"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233587.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233588"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233588.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233589"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233589.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233590"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233590.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233591"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233591.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233592"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233592.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233593"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233593.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233594"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233594.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233595"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233595.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233596"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233596.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233597"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233597.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233598"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233598.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233599"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233599.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233600"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233600.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233601"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233601.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233602"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233602.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233603"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233603.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233604"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233604.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233605"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233605.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233606"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233606.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233607"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233607.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233608"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233608.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233609"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233609.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233610"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233610.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233611"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233611.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233612"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233612.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233613"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233613.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233614"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233614.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233615"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233615.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233616"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233616.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233617"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233617.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233618"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233618.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233619"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233619.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233620"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233620.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233621"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233621.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233622"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233622.rb"
    },
    {
      "title": null,
      "controls": [
        "V-233623"
      ],
      "id": "crunchy-data-postgresql-stig-baseline-main/controls/V-233623.rb"
    }
  ],
  "sha256": "d81dfedf0b9630d5649fff0a7ef8ec62b1f64b360dbb45521b5794283de1bd0d",
  "status_message": "",
  "status": "loaded",
  "generator": {
    "name": "inspec",
    "version": "4.33.1"
  }
}