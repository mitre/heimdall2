{
  "name": "oracle-java-runtime-environment-8-unix-stig-baseline",
  "title": "oracle-java-runtime-environment-8-unix-stig-baseline",
  "maintainer": "MITRE InSpec Team",
  "copyright": "The MITRE Corporation, 2018",
  "copyright_email": "opensource@mitre.org",
  "summary": "Inspec Validation Profile for JRE 8 STIG",
  "license": "Apache-2.0",
  "version": "0.1.2",
  "inspec_version": ">= 4.0",
  "supports": [
    {
      "platform": "os"
    }
  ],
  "inputs": [],
  "controls": [
    {
      "title": "Oracle JRE 8 must enable the dialog to enable users to check publisher\n  certificates for revocation",
      "desc": "A certificate revocation list is a directory which contains a list of\ncertificates that have been revoked for various reasons. Certificates may be\nrevoked due to improper issuance, compromise of the certificate, and failure\nto adhere to policy. Therefore, any certificate found on a CRL should not be\ntrusted. Permitting execution of an applet published with a revoked\ncertificate may result in spoofing, malware, system modification, invasion\nof privacy, and denial of service.",
      "descriptions": {
        "default": "A certificate revocation list is a directory which contains a list of\ncertificates that have been revoked for various reasons. Certificates may be\nrevoked due to improper issuance, compromise of the certificate, and failure\nto adhere to policy. Therefore, any certificate found on a CRL should not be\ntrusted. Permitting execution of an applet published with a revoked\ncertificate may result in spoofing, malware, system modification, invasion\nof privacy, and denial of service."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000401",
        "gid": "V-66929",
        "rid": "SV-81419r1_rule",
        "stig_id": "JRE8-UX-000150",
        "cci": "CCI-001991",
        "nist": [
          "IA-5 (2) (d)",
          "Rev_4"
        ],
        "check": "If the system is on the SIPRNet, this requirement is NA.\n  Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties If the key\n  “deployment.security.validation.crl=true” is not present in the\n  deployment.properties file, or is set to “false”, this is a finding. If the\n  key “deployment.security.validation.crl.locked” is not present in the\n  deployment.properties file, this is a finding.",
        "fix": "If the system is on the SIPRNet, this requirement is NA. Enable\n  the “Check certificates for revocation using Certificate Revocation Lists\n  (CRL)” option. Navigate to the system-level “deployment.properties” file for\n  JRE. /etc/.java/deployment/deployment.properties Add the key\n  “deployment.security.validation.crl=true” to the deployment.properties file.\n  Add the key “deployment.security.validation.crl.locked” to the\n  deployment.properties file"
      },
      "code": "control 'V-66929' do\n  title 'Oracle JRE 8 must enable the dialog to enable users to check publisher\n  certificates for revocation'\n  desc \"\n    A certificate revocation list is a directory which contains a list of\n    certificates that have been revoked for various reasons. Certificates may be\n    revoked due to improper issuance, compromise of the certificate, and failure\n    to adhere to policy. Therefore, any certificate found on a CRL should not be\n    trusted. Permitting execution of an applet published with a revoked\n    certificate may result in spoofing, malware, system modification, invasion\n    of privacy, and denial of service.\n  \"\n  impact 0.5\n  tag \"severity\": 'medium'\n  tag \"gtitle\": 'SRG-APP-000401'\n  tag \"gid\": 'V-66929'\n  tag \"rid\": 'SV-81419r1_rule'\n  tag \"stig_id\": 'JRE8-UX-000150'\n  tag \"cci\": 'CCI-001991'\n  tag \"nist\": ['IA-5 (2) (d)', 'Rev_4']\n  tag \"check\": 'If the system is on the SIPRNet, this requirement is NA.\n  Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties If the key\n  “deployment.security.validation.crl=true” is not present in the\n  deployment.properties file, or is set to “false”, this is a finding. If the\n  key “deployment.security.validation.crl.locked” is not present in the\n  deployment.properties file, this is a finding.'\n\n  tag \"fix\": 'If the system is on the SIPRNet, this requirement is NA. Enable\n  the “Check certificates for revocation using Certificate Revocation Lists\n  (CRL)” option. Navigate to the system-level “deployment.properties” file for\n  JRE. /etc/.java/deployment/deployment.properties Add the key\n  “deployment.security.validation.crl=true” to the deployment.properties file.\n  Add the key “deployment.security.validation.crl.locked” to the\n  deployment.properties file'\n\n  if is_on_siprnet\n    impact 0.0\n    desc 'If the system is on the SIPRNET, therefore this requirement is NA'\n    describe 'If the system is on the SIPRNET, therefore this requirement is NA' do\n      skip 'If the system is on the SIPRNET, therefore this requirement is NA'\n    end\n  else\n    describe file(attribute('deployment_properties_file')) do\n      its('content') { should match(/deployment.security.validation.crl=true/) }\n    end\n    describe file(attribute('deployment_properties_file')) do\n      its('content') { should match(/deployment.security.validation.crl.locked/) }\n    end\n  end\nend\n",
      "source_location": {
        "ref": "./JRE 8 STIG/controls/V-66929.rb",
        "line": 2
      },
      "id": "V-66929"
    },
    {
      "title": "Oracle JRE 8 deployment.config file must contain proper keys and values",
      "desc": "The deployment.config configuration file contains two keys. The\ndeployment.properties key includes the path of the deployment.properties\nfile and the deployment.properties.mandatory key contains either a TRUE or\nFALSE value. If the path specified to deployment.properties does not lead to\na deployment.properties file, the value of the\ndeployment.system.config.mandatory key determines how JRE will handle the\nsituation. If the value of the deployment.system.config.mandatory key is\nTRUE and if the path to the deployment.properties file is invalid, the JRE\nwill not allow Java applications to run. This is the desired behavior.",
      "descriptions": {
        "default": "The deployment.config configuration file contains two keys. The\ndeployment.properties key includes the path of the deployment.properties\nfile and the deployment.properties.mandatory key contains either a TRUE or\nFALSE value. If the path specified to deployment.properties does not lead to\na deployment.properties file, the value of the\ndeployment.system.config.mandatory key determines how JRE will handle the\nsituation. If the value of the deployment.system.config.mandatory key is\nTRUE and if the path to the deployment.properties file is invalid, the JRE\nwill not allow Java applications to run. This is the desired behavior."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000516",
        "gid": "V-66909",
        "rid": "SV-81399r2_rule",
        "stig_id": "JRE8-UX-000020",
        "cci": "CCI-000366",
        "nist": [
          "CM-6 b",
          "Rev_4"
        ],
        "check": "Navigate to the deployment.config file for JRE:\n  /etc/.java/deployment/deployment.config The deployment.config file contains\n  two properties: deployment.system.config and\n  deployment.system.config.mandatory. The deployment.system.config key points to\n  the location of the deployment.properties file. The location is variable. It\n  can point to a file on the local disk, or a UNC path. The following is an\n  example: deployment.system.config=/etc/.java/deployment/deployment.properties\n  If the deployment.system.config key does not exist or does not point to the\n  location of the deployment.properties file, this is a finding. If the\n  deployment.system.config.mandatory key does not exist or is set to false, this\n  is a finding.",
        "fix": "Navigate to the deployment.config file for JRE:\n  /etc/.java/deployment/deployment.config Add the key\n  deployment.system.config=<Path to deployment.properties> to the\n  deployment.config file. The following is an example:\n  deployment.system.config=/etc/.java/deployment/deployment.properties. Note the\n  use of forward slashes. Add the key deployment.system.config.mandatory=true to\n  the deployment.config file."
      },
      "code": "control 'V-66909' do\n  title 'Oracle JRE 8 deployment.config file must contain proper keys and values'\n  desc  \"\n    The deployment.config configuration file contains two keys. The\n    deployment.properties key includes the path of the deployment.properties\n    file and the deployment.properties.mandatory key contains either a TRUE or\n    FALSE value. If the path specified to deployment.properties does not lead to\n    a deployment.properties file, the value of the\n    deployment.system.config.mandatory key determines how JRE will handle the\n    situation. If the value of the deployment.system.config.mandatory key is\n    TRUE and if the path to the deployment.properties file is invalid, the JRE\n    will not allow Java applications to run. This is the desired behavior.\n  \"\n  impact 0.5\n  tag \"severity\": 'medium'\n  tag \"gtitle\": 'SRG-APP-000516'\n  tag \"gid\": 'V-66909'\n  tag \"rid\": 'SV-81399r2_rule'\n  tag \"stig_id\": 'JRE8-UX-000020'\n  tag \"cci\": 'CCI-000366'\n  tag \"nist\": ['CM-6 b', 'Rev_4']\n  tag \"check\": 'Navigate to the deployment.config file for JRE:\n  /etc/.java/deployment/deployment.config The deployment.config file contains\n  two properties: deployment.system.config and\n  deployment.system.config.mandatory. The deployment.system.config key points to\n  the location of the deployment.properties file. The location is variable. It\n  can point to a file on the local disk, or a UNC path. The following is an\n  example: deployment.system.config=/etc/.java/deployment/deployment.properties\n  If the deployment.system.config key does not exist or does not point to the\n  location of the deployment.properties file, this is a finding. If the\n  deployment.system.config.mandatory key does not exist or is set to false, this\n  is a finding.'\n\n  tag \"fix\": 'Navigate to the deployment.config file for JRE:\n  /etc/.java/deployment/deployment.config Add the key\n  deployment.system.config=<Path to deployment.properties> to the\n  deployment.config file. The following is an example:\n  deployment.system.config=/etc/.java/deployment/deployment.properties. Note the\n  use of forward slashes. Add the key deployment.system.config.mandatory=true to\n  the deployment.config file.'\n\n  describe file(attribute('deployment_config_file')) do\n    its('content') { should match(%r{deployment.system.config=\\/etc\\/.java/deployment\\/deployment.properties}) }\n  end\n  describe file(attribute('deployment_config_file')) do\n    its('content') { should match(/deployment.system.config.mandatory=true/) }\n  end\nend\n",
      "source_location": {
        "ref": "./JRE 8 STIG/controls/V-66909.rb",
        "line": 1
      },
      "id": "V-66909"
    },
    {
      "title": "Oracle JRE 8 must have a deployment.config file present",
      "desc": "By default no deployment.config file exists; thus, no system-wide\ndeployment.properties file exists. The file must be created. The\ndeployment.config file is used for specifying the location and execution of\nsystem-level properties for the Java Runtime Environment. Without the\ndeployment.config file, setting particular options for the Java control\npanel is impossible.",
      "descriptions": {
        "default": "By default no deployment.config file exists; thus, no system-wide\ndeployment.properties file exists. The file must be created. The\ndeployment.config file is used for specifying the location and execution of\nsystem-level properties for the Java Runtime Environment. Without the\ndeployment.config file, setting particular options for the Java control\npanel is impossible."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000516",
        "gid": "V-66721",
        "rid": "SV-81211r1_rule",
        "stig_id": "JRE8-UX-000010",
        "cci": "CCI-000366",
        "nist": [
          "CM-6 b",
          "Rev_4"
        ],
        "check": "Verify a JRE deployment configuration file exists as indicated:\n  /etc/.java/deployment/deployment.config If the configuration file does not\n  exist as indicated, this is a finding.",
        "fix": "Create a JRE deployment configuration file as indicated:\n\n  /etc/.java/deployment/deployment.config"
      },
      "code": "control 'V-66721' do\n  title 'Oracle JRE 8 must have a deployment.config file present'\n  desc  \"\n    By default no deployment.config file exists; thus, no system-wide\n    deployment.properties file exists. The file must be created. The\n    deployment.config file is used for specifying the location and execution of\n    system-level properties for the Java Runtime Environment. Without the\n    deployment.config file, setting particular options for the Java control\n    panel is impossible.\n  \"\n  impact 0.5\n  tag \"severity\": 'medium'\n  tag \"gtitle\": 'SRG-APP-000516'\n  tag \"gid\": 'V-66721'\n  tag \"rid\": 'SV-81211r1_rule'\n  tag \"stig_id\": 'JRE8-UX-000010'\n  tag \"cci\": 'CCI-000366'\n  tag \"nist\": ['CM-6 b', 'Rev_4']\n  tag \"check\": 'Verify a JRE deployment configuration file exists as indicated:\n  /etc/.java/deployment/deployment.config If the configuration file does not\n  exist as indicated, this is a finding.'\n\n  tag \"fix\": \"Create a JRE deployment configuration file as indicated:\n\n  /etc/.java/deployment/deployment.config\"\n\n  describe file(attribute('deployment_config_file')) do\n    it { should exist }\n  end\nend\n",
      "source_location": {
        "ref": "./JRE 8 STIG/controls/V-66721.rb",
        "line": 1
      },
      "id": "V-66721"
    },
    {
      "title": "The version of Oracle JRE 8 running on the system must be the most\n  current available",
      "desc": "Oracle JRE 8 is being continually updated by the vendor in order to address\nidentified security vulnerabilities. Running an older version of the JRE can\nintroduce security vulnerabilities to the system.",
      "descriptions": {
        "default": "Oracle JRE 8 is being continually updated by the vendor in order to address\nidentified security vulnerabilities. Running an older version of the JRE can\nintroduce security vulnerabilities to the system."
      },
      "impact": 0.7,
      "refs": [],
      "tags": {
        "severity": "high",
        "gtitle": "SRG-APP-000456",
        "gid": "V-66937",
        "rid": "SV-81427r1_rule",
        "stig_id": "JRE8-UX-000180",
        "cci": "CCI-002605",
        "nist": [
          "SI-2 c",
          "Rev_4"
        ],
        "check": "Review the system configuration to ensure old versions of JRE\n  have been removed. There are two ways to uninstall Java. Use the method that\n  you used when you installed Java. For example, if you used RPM to install\n  Java, then use the RPM uninstall method. If RPM is installed, first query to\n  ascertain that JRE was installed using RPM. Search for the JRE package by\n  typing: # rpm -qa | grep -i jre If RPM reports a package similar to\n  jre-<version>-fcs, then JRE is installed with RPM. If JRE is not installed\n  using RPM, skip to Self-extracting file uninstall. To uninstall Java via RPM,\n  type: # rpm -e jre-<version>-fcs Self-extracting file uninstall: 1. Browse\n  folders to ascertain where JRE is installed. Common locations are\n  /usr/java/jre_<version> or opt/jre_nb/jre_<version>/bin/java/ 2. When you have\n  located the directory, you may delete the directory by using the following\n  command: Note: Ensure JRE is not already installed using RPM before removing\n  the directory. # rm -r /<path to jre>/jre<version> Ensure only one instance of\n  JRE is installed on the system. # ps -ef | grep -I jre If more than one\n  instance of JRE is running, this is a finding.",
        "fix": "Remove previous versions of JRE. RPM uninstall: # rpm -e\n  jre-<version>-fcs Self-extracting file uninstall: # rm -r jre<version> Perform\n  for all out of date instances of JRE."
      },
      "code": "control 'V-66937' do\n  title 'The version of Oracle JRE 8 running on the system must be the most\n  current available'\n  desc \"\n   Oracle JRE 8 is being continually updated by the vendor in order to address\n   identified security vulnerabilities. Running an older version of the JRE can\n   introduce security vulnerabilities to the system.\n  \"\n  impact 0.7\n  tag \"severity\": 'high'\n  tag \"gtitle\": 'SRG-APP-000456'\n  tag \"gid\": 'V-66937'\n  tag \"rid\": 'SV-81427r1_rule'\n  tag \"stig_id\": 'JRE8-UX-000180'\n  tag \"cci\": 'CCI-002605'\n  tag \"nist\": ['SI-2 c', 'Rev_4']\n  tag \"check\": 'Review the system configuration to ensure old versions of JRE\n  have been removed. There are two ways to uninstall Java. Use the method that\n  you used when you installed Java. For example, if you used RPM to install\n  Java, then use the RPM uninstall method. If RPM is installed, first query to\n  ascertain that JRE was installed using RPM. Search for the JRE package by\n  typing: # rpm -qa | grep -i jre If RPM reports a package similar to\n  jre-<version>-fcs, then JRE is installed with RPM. If JRE is not installed\n  using RPM, skip to Self-extracting file uninstall. To uninstall Java via RPM,\n  type: # rpm -e jre-<version>-fcs Self-extracting file uninstall: 1. Browse\n  folders to ascertain where JRE is installed. Common locations are\n  /usr/java/jre_<version> or opt/jre_nb/jre_<version>/bin/java/ 2. When you have\n  located the directory, you may delete the directory by using the following\n  command: Note: Ensure JRE is not already installed using RPM before removing\n  the directory. # rm -r /<path to jre>/jre<version> Ensure only one instance of\n  JRE is installed on the system. # ps -ef | grep -I jre If more than one\n  instance of JRE is running, this is a finding.'\n\n  tag \"fix\": 'Remove previous versions of JRE. RPM uninstall: # rpm -e\n  jre-<version>-fcs Self-extracting file uninstall: # rm -r jre<version> Perform\n  for all out of date instances of JRE.'\n\n  java_cmd = command('java -version').stderr&.lines&.first&.strip&.split&.last\n  describe 'The java version installed' do\n    it \"should be attribute('java_version\" do\n      expect(java_cmd).to(match attribute('java_version'))\n    end\n  end\nend\n",
      "source_location": {
        "ref": "./JRE 8 STIG/controls/V-66937.rb",
        "line": 1
      },
      "id": "V-66937"
    },
    {
      "title": "Oracle JRE 8 must prevent the download of prohibited mobile code",
      "desc": "Decisions regarding the employment of mobile code within organizational\ninformation systems are based on the potential for the code to cause damage\nto the system if used maliciously. Mobile code is defined as software\nmodules obtained from remote systems, transferred across a network, and then\ndownloaded and executed on a local system without explicit installation or\nexecution by the recipient. Usage restrictions and implementation guidance\napply to both the selection and use of mobile code installed, downloaded, or\nexecuted on all endpoints (e.g., servers, workstations, and smart phones).\nThis requirement applies to applications that execute, evaluate, or\notherwise process mobile code (e.g., web applications, browsers, and\nanti-virus applications).",
      "descriptions": {
        "default": "Decisions regarding the employment of mobile code within organizational\ninformation systems are based on the potential for the code to cause damage\nto the system if used maliciously. Mobile code is defined as software\nmodules obtained from remote systems, transferred across a network, and then\ndownloaded and executed on a local system without explicit installation or\nexecution by the recipient. Usage restrictions and implementation guidance\napply to both the selection and use of mobile code installed, downloaded, or\nexecuted on all endpoints (e.g., servers, workstations, and smart phones).\nThis requirement applies to applications that execute, evaluate, or\notherwise process mobile code (e.g., web applications, browsers, and\nanti-virus applications)."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000209",
        "gid": "V-66923",
        "rid": "SV-81413r1_rule",
        "stig_id": "JRE8-UX-000110",
        "cci": "CCI-001169",
        "nist": [
          "SC-18 (3)",
          "Rev_4"
        ],
        "check": "Navigate to the system-level “deployment.properties” file for\n  JRE. /etc/.java/deployment/deployment.properties If the key\n  “deployment.security.blacklist.check=true” is not present in the\n  deployment.properties file, or is set to “false”, this is a finding. If the\n  key “deployment.security.blacklist.check.locked” is not present in the\n  deployment.properties file, this is a finding.",
        "fix": "Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties Add the key\n  “deployment.security.blacklist.check=true” to the deployment.properties file.\n  Add the key “deployment.security.blacklist.check.locked” to the\n  deployment.properties file."
      },
      "code": "control 'V-66923' do\n  title 'Oracle JRE 8 must prevent the download of prohibited mobile code'\n  desc  \"\n    Decisions regarding the employment of mobile code within organizational\n    information systems are based on the potential for the code to cause damage\n    to the system if used maliciously. Mobile code is defined as software\n    modules obtained from remote systems, transferred across a network, and then\n    downloaded and executed on a local system without explicit installation or\n    execution by the recipient. Usage restrictions and implementation guidance\n    apply to both the selection and use of mobile code installed, downloaded, or\n    executed on all endpoints (e.g., servers, workstations, and smart phones).\n    This requirement applies to applications that execute, evaluate, or\n    otherwise process mobile code (e.g., web applications, browsers, and\n    anti-virus applications).\n  \"\n  impact 0.5\n  tag \"severity\": 'medium'\n  tag \"gtitle\": 'SRG-APP-000209'\n  tag \"gid\": 'V-66923'\n  tag \"rid\": 'SV-81413r1_rule'\n  tag \"stig_id\": 'JRE8-UX-000110'\n  tag \"cci\": 'CCI-001169'\n  tag \"nist\": ['SC-18 (3)', 'Rev_4']\n  tag \"check\": 'Navigate to the system-level “deployment.properties” file for\n  JRE. /etc/.java/deployment/deployment.properties If the key\n  “deployment.security.blacklist.check=true” is not present in the\n  deployment.properties file, or is set to “false”, this is a finding. If the\n  key “deployment.security.blacklist.check.locked” is not present in the\n  deployment.properties file, this is a finding.'\n\n  tag \"fix\": 'Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties Add the key\n  “deployment.security.blacklist.check=true” to the deployment.properties file.\n  Add the key “deployment.security.blacklist.check.locked” to the\n  deployment.properties file.'\n\n  describe file(attribute('deployment_properties_file')) do\n    its('content') { should match(/deployment.security.blacklist.check=true/) }\n  end\n  describe file(attribute('deployment_properties_file')) do\n    its('content') { should match(/deployment.security.blacklist.check.locked/) }\n  end\nend\n",
      "source_location": {
        "ref": "./JRE 8 STIG/controls/V-66923.rb",
        "line": 1
      },
      "id": "V-66923"
    },
    {
      "title": "Oracle JRE 8 must enable the option to use an accepted sites list",
      "desc": "Utilizing a whitelist provides a configuration management method for\nallowing the execution of only authorized software. Using only authorized\nsoftware decreases risk by limiting the number of potential vulnerabilities.\nThe organization must identify authorized software programs and permit\nexecution of authorized software. The process used to identify software\nprograms that are authorized to execute on organizational information\nsystems is commonly referred to as whitelisting. Verification of whitelisted\nsoftware can occur either prior to execution or at system startup. This\nrequirement applies to configuration management applications or similar\ntypes of applications designed to manage system processes and configurations\n(e.g., HBSS and software wrappers).",
      "descriptions": {
        "default": "Utilizing a whitelist provides a configuration management method for\nallowing the execution of only authorized software. Using only authorized\nsoftware decreases risk by limiting the number of potential vulnerabilities.\nThe organization must identify authorized software programs and permit\nexecution of authorized software. The process used to identify software\nprograms that are authorized to execute on organizational information\nsystems is commonly referred to as whitelisting. Verification of whitelisted\nsoftware can occur either prior to execution or at system startup. This\nrequirement applies to configuration management applications or similar\ntypes of applications designed to manage system processes and configurations\n(e.g., HBSS and software wrappers)."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000386",
        "gid": "V-66925",
        "rid": "SV-81415r2_rule",
        "stig_id": "JRE8-UX-000120",
        "cci": "CCI-001774",
        "nist": [
          "CM-7 (5) (c)",
          "Rev_4"
        ],
        "check": "Navigate to the system-level “deployment.properties” file for\n  JRE. /etc/.java/deployment/deployment.properties If the key\n  “deployment.user.security.exception.sites” is not present in the\n  deployment.properties file, this is a finding. If the key\n  “deployment.user.security.exception.sites” is not set to the location of the\n  exception.sites file, this is a finding. An example of a correct setting is:\n  deployment.user.security.exception.sites=/etc/.java/deployment/exception.sites",
        "fix": "Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties Add the key\n  “deployment.user.security.exception.sites=/etc/.java/deployment/exception.sites”\n  to the deployment.properties file."
      },
      "code": "control 'V-66925' do\n  title 'Oracle JRE 8 must enable the option to use an accepted sites list'\n  desc  \"\n    Utilizing a whitelist provides a configuration management method for\n    allowing the execution of only authorized software. Using only authorized\n    software decreases risk by limiting the number of potential vulnerabilities.\n    The organization must identify authorized software programs and permit\n    execution of authorized software. The process used to identify software\n    programs that are authorized to execute on organizational information\n    systems is commonly referred to as whitelisting. Verification of whitelisted\n    software can occur either prior to execution or at system startup. This\n    requirement applies to configuration management applications or similar\n    types of applications designed to manage system processes and configurations\n    (e.g., HBSS and software wrappers).\n  \"\n  impact 0.5\n  tag \"severity\": 'medium'\n  tag \"gtitle\": 'SRG-APP-000386'\n  tag \"gid\": 'V-66925'\n  tag \"rid\": 'SV-81415r2_rule'\n  tag \"stig_id\": 'JRE8-UX-000120'\n  tag \"cci\": 'CCI-001774'\n  tag \"nist\": ['CM-7 (5) (c)', 'Rev_4']\n  tag \"check\": 'Navigate to the system-level “deployment.properties” file for\n  JRE. /etc/.java/deployment/deployment.properties If the key\n  “deployment.user.security.exception.sites” is not present in the\n  deployment.properties file, this is a finding. If the key\n  “deployment.user.security.exception.sites” is not set to the location of the\n  exception.sites file, this is a finding. An example of a correct setting is:\n  deployment.user.security.exception.sites=/etc/.java/deployment/exception.sites'\n\n  tag \"fix\": 'Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties Add the key\n  “deployment.user.security.exception.sites=/etc/.java/deployment/exception.sites”\n  to the deployment.properties file.'\n\n  describe file(attribute('deployment_properties_file')) do\n    its('content') { should match(%r{deployment.user.security.exception.sites=/etc/.java/deployment/exception.sites}) }\n  end\nend\n",
      "source_location": {
        "ref": "./JRE 8 STIG/controls/V-66925.rb",
        "line": 1
      },
      "id": "V-66925"
    },
    {
      "title": "Oracle JRE 8 must lock the dialog enabling users to grant permissions\n  to execute signed content from an untrusted authority",
      "desc": "Java applets exist both signed and unsigned. Even for signed applets, there\ncan be many sources, some of which may be purveyors of malware. Applet\nsources considered trusted can have their information populated into the\nbrowser, enabling Java to validate applets against trusted sources.\nPermitting execution of signed Java applets from untrusted sources may\nresult in acquiring malware, and risks system modification, invasion of\nprivacy, or denial of service. Ensuring users cannot change settings\ncontributes to a more consistent security profile.",
      "descriptions": {
        "default": "Java applets exist both signed and unsigned. Even for signed applets, there\ncan be many sources, some of which may be purveyors of malware. Applet\nsources considered trusted can have their information populated into the\nbrowser, enabling Java to validate applets against trusted sources.\nPermitting execution of signed Java applets from untrusted sources may\nresult in acquiring malware, and risks system modification, invasion of\nprivacy, or denial of service. Ensuring users cannot change settings\ncontributes to a more consistent security profile."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000112",
        "gid": "V-66919",
        "rid": "SV-81409r1_rule",
        "stig_id": "JRE8-UX-000090",
        "cci": "CCI-001695",
        "nist": [
          "SC-18 (3)",
          "Rev_4"
        ],
        "check": "If the system is on the SIPRNet, this requirement is NA.\n  Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties If the key,\n  “deployment.security.askgrantdialog.show=false” is not present, this is a\n  finding. If the key, “deployment.security.askgrantdialog.show.locked” is not\n  present, this is a finding. If the key\n  “deployment.security.askgrantdialog.show” exists and is set to true, this is a\n  finding.",
        "fix": "If the system is on the SIPRNet, this requirement is NA. Lock the\n  “Allow user to grant permissions to content from an untrusted authority”\n  feature. Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties Add the key\n  “deployment.security.askgrantdialog.show=false” to the deployment.properties\n  file. Add the key “deployment.security.askgrantdialog.show.locked” to the\n  deployment.properties file."
      },
      "code": "control 'V-66919' do\n  title 'Oracle JRE 8 must lock the dialog enabling users to grant permissions\n  to execute signed content from an untrusted authority'\n  desc \"\n    Java applets exist both signed and unsigned. Even for signed applets, there\n    can be many sources, some of which may be purveyors of malware. Applet\n    sources considered trusted can have their information populated into the\n    browser, enabling Java to validate applets against trusted sources.\n    Permitting execution of signed Java applets from untrusted sources may\n    result in acquiring malware, and risks system modification, invasion of\n    privacy, or denial of service. Ensuring users cannot change settings\n    contributes to a more consistent security profile.\n  \"\n  impact 0.5\n  tag \"severity\": 'medium'\n  tag \"gtitle\": 'SRG-APP-000112'\n  tag \"gid\": 'V-66919'\n  tag \"rid\": 'SV-81409r1_rule'\n  tag \"stig_id\": 'JRE8-UX-000090'\n  tag \"cci\": 'CCI-001695'\n  tag \"nist\": ['SC-18 (3)', 'Rev_4']\n  tag \"check\": 'If the system is on the SIPRNet, this requirement is NA.\n  Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties If the key,\n  “deployment.security.askgrantdialog.show=false” is not present, this is a\n  finding. If the key, “deployment.security.askgrantdialog.show.locked” is not\n  present, this is a finding. If the key\n  “deployment.security.askgrantdialog.show” exists and is set to true, this is a\n  finding.'\n\n  tag \"fix\": 'If the system is on the SIPRNet, this requirement is NA. Lock the\n  “Allow user to grant permissions to content from an untrusted authority”\n  feature. Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties Add the key\n  “deployment.security.askgrantdialog.show=false” to the deployment.properties\n  file. Add the key “deployment.security.askgrantdialog.show.locked” to the\n  deployment.properties file.'\n\n  if is_on_siprnet\n    impact 0.0\n    desc 'If the system is on the SIPRNET, therefore this requirement is NA'\n    describe 'If the system is on the SIPRNET, therefore this requirement is NA' do\n      skip 'If the system is on the SIPRNET, therefore this requirement is NA'\n    end\n  else\n    describe file(attribute('deployment_properties_file')) do\n      its('content') { should match(/deployment.security.askgrantdialog.show=false/) }\n    end\n    describe file(attribute('deployment_properties_file')) do\n      its('content') { should match(/deployment.security.askgrantdialog.show.locked/) }\n    end\n  end\nend\n",
      "source_location": {
        "ref": "./JRE 8 STIG/controls/V-66919.rb",
        "line": 2
      },
      "id": "V-66919"
    },
    {
      "title": "Oracle JRE 8 must have an exception.sites file present.",
      "desc": "Utilizing a whitelist provides a configuration management method for\nallowing the execution of only authorized software. Using only authorized\nsoftware decreases risk by limiting the number of potential vulnerabilities.\nThe organization must identify authorized software programs and permit\nexecution of authorized software. The process used to identify software\nprograms that are authorized to execute on organizational information\nsystems is commonly referred to as whitelisting. Verification of whitelisted\nsoftware can occur either prior to execution or at system startup. This\nrequirement applies to configuration management applications or similar\ntypes of applications designed to manage system processes and configurations\n(e.g., HBSS and software wrappers).",
      "descriptions": {
        "default": "Utilizing a whitelist provides a configuration management method for\nallowing the execution of only authorized software. Using only authorized\nsoftware decreases risk by limiting the number of potential vulnerabilities.\nThe organization must identify authorized software programs and permit\nexecution of authorized software. The process used to identify software\nprograms that are authorized to execute on organizational information\nsystems is commonly referred to as whitelisting. Verification of whitelisted\nsoftware can occur either prior to execution or at system startup. This\nrequirement applies to configuration management applications or similar\ntypes of applications designed to manage system processes and configurations\n(e.g., HBSS and software wrappers)."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000386",
        "gid": "V-66927",
        "rid": "SV-81417r1_rule",
        "stig_id": "JRE8-UX-000130",
        "cci": "CCI-001774",
        "nist": [
          "CM-7 (5) (c)",
          "Rev_4"
        ],
        "check": "If the system is on the SIPRNet, this requirement is NA.\n  Navigate to the “exception.sites” file for Java:\n  /etc/.java/deployment/exception.sites If the exception.sites file does not\n  exist, it must be created. The exception.sites file is a text file containing\n  single-line URLs for accepted risk sites. If there are no AO approved sites to\n  be added to the configuration, it is acceptable for this file to be blank. If\n  the “exception.sites” file does not exist, this is a finding. If the\n  “exception.sites” file contains URLs that are not AO approved, this is a\n  finding.",
        "fix": "If the system is on the SIPRNet, this requirement is NA. Create\n  the JRE exception.sites file: No default file exists. A text file named\n  exception.sites, and the directory structure in which it is located must be\n  manually created. The location must be aligned as defined in the\n  deployment.properties file. /etc/.java/deployment/deployment.properties is an\n  example."
      },
      "code": "control 'V-66927' do\n  title 'Oracle JRE 8 must have an exception.sites file present.'\n  desc  \"\n    Utilizing a whitelist provides a configuration management method for\n    allowing the execution of only authorized software. Using only authorized\n    software decreases risk by limiting the number of potential vulnerabilities.\n    The organization must identify authorized software programs and permit\n    execution of authorized software. The process used to identify software\n    programs that are authorized to execute on organizational information\n    systems is commonly referred to as whitelisting. Verification of whitelisted\n    software can occur either prior to execution or at system startup. This\n    requirement applies to configuration management applications or similar\n    types of applications designed to manage system processes and configurations\n    (e.g., HBSS and software wrappers).\n  \"\n  impact 0.5\n  tag \"severity\": 'medium'\n  tag \"gtitle\": 'SRG-APP-000386'\n  tag \"gid\": 'V-66927'\n  tag \"rid\": 'SV-81417r1_rule'\n  tag \"stig_id\": 'JRE8-UX-000130'\n  tag \"cci\": 'CCI-001774'\n  tag \"nist\": ['CM-7 (5) (c)', 'Rev_4']\n  tag \"check\": 'If the system is on the SIPRNet, this requirement is NA.\n  Navigate to the “exception.sites” file for Java:\n  /etc/.java/deployment/exception.sites If the exception.sites file does not\n  exist, it must be created. The exception.sites file is a text file containing\n  single-line URLs for accepted risk sites. If there are no AO approved sites to\n  be added to the configuration, it is acceptable for this file to be blank. If\n  the “exception.sites” file does not exist, this is a finding. If the\n  “exception.sites” file contains URLs that are not AO approved, this is a\n  finding.'\n\n  tag \"fix\": 'If the system is on the SIPRNet, this requirement is NA. Create\n  the JRE exception.sites file: No default file exists. A text file named\n  exception.sites, and the directory structure in which it is located must be\n  manually created. The location must be aligned as defined in the\n  deployment.properties file. /etc/.java/deployment/deployment.properties is an\n  example.'\n\n  if is_on_siprnet\n    impact 0.0\n    desc 'If the system is on the SIPRNET, therefore this requirement is NA'\n    describe 'If the system is on the SIPRNET, therefore this requirement is NA' do\n      skip 'If the system is on the SIPRNET, therefore this requirement is NA'\n    end\n  else\n    describe file(attribute('deployment_exception_sites_file')) do\n      it { should exist }\n    end\n  end\nend\n",
      "source_location": {
        "ref": "./JRE 8 STIG/controls/V-66927.rb",
        "line": 2
      },
      "id": "V-66927"
    },
    {
      "title": "Oracle JRE 8 must have a deployment.properties file present",
      "desc": "By default no deployment.properties file exists; thus, no system-wide\ndeployment exists. The file must be created. The deployment.properties file\nis used for specifying keys for the Java Runtime Environment. Each option in\nthe Java control panel is represented by property keys. These keys adjust\nthe options in the Java control panel based on the value assigned to that\nkey. Without the deployment.properties file, setting particular options for\nthe Java control panel is impossible.",
      "descriptions": {
        "default": "By default no deployment.properties file exists; thus, no system-wide\ndeployment exists. The file must be created. The deployment.properties file\nis used for specifying keys for the Java Runtime Environment. Each option in\nthe Java control panel is represented by property keys. These keys adjust\nthe options in the Java control panel based on the value assigned to that\nkey. Without the deployment.properties file, setting particular options for\nthe Java control panel is impossible."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000516",
        "gid": "V-66911",
        "rid": "SV-81401r1_rule",
        "stig_id": "JRE8-UX-000030",
        "cci": "CCI-000366",
        "nist": [
          "CM-6 b",
          "Rev_4"
        ],
        "check": "Navigate to the system-level “deployment.properties” file for\n  JRE. /etc/.java/deployment/deployment.properties If there is no file entitled\n  “deployment.properties”, this is a finding.",
        "fix": "Create the Java deployment properties file\n  “/etc/.java/deployment/deployment.properties”"
      },
      "code": "control 'V-66911' do\n  title 'Oracle JRE 8 must have a deployment.properties file present'\n  desc  \"\n    By default no deployment.properties file exists; thus, no system-wide\n    deployment exists. The file must be created. The deployment.properties file\n    is used for specifying keys for the Java Runtime Environment. Each option in\n    the Java control panel is represented by property keys. These keys adjust\n    the options in the Java control panel based on the value assigned to that\n    key. Without the deployment.properties file, setting particular options for\n    the Java control panel is impossible.\n  \"\n  impact 0.5\n  tag \"severity\": 'medium'\n  tag \"gtitle\": 'SRG-APP-000516'\n  tag \"gid\": 'V-66911'\n  tag \"rid\": 'SV-81401r1_rule'\n  tag \"stig_id\": 'JRE8-UX-000030'\n  tag \"cci\": 'CCI-000366'\n  tag \"nist\": ['CM-6 b', 'Rev_4']\n  tag \"check\": 'Navigate to the system-level “deployment.properties” file for\n  JRE. /etc/.java/deployment/deployment.properties If there is no file entitled\n  “deployment.properties”, this is a finding.'\n\n  tag \"fix\": 'Create the Java deployment properties file\n  “/etc/.java/deployment/deployment.properties”'\n\n  describe file('/etc/.java/deployment/deployment.properties') do\n    it { should exist }\n  end\nend\n",
      "source_location": {
        "ref": "./JRE 8 STIG/controls/V-66911.rb",
        "line": 1
      },
      "id": "V-66911"
    },
    {
      "title": "Oracle JRE 8 must set the option to enable online certificate validation",
      "desc": "Online certificate validation provides a real-time option to validate a\ncertificate. When enabled, if a certificate is presented, the status of the\ncertificate is requested. The status is sent back as “current”, “expired”,\nor “unknown”. Online certificate validation provides a greater degree of\nvalidation of certificates when running a signed Java applet. Permitting\nexecution of an applet with an invalid certificate may result in malware,\nsystem modification, invasion of privacy, and denial of service.",
      "descriptions": {
        "default": "Online certificate validation provides a real-time option to validate a\ncertificate. When enabled, if a certificate is presented, the status of the\ncertificate is requested. The status is sent back as “current”, “expired”,\nor “unknown”. Online certificate validation provides a greater degree of\nvalidation of certificates when running a signed Java applet. Permitting\nexecution of an applet with an invalid certificate may result in malware,\nsystem modification, invasion of privacy, and denial of service."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000175",
        "gid": "V-66921",
        "rid": "SV-81411r1_rule",
        "stig_id": "JRE8-UX-000100",
        "cci": "CCI-000185",
        "nist": [
          "IA-5 (2)(a)",
          "Rev_4"
        ],
        "check": "If the system is on the SIPRNet, this requirement is NA.\n  Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties If the key\n  “deployment.security.validation.ocsp=true” is not present in the\n  deployment.properties file, this is a finding. If the key\n  “deployment.security.validation.ocsp.locked” is not present in the\n  deployment.properties file, this is a finding. If the key\n  “deployment.security.validation.ocsp” is set to “false”, this is a finding.",
        "fix": "If the system is on the SIPRNet, this requirement is NA. Navigate\n  to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties Add the key\n  “deployment.security.validation.ocsp=true” to the deployment.properties file.\n  Add the key “deployment.security.validation.ocsp.locked” to the\n  deployment.properties file."
      },
      "code": "control 'V-66921' do\n  title 'Oracle JRE 8 must set the option to enable online certificate validation'\n  desc  \"\n    Online certificate validation provides a real-time option to validate a\n    certificate. When enabled, if a certificate is presented, the status of the\n    certificate is requested. The status is sent back as “current”, “expired”,\n    or “unknown”. Online certificate validation provides a greater degree of\n    validation of certificates when running a signed Java applet. Permitting\n    execution of an applet with an invalid certificate may result in malware,\n    system modification, invasion of privacy, and denial of service.\n  \"\n  impact 0.5\n  tag \"severity\": 'medium'\n  tag \"gtitle\": 'SRG-APP-000175'\n  tag \"gid\": 'V-66921'\n  tag \"rid\": 'SV-81411r1_rule'\n  tag \"stig_id\": 'JRE8-UX-000100'\n  tag \"cci\": 'CCI-000185'\n  tag \"nist\": ['IA-5 (2)(a)', 'Rev_4']\n  tag \"check\": 'If the system is on the SIPRNet, this requirement is NA.\n  Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties If the key\n  “deployment.security.validation.ocsp=true” is not present in the\n  deployment.properties file, this is a finding. If the key\n  “deployment.security.validation.ocsp.locked” is not present in the\n  deployment.properties file, this is a finding. If the key\n  “deployment.security.validation.ocsp” is set to “false”, this is a finding.'\n\n  tag \"fix\": 'If the system is on the SIPRNet, this requirement is NA. Navigate\n  to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties Add the key\n  “deployment.security.validation.ocsp=true” to the deployment.properties file.\n  Add the key “deployment.security.validation.ocsp.locked” to the\n  deployment.properties file.'\n\n  if is_on_siprnet\n    impact 0.0\n    desc 'If the system is on the SIPRNET, therefore this requirement is NA'\n    describe 'If the system is on the SIPRNET, therefore this requirement is NA' do\n      skip 'If the system is on the SIPRNET, therefore this requirement is NA'\n    end\n  else\n    describe file(attribute('deployment_properties_file')) do\n      its('content') { should match(/deployment.security.validation.ocsp=true/) }\n    end\n    describe file(attribute('deployment_properties_file')) do\n      its('content') { should match(/deployment.security.validation.ocsp.locked/) }\n    end\n  end\nend\n",
      "source_location": {
        "ref": "./JRE 8 STIG/controls/V-66921.rb",
        "line": 2
      },
      "id": "V-66921"
    },
    {
      "title": "Oracle JRE 8 must disable the dialog enabling users to grant\n  permissions to execute signed content from an untrusted authority",
      "desc": "Java applets exist both signed and unsigned. Even for signed applets, there\ncan be many sources, some of which may be purveyors of malware. Applet\nsources considered trusted can have their information populated into the\nbrowser, enabling Java to validate applets against trusted sources.\nPermitting execution of signed Java applets from untrusted sources may\nresult in acquiring malware, and risks system modification, invasion of\nprivacy, or denial of service.",
      "descriptions": {
        "default": "Java applets exist both signed and unsigned. Even for signed applets, there\ncan be many sources, some of which may be purveyors of malware. Applet\nsources considered trusted can have their information populated into the\nbrowser, enabling Java to validate applets against trusted sources.\nPermitting execution of signed Java applets from untrusted sources may\nresult in acquiring malware, and risks system modification, invasion of\nprivacy, or denial of service."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000112",
        "gid": "V-66917",
        "rid": "SV-81407r1_rule",
        "stig_id": "JRE8-UX-000080",
        "cci": "CCI-001695",
        "nist": [
          "SC-18 (3)",
          "Rev_4"
        ],
        "check": "If the system is on the SIPRNet, this requirement is NA.\n  Navigate to the system-level “deployment.properties” file for Java.\n  /etc/.java/deployment/deployment.properties If the key,\n  “deployment.security.askgrantdialog.notinca=false” is not present, this is a\n  finding. If the key, “deployment.security.askgrantdialog.notinca.locked” is\n  not present, this is a finding. If the key\n  “deployment.security.askgrantdialog.notinca” exists and is set to true, this\n  is a finding.",
        "fix": "If the system is on the SIPRNet, this requirement is NA. Disable\n  the “Allow user to grant permissions to content from an untrusted authority”\n  feature. Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties Add the key\n  “deployment.security.askgrantdialog.notinca=false” to the\n  deployment.properties file. Add the key\n  “deployment.security.askgrantdialog.notinca.locked” to the\n  deployment.properties file."
      },
      "code": "control 'V-66917' do\n  title 'Oracle JRE 8 must disable the dialog enabling users to grant\n  permissions to execute signed content from an untrusted authority'\n  desc \"\n    Java applets exist both signed and unsigned. Even for signed applets, there\n    can be many sources, some of which may be purveyors of malware. Applet\n    sources considered trusted can have their information populated into the\n    browser, enabling Java to validate applets against trusted sources.\n    Permitting execution of signed Java applets from untrusted sources may\n    result in acquiring malware, and risks system modification, invasion of\n    privacy, or denial of service.\n  \"\n  impact 0.5\n  tag \"severity\": 'medium'\n  tag \"gtitle\": 'SRG-APP-000112'\n  tag \"gid\": 'V-66917'\n  tag \"rid\": 'SV-81407r1_rule'\n  tag \"stig_id\": 'JRE8-UX-000080'\n  tag \"cci\": 'CCI-001695'\n  tag \"nist\": ['SC-18 (3)', 'Rev_4']\n  tag \"check\": 'If the system is on the SIPRNet, this requirement is NA.\n  Navigate to the system-level “deployment.properties” file for Java.\n  /etc/.java/deployment/deployment.properties If the key,\n  “deployment.security.askgrantdialog.notinca=false” is not present, this is a\n  finding. If the key, “deployment.security.askgrantdialog.notinca.locked” is\n  not present, this is a finding. If the key\n  “deployment.security.askgrantdialog.notinca” exists and is set to true, this\n  is a finding.'\n\n  tag \"fix\": 'If the system is on the SIPRNet, this requirement is NA. Disable\n  the “Allow user to grant permissions to content from an untrusted authority”\n  feature. Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties Add the key\n  “deployment.security.askgrantdialog.notinca=false” to the\n  deployment.properties file. Add the key\n  “deployment.security.askgrantdialog.notinca.locked” to the\n  deployment.properties file.'\n\n  if is_on_siprnet\n    impact 0.0\n    desc 'If the system is on the SIPRNET, therefore this requirement is NA'\n    describe 'If the system is on the SIPRNET, therefore this requirement is NA' do\n      skip 'If the system is on the SIPRNET, therefore this requirement is NA'\n    end\n  else\n    describe file(attribute('deployment_properties_file')) do\n      its('content') { should match(/deployment.security.askgrantdialog.notinca=false/) }\n    end\n    describe file(attribute('deployment_properties_file')) do\n      its('content') { should match(/deployment.security.askgrantdialog.notinca.locked/) }\n    end\n  end\nend\n",
      "source_location": {
        "ref": "./JRE 8 STIG/controls/V-66917.rb",
        "line": 2
      },
      "id": "V-66917"
    },
    {
      "title": "Oracle JRE 8 must remove previous versions when the latest version is\n  installed",
      "desc": "Previous versions of software components that are not removed from the\ninformation system after updates have been installed may be exploited by\nadversaries. Some information technology products may remove older versions\nof software automatically from the information system.",
      "descriptions": {
        "default": "Previous versions of software components that are not removed from the\ninformation system after updates have been installed may be exploited by\nadversaries. Some information technology products may remove older versions\nof software automatically from the information system."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000454",
        "gid": "V-66935",
        "rid": "SV-81425r1_rule",
        "stig_id": "JRE8-UX-000190",
        "cci": "CCI-002617",
        "nist": [
          "SI-2 (6)",
          "Rev_4"
        ],
        "check": "Review the system configuration to ensure old versions of JRE\n  have been removed. There are two ways to uninstall Java. Use the method that\n  you used when you installed Java. For example, if you used RPM to install\n  Java, then use the RPM uninstall method. If RPM is installed, first query to\n  ascertain that JRE was installed using RPM. Search for the JRE package by\n  typing: # rpm -qa | grep -i jre If RPM reports a package similar to\n  jre-<version>-fcs, then JRE is installed with RPM. If JRE is not installed\n  using RPM, skip to Self-extracting file uninstall. To uninstall Java via RPM,\n  type: # rpm -e jre-<version>-fcs Self-extracting file uninstall:\n  1. Browse folders to ascertain where JRE is installed. Common locations are\n  /usr/java/jre_<version> or opt/jre_nb/jre_<version>/bin/java/\n  2. When you have located the directory, you may delete the directory by using\n  the following command:\n  Note: Ensure JRE is not already installed using RPM before removing\n  the directory.\n  # rm -r /<path to jre>/jre<version>\n  Ensure only one instance of JRE is installed on the system.\n  # ps -ef | grep -I jre If more than one\n  instance of JRE is running, this is a finding.",
        "fix": "Remove previous versions of JRE. RPM uninstall: # rpm -e\n  jre-<version>-fcs Self-extracting file uninstall: # rm -r jre<version> Perform\n  for all out of date instances of JRE."
      },
      "code": "control 'V-66935' do\n  title 'Oracle JRE 8 must remove previous versions when the latest version is\n  installed'\n  desc \"\n    Previous versions of software components that are not removed from the\n    information system after updates have been installed may be exploited by\n    adversaries. Some information technology products may remove older versions\n    of software automatically from the information system.\n  \"\n  impact 0.5\n  tag \"severity\": 'medium'\n  tag \"gtitle\": 'SRG-APP-000454'\n  tag \"gid\": 'V-66935'\n  tag \"rid\": 'SV-81425r1_rule'\n  tag \"stig_id\": 'JRE8-UX-000190'\n  tag \"cci\": 'CCI-002617'\n  tag \"nist\": ['SI-2 (6)', 'Rev_4']\n  tag \"check\": 'Review the system configuration to ensure old versions of JRE\n  have been removed. There are two ways to uninstall Java. Use the method that\n  you used when you installed Java. For example, if you used RPM to install\n  Java, then use the RPM uninstall method. If RPM is installed, first query to\n  ascertain that JRE was installed using RPM. Search for the JRE package by\n  typing: # rpm -qa | grep -i jre If RPM reports a package similar to\n  jre-<version>-fcs, then JRE is installed with RPM. If JRE is not installed\n  using RPM, skip to Self-extracting file uninstall. To uninstall Java via RPM,\n  type: # rpm -e jre-<version>-fcs Self-extracting file uninstall:\n  1. Browse folders to ascertain where JRE is installed. Common locations are\n  /usr/java/jre_<version> or opt/jre_nb/jre_<version>/bin/java/\n  2. When you have located the directory, you may delete the directory by using\n  the following command:\n  Note: Ensure JRE is not already installed using RPM before removing\n  the directory.\n  # rm -r /<path to jre>/jre<version>\n  Ensure only one instance of JRE is installed on the system.\n  # ps -ef | grep -I jre If more than one\n  instance of JRE is running, this is a finding.'\n\n  tag \"fix\": 'Remove previous versions of JRE. RPM uninstall: # rpm -e\n  jre-<version>-fcs Self-extracting file uninstall: # rm -r jre<version> Perform\n  for all out of date instances of JRE.'\n\n  describe 'A manual review is required to ensure Oracle JRE 8 removes previous versions when the latest version is\n  installed' do\n  skip 'A manual review is required to ensure Oracle JRE 8 removes previous versions when the latest version is\n    installed'\n  end\nend\n",
      "source_location": {
        "ref": "./JRE 8 STIG/controls/V-66935.rb",
        "line": 1
      },
      "id": "V-66935"
    },
    {
      "title": "Oracle JRE 8 must lock the option to enable users to check publisher\n  certificates for revocation",
      "desc": "Certificates may be revoked due to improper issuance, compromise of the\ncertificate, and failure to adhere to policy. Therefore, any certificate\nfound revoked on a CRL or via Online Certificate Status Protocol (OCSP)\nshould not be trusted. Permitting execution of an applet published with a\nrevoked certificate may result in spoofing, malware, system modification,\ninvasion of privacy, and denial of service. Ensuring users cannot change\nthese settings assures a more consistent security profile.",
      "descriptions": {
        "default": "Certificates may be revoked due to improper issuance, compromise of the\ncertificate, and failure to adhere to policy. Therefore, any certificate\nfound revoked on a CRL or via Online Certificate Status Protocol (OCSP)\nshould not be trusted. Permitting execution of an applet published with a\nrevoked certificate may result in spoofing, malware, system modification,\ninvasion of privacy, and denial of service. Ensuring users cannot change\nthese settings assures a more consistent security profile."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000401",
        "gid": "V-66931",
        "rid": "SV-81421r1_rule",
        "stig_id": "JRE8-UX-000160",
        "cci": "CCI-001991",
        "nist": [
          "IA-5 (2) (d)",
          "Rev_4"
        ],
        "check": "If the system is on the SIPRNet, this requirement is NA.\n  Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties If the key\n  “deployment.security.revocation.check=ALL_CERTIFICATES” is not present, or is\n  set to “PUBLISHER_ONLY”, or “NO_CHECK”, this is a finding. If the key\n  “deployment.security.revocation.check.locked” is not present, this is a\n  finding.",
        "fix": "If the system is on the SIPRNet, this requirement is NA. Navigate\n  to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties Add the key\n  “deployment.security.revocation.check=ALL_CERTIFICATES” to the\n  deployment.properties file. Add the key\n  “deployment.security.revocation.check.locked” to the deployment.properties\n  file"
      },
      "code": "control 'V-66931' do\n  title 'Oracle JRE 8 must lock the option to enable users to check publisher\n  certificates for revocation'\n  desc \"\n    Certificates may be revoked due to improper issuance, compromise of the\n    certificate, and failure to adhere to policy. Therefore, any certificate\n    found revoked on a CRL or via Online Certificate Status Protocol (OCSP)\n    should not be trusted. Permitting execution of an applet published with a\n    revoked certificate may result in spoofing, malware, system modification,\n    invasion of privacy, and denial of service. Ensuring users cannot change\n    these settings assures a more consistent security profile.\n  \"\n  impact 0.5\n  tag \"severity\": 'medium'\n  tag \"gtitle\": 'SRG-APP-000401'\n  tag \"gid\": 'V-66931'\n  tag \"rid\": 'SV-81421r1_rule'\n  tag \"stig_id\": 'JRE8-UX-000160'\n  tag \"cci\": 'CCI-001991'\n  tag \"nist\": ['IA-5 (2) (d)', 'Rev_4']\n  tag \"check\": 'If the system is on the SIPRNet, this requirement is NA.\n  Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties If the key\n  “deployment.security.revocation.check=ALL_CERTIFICATES” is not present, or is\n  set to “PUBLISHER_ONLY”, or “NO_CHECK”, this is a finding. If the key\n  “deployment.security.revocation.check.locked” is not present, this is a\n  finding.'\n\n  tag \"fix\": 'If the system is on the SIPRNet, this requirement is NA. Navigate\n  to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties Add the key\n  “deployment.security.revocation.check=ALL_CERTIFICATES” to the\n  deployment.properties file. Add the key\n  “deployment.security.revocation.check.locked” to the deployment.properties\n  file'\n\n  if is_on_siprnet\n    impact 0.0\n    desc 'If the system is on the SIPRNET, therefore this requirement is NA'\n    describe 'If the system is on the SIPRNET, therefore this requirement is NA' do\n      skip 'If the system is on the SIPRNET, therefore this requirement is NA'\n    end\n  else\n    describe file(attribute('deployment_properties_file')) do\n      its('content') { should match(/deployment.security.revocation.check=ALL_CERTIFICATES/) }\n    end\n    describe file(attribute('deployment_properties_file')) do\n      its('content') { should match(/deployment.security.revocation.check.locked/) }\n    end\n  end\nend\n",
      "source_location": {
        "ref": "./JRE 8 STIG/controls/V-66931.rb",
        "line": 2
      },
      "id": "V-66931"
    },
    {
      "title": "Oracle JRE 8 must be set to allow Java Web Start (JWS) applications",
      "desc": "Java Web Start (JWS) applications are the most commonly used. Denying these\napplications could be detrimental to the user experience. Whitelisting,\nblacklisting, and signing of applications help mitigate the risk of running\nJWS applications.",
      "descriptions": {
        "default": "Java Web Start (JWS) applications are the most commonly used. Denying these\napplications could be detrimental to the user experience. Whitelisting,\nblacklisting, and signing of applications help mitigate the risk of running\nJWS applications."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000516",
        "gid": "V-66915",
        "rid": "SV-81405r1_rule",
        "stig_id": "JRE8-UX-000070",
        "cci": "CCI-000366",
        "nist": [
          "CM-6 b",
          "Rev_4"
        ],
        "check": "Navigate to the system-level “deployment.properties” file for\n  JRE. /etc/.java/deployment/deployment.properties If the key\n  “deployment.webjava.enabled=true” is not present in the deployment.properties\n  file, or is set to “false”, this is a finding. If the key\n  “deployment.webjava.enabled.locked” is not present in the\n  deployment.properties file, this is a finding.",
        "fix": "Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties Add the key\n  “deployment.webjava.enabled=true” to the deployment.properties file. Add the\n  key “deployment.webjava.enabled.locked” to the deployment.properties file."
      },
      "code": "control 'V-66915' do\n  title 'Oracle JRE 8 must be set to allow Java Web Start (JWS) applications'\n  desc  \"\n    Java Web Start (JWS) applications are the most commonly used. Denying these\n    applications could be detrimental to the user experience. Whitelisting,\n    blacklisting, and signing of applications help mitigate the risk of running\n    JWS applications.\n  \"\n  impact 0.5\n  tag \"severity\": 'medium'\n  tag \"gtitle\": 'SRG-APP-000516'\n  tag \"gid\": 'V-66915'\n  tag \"rid\": 'SV-81405r1_rule'\n  tag \"stig_id\": 'JRE8-UX-000070'\n  tag \"cci\": 'CCI-000366'\n  tag \"nist\": ['CM-6 b', 'Rev_4']\n  tag \"check\": 'Navigate to the system-level “deployment.properties” file for\n  JRE. /etc/.java/deployment/deployment.properties If the key\n  “deployment.webjava.enabled=true” is not present in the deployment.properties\n  file, or is set to “false”, this is a finding. If the key\n  “deployment.webjava.enabled.locked” is not present in the\n  deployment.properties file, this is a finding.'\n\n  tag \"fix\": 'Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties Add the key\n  “deployment.webjava.enabled=true” to the deployment.properties file. Add the\n  key “deployment.webjava.enabled.locked” to the deployment.properties file.'\n\n  describe file(attribute('deployment_properties_file')) do\n    its('content') { should match(/deployment.webjava.enabled=true/) }\n  end\n  describe file(attribute('deployment_properties_file')) do\n    its('content') { should match(/deployment.webjava.enabled.locked/) }\n  end\nend\n",
      "source_location": {
        "ref": "./JRE 8 STIG/controls/V-66915.rb",
        "line": 1
      },
      "id": "V-66915"
    },
    {
      "title": "Oracle JRE 8 must prompt the user for action prior to executing mobile\n  code",
      "desc": "Mobile code can cause damage to the system. It can execute without explicit\naction from, or notification to, a user. Actions enforced before executing\nmobile code include, for example, prompting users prior to opening email\nattachments and disabling automatic execution. This requirement applies to\nmobile code-enabled software, which is capable of executing one or more\ntypes of mobile code.",
      "descriptions": {
        "default": "Mobile code can cause damage to the system. It can execute without explicit\naction from, or notification to, a user. Actions enforced before executing\nmobile code include, for example, prompting users prior to opening email\nattachments and disabling automatic execution. This requirement applies to\nmobile code-enabled software, which is capable of executing one or more\ntypes of mobile code."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "gtitle": "SRG-APP-000488",
        "gid": "V-66933",
        "rid": "SV-814231r1_rule",
        "stig_id": "JRE8-UX-000170",
        "cci": "CCI-002460",
        "nist": [
          "SC-18 (4)",
          "Rev_4"
        ],
        "check": "Navigate to the system-level “deployment.properties” file for\n  JRE. /etc/.java/deployment/deployment.properties If the key\n  “deployment.insecure.jres=PROMPT” is not present in the deployment.properties\n  file, this is a finding. If the key “deployment.insecure.jres.locked” is not\n  present in the deployment.properties file, this is a finding. If the key\n  “deployment.insecure.jres” is set to “NEVER”, this is a finding.",
        "fix": "Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties Add the key\n  “deployment.insecure.jres=PROMPT” to the deployment.properties file. Add the\n  key “deployment.insecure.jres.locked” to the deployment.properties file."
      },
      "code": "control 'V-66933' do\n  title 'Oracle JRE 8 must prompt the user for action prior to executing mobile\n  code'\n  desc \"\n    Mobile code can cause damage to the system. It can execute without explicit\n    action from, or notification to, a user. Actions enforced before executing\n    mobile code include, for example, prompting users prior to opening email\n    attachments and disabling automatic execution. This requirement applies to\n    mobile code-enabled software, which is capable of executing one or more\n    types of mobile code.\n  \"\n  impact 0.5\n  tag \"severity\": 'medium'\n  tag \"gtitle\": 'SRG-APP-000488'\n  tag \"gid\": 'V-66933'\n  tag \"rid\": 'SV-814231r1_rule'\n  tag \"stig_id\": 'JRE8-UX-000170'\n  tag \"cci\": 'CCI-002460'\n  tag \"nist\": ['SC-18 (4)', 'Rev_4']\n  tag \"check\": 'Navigate to the system-level “deployment.properties” file for\n  JRE. /etc/.java/deployment/deployment.properties If the key\n  “deployment.insecure.jres=PROMPT” is not present in the deployment.properties\n  file, this is a finding. If the key “deployment.insecure.jres.locked” is not\n  present in the deployment.properties file, this is a finding. If the key\n  “deployment.insecure.jres” is set to “NEVER”, this is a finding.'\n\n  tag \"fix\": 'Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties Add the key\n  “deployment.insecure.jres=PROMPT” to the deployment.properties file. Add the\n  key “deployment.insecure.jres.locked” to the deployment.properties file.'\n\n  describe file(attribute('deployment_properties_file')) do\n    its('content') { should match(/deployment.insecure.jres=PROMPT/) }\n  end\n  describe file(attribute('deployment_properties_file')) do\n    its('content') { should match(/deployment.insecure.jres.locked/) }\n  end\n  describe file(attribute('deployment_properties_file')) do\n    its('content') { should_not match(/deployment.insecure.jres=NEVER/) }\n  end\nend\n",
      "source_location": {
        "ref": "./JRE 8 STIG/controls/V-66933.rb",
        "line": 1
      },
      "id": "V-66933"
    },
    {
      "title": "Oracle JRE 8 must default to the most secure built-in setting",
      "desc": "Applications that are signed with a valid certificate and include the\npermissions attribute in the manifest for the main JAR file are allowed to\nrun with security prompts. All other applications are blocked. Unsigned\napplications could perform numerous types of attacks on a system.",
      "descriptions": {
        "default": "Applications that are signed with a valid certificate and include the\npermissions attribute in the manifest for the main JAR file are allowed to\nrun with security prompts. All other applications are blocked. Unsigned\napplications could perform numerous types of attacks on a system."
      },
      "impact": 0.3,
      "refs": [],
      "tags": {
        "severity": "low",
        "gtitle": "SRG-APP-000516",
        "gid": "V-66913",
        "rid": "SV-81403r1_rule",
        "stig_id": "JRE8-UX-000060",
        "cci": "CCI-000366",
        "nist": [
          "CM-6 b",
          "Rev_4"
        ],
        "check": "Navigate to the system-level “deployment.properties” file for\n  JRE. /etc/.java/deployment/deployment.properties If the key\n  “deployment.security.level=VERY_HIGH” is not present in the\n  deployment.properties file, or is set to “HIGH”, this is a finding. If the\n  key",
        "fix": "Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties Add the key\n  “deployment.security.level=VERY_HIGH” to the deployment.properties file. Add\n  the key “deployment.security.level.locked” to the deployment.properties file."
      },
      "code": "control 'V-66913' do\n  title 'Oracle JRE 8 must default to the most secure built-in setting'\n  desc  \"\n    Applications that are signed with a valid certificate and include the\n    permissions attribute in the manifest for the main JAR file are allowed to\n    run with security prompts. All other applications are blocked. Unsigned\n    applications could perform numerous types of attacks on a system.\n  \"\n  impact 0.3\n  tag \"severity\": 'low'\n  tag \"gtitle\": 'SRG-APP-000516'\n  tag \"gid\": 'V-66913'\n  tag \"rid\": 'SV-81403r1_rule'\n  tag \"stig_id\": 'JRE8-UX-000060'\n  tag \"cci\": 'CCI-000366'\n  tag \"nist\": ['CM-6 b', 'Rev_4']\n  tag \"check\": 'Navigate to the system-level “deployment.properties” file for\n  JRE. /etc/.java/deployment/deployment.properties If the key\n  “deployment.security.level=VERY_HIGH” is not present in the\n  deployment.properties file, or is set to “HIGH”, this is a finding. If the\n  key'\n\n  tag \"fix\": 'Navigate to the system-level “deployment.properties” file for JRE.\n  /etc/.java/deployment/deployment.properties Add the key\n  “deployment.security.level=VERY_HIGH” to the deployment.properties file. Add\n  the key “deployment.security.level.locked” to the deployment.properties file.'\n\n  describe file(attribute('deployment_properties_file')) do\n    its('content') { should match(/deployment.security.level=VERY_HIGH/) }\n  end\n  describe file(attribute('deployment_properties_file')) do\n    its('content') { should match(/deployment.security.level.locked/) }\n  end\nend\n",
      "source_location": {
        "ref": "./JRE 8 STIG/controls/V-66913.rb",
        "line": 1
      },
      "id": "V-66913"
    }
  ],
  "groups": [
    {
      "title": null,
      "controls": [
        "V-66929"
      ],
      "id": "controls/V-66929.rb"
    },
    {
      "title": null,
      "controls": [
        "V-66909"
      ],
      "id": "controls/V-66909.rb"
    },
    {
      "title": null,
      "controls": [
        "V-66721"
      ],
      "id": "controls/V-66721.rb"
    },
    {
      "title": null,
      "controls": [
        "V-66937"
      ],
      "id": "controls/V-66937.rb"
    },
    {
      "title": null,
      "controls": [
        "V-66923"
      ],
      "id": "controls/V-66923.rb"
    },
    {
      "title": null,
      "controls": [
        "V-66925"
      ],
      "id": "controls/V-66925.rb"
    },
    {
      "title": null,
      "controls": [
        "V-66919"
      ],
      "id": "controls/V-66919.rb"
    },
    {
      "title": null,
      "controls": [
        "V-66927"
      ],
      "id": "controls/V-66927.rb"
    },
    {
      "title": null,
      "controls": [
        "V-66911"
      ],
      "id": "controls/V-66911.rb"
    },
    {
      "title": null,
      "controls": [
        "V-66921"
      ],
      "id": "controls/V-66921.rb"
    },
    {
      "title": null,
      "controls": [
        "V-66917"
      ],
      "id": "controls/V-66917.rb"
    },
    {
      "title": null,
      "controls": [
        "V-66935"
      ],
      "id": "controls/V-66935.rb"
    },
    {
      "title": null,
      "controls": [
        "V-66931"
      ],
      "id": "controls/V-66931.rb"
    },
    {
      "title": null,
      "controls": [
        "V-66915"
      ],
      "id": "controls/V-66915.rb"
    },
    {
      "title": null,
      "controls": [
        "V-66933"
      ],
      "id": "controls/V-66933.rb"
    },
    {
      "title": null,
      "controls": [
        "V-66913"
      ],
      "id": "controls/V-66913.rb"
    }
  ],
  "sha256": "0eac5dc3fd1b063cfe084accae7d4e0510617212a78620c6aa8dd65f88661176",
  "status_message": "",
  "status": "loaded",
  "generator": {
    "name": "inspec",
    "version": "4.33.1"
  }
}