{
  "name": "aws-rds-infrastructure-cis-baseline",
  "title": "aws-rds-infrastructure-cis-baseline",
  "maintainer": "MITRE InSpec Team",
  "copyright": "The MITRE Corporation, 2019",
  "copyright_email": "saf@groups.mitre.org",
  "license": "Apache-2.0",
  "summary": "InSpec Validation Profile for AWS RDS Infrastructure CIS",
  "version": "1.0.0",
  "inspec_version": ">= 4.0",
  "inputs": [],
  "supports": [],
  "controls": [
    {
      "title": "Ensure RDS Database is configured to use the Data Tier Security Group",
      "desc": "Amazon Relational Database Service (RDS) is a managed relational database\n  service which handles routine database tasks such as provisioning, patching,\n  backup, recovery, failure detection, and repair.\n  There are 6 database engines available for customer to run their database\n  workloads on:\n  * Amazon Aurora (MySQL Compatible)\n  * MySQL\n  * MariaDB\n  * Oracle\n  * Microsoft SQL Server\n  * PostgreSQL\n  Customers can deploy RDS databases within a VPC through the configuration of:\n  * Subnet Group for RDS, this group will be used for deployment of single or\n  Multi-AZ RDS instances.\n  * Network access through configuration of Security Groups for RDS\n  * Access from outside the VPC hosting the DB instance by enabling/disabling a\n  Public\n  IP address",
      "descriptions": {
        "default": "Amazon Relational Database Service (RDS) is a managed relational database\n  service which handles routine database tasks such as provisioning, patching,\n  backup, recovery, failure detection, and repair.\n  There are 6 database engines available for customer to run their database\n  workloads on:\n  * Amazon Aurora (MySQL Compatible)\n  * MySQL\n  * MariaDB\n  * Oracle\n  * Microsoft SQL Server\n  * PostgreSQL\n  Customers can deploy RDS databases within a VPC through the configuration of:\n  * Subnet Group for RDS, this group will be used for deployment of single or\n  Multi-AZ RDS instances.\n  * Network access through configuration of Security Groups for RDS\n  * Access from outside the VPC hosting the DB instance by enabling/disabling a\n  Public\n  IP address"
      },
      "impact": 0.3,
      "refs": [],
      "tags": {
        "rationale": "Network access to the managed Data-Tier must be tightly\n  controlled using Security Groups for RDS and non local accessibility of the DB\n  instance.",
        "cis_rid": "6.34",
        "cis_level": 1,
        "nist": [
          "SC-7",
          "Rev_4"
        ],
        "check": "Using the Amazon unified command line interface:\n  * Check if your application DB instances are configured to use the Data Tier\n  Security Group:\n\n  aws rds describe-db-instances --filters\n  Name=tag:<data_tier_tag>,Values=<data_tier_tag_value> --query\n  'DBInstances[*].{VpcSecurityGroups:VpcSecurityGroups,s\n  DBInstanceIdentifier:DBInstanceIdentifier}'\n  ",
        "fix": "Using the Amazon unified command line interface:\n  * Modify each non-compliant DB instance, and configure it to use the Data Tier\n  Security Group:\n\n  aws rds modify-db-instance --db-instance-identifier <your_db_instance>\n  --vpc-security- group-ids <data_tier_security_group>\n  "
      },
      "code": "control 'aws-rds-baseline-11' do\n  title 'Ensure RDS Database is configured to use the Data Tier Security Group'\n  desc 'Amazon Relational Database Service (RDS) is a managed relational database\n  service which handles routine database tasks such as provisioning, patching,\n  backup, recovery, failure detection, and repair.\n  There are 6 database engines available for customer to run their database\n  workloads on:\n  * Amazon Aurora (MySQL Compatible)\n  * MySQL\n  * MariaDB\n  * Oracle\n  * Microsoft SQL Server\n  * PostgreSQL\n  Customers can deploy RDS databases within a VPC through the configuration of:\n  * Subnet Group for RDS, this group will be used for deployment of single or\n  Multi-AZ RDS instances.\n  * Network access through configuration of Security Groups for RDS\n  * Access from outside the VPC hosting the DB instance by enabling/disabling a\n  Public\n  IP address'\n  impact 0.3\n  tag \"rationale\": 'Network access to the managed Data-Tier must be tightly\n  controlled using Security Groups for RDS and non local accessibility of the DB\n  instance.'\n  tag \"cis_rid\": '6.34'\n  tag \"cis_level\": 1\n  tag \"nist\": ['SC-7', 'Rev_4']\n  tag \"check\": \"Using the Amazon unified command line interface:\n  * Check if your application DB instances are configured to use the Data Tier\n  Security Group:\n\n  aws rds describe-db-instances --filters\n  Name=tag:<data_tier_tag>,Values=<data_tier_tag_value> --query\n  'DBInstances[*].{VpcSecurityGroups:VpcSecurityGroups,s\n  DBInstanceIdentifier:DBInstanceIdentifier}'\n  \"\n\n  tag \"fix\": \"Using the Amazon unified command line interface:\n  * Modify each non-compliant DB instance, and configure it to use the Data Tier\n  Security Group:\n\n  aws rds modify-db-instance --db-instance-identifier <your_db_instance>\n  --vpc-security- group-ids <data_tier_security_group>\n  \"\n  input('db_instance_identifier').each do |identifier|\n    describe aws_rds_instance(identifier.to_s) do\n      its('vpc_security_group_id') { should be_in input('vpc_security_group_id') }\n    end\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS CIS/controls/aws-rds-baseline-11.rb",
        "line": 1
      },
      "id": "aws-rds-baseline-11"
    },
    {
      "title": "Create the Data tier Security Group and ensure it allows inbound\n  connections from App tier Security Group for explicit ports.",
      "desc": "A security group acts as a virtual firewall for your instance to control\n  inbound and outbound traffic. When you launch an instance in the AWS Virtual\n  Private Cloud (VPC), you can assign the instance to up to five security groups.\n  Security groups act at the instance level, not the subnet level. Therefore,\n  each instance in a subnet in your VPC could be assigned to a different set of\n  security groups. If you don't specify a particular group at launch time, the\n  instance is automatically assigned to the default security group for the VPC.\n  For each security group, you add rules that control the inbound traffic to\n  instances, and a separate set of rules that control the outbound traffic.\n  The port for these inbound rules would depend on the Database engine used and\n  the configured port.\n\n  The default values are:\n  MySQL - TCP 3306\n  MSSQL - TCP 1433\n  Oracle SQL - TCP 1521\n  PostgreSQL - TCP 5432\n  MariaDB - TCP 3306\n  Amazon Aurora DB - TCP 3306",
      "descriptions": {
        "default": "A security group acts as a virtual firewall for your instance to control\n  inbound and outbound traffic. When you launch an instance in the AWS Virtual\n  Private Cloud (VPC), you can assign the instance to up to five security groups.\n  Security groups act at the instance level, not the subnet level. Therefore,\n  each instance in a subnet in your VPC could be assigned to a different set of\n  security groups. If you don't specify a particular group at launch time, the\n  instance is automatically assigned to the default security group for the VPC.\n  For each security group, you add rules that control the inbound traffic to\n  instances, and a separate set of rules that control the outbound traffic.\n  The port for these inbound rules would depend on the Database engine used and\n  the configured port.\n\n  The default values are:\n  MySQL - TCP 3306\n  MSSQL - TCP 1433\n  Oracle SQL - TCP 1521\n  PostgreSQL - TCP 5432\n  MariaDB - TCP 3306\n  Amazon Aurora DB - TCP 3306"
      },
      "impact": 0.3,
      "refs": [],
      "tags": {
        "rationale": "This protects the Data tier from unauthorized access, it is\n  recommended to add inbound security group rules that allow traffic for the\n  specific database protocol and ports by referencing as source the security\n  group associated with the App tier instances.",
        "cis_rid": "6.24",
        "cis_level": 1,
        "nist": [
          "SC-7",
          "Rev_4"
        ],
        "check": "Using the Amazon unified command line interface:\n  Using the Amazon unified command line interface:\n\n  * Retrieve the Data tier security group configured for your RDS DB instance:\n\n  aws rds describe-db-instances --db-instance-identifier <your_db_instance>\n  --query 'DBInstances[*].VpcSecurityGroups'\n\n  * List the ingress rules for the above security group, and make sure that\n  allows connections only from App tier security group on specific ports:\n\n  aws ec2 describe-security-groups --group-ids <data_tier_security_group> --query\n  'SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}' --output\n  table\n  ",
        "fix": "Using the Amazon unified command line interface:\n\n  * First remove all the ingress rules for the security group configured for your\n  RDS DB instance:\n\n  aws ec2 describe-security-groups --group-id <data_tier_security_group> --query\n  'SecurityGroups[0].IpPermissions' > /tmp/IpPermissions.json\n  aws ec2 revoke-security-group-ingress --group-id <data_tier_security_group>\n  --ip- permissions file:///tmp/IpPermissions.json\n\n  * Add an ingress rule for a specific port, using --source-group option to\n  specify the App tier security group as the source of the connections:\n\n  aws ec2 authorize-security-group-ingress --group-id <data_tier_security_group>\n  -- protocol tcp --port <specific_port> --source-group <app_tier_security_group>'\n\n  "
      },
      "code": "control 'aws-rds-baseline-8' do\n  title 'Create the Data tier Security Group and ensure it allows inbound\n  connections from App tier Security Group for explicit ports.'\n  desc \"A security group acts as a virtual firewall for your instance to control\n  inbound and outbound traffic. When you launch an instance in the AWS Virtual\n  Private Cloud (VPC), you can assign the instance to up to five security groups.\n  Security groups act at the instance level, not the subnet level. Therefore,\n  each instance in a subnet in your VPC could be assigned to a different set of\n  security groups. If you don't specify a particular group at launch time, the\n  instance is automatically assigned to the default security group for the VPC.\n  For each security group, you add rules that control the inbound traffic to\n  instances, and a separate set of rules that control the outbound traffic.\n  The port for these inbound rules would depend on the Database engine used and\n  the configured port.\n\n  The default values are:\n  MySQL - TCP 3306\n  MSSQL - TCP 1433\n  Oracle SQL - TCP 1521\n  PostgreSQL - TCP 5432\n  MariaDB - TCP 3306\n  Amazon Aurora DB - TCP 3306\"\n  impact 0.3\n  tag \"rationale\": 'This protects the Data tier from unauthorized access, it is\n  recommended to add inbound security group rules that allow traffic for the\n  specific database protocol and ports by referencing as source the security\n  group associated with the App tier instances.'\n  tag \"cis_rid\": '6.24'\n  tag \"cis_level\": 1\n  tag \"nist\": ['SC-7', 'Rev_4']\n  tag \"check\": \"Using the Amazon unified command line interface:\n  Using the Amazon unified command line interface:\n\n  * Retrieve the Data tier security group configured for your RDS DB instance:\n\n  aws rds describe-db-instances --db-instance-identifier <your_db_instance>\n  --query 'DBInstances[*].VpcSecurityGroups'\n\n  * List the ingress rules for the above security group, and make sure that\n  allows connections only from App tier security group on specific ports:\n\n  aws ec2 describe-security-groups --group-ids <data_tier_security_group> --query\n  'SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}' --output\n  table\n  \"\n\n  tag \"fix\": \"Using the Amazon unified command line interface:\n\n  * First remove all the ingress rules for the security group configured for your\n  RDS DB instance:\n\n  aws ec2 describe-security-groups --group-id <data_tier_security_group> --query\n  'SecurityGroups[0].IpPermissions' > /tmp/IpPermissions.json\n  aws ec2 revoke-security-group-ingress --group-id <data_tier_security_group>\n  --ip- permissions file:///tmp/IpPermissions.json\n\n  * Add an ingress rule for a specific port, using --source-group option to\n  specify the App tier security group as the source of the connections:\n\n  aws ec2 authorize-security-group-ingress --group-id <data_tier_security_group>\n  -- protocol tcp --port <specific_port> --source-group <app_tier_security_group>'\n\n  \"\n\n  input('db_instance_identifier').each do |identifier|\n    rds_vpc_security_groups = aws_rds_instance(identifier.to_s).vpc_security_groups.where(status: 'active').vpc_security_group_ids\n\n    publicly_accessible = aws_rds_instance(identifier.to_s).publicly_accessible\n\n    if publicly_accessible\n      rds_vpc_security_groups.each do |security_group|\n        describe aws_security_group(id: security_group) do\n          it { should allow_in(port: 3306, ipv4_range: input('allowed_ip_address_range')) }\n        end\n        describe aws_security_group(id: security_group) do\n          it { should allow_in(port: 1433, ipv4_range: input('allowed_ip_address_range')) }\n        end\n        describe aws_security_group(id: security_group) do\n          it { should allow_in(port: 1521, ipv4_range: input('allowed_ip_address_range')) }\n        end\n        describe aws_security_group(id: security_group) do\n          it { should allow_in(port: 5432, ipv4_range: input('allowed_ip_address_range')) }\n        end\n      end\n    else\n      describe aws_rds_instance(identifier.to_s) do\n        its('publicly_accessible') { should_not be true }\n      end\n    end\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS CIS/controls/aws-rds-baseline-8.rb",
        "line": 1
      },
      "id": "aws-rds-baseline-8"
    },
    {
      "title": "Ensure Relational Database Service is Multi-AZ Enabled.",
      "desc": "Amazon Relational Database Service (RDS) is a managed relational database\n  service which handles routine database tasks such as provisioning, patching,\n  backup, recovery, failure detection, and repair.\n  There are 6 database engines available for customer to run their database\n  workloads on:\n  * Amazon Aurora (MySQL Compatible)\n  * MySQL\n  * MariaDB\n  * Oracle\n  * Microsoft SQL Server\n  * PostgreSQL",
      "descriptions": {
        "default": "Amazon Relational Database Service (RDS) is a managed relational database\n  service which handles routine database tasks such as provisioning, patching,\n  backup, recovery, failure detection, and repair.\n  There are 6 database engines available for customer to run their database\n  workloads on:\n  * Amazon Aurora (MySQL Compatible)\n  * MySQL\n  * MariaDB\n  * Oracle\n  * Microsoft SQL Server\n  * PostgreSQL"
      },
      "impact": 0.3,
      "refs": [],
      "tags": {
        "rationale": "Provides AWS managed high availability of the Database Tier\n  across 2 availability zones within a region through asynchronous replication at\n  the data layer.",
        "cis_rid": "3.5",
        "cis_level": 1,
        "nist": [
          "CM-6",
          "Rev_4"
        ],
        "check": "Using the Amazon unified command line interface:\n  * Check if your application DB instances are Multi-AZ enabled:\n\n  aws rds describe-db-instances --filters\n  Name=tag:<data_tier_tag>,Values=<data_tier_tag_value> --query\n  'DBInstances[*].{MultiAZ:MultiAZ, DBInstanceIdentifier:DBInstanceIdentifier}'\n  ",
        "fix": "Using the Amazon unified command line interface:\n  * Modify each no-multi-az DB instance, and make it Multi-AZ enabled:\n  aws rds modify-db-instance --db-instance-identifier <your_db_instance>\n  --multi-az"
      },
      "code": "control 'aws-rds-baseline-2' do\n  title 'Ensure Relational Database Service is Multi-AZ Enabled.'\n  desc 'Amazon Relational Database Service (RDS) is a managed relational database\n  service which handles routine database tasks such as provisioning, patching,\n  backup, recovery, failure detection, and repair.\n  There are 6 database engines available for customer to run their database\n  workloads on:\n  * Amazon Aurora (MySQL Compatible)\n  * MySQL\n  * MariaDB\n  * Oracle\n  * Microsoft SQL Server\n  * PostgreSQL'\n  impact 0.3\n  tag \"rationale\": 'Provides AWS managed high availability of the Database Tier\n  across 2 availability zones within a region through asynchronous replication at\n  the data layer.'\n  tag \"cis_rid\": '3.5'\n  tag \"cis_level\": 1\n  tag \"nist\": ['CM-6', 'Rev_4']\n  tag \"check\": \"Using the Amazon unified command line interface:\n  * Check if your application DB instances are Multi-AZ enabled:\n\n  aws rds describe-db-instances --filters\n  Name=tag:<data_tier_tag>,Values=<data_tier_tag_value> --query\n  'DBInstances[*].{MultiAZ:MultiAZ, DBInstanceIdentifier:DBInstanceIdentifier}'\n  \"\n\n  tag \"fix\": \"Using the Amazon unified command line interface:\n  * Modify each no-multi-az DB instance, and make it Multi-AZ enabled:\n  aws rds modify-db-instance --db-instance-identifier <your_db_instance>\n  --multi-az\"\n  input('db_instance_identifier').each do |identifier|\n    describe aws_rds_instance(identifier.to_s) do\n      its('multi_az') { should be true }\n    end\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS CIS/controls/aws-rds-baseline-2.rb",
        "line": 1
      },
      "id": "aws-rds-baseline-2"
    },
    {
      "title": "Ensure Relational Database Service backup retention policy is set.",
      "desc": "Amazon Relational Database Service (RDS) is a managed relational database\n  service which handles routine database tasks such as provisioning, patching,\n  backup, recovery, failure detection, and repair.\n  There are 6 database engines available for customer to run their database\n  workloads on:\n  * Amazon Aurora (MySQL Compatible)\n  * MySQL\n  * MariaDB\n  * Oracle\n  * Microsoft SQL Server\n  * PostgreSQL.",
      "descriptions": {
        "default": "Amazon Relational Database Service (RDS) is a managed relational database\n  service which handles routine database tasks such as provisioning, patching,\n  backup, recovery, failure detection, and repair.\n  There are 6 database engines available for customer to run their database\n  workloads on:\n  * Amazon Aurora (MySQL Compatible)\n  * MySQL\n  * MariaDB\n  * Oracle\n  * Microsoft SQL Server\n  * PostgreSQL."
      },
      "impact": 0.3,
      "refs": [],
      "tags": {
        "rationale": "Provides a managed backup function of the RDS Database, it is\n  possible to define the backup window and retention period of the backup. Each\n  customer should have a retention policy set for the type of data being stored.\n  Recommend setting this to at least 7.\n  Possible values are from 0 to 35 days.",
        "cis_rid": "3.8",
        "cis_level": 1,
        "nist": [
          "CP-9",
          "Rev_4"
        ],
        "check": "Using the Amazon unified command line interface:\n  * Check if your application DB instances have a Backup Retention Period set (0\n  = there is no backup retention in place, 7 = there are 7 daily backups\n  retained):\n\n  aws rds describe-db-instances --filters\n  Name=tag:<data_tier_tag>,Values=<data_tier_tag_value> --query\n  'DBInstances[*].{BackupRetentionPeriod:BackupRetentionPeriod,\n  DBInstanceIdentifier:DBInstanceIdentifier}'\n  ",
        "fix": "Using the Amazon unified command line interface:\n  * Modify each DB instance with Backup Retention Period of 0, and set a desired\n  Backup Retention Period in days (recommended value = 7):\n\n  aws rds modify-db-instance --db-instance-identifier <your_db_instance>\n  --backup- retention-period <backup_retention_period>"
      },
      "code": "control 'aws-rds-baseline-4' do\n  title 'Ensure Relational Database Service backup retention policy is set.'\n  desc 'Amazon Relational Database Service (RDS) is a managed relational database\n  service which handles routine database tasks such as provisioning, patching,\n  backup, recovery, failure detection, and repair.\n  There are 6 database engines available for customer to run their database\n  workloads on:\n  * Amazon Aurora (MySQL Compatible)\n  * MySQL\n  * MariaDB\n  * Oracle\n  * Microsoft SQL Server\n  * PostgreSQL.\n  '\n  impact 0.3\n  tag \"rationale\": 'Provides a managed backup function of the RDS Database, it is\n  possible to define the backup window and retention period of the backup. Each\n  customer should have a retention policy set for the type of data being stored.\n  Recommend setting this to at least 7.\n  Possible values are from 0 to 35 days.'\n  tag \"cis_rid\": '3.8'\n  tag \"cis_level\": 1\n  tag \"nist\": ['CP-9', 'Rev_4']\n  tag \"check\": \"Using the Amazon unified command line interface:\n  * Check if your application DB instances have a Backup Retention Period set (0\n  = there is no backup retention in place, 7 = there are 7 daily backups\n  retained):\n\n  aws rds describe-db-instances --filters\n  Name=tag:<data_tier_tag>,Values=<data_tier_tag_value> --query\n  'DBInstances[*].{BackupRetentionPeriod:BackupRetentionPeriod,\n  DBInstanceIdentifier:DBInstanceIdentifier}'\n  \"\n\n  tag \"fix\": \"Using the Amazon unified command line interface:\n  * Modify each DB instance with Backup Retention Period of 0, and set a desired\n  Backup Retention Period in days (recommended value = 7):\n\n  aws rds modify-db-instance --db-instance-identifier <your_db_instance>\n  --backup- retention-period <backup_retention_period>\"\n  input('db_instance_identifier').each do |identifier|\n    describe aws_rds_instance(identifier.to_s) do\n      its('backup_retention_period') { should cmp >= 7 }\n    end\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS CIS/controls/aws-rds-baseline-4.rb",
        "line": 1
      },
      "id": "aws-rds-baseline-4"
    },
    {
      "title": "Ensure RDS event subscriptions are enabled for Instance level events",
      "desc": "AWS Relational Database Services offers customers a managed database\n  engine solution for hosting customer created databases which can allow for a\n  reduction in operational burden on customers.\n  RDS event subscriptions provide notification of selected event changes at\n  DataBase engine level such as:\n    * Deletion\n    * Failure\n    * Failover\n    * Low Storage\n    * Maintenance",
      "descriptions": {
        "default": "AWS Relational Database Services offers customers a managed database\n  engine solution for hosting customer created databases which can allow for a\n  reduction in operational burden on customers.\n  RDS event subscriptions provide notification of selected event changes at\n  DataBase engine level such as:\n    * Deletion\n    * Failure\n    * Failover\n    * Low Storage\n    * Maintenance"
      },
      "impact": 0.3,
      "refs": [],
      "tags": {
        "rationale": "Event subscriptions are designed to provide incident\n  notification of events which may affect the availability of a RDS database\n  instance.",
        "cis_rid": "4.3",
        "cis_level": 1,
        "nist": [
          "IR-6",
          "Rev_4"
        ],
        "check": "Using the Amazon unified CLI:\n  * List all present event subscriptions and review the value of 'db-instance'\n    associated with 'SourceType' element:\n\n    aws rds describe-event-subscriptions --query\n    'EventSubscriptionsList[*].{SourceType:SourceType, SourceIdsList:SourceIdsList,\n    EventCategoriesList:EventCategoriesList}'\n\n    * 'EventCategoriesList' will list all event categories which will be reported on\n    * 'SourceIdsList' will list all RDS DB instances included (null=all instances)\n    ",
        "fix": "Using the Amazon unified CLI:\n  * Create a new event subscription for DB instance level events:\n    aws rds create-event-subscription --subscription-name <rds_event_subscription>\n    --sns- topic-arn <sns_topic_arn> --source-type db-instance --event-categories\n    <rds_events> -- source-ids <events_source_ids> --enabled\n  "
      },
      "code": "control 'aws-rds-baseline-6' do\n  title 'Ensure RDS event subscriptions are enabled for Instance level events'\n  desc  'AWS Relational Database Services offers customers a managed database\n  engine solution for hosting customer created databases which can allow for a\n  reduction in operational burden on customers.\n  RDS event subscriptions provide notification of selected event changes at\n  DataBase engine level such as:\n    * Deletion\n    * Failure\n    * Failover\n    * Low Storage\n    * Maintenance'\n  impact 0.3\n  tag \"rationale\": 'Event subscriptions are designed to provide incident\n  notification of events which may affect the availability of a RDS database\n  instance.'\n  tag \"cis_rid\": '4.3'\n  tag \"cis_level\": 1\n  tag \"nist\": ['IR-6', 'Rev_4']\n  tag \"check\": \"Using the Amazon unified CLI:\n  * List all present event subscriptions and review the value of \\'db-instance\\'\n    associated with 'SourceType' element:\n\n    aws rds describe-event-subscriptions --query\n    'EventSubscriptionsList[*].{SourceType:SourceType, SourceIdsList:SourceIdsList,\n    EventCategoriesList:EventCategoriesList}'\n\n    * 'EventCategoriesList' will list all event categories which will be reported on\n    * 'SourceIdsList' will list all RDS DB instances included (null=all instances)\n    \"\n\n  tag \"fix\": \"Using the Amazon unified CLI:\n  * Create a new event subscription for DB instance level events:\n    aws rds create-event-subscription --subscription-name <rds_event_subscription>\n    --sns- topic-arn <sns_topic_arn> --source-type db-instance --event-categories\n    <rds_events> -- source-ids <events_source_ids> --enabled\n  \"\n\n  entries = aws_rds_event_subscriptions.where(source_type: 'db-instance').where(status: 'active').where(enabled: true)\n\n  # aws_rds_event_subscriptions.where{source_type.flatten.include?('all')}\n  describe.one do\n    describe 'DB-Instance Event Subscriptions' do\n      subject { entries }\n      it { should exist }\n      its('event_categories_lists.flatten') { should include 'all' }\n    end\n    describe 'DB-Instance Event Subscriptions' do\n      subject { entries }\n      it { should exist }\n      its('event_categories_lists.flatten') { should include 'deletion' }\n      its('event_categories_lists.flatten') { should include 'failure' }\n      its('event_categories_lists.flatten') { should include 'failover' }\n      its('event_categories_lists.flatten') { should include 'low storage' }\n      its('event_categories_lists.flatten') { should include 'maintenance' }\n      its('event_categories_lists.flatten') { should include 'notification' }\n    end\n  end\n\n  db_instance_identifier = input('db_instance_identifier')\n\n  describe.one do\n    describe 'DB-Instance Event Subscriptions' do\n      subject { entries }\n      it { should exist }\n      its('source_ids_lists.flatten') { should include 'all' }\n    end\n    describe 'All DB-Instances should be in Event Subscription source_ids_lists' do\n      subject { db_instance_identifier }\n      it { should be_in entries.source_ids_lists.flatten }\n    end\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS CIS/controls/aws-rds-baseline-6.rb",
        "line": 1
      },
      "id": "aws-rds-baseline-6"
    },
    {
      "title": " Ensure a SNS topic is created for sending out notifications from RDS\n  events.",
      "desc": "For the RDS event subscriptions to be able to send out notifications, a\n  SNS topic should be created.\n  Amazon Simple Notification Service (Amazon SNS) is a web service that\n  coordinates and manages the delivery or sending of messages to subscribing\n  endpoints or clients.\n  When using Amazon SNS, you (as the owner) create a topic and control access to\n  it by defining policies that determine which publishers and subscribers can\n  communicate with the topic.",
      "descriptions": {
        "default": "For the RDS event subscriptions to be able to send out notifications, a\n  SNS topic should be created.\n  Amazon Simple Notification Service (Amazon SNS) is a web service that\n  coordinates and manages the delivery or sending of messages to subscribing\n  endpoints or clients.\n  When using Amazon SNS, you (as the owner) create a topic and control access to\n  it by defining policies that determine which publishers and subscribers can\n  communicate with the topic."
      },
      "impact": 0.3,
      "refs": [],
      "tags": {
        "rationale": "RDS events generated through defined RDS event subscriptions\n  needs to be sent out to administrators, in order to be acted upon.",
        "cis_rid": "4.2",
        "cis_level": 1,
        "nist": [
          "CM-6",
          "Rev_4"
        ],
        "check": "Using the Amazon unified CLI:\n  * List all RDS event subscriptions in order to capture the topic-arn:\n\n  aws rds describe-event-subscriptions --query\n  'EventSubscriptionsList[*].{SourceType:SourceType,\n  SourceIdsList:SourceIdsList,\n  EventCategoriesList:EventCategoriesList}'\n\n  * List SNS topic attributes:\n\n  aws sns list-topic-attributes --topic-arn <sns_topic_arn>\n\n  * List SNS topic subscriptions (endpoint which receives messages captured by\n  the SNS topic):\n\n  aws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n  ",
        "fix": "Using the Amazon unified CLI:\n\n  * Create a new topic, and note the topic-arn value:\n\n  aws sns create-topic --name <sns_topic_name>\n\n  * Create a subscription to the new topic:\n\n  aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --\n  notification-endpoint <sns_subscription_endpoints>\n  "
      },
      "code": "control 'aws-rds-baseline-5' do\n  title ' Ensure a SNS topic is created for sending out notifications from RDS\n  events.'\n  desc 'For the RDS event subscriptions to be able to send out notifications, a\n  SNS topic should be created.\n  Amazon Simple Notification Service (Amazon SNS) is a web service that\n  coordinates and manages the delivery or sending of messages to subscribing\n  endpoints or clients.\n  When using Amazon SNS, you (as the owner) create a topic and control access to\n  it by defining policies that determine which publishers and subscribers can\n  communicate with the topic.'\n  impact 0.3\n  tag \"rationale\": 'RDS events generated through defined RDS event subscriptions\n  needs to be sent out to administrators, in order to be acted upon.'\n  tag \"cis_rid\": '4.2'\n  tag \"cis_level\": 1\n  tag \"nist\": ['CM-6', 'Rev_4']\n  tag \"check\": \"Using the Amazon unified CLI:\n  * List all RDS event subscriptions in order to capture the topic-arn:\n\n  aws rds describe-event-subscriptions --query\n  'EventSubscriptionsList[*].{SourceType:SourceType,\n  SourceIdsList:SourceIdsList,\n  EventCategoriesList:EventCategoriesList}'\n\n  * List SNS topic attributes:\n\n  aws sns list-topic-attributes --topic-arn <sns_topic_arn>\n\n  * List SNS topic subscriptions (endpoint which receives messages captured by\n  the SNS topic):\n\n  aws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n  \"\n\n  tag \"fix\": \"Using the Amazon unified CLI:\n\n  * Create a new topic, and note the topic-arn value:\n\n  aws sns create-topic --name <sns_topic_name>\n\n  * Create a subscription to the new topic:\n\n  aws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns> --\n  notification-endpoint <sns_subscription_endpoints>\n  \"\n  describe aws_rds_event_subscriptions do\n    its('event_subscription_arns') { should_not be_empty }\n  end\n  describe aws_rds_event_subscriptions do\n    its('source_types') { should_not be_empty }\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS CIS/controls/aws-rds-baseline-5.rb",
        "line": 1
      },
      "id": "aws-rds-baseline-5"
    },
    {
      "title": "Ensure RDS Database is not publicly accessible.",
      "desc": "Amazon Relational Database Service (RDS) is a managed relational database\n  service which handles routine database tasks such as provisioning, patching,\n  backup, recovery, failure detection, and repair.\n  There are 6 database engines available for customer to run their database\n  workloads on:\n  * Amazon Aurora (MySQL Compatible)\n  * MySQL\n  * MariaDB\n  * Oracle\n  * Microsoft SQL Server\n  * PostgreSQL\n  Customers can deploy RDS databases within a VPC through the configuration of:\n  * Subnet Group for RDS, this group will be used for deployment of single or\n  Multi-AZ RDS instances.\n  * Network access through configuration of Security Groups for RDS\n  * Access from outside the VPC hosting the DB instance by enabling/disabling a\n  Public\n  IP address",
      "descriptions": {
        "default": "Amazon Relational Database Service (RDS) is a managed relational database\n  service which handles routine database tasks such as provisioning, patching,\n  backup, recovery, failure detection, and repair.\n  There are 6 database engines available for customer to run their database\n  workloads on:\n  * Amazon Aurora (MySQL Compatible)\n  * MySQL\n  * MariaDB\n  * Oracle\n  * Microsoft SQL Server\n  * PostgreSQL\n  Customers can deploy RDS databases within a VPC through the configuration of:\n  * Subnet Group for RDS, this group will be used for deployment of single or\n  Multi-AZ RDS instances.\n  * Network access through configuration of Security Groups for RDS\n  * Access from outside the VPC hosting the DB instance by enabling/disabling a\n  Public\n  IP address"
      },
      "impact": 0.3,
      "refs": [],
      "tags": {
        "rationale": "Network access to the managed Data-Tier must be tightly\n  controlled using Security Groups for RDS and non local accessibility of the DB\n  instance.",
        "cis_rid": "6.30",
        "cis_level": 1,
        "nist": [
          "SC-7",
          "Rev_4"
        ],
        "check": "Using the Amazon unified command line interface:\n  * Check if your application DB instances are publicly available:\n\n  aws rds describe-db-instances --filters\n  Name=tag:<data_tier_tag>,Values=<data_tier_tag_value> --query\n  'DBInstances[*].{PubliclyAccessible:PubliclyAccessible,\n  DBInstanceIdentifier:DBInstanceIdentifier}'\n  ",
        "fix": "Using the Amazon unified command line interface:\n  * Modify each publicly accessible DB instance, and make it private:\n\n  aws rds modify-db-instance --db-instance-identifier <your_db_instance>\n  --no-publicly- accessible\n  "
      },
      "code": "control 'aws-rds-baseline-10' do\n  title 'Ensure RDS Database is not publicly accessible.'\n  desc 'Amazon Relational Database Service (RDS) is a managed relational database\n  service which handles routine database tasks such as provisioning, patching,\n  backup, recovery, failure detection, and repair.\n  There are 6 database engines available for customer to run their database\n  workloads on:\n  * Amazon Aurora (MySQL Compatible)\n  * MySQL\n  * MariaDB\n  * Oracle\n  * Microsoft SQL Server\n  * PostgreSQL\n  Customers can deploy RDS databases within a VPC through the configuration of:\n  * Subnet Group for RDS, this group will be used for deployment of single or\n  Multi-AZ RDS instances.\n  * Network access through configuration of Security Groups for RDS\n  * Access from outside the VPC hosting the DB instance by enabling/disabling a\n  Public\n  IP address'\n  impact 0.3\n  tag \"rationale\": 'Network access to the managed Data-Tier must be tightly\n  controlled using Security Groups for RDS and non local accessibility of the DB\n  instance.'\n  tag \"cis_rid\": '6.30'\n  tag \"cis_level\": 1\n  tag \"nist\": ['SC-7', 'Rev_4']\n  tag \"check\": \"Using the Amazon unified command line interface:\n  * Check if your application DB instances are publicly available:\n\n  aws rds describe-db-instances --filters\n  Name=tag:<data_tier_tag>,Values=<data_tier_tag_value> --query\n  'DBInstances[*].{PubliclyAccessible:PubliclyAccessible,\n  DBInstanceIdentifier:DBInstanceIdentifier}'\n  \"\n\n  tag \"fix\": \"Using the Amazon unified command line interface:\n  * Modify each publicly accessible DB instance, and make it private:\n\n  aws rds modify-db-instance --db-instance-identifier <your_db_instance>\n  --no-publicly- accessible\n  \"\n  input('db_instance_identifier').each do |identifier|\n    describe aws_rds_instance(identifier.to_s) do\n      its('publicly_accessible') { should_not be true }\n    end\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS CIS/controls/aws-rds-baseline-10.rb",
        "line": 1
      },
      "id": "aws-rds-baseline-10"
    },
    {
      "title": "Ensure Relational Database Service Instances have Auto Minor Version\n  Upgrade Enabled.",
      "desc": "Amazon Relational Database Service (RDS) is a managed relational database\n  service which handles routine database tasks such as provisioning, patching,\n  backup, recovery, failure detection, and repair.\n  There are 6 database engines available for customer to run their database\n  workloads on:\n  * Amazon Aurora (MySQL Compatible)\n  * MySQL\n  * MariaDB\n  * Oracle\n  * Microsoft SQL Server\n  * PostgreSQL\n  If the database engine used by your application supports it, ensure that the\n  RDS Instances have Auto Minor Version Upgrade Enabled.",
      "descriptions": {
        "default": "Amazon Relational Database Service (RDS) is a managed relational database\n  service which handles routine database tasks such as provisioning, patching,\n  backup, recovery, failure detection, and repair.\n  There are 6 database engines available for customer to run their database\n  workloads on:\n  * Amazon Aurora (MySQL Compatible)\n  * MySQL\n  * MariaDB\n  * Oracle\n  * Microsoft SQL Server\n  * PostgreSQL\n  If the database engine used by your application supports it, ensure that the\n  RDS Instances have Auto Minor Version Upgrade Enabled."
      },
      "impact": 0.3,
      "refs": [],
      "tags": {
        "rationale": "Ensures automated patch management is in place on the RDS\n  instance to ensure the database engine has all the latest patches applied.",
        "cis_rid": "3.6",
        "cis_level": 1,
        "nist": [
          "CM-6",
          "Rev_4"
        ],
        "check": "Using the Amazon unified command line interface:\n  * Check if your application DB instances have Auto Minor Version Upgrade\n  enabled:\n\n  aws rds describe-db-instances --filters\n  Name=tag:<data_tier_tag>,Values=<data_tier_tag_value> --query\n  'DBInstances[*].{AutoMinorVersionUpgrade:AutoMinorVersionUpgrade,\n  DBInstanceIdentifier:DBInstanceIdentifier}'\n  ",
        "fix": "Using the Amazon unified command line interface:\n  * Modify each DB instance with auto-minor-version-upgrade set to False, and\n  enable auto-minor-version-upgrade:\n\n  aws rds modify-db-instance --db-instance-identifier <your_db_instance>\n  --auto-minor- version-upgrade"
      },
      "code": "control 'aws-rds-baseline-3' do\n  title 'Ensure Relational Database Service Instances have Auto Minor Version\n  Upgrade Enabled.'\n  desc 'Amazon Relational Database Service (RDS) is a managed relational database\n  service which handles routine database tasks such as provisioning, patching,\n  backup, recovery, failure detection, and repair.\n  There are 6 database engines available for customer to run their database\n  workloads on:\n  * Amazon Aurora (MySQL Compatible)\n  * MySQL\n  * MariaDB\n  * Oracle\n  * Microsoft SQL Server\n  * PostgreSQL\n  If the database engine used by your application supports it, ensure that the\n  RDS Instances have Auto Minor Version Upgrade Enabled.\n  '\n  impact 0.3\n  tag \"rationale\": 'Ensures automated patch management is in place on the RDS\n  instance to ensure the database engine has all the latest patches applied.'\n  tag \"cis_rid\": '3.6'\n  tag \"cis_level\": 1\n  tag \"nist\": ['CM-6', 'Rev_4']\n  tag \"check\": \"Using the Amazon unified command line interface:\n  * Check if your application DB instances have Auto Minor Version Upgrade\n  enabled:\n\n  aws rds describe-db-instances --filters\n  Name=tag:<data_tier_tag>,Values=<data_tier_tag_value> --query\n  'DBInstances[*].{AutoMinorVersionUpgrade:AutoMinorVersionUpgrade,\n  DBInstanceIdentifier:DBInstanceIdentifier}'\n  \"\n\n  tag \"fix\": \"Using the Amazon unified command line interface:\n  * Modify each DB instance with auto-minor-version-upgrade set to False, and\n  enable auto-minor-version-upgrade:\n\n  aws rds modify-db-instance --db-instance-identifier <your_db_instance>\n  --auto-minor- version-upgrade\"\n  input('db_instance_identifier').each do |identifier|\n    describe aws_rds_instance(identifier.to_s) do\n      its('auto_minor_version_upgrade') { should be true }\n    end\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS CIS/controls/aws-rds-baseline-3.rb",
        "line": 1
      },
      "id": "aws-rds-baseline-3"
    },
    {
      "title": "Ensure Data tier Security Group has no inbound rules for CIDR of 0\n  (Global Allow).",
      "desc": "A security group acts as a virtual firewall for your instance to control\n  inbound and outbound traffic. When you launch an instance in the AWS Virtual\n  Private Cloud (VPC), you can assign the instance to up to five security groups.\n  Security groups act at the instance level, not the subnet level. Therefore,\n  each instance in a subnet in your VPC could be assigned to a different set of\n  security groups. If you don't specify a particular group at launch time, the\n  instance is automatically assigned to the default security group for the VPC.\n  For each security group, you add rules that control the inbound traffic to\n  instances, and a separate set of rules that control the outbound traffic.",
      "descriptions": {
        "default": "A security group acts as a virtual firewall for your instance to control\n  inbound and outbound traffic. When you launch an instance in the AWS Virtual\n  Private Cloud (VPC), you can assign the instance to up to five security groups.\n  Security groups act at the instance level, not the subnet level. Therefore,\n  each instance in a subnet in your VPC could be assigned to a different set of\n  security groups. If you don't specify a particular group at launch time, the\n  instance is automatically assigned to the default security group for the VPC.\n  For each security group, you add rules that control the inbound traffic to\n  instances, and a separate set of rules that control the outbound traffic."
      },
      "impact": 0.3,
      "refs": [],
      "tags": {
        "rationale": "Considering any of the non-public tiers receive requests only\n  either from the upper tier or from resources inside the same VPC, any inbound\n  rules that allow traffic from any source (0.0.0.0/0) are not necessary and\n  should be removed.",
        "cis_rid": "6.25",
        "cis_level": 1,
        "nist": [
          "SC-7",
          "Rev_4"
        ],
        "check": "Using the Amazon unified command line interface:\n  Using the Amazon unified command line interface:\n\n  * Retrieve the Data tier security group configured for your RDS DB instance:\n\n  aws rds describe-db-instances --db-instance-identifier <your_db_instance>\n\n  * List the ingress rules for the above security group, and make sure it has no\n  inbound rules for CIDR of 0.0.0.0/0:\n\n  aws ec2 describe-security-groups --group-ids <data_tier_security_group> --query\n  'SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}' --output\n  table\n  ",
        "fix": "Using the Amazon unified command line interface:\n\n  * Remove the ingress rules for CIDR 0.0.0.0/0:\n  aws ec2 revoke-security-group-ingress --group-id <data_tier_security_group>\n  --protocol tcp/udp --port <specific_port> --cidr 0.0.0.0/0\n  "
      },
      "code": "control 'aws-rds-baseline-9' do\n  title 'Ensure Data tier Security Group has no inbound rules for CIDR of 0\n  (Global Allow).'\n  desc \"A security group acts as a virtual firewall for your instance to control\n  inbound and outbound traffic. When you launch an instance in the AWS Virtual\n  Private Cloud (VPC), you can assign the instance to up to five security groups.\n  Security groups act at the instance level, not the subnet level. Therefore,\n  each instance in a subnet in your VPC could be assigned to a different set of\n  security groups. If you don't specify a particular group at launch time, the\n  instance is automatically assigned to the default security group for the VPC.\n  For each security group, you add rules that control the inbound traffic to\n  instances, and a separate set of rules that control the outbound traffic.\"\n  impact 0.3\n  tag \"rationale\": 'Considering any of the non-public tiers receive requests only\n  either from the upper tier or from resources inside the same VPC, any inbound\n  rules that allow traffic from any source (0.0.0.0/0) are not necessary and\n  should be removed.'\n  tag \"cis_rid\": '6.25'\n  tag \"cis_level\": 1\n  tag \"nist\": ['SC-7', 'Rev_4']\n  tag \"check\": \"Using the Amazon unified command line interface:\n  Using the Amazon unified command line interface:\n\n  * Retrieve the Data tier security group configured for your RDS DB instance:\n\n  aws rds describe-db-instances --db-instance-identifier <your_db_instance>\n\n  * List the ingress rules for the above security group, and make sure it has no\n  inbound rules for CIDR of 0.0.0.0/0:\n\n  aws ec2 describe-security-groups --group-ids <data_tier_security_group> --query\n  'SecurityGroups[*].{GroupName:GroupName, IpPermissions:IpPermissions}' --output\n  table\n  \"\n\n  tag \"fix\": \"Using the Amazon unified command line interface:\n\n  * Remove the ingress rules for CIDR 0.0.0.0/0:\n  aws ec2 revoke-security-group-ingress --group-id <data_tier_security_group>\n  --protocol tcp/udp --port <specific_port> --cidr 0.0.0.0/0\n  \"\n  input('db_instance_identifier').each do |identifier|\n    rds_vpc_security_groups = aws_rds_instance(identifier.to_s).vpc_security_groups.where(status: 'active').vpc_security_group_ids\n    rds_vpc_security_groups.each do |security_group|\n      describe aws_security_group(id: security_group) do\n        it { should_not allow_in(ipv4_range: '0.0.0.0/0') }\n      end\n    end\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS CIS/controls/aws-rds-baseline-9.rb",
        "line": 1
      },
      "id": "aws-rds-baseline-9"
    },
    {
      "title": " Ensure RDS event subscriptions are enabled for DB security groups.",
      "desc": "AWS Relational Database Services offers customers a managed database\n  engine solution for hosting customer created databases which can allow for a\n  reduction in operational burden on customers.\n  RDS event subscriptions provide notification of selected event changes at a DB\n  security group level",
      "descriptions": {
        "default": "AWS Relational Database Services offers customers a managed database\n  engine solution for hosting customer created databases which can allow for a\n  reduction in operational burden on customers.\n  RDS event subscriptions provide notification of selected event changes at a DB\n  security group level"
      },
      "impact": 0.3,
      "refs": [],
      "tags": {
        "rationale": "Event subscriptions are designed to provide incident\n  notification of events which may affect the network availability of the RDS\n  instance.",
        "cis_rid": "4.4",
        "cis_level": 1,
        "nist": [
          "IR-6",
          "Rev_4"
        ],
        "check": "Using the Amazon unified CLI:\n  * List all present event subscriptions and review the value of\n  'db-security-group' associated with 'SourceType' element:\n\n  aws rds describe-event-subscriptions --query\n  'EventSubscriptionsList[*].{SourceType:SourceType,\n  SourceIdsList:SourceIdsList,\n  EventCategoriesList:EventCategoriesList}'\n\n  * 'EventCategoriesList' will list all event categories which will be reported\n  on\n  * 'SourceIdsList' will list all RDS DB instances included (null=all\n  instances)",
        "fix": "Using the Amazon unified CLI:\n  * Create a new event subscription for DB Security Group events:\n  aws rds create-event-subscription --subscription-name <rds_event_subscription>\n  --sns- topic-arn <sns_topic_arn> --source-type db-security-group\n  --event-categories <rds_events> --source-ids <events_source_ids> --enabled\n  "
      },
      "code": "control 'aws-rds-baseline-7' do\n  title ' Ensure RDS event subscriptions are enabled for DB security groups.'\n  desc 'AWS Relational Database Services offers customers a managed database\n  engine solution for hosting customer created databases which can allow for a\n  reduction in operational burden on customers.\n  RDS event subscriptions provide notification of selected event changes at a DB\n  security group level'\n  impact 0.3\n  tag \"rationale\": 'Event subscriptions are designed to provide incident\n  notification of events which may affect the network availability of the RDS\n  instance.'\n  tag \"cis_rid\": '4.4'\n  tag \"cis_level\": 1\n  tag \"nist\": ['IR-6', 'Rev_4']\n  tag \"check\": \"Using the Amazon unified CLI:\n  * List all present event subscriptions and review the value of\n  'db-security-group' associated with 'SourceType' element:\n\n  aws rds describe-event-subscriptions --query\n  'EventSubscriptionsList[*].{SourceType:SourceType,\n  SourceIdsList:SourceIdsList,\n  EventCategoriesList:EventCategoriesList}'\n\n  * 'EventCategoriesList' will list all event categories which will be reported\n  on\n  * 'SourceIdsList' will list all RDS DB instances included (null=all\n  instances)\"\n\n  tag \"fix\": \"Using the Amazon unified CLI:\n  * Create a new event subscription for DB Security Group events:\n  aws rds create-event-subscription --subscription-name <rds_event_subscription>\n  --sns- topic-arn <sns_topic_arn> --source-type db-security-group\n  --event-categories <rds_events> --source-ids <events_source_ids> --enabled\n  \"\n\n  entries = aws_rds_event_subscriptions.where(source_type: 'db-security-group').where(status: 'active').where(enabled: true)\n\n  describe 'DB Security Group Event Subscriptions' do\n    subject { entries }\n    its('event_categories_lists.flatten') { should_not be_empty }\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS CIS/controls/aws-rds-baseline-7.rb",
        "line": 1
      },
      "id": "aws-rds-baseline-7"
    },
    {
      "title": "Ensure Databases running on RDS have encryption at rest enabled",
      "desc": "Amazon RDS instances and snapshots can be encrypted at rest by\n  enabling the encryption option on the Amazon RDS DB instance. Data that is\n  encrypted at rest includes the underlying storage for a DB instance, its\n  automated backups, read replicas, and snapshots. It is recommended that\n  encryption at rest be enabled.",
      "descriptions": {
        "default": "Amazon RDS instances and snapshots can be encrypted at rest by\n  enabling the encryption option on the Amazon RDS DB instance. Data that is\n  encrypted at rest includes the underlying storage for a DB instance, its\n  automated backups, read replicas, and snapshots. It is recommended that\n  encryption at rest be enabled."
      },
      "impact": 0.3,
      "refs": [],
      "tags": {
        "rationale": "Enabling encryption at rest will help ensure that the\n  confidentiality of data stored in RDS, snapshots, and backups, is maintained.\n",
        "cis_rid": "1.4",
        "cis_level": 1,
        "nist": [
          "SC-28",
          "Rev_4"
        ],
        "check": "Using the Amazon unified CLI:\n  * List all current RDS instances and review the encryption status of the\n  DB instance:\n\n  aws rds describe-db-instances --query 'DBInstances[*].{DBName:DBName,\n  EncryptionEnabled:StorageEncrypted, CMK:KmsKeyId}' ",
        "fix": "Using the Amazon unified CLI:\n  * Perform a snapshot of the DB instance:\n\n  aws rds create-db-snapshot --db-snapshot-identifier <db_snapshot>\n  --db-instance- identifier <your_db_instance>\n\n  * Confirm created snapshot is available (once snapshot process has\n  completed):\n\n  aws rds describe-db-snapshots --query\n  'DBSnapshots[*].{DBSnapshotIdentifier:DBSnapshotIdentifier,\n  DBInstanceIdentifier:DBInstanceIdentifier, Snapshotstatus:Status}'\n\n  * List all KMS Customer Managed Keys: aws kms list-aliases\n\n  aws kms list-aliases\n\n  * Copy to source RDS snapshot (from previous step) to a destination snapshot\n  which will be encrypted:\n\n  aws rds copy-db-snapshot --source-db-snapshot-identifier <db_snapshot>\n  --target-db- snapshot-identifier <encrypted_db_snapshot>\n  --kms-key-id <data_tier_kms_key>\n\n  * Restore a snapshot to the target DB instance(from previous step) with same\n  values as original db instance with additional encrypted storage values:\n\n  aws rds restore-db-instance-from-db-snapshot --db-instance-identifier\n  <your_db_instance> --db-snapshot-identifier <encrypted_db_snapshot>\n\n"
      },
      "code": "control 'aws-rds-baseline-1' do\n  title 'Ensure Databases running on RDS have encryption at rest enabled'\n  desc  'Amazon RDS instances and snapshots can be encrypted at rest by\n  enabling the encryption option on the Amazon RDS DB instance. Data that is\n  encrypted at rest includes the underlying storage for a DB instance, its\n  automated backups, read replicas, and snapshots. It is recommended that\n  encryption at rest be enabled.'\n  impact 0.3\n  tag \"rationale\": 'Enabling encryption at rest will help ensure that the\n  confidentiality of data stored in RDS, snapshots, and backups, is maintained.\n'\n  tag \"cis_rid\": '1.4'\n  tag \"cis_level\": 1\n  tag \"nist\": ['SC-28', 'Rev_4']\n  tag \"check\": \"Using the Amazon unified CLI:\n  * List all current RDS instances and review the encryption status of the\n  DB instance:\n\n  aws rds describe-db-instances --query 'DBInstances[*].{DBName:DBName,\n  EncryptionEnabled:StorageEncrypted, CMK:KmsKeyId}' \"\n\n  tag \"fix\": \"Using the Amazon unified CLI:\n  * Perform a snapshot of the DB instance:\n\n  aws rds create-db-snapshot --db-snapshot-identifier <db_snapshot>\n  --db-instance- identifier <your_db_instance>\n\n  * Confirm created snapshot is available (once snapshot process has\n  completed):\n\n  aws rds describe-db-snapshots --query\n  'DBSnapshots[*].{DBSnapshotIdentifier:DBSnapshotIdentifier,\n  DBInstanceIdentifier:DBInstanceIdentifier, Snapshotstatus:Status}'\n\n  * List all KMS Customer Managed Keys: aws kms list-aliases\n\n  aws kms list-aliases\n\n  * Copy to source RDS snapshot (from previous step) to a destination snapshot\n  which will be encrypted:\n\n  aws rds copy-db-snapshot --source-db-snapshot-identifier <db_snapshot>\n  --target-db- snapshot-identifier <encrypted_db_snapshot>\n  --kms-key-id <data_tier_kms_key>\n\n  * Restore a snapshot to the target DB instance(from previous step) with same\n  values as original db instance with additional encrypted storage values:\n\n  aws rds restore-db-instance-from-db-snapshot --db-instance-identifier\n  <your_db_instance> --db-snapshot-identifier <encrypted_db_snapshot>\n\n\"\n  input('db_instance_identifier').each do |identifier|\n    describe aws_rds_instance(identifier.to_s) do\n      its('storage_encrypted') { should be true }\n    end\n  end\nend\n",
      "source_location": {
        "ref": "./AWS RDS CIS/controls/aws-rds-baseline-1.rb",
        "line": 1
      },
      "id": "aws-rds-baseline-1"
    }
  ],
  "groups": [
    {
      "title": null,
      "controls": [
        "aws-rds-baseline-11"
      ],
      "id": "controls/aws-rds-baseline-11.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-rds-baseline-8"
      ],
      "id": "controls/aws-rds-baseline-8.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-rds-baseline-2"
      ],
      "id": "controls/aws-rds-baseline-2.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-rds-baseline-4"
      ],
      "id": "controls/aws-rds-baseline-4.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-rds-baseline-6"
      ],
      "id": "controls/aws-rds-baseline-6.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-rds-baseline-5"
      ],
      "id": "controls/aws-rds-baseline-5.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-rds-baseline-10"
      ],
      "id": "controls/aws-rds-baseline-10.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-rds-baseline-3"
      ],
      "id": "controls/aws-rds-baseline-3.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-rds-baseline-9"
      ],
      "id": "controls/aws-rds-baseline-9.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-rds-baseline-7"
      ],
      "id": "controls/aws-rds-baseline-7.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-rds-baseline-1"
      ],
      "id": "controls/aws-rds-baseline-1.rb"
    }
  ],
  "sha256": "39b566c3c6ee1d7b877c25e83f60d945a769a79d39628a280e565dcc98d1dbd6",
  "status_message": "",
  "status": "loaded",
  "generator": {
    "name": "inspec",
    "version": "4.33.1"
  }
}