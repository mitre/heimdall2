{
  "name": "aws-foundations-cis-baseline",
  "title": "aws-foundations-cis-baseline",
  "maintainer": "MITRE InSpec Team",
  "copyright": "MITRE, 2020",
  "copyright_email": "inspec@mitre.org",
  "license": "Apache-2.0",
  "summary": "InSpec Validation Profile for AWS Foundations CIS",
  "version": "1.2.3",
  "inspec_version": ">= 4.0",
  "supports": [
    {
      "platform": "aws"
    }
  ],
  "depends": [
    {
      "name": "inspec-aws",
      "url": "https://github.com/inspec/inspec-aws/archive/main.tar.gz",
      "status": "loaded"
    }
  ],
  "inputs": [],
  "controls": [
    {
      "title": "Ensure CloudTrail logs are encrypted at rest using KMS CMKs",
      "desc": "AWS CloudTrail is a web service that records AWS API calls for an account and makes those logs available to users and resources in accordance with IAM policies. AWS Key Management Service (KMS) is a managed service that helps create and control the encryption keys used to encrypt account data, and uses Hardware Security Modules (HSMs) to protect the security of encryption keys. CloudTrail logs can be configured to leverage server side encryption (SSE) and KMS customer created master keys (CMK) to further protect CloudTrail logs. It is recommended that CloudTrail be configured to use SSE-KMS.",
      "descriptions": {
        "default": "AWS CloudTrail is a web service that records AWS API calls for an account and makes those logs available to users and resources in accordance with IAM policies. AWS Key Management Service (KMS) is a managed service that helps create and control the encryption keys used to encrypt account data, and uses Hardware Security Modules (HSMs) to protect the security of encryption keys. CloudTrail logs can be configured to leverage server side encryption (SSE) and KMS customer created master keys (CMK) to further protect CloudTrail logs. It is recommended that CloudTrail be configured to use SSE-KMS.",
        "rationale": "Configuring CloudTrail to use SSE-KMS provides additional confidentiality controls on log data as a given user must have S3 read permission on the corresponding log bucket and must be granted decrypt permission by the CMK policy.",
        "check": "Perform the following to determine if CloudTrail is configured to use SSE-KMS:\n\n    Via the Management Console\n    1. Sign in to the AWS Management Console and open the CloudTrail console at [https://console.aws.amazon.com/cloudtrail](https://console.aws.amazon.com/cloudtrail)\n    2. In the left navigation pane, choose `Trails` .\n    3. Select a Trail\n    4. Under the `S3` section, ensure `Encrypt log files` is set to `Yes` and a KMS key ID is specified in the `KSM Key Id` field.\n\n    Via CLI\n    1. Run the following command:\n    ```\n     aws cloudtrail describe-trails\n    ```\n    2. For each trail listed, SSE-KMS is enabled if the trail has a `KmsKeyId` property defined.",
        "fix": "Perform the following to configure CloudTrail to use SSE-KMS:\n\n    Via the Management Console\n    1. Sign in to the AWS Management Console and open the CloudTrail console at [https://console.aws.amazon.com/cloudtrail](https://console.aws.amazon.com/cloudtrail)\n    2. In the left navigation pane, choose `Trails` .\n    3. Click on a Trail\n    4. Under the `S3` section click on the edit button (pencil icon)\n    5. Click `Advanced`\n    6. Select an existing CMK from the `KMS key Id` drop-down menu\n     - Note: Ensure the CMK is located in the same region as the S3 bucket\n     - Note: You will need to apply a KMS Key policy on the selected CMK in order for CloudTrail as a service to encrypt and decrypt log files using the CMK provided. Steps are provided [here](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/create-kms-key-policy-for-cloudtrail.html) for editing the selected CMK Key policy\n    7. Click `Save`\n    8. You will see a notification message stating that you need to have decrypt permissions on the specified KMS key to decrypt log files.\n    9. Click `Yes`\n\n    Via CLI\n    ```\n    aws cloudtrail update-trail --name\n     --kms-id\n    aws kms put-key-policy --key-id  --policy\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Medium",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AU-6"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Maintenance, Monitoring and Analysis of Audit Logs CONTROL:6 DESCRIPTION:Maintenance, Monitoring and Analysis of Audit Logs;",
        "ref": "CIS CSC v6.0 #13.1: Perform an assessment of data to identify sensitive information.:https://docs.aws.amazon.com/awscloudtrail/latest/userguide encrypting-cloudtrail-log-files-with-aws-kms.html:http://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html:CIS CSC v6.0 #6: Maintenance, Monitoring, and Analysis of Audit Logs"
      },
      "code": "control \"aws-foundations-cis-2.7\" do\n  title \"Ensure CloudTrail logs are encrypted at rest using KMS CMKs\"\n  desc  \"AWS CloudTrail is a web service that records AWS API calls for an account and makes those logs available to users and resources in accordance with IAM policies. AWS Key Management Service (KMS) is a managed service that helps create and control the encryption keys used to encrypt account data, and uses Hardware Security Modules (HSMs) to protect the security of encryption keys. CloudTrail logs can be configured to leverage server side encryption (SSE) and KMS customer created master keys (CMK) to further protect CloudTrail logs. It is recommended that CloudTrail be configured to use SSE-KMS.\"\n  desc  \"rationale\", \"Configuring CloudTrail to use SSE-KMS provides additional confidentiality controls on log data as a given user must have S3 read permission on the corresponding log bucket and must be granted decrypt permission by the CMK policy.\"\n  desc  \"check\", \"Perform the following to determine if CloudTrail is configured to use SSE-KMS:\n\n    Via the Management Console\n    1. Sign in to the AWS Management Console and open the CloudTrail console at [https://console.aws.amazon.com/cloudtrail](https://console.aws.amazon.com/cloudtrail)\n    2. In the left navigation pane, choose `Trails` .\n    3. Select a Trail\n    4. Under the `S3` section, ensure `Encrypt log files` is set to `Yes` and a KMS key ID is specified in the `KSM Key Id` field.\n\n    Via CLI\n    1. Run the following command:\n    ```\n     aws cloudtrail describe-trails\n    ```\n    2. For each trail listed, SSE-KMS is enabled if the trail has a `KmsKeyId` property defined.\"\n  desc  \"fix\", \"Perform the following to configure CloudTrail to use SSE-KMS:\n\n    Via the Management Console\n    1. Sign in to the AWS Management Console and open the CloudTrail console at [https://console.aws.amazon.com/cloudtrail](https://console.aws.amazon.com/cloudtrail)\n    2. In the left navigation pane, choose `Trails` .\n    3. Click on a Trail\n    4. Under the `S3` section click on the edit button (pencil icon)\n    5. Click `Advanced`\n    6. Select an existing CMK from the `KMS key Id` drop-down menu\n     - Note: Ensure the CMK is located in the same region as the S3 bucket\n     - Note: You will need to apply a KMS Key policy on the selected CMK in order for CloudTrail as a service to encrypt and decrypt log files using the CMK provided. Steps are provided [here](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/create-kms-key-policy-for-cloudtrail.html) for editing the selected CMK Key policy\n    7. Click `Save`\n    8. You will see a notification message stating that you need to have decrypt permissions on the specified KMS key to decrypt log files.\n    9. Click `Yes`\n\n    Via CLI\n    ```\n    aws cloudtrail update-trail --name\n     --kms-id\n    aws kms put-key-policy --key-id  --policy\n    ```\"\n  impact 0.5\n  tag severity: \"Medium\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AU-6']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Maintenance, Monitoring and Analysis of Audit Logs CONTROL:6 DESCRIPTION:Maintenance, Monitoring and Analysis of Audit Logs;\"\n  tag ref: \"CIS CSC v6.0 #13.1: Perform an assessment of data to identify sensitive information.:https://docs.aws.amazon.com/awscloudtrail/latest/userguide encrypting-cloudtrail-log-files-with-aws-kms.html:http://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html:CIS CSC v6.0 #6: Maintenance, Monitoring, and Analysis of Audit Logs\"\n\n  \n  describe aws_cloudtrail_trails do\n    it { should exist }\n  end\n\n  aws_cloudtrail_trails.trail_arns.each do |trail|\n    describe aws_cloudtrail_trail(trail) do\n      it { should be_encrypted }\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-2.7.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-2.7"
    },
    {
      "title": "Ensure IAM password policy requires minimum length of 14 or greater",
      "desc": "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are at least a given length. It is recommended that the password policy require a minimum password length 14.",
      "descriptions": {
        "default": "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are at least a given length. It is recommended that the password policy require a minimum password length 14.",
        "rationale": "Setting a password complexity policy increases account resiliency against brute force login attempts.",
        "check": "Perform the following to ensure the password policy is configured as prescribed:\n\n    Via AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Ensure \"Minimum password length\" is set to 14 or greater.\n\n    Via CLI\n    ```\n    aws iam get-account-password-policy\n    ```\n    Ensure the output of the above command includes \"MinimumPasswordLength\": 14 (or higher)",
        "fix": "Perform the following to set the password policy as prescribed:\n\n    Via AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Set \"Minimum password length\" to `14` or greater.\n    5. Click \"Apply password policy\"\n\n     Via CLI\n    ```\n     aws iam update-account-password-policy --minimum-password-length 14\n    ```\n    Note: All commands starting with \"aws iam update-account-password-policy\" can be combined into a single command."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-2"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;",
        "ref": "CIS CSC v6.0 #5.7, #16.12"
      },
      "code": "control \"aws-foundations-cis-1.9\" do\n  title \"Ensure IAM password policy requires minimum length of 14 or greater\"\n  desc  \"Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are at least a given length. It is recommended that the password policy require a minimum password length 14.\"\n  desc  \"rationale\", \"Setting a password complexity policy increases account resiliency against brute force login attempts.\"\n  desc  \"check\", \"Perform the following to ensure the password policy is configured as prescribed:\n\n    Via AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Ensure \\\"Minimum password length\\\" is set to 14 or greater.\n\n    Via CLI\n    ```\n    aws iam get-account-password-policy\n    ```\n    Ensure the output of the above command includes \\\"MinimumPasswordLength\\\": 14 (or higher)\"\n  desc  \"fix\", \"Perform the following to set the password policy as prescribed:\n\n    Via AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Set \\\"Minimum password length\\\" to `14` or greater.\n    5. Click \\\"Apply password policy\\\"\n\n     Via CLI\n    ```\n     aws iam update-account-password-policy --minimum-password-length 14\n    ```\n    Note: All commands starting with \\\"aws iam update-account-password-policy\\\" can be combined into a single command.\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-2']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;\"\n  tag ref: \"CIS CSC v6.0 #5.7, #16.12\"\n\n\n  describe aws_iam_password_policy do\n    it { should exist }\n    its('minimum_password_length') { should cmp >= input(\"pwd_length\") }\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.9.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.9"
    },
    {
      "title": "Ensure a log metric filter and alarm exist for changes to network gateways",
      "desc": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.",
      "descriptions": {
        "default": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.",
        "rationale": "Monitoring changes to network gateways will help ensure that all ingress/egress traffic traverses the VPC border via a controlled path.",
        "check": "Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \"IsMultiRegionTrail\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \"\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \"filterPattern\": \"{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \"SubscriptionArn\" with valid aws ARN.\n    ```\n    Example of valid \"SubscriptionArn\": \"arn:aws:sns::::\"\n    ```",
        "fix": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for network gateways changes and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "CM-6(2)",
          "AU-12"
        ],
        "notes": "Configuring log metric filter and alarm on Multi-region (global) CloudTrail\n  - ensures that activities from all regions (used as well as unused) are monitored\n  - ensures that activities on all supported global services are monitored\n  - ensures that all management events across all regions are monitored",
        "comment": null,
        "cis_controls": "TITLE:Use Automated Tools to Verify Standard Device Configurations and Detect Changes CONTROL:11.3 DESCRIPTION:Compare all network device configuration against approved security configurations defined for each network device in use and alert when any deviations are discovered.;TITLE:Activate audit logging CONTROL:6.2 DESCRIPTION:Ensure that local logging has been enabled on all systems and networking devices.;",
        "ref": "https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html"
      },
      "code": "control \"aws-foundations-cis-3.12\" do\n  title \"Ensure a log metric filter and alarm exist for changes to network gateways\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Network gateways are required to send/receive traffic to a destination outside of a VPC. It is recommended that a metric filter and alarm be established for changes to network gateways.\"\n  desc  \"rationale\", \"Monitoring changes to network gateways will help ensure that all ingress/egress traffic traverses the VPC border via a controlled path.\"\n  desc  \"check\", \"Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \\\"IsMultiRegionTrail\\\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \\\"\\\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \\\"filterPattern\\\": \\\"{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }\\\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \\\"SubscriptionArn\\\" with valid aws ARN.\n    ```\n    Example of valid \\\"SubscriptionArn\\\": \\\"arn:aws:sns::::\\\"\n    ```\"\n  desc  \"fix\", \"Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for network gateways changes and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['CM-6(2)', 'AU-12']\n  tag notes: \"Configuring log metric filter and alarm on Multi-region (global) CloudTrail\n  - ensures that activities from all regions (used as well as unused) are monitored\n  - ensures that activities on all supported global services are monitored\n  - ensures that all management events across all regions are monitored\"\n  tag comment: nil\n  tag cis_controls: \"TITLE:Use Automated Tools to Verify Standard Device Configurations and Detect Changes CONTROL:11.3 DESCRIPTION:Compare all network device configuration against approved security configurations defined for each network device in use and alert when any deviations are discovered.;TITLE:Activate audit logging CONTROL:6.2 DESCRIPTION:Ensure that local logging has been enabled on all systems and networking devices.;\"\n  tag ref: \"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html\"\n\n\n  pattern = '{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }'\n\n  describe aws_cloudwatch_log_metric_filter(pattern: pattern) do\n    it { should exist }\n  end\n\n  # Find the log_group_name associated with the aws_cloudwatch_log_metric_filter that has the pattern\n  log_group_name = aws_cloudwatch_log_metric_filter(pattern: pattern).log_group_name\n\n  # Find cloudtrails associated with with `log_group_name` parsed above\n  associated_trails = aws_cloudtrail_trails.names.select{ |x| aws_cloudtrail_trail(x).cloud_watch_logs_log_group_arn =~ /log-group:#{log_group_name}:/ }\n\n  # Ensure log_group is associated atleast one cloudtrail\n  describe \"Cloudtrails associated with log-group: #{log_group_name}\" do\n    subject { associated_trails }\n    it { should_not be_empty }\n  end\n\n  # Ensure atleast one of the associated cloudtrail meet the requirements.\n  describe.one do\n    associated_trails.each do |trail|\n      describe aws_cloudtrail_trail(trail) do\n        it { should be_multi_region_trail }\n        it { should have_event_selector_mgmt_events_rw_type_all }\n        it { should be_logging }\n      end\n    end\n  end\n\n  # Parse out `metric_name` and `metric_namespace` for the specified pattern.\n  associated_metric_filter = aws_cloudwatch_log_metric_filter(pattern: pattern, log_group_name: log_group_name)\n  metric_name = associated_metric_filter.metric_name\n  metric_namespace = associated_metric_filter.metric_namespace\n\n  # Ensure aws_cloudwatch_alarm for the specified pattern meets requirements.\n  if associated_metric_filter.exists?\n    describe aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace) do\n      it { should exist }\n      its ('alarm_actions') { should_not be_empty }\n    end\n\n    aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace).alarm_actions.each do |sns|\n      describe aws_sns_topic(sns) do\n        it { should exist }\n        its('confirmed_subscription_count') { should cmp >= 1 }\n      end\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-3.12.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-3.12"
    },
    {
      "title": "Ensure IAM password policy require at least one symbol",
      "desc": "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy require at least one symbol.",
      "descriptions": {
        "default": "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy require at least one symbol.",
        "rationale": "Setting a password complexity policy increases account resiliency against brute force login attempts.",
        "check": "Perform the following to ensure the password policy is configured as prescribed:\n\n    Via AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Ensure \"Require at least one non-alphanumeric character\" is checked under \"Password Policy\"\n\n    Via CLI\n    ```\n    aws iam get-account-password-policy\n    ```\n    Ensure the output of the above command includes \"RequireSymbols\": true",
        "fix": "Perform the following to set the password policy as prescribed:\n\n    Via AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Check \"Require at least one non-alphanumeric character\"\n    5. Click \"Apply password policy\"\n\n     Via CLI\n    ```\n     aws iam update-account-password-policy --require-symbols\n    ```\n    Note: All commands starting with \"aws iam update-account-password-policy\" can be combined into a single command."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-2"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;"
      },
      "code": "control \"aws-foundations-cis-1.7\" do\n  title \"Ensure IAM password policy require at least one symbol\"\n  desc  \"Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy require at least one symbol.\"\n  desc  \"rationale\", \"Setting a password complexity policy increases account resiliency against brute force login attempts.\"\n  desc  \"check\", \"Perform the following to ensure the password policy is configured as prescribed:\n\n    Via AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Ensure \\\"Require at least one non-alphanumeric character\\\" is checked under \\\"Password Policy\\\"\n\n    Via CLI\n    ```\n    aws iam get-account-password-policy\n    ```\n    Ensure the output of the above command includes \\\"RequireSymbols\\\": true\"\n  desc  \"fix\", \"Perform the following to set the password policy as prescribed:\n\n    Via AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Check \\\"Require at least one non-alphanumeric character\\\"\n    5. Click \\\"Apply password policy\\\"\n\n     Via CLI\n    ```\n     aws iam update-account-password-policy --require-symbols\n    ```\n    Note: All commands starting with \\\"aws iam update-account-password-policy\\\" can be combined into a single command.\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-2']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;\"\n\n  \n  describe aws_iam_password_policy do\n    it { should exist }\n    it { should require_symbols }\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.7.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.7"
    },
    {
      "title": "Ensure a log metric filter and alarm exist for IAM policy changes",
      "desc": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.",
      "descriptions": {
        "default": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.",
        "rationale": "Monitoring changes to IAM policies will help ensure authentication and authorization controls remain intact.",
        "check": "Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \"IsMultiRegionTrail\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \"\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \"filterPattern\": \"{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \"SubscriptionArn\" with valid aws ARN.\n    ```\n    Example of valid \"SubscriptionArn\": \"arn:aws:sns::::\"\n    ```",
        "fix": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for IAM policy changes and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name `` --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-2"
        ],
        "notes": "Configuring log metric filter and alarm on Multi-region (global) CloudTrail\n  - ensures that activities from all regions (used as well as unused) are monitored\n  - ensures that activities on all supported global services are monitored\n  - ensures that all management events across all regions are monitored",
        "comment": null,
        "cis_controls": "TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;",
        "ref": "https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html"
      },
      "code": "control \"aws-foundations-cis-3.4\" do\n  title \"Ensure a log metric filter and alarm exist for IAM policy changes\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established changes made to Identity and Access Management (IAM) policies.\"\n  desc  \"rationale\", \"Monitoring changes to IAM policies will help ensure authentication and authorization controls remain intact.\"\n  desc  \"check\", \"Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \\\"IsMultiRegionTrail\\\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \\\"\\\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \\\"filterPattern\\\": \\\"{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}\\\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \\\"SubscriptionArn\\\" with valid aws ARN.\n    ```\n    Example of valid \\\"SubscriptionArn\\\": \\\"arn:aws:sns::::\\\"\n    ```\"\n  desc  \"fix\", \"Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for IAM policy changes and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name `` --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-2']\n  tag notes: \"Configuring log metric filter and alarm on Multi-region (global) CloudTrail\n  - ensures that activities from all regions (used as well as unused) are monitored\n  - ensures that activities on all supported global services are monitored\n  - ensures that all management events across all regions are monitored\"\n  tag comment: nil\n  tag cis_controls: \"TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;\"\n  tag ref: \"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html\"\n\n  \n  pattern = '{ ($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy) }'\n\n  describe aws_cloudwatch_log_metric_filter(pattern: pattern) do\n    it { should exist }\n  end\n\n  # Find the log_group_name associated with the aws_cloudwatch_log_metric_filter that has the pattern\n  log_group_name = aws_cloudwatch_log_metric_filter(pattern: pattern).log_group_name\n\n  # Find cloudtrails associated with with `log_group_name` parsed above\n  associated_trails = aws_cloudtrail_trails.names.select{ |x| aws_cloudtrail_trail(x).cloud_watch_logs_log_group_arn =~ /log-group:#{log_group_name}:/ }\n\n  # Ensure log_group is associated atleast one cloudtrail\n  describe \"Cloudtrails associated with log-group: #{log_group_name}\" do\n    subject { associated_trails }\n    it { should_not be_empty }\n  end\n\n  # Ensure atleast one of the associated cloudtrail meet the requirements.\n  describe.one do\n    associated_trails.each do |trail|\n      describe aws_cloudtrail_trail(trail) do\n        it { should be_multi_region_trail }\n        it { should have_event_selector_mgmt_events_rw_type_all }\n        it { should be_logging }\n      end\n    end\n  end\n\n  # Parse out `metric_name` and `metric_namespace` for the specified pattern.\n  associated_metric_filter = aws_cloudwatch_log_metric_filter(pattern: pattern, log_group_name: log_group_name)\n  metric_name = associated_metric_filter.metric_name\n  metric_namespace = associated_metric_filter.metric_namespace\n\n  # Ensure aws_cloudwatch_alarm for the specified pattern meets requirements.\n  if associated_metric_filter.exists?\n    describe aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace) do\n      it { should exist }\n      its ('alarm_actions') { should_not be_empty }\n    end\n\n    aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace).alarm_actions.each do |sns|\n      describe aws_sns_topic(sns) do\n        it { should exist }\n        its('confirmed_subscription_count') { should cmp >= 1 }\n      end\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-3.4.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-3.4"
    },
    {
      "title": "Ensure IAM password policy require at least one number",
      "desc": "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy require at least one number.",
      "descriptions": {
        "default": "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy require at least one number.",
        "rationale": "Setting a password complexity policy increases account resiliency against brute force login attempts.",
        "check": "Perform the following to ensure the password policy is configured as prescribed:\n\n    Via AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Ensure \"Require at least one number \" is checked under \"Password Policy\"\n\n    Via CLI\n    ```\n    aws iam get-account-password-policy\n    ```\n    Ensure the output of the above command includes \"RequireNumbers\": true",
        "fix": "Perform the following to set the password policy as prescribed:\n\n    Via AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Check \"Require at least one number\"\n    5. Click \"Apply password policy\"\n\n     Via CLI\n    ```\n     aws iam update-account-password-policy --require-numbers\n    ```\n    Note: All commands starting with \"aws iam update-account-password-policy\" can be combined into a single command."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-2"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;"
      },
      "code": "control \"aws-foundations-cis-1.8\" do\n  title \"Ensure IAM password policy require at least one number\"\n  desc  \"Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy require at least one number.\"\n  desc  \"rationale\", \"Setting a password complexity policy increases account resiliency against brute force login attempts.\"\n  desc  \"check\", \"Perform the following to ensure the password policy is configured as prescribed:\n\n    Via AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Ensure \\\"Require at least one number \\\" is checked under \\\"Password Policy\\\"\n\n    Via CLI\n    ```\n    aws iam get-account-password-policy\n    ```\n    Ensure the output of the above command includes \\\"RequireNumbers\\\": true\"\n  desc  \"fix\", \"Perform the following to set the password policy as prescribed:\n\n    Via AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Check \\\"Require at least one number\\\"\n    5. Click \\\"Apply password policy\\\"\n\n     Via CLI\n    ```\n     aws iam update-account-password-policy --require-numbers\n    ```\n    Note: All commands starting with \\\"aws iam update-account-password-policy\\\" can be combined into a single command.\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-2']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;\"\n\n\n  describe aws_iam_password_policy do\n    it { should exist }\n    it { should require_numbers }\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.8.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.8"
    },
    {
      "title": "Ensure VPC flow logging is enabled in all VPCs",
      "desc": "VPC Flow Logs is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC. After you've created a flow log, you can view and retrieve its data in Amazon CloudWatch Logs. It is recommended that VPC Flow Logs be enabled for packet \"Rejects\" for VPCs.",
      "descriptions": {
        "default": "VPC Flow Logs is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC. After you've created a flow log, you can view and retrieve its data in Amazon CloudWatch Logs. It is recommended that VPC Flow Logs be enabled for packet \"Rejects\" for VPCs.",
        "rationale": "VPC Flow Logs provide visibility into network traffic that traverses the VPC and can be used to detect anomalous traffic or insight during security workflows.",
        "check": "Perform the following to determine if VPC Flow logs is enabled:\n\n    Via the Management Console:\n    1. Sign into the management console\n    2. Select `Services` then `VPC`\n    3. In the left navigation pane, select `Your VPCs`\n    4. Select a VPC\n    5. In the right pane, select the `Flow Logs` tab.\n    6. Ensure a Log Flow exists that has `Active` in the `Status` column.",
        "fix": "Perform the following to determine if VPC Flow logs is enabled:\n\n    Via the Management Console:\n    1. Sign into the management console\n    2. Select `Services` then `VPC`\n    3. In the left navigation pane, select `Your VPCs`\n    4. Select a VPC\n    5. In the right pane, select the `Flow Logs` tab.\n    6. If no Flow Log exists, click `Create Flow Log`\n    7. `For` Filter, select Reject\n    8. Enter in a `Role` and `Destination Log Group`\n    9. Click `Create Log Flow`\n    10. Click on `CloudWatch Logs Group`\n\n    **Note:** Setting the filter to \"Reject\" will dramatically reduce the logging data accumulation for this recommendation and provide sufficient information for the purposes of breach detection, research and remediation. However, during periods of least privilege security group engineering, setting this the filter to \"All\" can be very helpful in discovering existing traffic flows required for proper operation of an already running environment."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Medium",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "SI-4(2)",
          "AU-12"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Configure Monitoring Systems to Record Network Packets CONTROL:12.5 DESCRIPTION:Configure monitoring systems to record network packets passing through the boundary at each of the organization's network boundaries.;TITLE:Activate audit logging CONTROL:6.2 DESCRIPTION:Ensure that local logging has been enabled on all systems and networking devices.;",
        "ref": "CIS CSC v6.0 #6.5, #12.9:http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html"
      },
      "code": "control \"aws-foundations-cis-2.9\" do\n  title \"Ensure VPC flow logging is enabled in all VPCs\"\n  desc  \"VPC Flow Logs is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC. After you've created a flow log, you can view and retrieve its data in Amazon CloudWatch Logs. It is recommended that VPC Flow Logs be enabled for packet \\\"Rejects\\\" for VPCs.\"\n  desc  \"rationale\", \"VPC Flow Logs provide visibility into network traffic that traverses the VPC and can be used to detect anomalous traffic or insight during security workflows.\"\n  desc  \"check\", \"Perform the following to determine if VPC Flow logs is enabled:\n\n    Via the Management Console:\n    1. Sign into the management console\n    2. Select `Services` then `VPC`\n    3. In the left navigation pane, select `Your VPCs`\n    4. Select a VPC\n    5. In the right pane, select the `Flow Logs` tab.\n    6. Ensure a Log Flow exists that has `Active` in the `Status` column.\"\n  desc  \"fix\", \"Perform the following to determine if VPC Flow logs is enabled:\n\n    Via the Management Console:\n    1. Sign into the management console\n    2. Select `Services` then `VPC`\n    3. In the left navigation pane, select `Your VPCs`\n    4. Select a VPC\n    5. In the right pane, select the `Flow Logs` tab.\n    6. If no Flow Log exists, click `Create Flow Log`\n    7. `For` Filter, select Reject\n    8. Enter in a `Role` and `Destination Log Group`\n    9. Click `Create Log Flow`\n    10. Click on `CloudWatch Logs Group`\n\n    **Note:** Setting the filter to \\\"Reject\\\" will dramatically reduce the logging data accumulation for this recommendation and provide sufficient information for the purposes of breach detection, research and remediation. However, during periods of least privilege security group engineering, setting this the filter to \\\"All\\\" can be very helpful in discovering existing traffic flows required for proper operation of an already running environment.\"\n  impact 0.5\n  tag severity: \"Medium\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['SI-4(2)', 'AU-12']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Configure Monitoring Systems to Record Network Packets CONTROL:12.5 DESCRIPTION:Configure monitoring systems to record network packets passing through the boundary at each of the organization's network boundaries.;TITLE:Activate audit logging CONTROL:6.2 DESCRIPTION:Ensure that local logging has been enabled on all systems and networking devices.;\"\n  tag ref: \"CIS CSC v6.0 #6.5, #12.9:http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html\"\n\n  \n  aws_vpcs.vpc_ids.each do |vpc|\n    describe aws_vpc(vpc) do\n      it { should be_flow_logs_enabled }\n    end\n    describe.one do\n      aws_vpc(vpc).flow_logs.each do |flow_log|\n        describe 'flow log settings' do\n          subject { flow_log }\n          its('flow_log_status') { should cmp 'ACTIVE' }\n        end\n      end\n    end\n  end\n  if aws_vpcs.vpc_ids.empty?\n    describe 'Control skipped because no vpcs were found' do\n      skip 'This control is skipped since the aws_vpcs resource returned an empty vpc list'\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-2.9.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-2.9"
    },
    {
      "title": "Ensure the S3 bucket used to store CloudTrail logs is not publicly accessible",
      "desc": "CloudTrail logs a record of every API call made in your AWS account. These logs file are stored in an S3 bucket. It is recommended that the bucket policy or access control list (ACL) applied to the S3 bucket that CloudTrail logs to prevents public access to the CloudTrail logs.",
      "descriptions": {
        "default": "CloudTrail logs a record of every API call made in your AWS account. These logs file are stored in an S3 bucket. It is recommended that the bucket policy or access control list (ACL) applied to the S3 bucket that CloudTrail logs to prevents public access to the CloudTrail logs.",
        "rationale": "Allowing public access to CloudTrail log content may aid an adversary in identifying weaknesses in the affected account's use or configuration.",
        "check": "Perform the following to determine if any public access is granted to an S3 bucket via an ACL or S3 bucket policy:\n\n    Via the Management Console\n    1. Go to the Amazon CloudTrail console at [https://console.aws.amazon.com/cloudtrail/home](https://console.aws.amazon.com/cloudtrail/home)\n    2. In the `API activity history` pane on the left, click `Trails`\n    3. In the `Trails` pane, note the bucket names in the `S3 bucket` column\n    4. Go to Amazon S3 console at [https://console.aws.amazon.com/s3/home](https://console.aws.amazon.com/s3/home)\n    5. For each bucket noted in step 3, right-click on the bucket and click `Properties`\n    6. In the `Properties` pane, click the `Permissions` tab.\n    7. The tab shows a list of grants, one row per grant, in the bucket ACL. Each row identifies the grantee and the permissions granted.\n    8. Ensure no rows exists that have the `Grantee` set to `Everyone` or the `Grantee` set to `Any Authenticated User.`\n    9. If the `Edit bucket policy` button is present, click it to review the bucket policy.\n    10. Ensure the policy does not contain a `Statement` having an `Effect` set to `Allow` and a `Principal` set to \"\\*\" or {\"AWS\" : \"\\*\"}\n\n    Via CLI:\n    1. Get the name of the S3 bucket that CloudTrail is logging to:\n    ```\n     aws cloudtrail describe-trails --query 'trailList[*].S3BucketName'\n    ```\n    2. Ensure the `AllUsers` principal is not granted privileges to that `` :\n    ```\n     aws s3api get-bucket-acl --bucket  --query 'Grants[?Grantee.URI== `http://acs.amazonaws.com/groups/global/AllUsers` ]'\n    ```\n    3. Ensure the `AuthenticatedUsers` principal is not granted privileges to that `` :\n    ```\n     aws s3api get-bucket-acl --bucket  --query 'Grants[?Grantee.URI== `http://acs.amazonaws.com/groups/global/Authenticated Users` ]'\n    ```\n    4. Get the S3 Bucket Policy\n    ```\n     aws s3api get-bucket-policy --bucket\n    ```\n    5. Ensure the policy does not contain a `Statement` having an `Effect` set to `Allow` and a `Principal` set to \"\\*\" or {\"AWS\" : \"\\*\"}\n    Note: Principal set to \"\\*\" or {\"AWS\" : \"\\*\"} allows anonymous access.",
        "fix": "Perform the following to remove any public access that has been granted to the bucket via an ACL or S3 bucket policy:\n    1. Go to Amazon S3 console at [https://console.aws.amazon.com/s3/home](https://console.aws.amazon.com/s3/home)\n    2. Right-click on the bucket and click Properties\n    3. In the `Properties` pane, click the `Permissions` tab.\n    4. The tab shows a list of grants, one row per grant, in the bucket ACL. Each row identifies the grantee and the permissions granted.\n    5. Select the row that grants permission to `Everyone` or `Any Authenticated User`\n    6. Uncheck all the permissions granted to `Everyone` or `Any Authenticated User` (click `x` to delete the row).\n    7. Click `Save` to save the ACL.\n    8. If the `Edit bucket policy` button is present, click it.\n    9. Remove any `Statement` having an `Effect` set to `Allow` and a `Principal` set to \"\\*\" or {\"AWS\" : \"\\*\"}."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-3(3)"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Protect Information through Access Control Lists CONTROL:14.6 DESCRIPTION:Protect all information stored on systems with file system, network share, claims, application, or database specific access control lists. These controls will enforce the principle that only authorized individuals should have access to the information based on their need to access the information as a part of their responsibilities.;",
        "ref": "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html"
      },
      "code": "control \"aws-foundations-cis-2.3\" do\n  title \"Ensure the S3 bucket used to store CloudTrail logs is not publicly accessible\"\n  desc  \"CloudTrail logs a record of every API call made in your AWS account. These logs file are stored in an S3 bucket. It is recommended that the bucket policy or access control list (ACL) applied to the S3 bucket that CloudTrail logs to prevents public access to the CloudTrail logs.\"\n  desc  \"rationale\", \"Allowing public access to CloudTrail log content may aid an adversary in identifying weaknesses in the affected account's use or configuration.\"\n  desc  \"check\", \"Perform the following to determine if any public access is granted to an S3 bucket via an ACL or S3 bucket policy:\n\n    Via the Management Console\n    1. Go to the Amazon CloudTrail console at [https://console.aws.amazon.com/cloudtrail/home](https://console.aws.amazon.com/cloudtrail/home)\n    2. In the `API activity history` pane on the left, click `Trails`\n    3. In the `Trails` pane, note the bucket names in the `S3 bucket` column\n    4. Go to Amazon S3 console at [https://console.aws.amazon.com/s3/home](https://console.aws.amazon.com/s3/home)\n    5. For each bucket noted in step 3, right-click on the bucket and click `Properties`\n    6. In the `Properties` pane, click the `Permissions` tab.\n    7. The tab shows a list of grants, one row per grant, in the bucket ACL. Each row identifies the grantee and the permissions granted.\n    8. Ensure no rows exists that have the `Grantee` set to `Everyone` or the `Grantee` set to `Any Authenticated User.`\n    9. If the `Edit bucket policy` button is present, click it to review the bucket policy.\n    10. Ensure the policy does not contain a `Statement` having an `Effect` set to `Allow` and a `Principal` set to \\\"\\\\*\\\" or {\\\"AWS\\\" : \\\"\\\\*\\\"}\n\n    Via CLI:\n    1. Get the name of the S3 bucket that CloudTrail is logging to:\n    ```\n     aws cloudtrail describe-trails --query 'trailList[*].S3BucketName'\n    ```\n    2. Ensure the `AllUsers` principal is not granted privileges to that `` :\n    ```\n     aws s3api get-bucket-acl --bucket  --query 'Grants[?Grantee.URI== `http://acs.amazonaws.com/groups/global/AllUsers` ]'\n    ```\n    3. Ensure the `AuthenticatedUsers` principal is not granted privileges to that `` :\n    ```\n     aws s3api get-bucket-acl --bucket  --query 'Grants[?Grantee.URI== `http://acs.amazonaws.com/groups/global/Authenticated Users` ]'\n    ```\n    4. Get the S3 Bucket Policy\n    ```\n     aws s3api get-bucket-policy --bucket\n    ```\n    5. Ensure the policy does not contain a `Statement` having an `Effect` set to `Allow` and a `Principal` set to \\\"\\\\*\\\" or {\\\"AWS\\\" : \\\"\\\\*\\\"}\n    Note: Principal set to \\\"\\\\*\\\" or {\\\"AWS\\\" : \\\"\\\\*\\\"} allows anonymous access.\"\n  desc  \"fix\", \"Perform the following to remove any public access that has been granted to the bucket via an ACL or S3 bucket policy:\n    1. Go to Amazon S3 console at [https://console.aws.amazon.com/s3/home](https://console.aws.amazon.com/s3/home)\n    2. Right-click on the bucket and click Properties\n    3. In the `Properties` pane, click the `Permissions` tab.\n    4. The tab shows a list of grants, one row per grant, in the bucket ACL. Each row identifies the grantee and the permissions granted.\n    5. Select the row that grants permission to `Everyone` or `Any Authenticated User`\n    6. Uncheck all the permissions granted to `Everyone` or `Any Authenticated User` (click `x` to delete the row).\n    7. Click `Save` to save the ACL.\n    8. If the `Edit bucket policy` button is present, click it.\n    9. Remove any `Statement` having an `Effect` set to `Allow` and a `Principal` set to \\\"\\\\*\\\" or {\\\"AWS\\\" : \\\"\\\\*\\\"}.\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-3(3)']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Protect Information through Access Control Lists CONTROL:14.6 DESCRIPTION:Protect all information stored on systems with file system, network share, claims, application, or database specific access control lists. These controls will enforce the principle that only authorized individuals should have access to the information based on their need to access the information as a part of their responsibilities.;\"\n  tag ref: \"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html\"\n\n  \n  describe aws_cloudtrail_trails do\n    it { should exist }\n  end\n\n  aws_cloudtrail_trails.trail_arns.each do |trail|\n    bucket_name = aws_cloudtrail_trail(trail).s3_bucket_name\n    if input(\"exception_bucket_list\").include?(bucket_name)\n      describe 'Bucket not inspected because it is defined as an exception' do\n        skip \"Bucket: #{bucket_name} not inspected because it is defined in exception_bucket_list.\"\n      end\n    else\n      describe aws_s3_bucket(bucket_name) do\n        it { should_not be_public }\n      end\n    end\n  end\n\n  # Use this after skeletal aws_cloudtrail_trails is enhanced to expose s3_bucket_name\n  # aws_cloudtrail_trails.s3_bucket_name.uniq.each do |bucket|\n  #   describe aws_s3_bucket( bucket ) do\n  #     it{ should_not be_public }\n  #   end\n  # end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-2.3.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-2.3"
    },
    {
      "title": "Ensure a log metric filter and alarm exist for usage of \"root\" account",
      "desc": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for root login attempts.",
      "descriptions": {
        "default": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for root login attempts.",
        "rationale": "Monitoring for root account logins will provide visibility into the use of a fully privileged account and an opportunity to reduce the use of it.",
        "check": "Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \"IsMultiRegionTrail\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \"\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \"filterPattern\": \"{ $.userIdentity.type = \"Root\" && $.userIdentity.invokedBy NOT EXISTS && $.eventType != \"AwsServiceEvent\" }\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    atleast one subscription should have \"SubscriptionArn\" with valid aws ARN.\n    ```\n    Example of valid \"SubscriptionArn\": \"arn:aws:sns::::\"\n    ```",
        "fix": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for \"Root\" account usage and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name `` --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ $.userIdentity.type = \"Root\" && $.userIdentity.invokedBy NOT EXISTS && $.eventType != \"AwsServiceEvent\" }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AU-2"
        ],
        "notes": "Configuring log metric filter and alarm on Multi-region (global) CloudTrail\n  - ensures that activities from all regions (used as well as unused) are monitored\n  - ensures that activities on all supported global services are monitored\n  - ensures that all management events across all regions are monitored",
        "comment": null,
        "cis_controls": "TITLE:Log and Alert on Unsuccessful Administrative Account Login CONTROL:4.9 DESCRIPTION:Configure systems to issue a log entry and alert on unsuccessful logins to an administrative account.;",
        "ref": "CIS CSC v6.0 #4.6, #5.1, #5.5:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html"
      },
      "code": "control \"aws-foundations-cis-3.3\" do\n  title \"Ensure a log metric filter and alarm exist for usage of \\\"root\\\" account\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for root login attempts.\"\n  desc  \"rationale\", \"Monitoring for root account logins will provide visibility into the use of a fully privileged account and an opportunity to reduce the use of it.\"\n  desc  \"check\", \"Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \\\"IsMultiRegionTrail\\\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \\\"\\\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \\\"filterPattern\\\": \\\"{ $.userIdentity.type = \\\"Root\\\" && $.userIdentity.invokedBy NOT EXISTS && $.eventType != \\\"AwsServiceEvent\\\" }\\\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    atleast one subscription should have \\\"SubscriptionArn\\\" with valid aws ARN.\n    ```\n    Example of valid \\\"SubscriptionArn\\\": \\\"arn:aws:sns::::\\\"\n    ```\"\n  desc  \"fix\", \"Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for \\\"Root\\\" account usage and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name `` --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ $.userIdentity.type = \\\"Root\\\" && $.userIdentity.invokedBy NOT EXISTS && $.eventType != \\\"AwsServiceEvent\\\" }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AU-2']\n  tag notes: \"Configuring log metric filter and alarm on Multi-region (global) CloudTrail\n  - ensures that activities from all regions (used as well as unused) are monitored\n  - ensures that activities on all supported global services are monitored\n  - ensures that all management events across all regions are monitored\"\n  tag comment: nil\n  tag cis_controls: \"TITLE:Log and Alert on Unsuccessful Administrative Account Login CONTROL:4.9 DESCRIPTION:Configure systems to issue a log entry and alert on unsuccessful logins to an administrative account.;\"\n  tag ref: \"CIS CSC v6.0 #4.6, #5.1, #5.5:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html\"\n\n\n  pattern = '{ $.userIdentity.type = \"Root\" && $.userIdentity.invokedBy NOT EXISTS && $.eventType != \"AwsServiceEvent\" }'\n\n  describe aws_cloudwatch_log_metric_filter(pattern: pattern) do\n    it { should exist }\n  end\n\n  # Find the log_group_name associated with the aws_cloudwatch_log_metric_filter that has the pattern\n  log_group_name = aws_cloudwatch_log_metric_filter(pattern: pattern).log_group_name\n\n  # Find cloudtrails associated with with `log_group_name` parsed above\n  associated_trails = aws_cloudtrail_trails.names.select{ |x| aws_cloudtrail_trail(x).cloud_watch_logs_log_group_arn =~ /log-group:#{log_group_name}:/ }\n\n  # Ensure log_group is associated atleast one cloudtrail\n  describe \"Cloudtrails associated with log-group: #{log_group_name}\" do\n    subject { associated_trails }\n    it { should_not be_empty }\n  end\n\n  # Ensure atleast one of the associated cloudtrail meet the requirements.\n  describe.one do\n    associated_trails.each do |trail|\n      describe aws_cloudtrail_trail(trail) do\n        it { should be_multi_region_trail }\n        it { should have_event_selector_mgmt_events_rw_type_all }\n        it { should be_logging }\n      end\n    end\n  end\n\n  # Parse out `metric_name` and `metric_namespace` for the specified pattern.\n  associated_metric_filter = aws_cloudwatch_log_metric_filter(pattern: pattern, log_group_name: log_group_name)\n  metric_name = associated_metric_filter.metric_name\n  metric_namespace = associated_metric_filter.metric_namespace\n\n  # Ensure aws_cloudwatch_alarm for the specified pattern meets requirements.\n  if associated_metric_filter.exists?\n    describe aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace) do\n      it { should exist }\n      its ('alarm_actions') { should_not be_empty }\n    end\n\n    aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace).alarm_actions.each do |sns|\n      describe aws_sns_topic(sns) do\n        it { should exist }\n        its('confirmed_subscription_count') { should cmp >= 1 }\n      end\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-3.3.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-3.3"
    },
    {
      "title": "Ensure a log metric filter and alarm exist for AWS Management Console authentication failures",
      "desc": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for failed console authentication attempts.",
      "descriptions": {
        "default": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for failed console authentication attempts.",
        "rationale": "Monitoring failed console logins may decrease lead time to detect an attempt to brute force a credential, which may provide an indicator, such as source IP, that can be used in other event correlation.",
        "check": "Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \"IsMultiRegionTrail\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \"\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \"filterPattern\": \"{ ($.eventName = ConsoleLogin) && ($.errorMessage = \"Failed authentication\") }\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \"SubscriptionArn\" with valid aws ARN.\n    ```\n    Example of valid \"SubscriptionArn\": \"arn:aws:sns::::\"\n    ```",
        "fix": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for AWS management Console Login Failures and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = ConsoleLogin) && ($.errorMessage = \"Failed authentication\") }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Medium",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-2"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;",
        "ref": "https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html"
      },
      "code": "control \"aws-foundations-cis-3.6\" do\n  title \"Ensure a log metric filter and alarm exist for AWS Management Console authentication failures\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for failed console authentication attempts.\"\n  desc  \"rationale\", \"Monitoring failed console logins may decrease lead time to detect an attempt to brute force a credential, which may provide an indicator, such as source IP, that can be used in other event correlation.\"\n  desc  \"check\", \"Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \\\"IsMultiRegionTrail\\\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \\\"\\\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \\\"filterPattern\\\": \\\"{ ($.eventName = ConsoleLogin) && ($.errorMessage = \\\"Failed authentication\\\") }\\\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \\\"SubscriptionArn\\\" with valid aws ARN.\n    ```\n    Example of valid \\\"SubscriptionArn\\\": \\\"arn:aws:sns::::\\\"\n    ```\"\n  desc  \"fix\", \"Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for AWS management Console Login Failures and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = ConsoleLogin) && ($.errorMessage = \\\"Failed authentication\\\") }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```\"\n  impact 0.5\n  tag severity: \"Medium\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-2']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;\"\n  tag ref: \"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html\"\n\n\n  pattern = '{ ($.eventName = ConsoleLogin) && ($.errorMessage = \"Failed authentication\") }'\n\n  describe aws_cloudwatch_log_metric_filter(pattern: pattern) do\n    it { should exist }\n  end\n\n  # Find the log_group_name associated with the aws_cloudwatch_log_metric_filter that has the pattern\n  log_group_name = aws_cloudwatch_log_metric_filter(pattern: pattern).log_group_name\n\n  # Find cloudtrails associated with with `log_group_name` parsed above\n  associated_trails = aws_cloudtrail_trails.names.select{ |x| aws_cloudtrail_trail(x).cloud_watch_logs_log_group_arn =~ /log-group:#{log_group_name}:/ }\n\n  # Ensure log_group is associated atleast one cloudtrail\n  describe \"Cloudtrails associated with log-group: #{log_group_name}\" do\n    subject { associated_trails }\n    it { should_not be_empty }\n  end\n\n  # Ensure atleast one of the associated cloudtrail meet the requirements.\n  describe.one do\n    associated_trails.each do |trail|\n      describe aws_cloudtrail_trail(trail) do\n        it { should be_multi_region_trail }\n        it { should have_event_selector_mgmt_events_rw_type_all }\n        it { should be_logging }\n      end\n    end\n  end\n\n  # Parse out `metric_name` and `metric_namespace` for the specified pattern.\n  associated_metric_filter = aws_cloudwatch_log_metric_filter(pattern: pattern, log_group_name: log_group_name)\n  metric_name = associated_metric_filter.metric_name\n  metric_namespace = associated_metric_filter.metric_namespace\n\n  # Ensure aws_cloudwatch_alarm for the specified pattern meets requirements.\n  if associated_metric_filter.exists?\n    describe aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace) do\n      it { should exist }\n      its ('alarm_actions') { should_not be_empty }\n    end\n\n    aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace).alarm_actions.each do |sns|\n      describe aws_sns_topic(sns) do\n        it { should exist }\n        its('confirmed_subscription_count') { should cmp >= 1 }\n      end\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-3.6.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-3.6"
    },
    {
      "title": "Avoid the use of the \"root\" account",
      "desc": "The \"root\" account has unrestricted access to all resources in the AWS account. It is highly recommended that the use of this account be avoided.",
      "descriptions": {
        "default": "The \"root\" account has unrestricted access to all resources in the AWS account. It is highly recommended that the use of this account be avoided.",
        "rationale": "The \"root\" account is the most privileged AWS account. Minimizing the use of this account and adopting the principle of least privilege for access management will reduce the risk of accidental changes and unintended disclosure of highly privileged credentials.",
        "check": "Implement the `Ensure a log metric filter and alarm exist for usage of \"root\" account` recommendation in the `Monitoring` section of this benchmark to receive notifications of root account usage. Additionally, executing the following commands will provide ad-hoc means for determining the last time the root account was used:\n    ```\n    aws iam generate-credential-report\n    ```\n    ```\n    aws iam get-credential-report --query 'Content' --output text | base64 -d | cut -d, -f1,5,11,16 | grep -B1 ''\n    ```\n    Note: there are a few conditions under which the use of the root account is required, such as requesting a penetration test or creating a CloudFront private key.",
        "fix": "Follow the remediation instructions of the `Ensure IAM policies are attached only to groups or roles` recommendation"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-6(9)"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Ensure the Use of Dedicated Administrative Accounts CONTROL:4.3 DESCRIPTION:Ensure that all users with administrative account access use a dedicated or secondary account for elevated activities. This account should only be used for administrative activities and not internet browsing, email, or similar activities.;",
        "ref": "http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html:CIS CSC v6.0 #5.1"
      },
      "code": "control \"aws-foundations-cis-1.1\" do\n  title \"Avoid the use of the \\\"root\\\" account\"\n  desc  \"The \\\"root\\\" account has unrestricted access to all resources in the AWS account. It is highly recommended that the use of this account be avoided.\"\n  desc  \"rationale\", \"The \\\"root\\\" account is the most privileged AWS account. Minimizing the use of this account and adopting the principle of least privilege for access management will reduce the risk of accidental changes and unintended disclosure of highly privileged credentials.\"\n  desc  \"check\", \"Implement the `Ensure a log metric filter and alarm exist for usage of \\\"root\\\" account` recommendation in the `Monitoring` section of this benchmark to receive notifications of root account usage. Additionally, executing the following commands will provide ad-hoc means for determining the last time the root account was used:\n    ```\n    aws iam generate-credential-report\n    ```\n    ```\n    aws iam get-credential-report --query 'Content' --output text | base64 -d | cut -d, -f1,5,11,16 | grep -B1 ''\n    ```\n    Note: there are a few conditions under which the use of the root account is required, such as requesting a penetration test or creating a CloudFront private key.\"\n  desc  \"fix\", \"Follow the remediation instructions of the `Ensure IAM policies are attached only to groups or roles` recommendation\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-6(9)']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Ensure the Use of Dedicated Administrative Accounts CONTROL:4.3 DESCRIPTION:Ensure that all users with administrative account access use a dedicated or secondary account for elevated activities. This account should only be used for administrative activities and not internet browsing, email, or similar activities.;\"\n  tag ref: \"http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html:CIS CSC v6.0 #5.1\"\n\n\n  pattern = '{ $.userIdentity.type = \"Root\" && $.userIdentity.invokedBy NOT EXISTS && $.eventType != \"AwsServiceEvent\" }'\n\n  describe aws_cloudwatch_log_metric_filter(pattern: pattern) do\n    it { should exist }\n  end\n\n  # Find the log_group_name associated with the aws_cloudwatch_log_metric_filter that has the pattern\n  log_group_name = aws_cloudwatch_log_metric_filter(pattern: pattern).log_group_name\n\n  # Find cloudtrails associated with with `log_group_name` parsed above\n  associated_trails = aws_cloudtrail_trails.names.select{ |x| aws_cloudtrail_trail(x).cloud_watch_logs_log_group_arn =~ /log-group:#{log_group_name}:/ }\n\n  # Ensure log_group is associated atleast one cloudtrail\n  describe \"Cloudtrails associated with log-group: #{log_group_name}\" do\n    subject { associated_trails }\n    it { should_not be_empty }\n  end\n\n  # Ensure atleast one of the associated cloudtrail meet the requirements.\n  describe.one do\n    associated_trails.each do |trail|\n      describe aws_cloudtrail_trail(trail) do\n        it { should be_multi_region_trail }\n        it { should have_event_selector_mgmt_events_rw_type_all }\n        it { should be_logging }\n      end\n    end\n  end\n\n  # Parse out `metric_name` and `metric_namespace` for the specified pattern.\n  associated_metric_filter = aws_cloudwatch_log_metric_filter(pattern: pattern, log_group_name: log_group_name)\n  metric_name = associated_metric_filter.metric_name\n  metric_namespace = associated_metric_filter.metric_namespace\n\n  # Ensure aws_cloudwatch_alarm for the specified pattern meets requirements.\n  if associated_metric_filter.exists?\n    describe aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace) do\n      it { should exist }\n      its ('alarm_actions') { should_not be_empty }\n    end\n\n    aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace).alarm_actions.each do |sns|\n      describe aws_sns_topic(sns) do\n        it { should exist }\n        its('confirmed_subscription_count') { should cmp >= 1 }\n      end\n    end\n  end\nend\n",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.1.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.1"
    },
    {
      "title": "Ensure MFA is enabled for the \"root\" account",
      "desc": "The root account is the most privileged user in an AWS account. MFA adds an extra layer of protection on top of a user name and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device.\n\n    **Note:** When virtual MFA is used for root accounts, it is recommended that the device used is NOT a personal device, but rather a dedicated mobile device (tablet or phone) that is managed to be kept charged and secured independent of any individual personal devices. (\"non-personal virtual MFA\") This lessens the risks of losing access to the MFA due to device loss, device trade-in or if the individual owning the device is no longer employed at the company.",
      "descriptions": {
        "default": "The root account is the most privileged user in an AWS account. MFA adds an extra layer of protection on top of a user name and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device.\n\n    **Note:** When virtual MFA is used for root accounts, it is recommended that the device used is NOT a personal device, but rather a dedicated mobile device (tablet or phone) that is managed to be kept charged and secured independent of any individual personal devices. (\"non-personal virtual MFA\") This lessens the risks of losing access to the MFA due to device loss, device trade-in or if the individual owning the device is no longer employed at the company.",
        "rationale": "Enabling MFA provides increased security for console access as it requires the authenticating principal to possess a device that emits a time-sensitive key and have knowledge of a credential.",
        "check": "Perform the following to determine if the root account has MFA setup:\n\n    1. Run the following command:\n    ```\n     aws iam get-account-summary | grep \"AccountMFAEnabled\"\n    ```\n    2. Ensure the AccountMFAEnabled property is set to 1",
        "fix": "Perform the following to establish MFA for the root account:\n\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).\n\n     Note: to manage MFA devices for the root AWS account, you must use your root account credentials to sign in to AWS. You cannot manage MFA devices for the root account using other credentials.\n    2. Choose `Dashboard` , and under `Security Status` , expand `Activate MFA` on your root account.\n    3. Choose `Activate MFA`\n    4. In the wizard, choose `A virtual MFA` device and then choose `Next Step`\n.\n    5. IAM generates and displays configuration information for the virtual MFA device, including a QR code graphic. The graphic is a representation of the 'secret configuration key' that is available for manual entry on devices that do not support QR codes.\n    6. Open your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see [Virtual MFA Applications](http://aws.amazon.com/iam/details/mfa/#Virtual_MFA_Applications).) If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device).\n    7. Determine whether the MFA app supports QR codes, and then do one of the following:\n\n     - Use the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code.\n     - In the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application.\n\n    When you are finished, the virtual MFA device starts generating one-time passwords.\n\n    1. In the Manage MFA Device wizard, in the Authentication Code 1 box, type the one-time password that currently appears in the virtual MFA device. Wait up to 30 seconds for the device to generate a new one-time password. Then type the second one-time password into the Authentication Code 2 box. Choose Active Virtual MFA."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "IA-2(1)"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Use Multifactor Authentication For All Administrative Access CONTROL:4.5 DESCRIPTION:Use multi-factor authentication and encrypted channels for all administrative account access.;",
        "ref": "CIS CSC v6.0 #5.6, #11.4, #12.6, #16.11"
      },
      "code": "control \"aws-foundations-cis-1.13\" do\n  title \"Ensure MFA is enabled for the \\\"root\\\" account\"\n  desc  \"The root account is the most privileged user in an AWS account. MFA adds an extra layer of protection on top of a user name and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device.\n\n    **Note:** When virtual MFA is used for root accounts, it is recommended that the device used is NOT a personal device, but rather a dedicated mobile device (tablet or phone) that is managed to be kept charged and secured independent of any individual personal devices. (\\\"non-personal virtual MFA\\\") This lessens the risks of losing access to the MFA due to device loss, device trade-in or if the individual owning the device is no longer employed at the company.\"\n  desc  \"rationale\", \"Enabling MFA provides increased security for console access as it requires the authenticating principal to possess a device that emits a time-sensitive key and have knowledge of a credential.\"\n  desc  \"check\", \"Perform the following to determine if the root account has MFA setup:\n\n    1. Run the following command:\n    ```\n     aws iam get-account-summary | grep \\\"AccountMFAEnabled\\\"\n    ```\n    2. Ensure the AccountMFAEnabled property is set to 1\"\n  desc  \"fix\", \"Perform the following to establish MFA for the root account:\n\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).\n\n     Note: to manage MFA devices for the root AWS account, you must use your root account credentials to sign in to AWS. You cannot manage MFA devices for the root account using other credentials.\n    2. Choose `Dashboard` , and under `Security Status` , expand `Activate MFA` on your root account.\n    3. Choose `Activate MFA`\n    4. In the wizard, choose `A virtual MFA` device and then choose `Next Step`\n.\n    5. IAM generates and displays configuration information for the virtual MFA device, including a QR code graphic. The graphic is a representation of the 'secret configuration key' that is available for manual entry on devices that do not support QR codes.\n    6. Open your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see [Virtual MFA Applications](http://aws.amazon.com/iam/details/mfa/#Virtual_MFA_Applications).) If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device).\n    7. Determine whether the MFA app supports QR codes, and then do one of the following:\n\n     - Use the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code.\n     - In the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application.\n\n    When you are finished, the virtual MFA device starts generating one-time passwords.\n\n    1. In the Manage MFA Device wizard, in the Authentication Code 1 box, type the one-time password that currently appears in the virtual MFA device. Wait up to 30 seconds for the device to generate a new one-time password. Then type the second one-time password into the Authentication Code 2 box. Choose Active Virtual MFA.\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['IA-2(1)']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Use Multifactor Authentication For All Administrative Access CONTROL:4.5 DESCRIPTION:Use multi-factor authentication and encrypted channels for all administrative account access.;\"\n  tag ref: \"CIS CSC v6.0 #5.6, #11.4, #12.6, #16.11\"\n\n  \n  describe aws_iam_root_user do\n    it { should have_mfa_enabled }\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.13.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.13"
    },
    {
      "title": "Ensure a log metric filter and alarm exist for VPC changes",
      "desc": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is possible to have more than 1 VPC within an account, in addition it is also possible to create a peer connection between 2 VPCs enabling network traffic to route between VPCs. It is recommended that a metric filter and alarm be established for changes made to VPCs.",
      "descriptions": {
        "default": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is possible to have more than 1 VPC within an account, in addition it is also possible to create a peer connection between 2 VPCs enabling network traffic to route between VPCs. It is recommended that a metric filter and alarm be established for changes made to VPCs.",
        "rationale": "Monitoring changes to IAM policies will help ensure authentication and authorization controls remain intact.",
        "check": "Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \"IsMultiRegionTrail\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \"\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \"filterPattern\": \"{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \"SubscriptionArn\" with valid aws ARN.\n    ```\n    Example of valid \"SubscriptionArn\": \"arn:aws:sns::::\"\n    ```",
        "fix": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for VPC changes and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "CM-6(1)"
        ],
        "notes": "Configuring log metric filter and alarm on Multi-region (global) CloudTrail\n  - ensures that activities from all regions (used as well as unused) are monitored\n  - ensures that activities on all supported global services are monitored\n  - ensures that all management events across all regions are monitored",
        "comment": null,
        "cis_controls": "TITLE:Implement Automated Configuration Monitoring Systems CONTROL:5.5 DESCRIPTION:Utilize a Security Content Automation Protocol (SCAP) compliant configuration monitoring system to verify all security configuration elements, catalog approved exceptions, and alert when unauthorized changes occur.;",
        "ref": "https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html"
      },
      "code": "control \"aws-foundations-cis-3.14\" do\n  title \"Ensure a log metric filter and alarm exist for VPC changes\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is possible to have more than 1 VPC within an account, in addition it is also possible to create a peer connection between 2 VPCs enabling network traffic to route between VPCs. It is recommended that a metric filter and alarm be established for changes made to VPCs.\"\n  desc  \"rationale\", \"Monitoring changes to IAM policies will help ensure authentication and authorization controls remain intact.\"\n  desc  \"check\", \"Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \\\"IsMultiRegionTrail\\\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \\\"\\\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \\\"filterPattern\\\": \\\"{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }\\\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \\\"SubscriptionArn\\\" with valid aws ARN.\n    ```\n    Example of valid \\\"SubscriptionArn\\\": \\\"arn:aws:sns::::\\\"\n    ```\"\n  desc  \"fix\", \"Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for VPC changes and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['CM-6(1)']\n  tag notes: \"Configuring log metric filter and alarm on Multi-region (global) CloudTrail\n  - ensures that activities from all regions (used as well as unused) are monitored\n  - ensures that activities on all supported global services are monitored\n  - ensures that all management events across all regions are monitored\"\n  tag comment: nil\n  tag cis_controls: \"TITLE:Implement Automated Configuration Monitoring Systems CONTROL:5.5 DESCRIPTION:Utilize a Security Content Automation Protocol (SCAP) compliant configuration monitoring system to verify all security configuration elements, catalog approved exceptions, and alert when unauthorized changes occur.;\"\n  tag ref: \"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html\"\n\n\n  pattern = '{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }'\n\n  describe aws_cloudwatch_log_metric_filter(pattern: pattern) do\n    it { should exist }\n  end\n\n  # Find the log_group_name associated with the aws_cloudwatch_log_metric_filter that has the pattern\n  log_group_name = aws_cloudwatch_log_metric_filter(pattern: pattern).log_group_name\n\n  # Find cloudtrails associated with with `log_group_name` parsed above\n  associated_trails = aws_cloudtrail_trails.names.select{ |x| aws_cloudtrail_trail(x).cloud_watch_logs_log_group_arn =~ /log-group:#{log_group_name}:/ }\n\n  # Ensure log_group is associated atleast one cloudtrail\n  describe \"Cloudtrails associated with log-group: #{log_group_name}\" do\n    subject { associated_trails }\n    it { should_not be_empty }\n  end\n\n  # Ensure atleast one of the associated cloudtrail meet the requirements.\n  describe.one do\n    associated_trails.each do |trail|\n      describe aws_cloudtrail_trail(trail) do\n        it { should be_multi_region_trail }\n        it { should have_event_selector_mgmt_events_rw_type_all }\n        it { should be_logging }\n      end\n    end\n  end\n\n  # Parse out `metric_name` and `metric_namespace` for the specified pattern.\n  associated_metric_filter = aws_cloudwatch_log_metric_filter(pattern: pattern, log_group_name: log_group_name)\n  metric_name = associated_metric_filter.metric_name\n  metric_namespace = associated_metric_filter.metric_namespace\n\n  # Ensure aws_cloudwatch_alarm for the specified pattern meets requirements.\n  if associated_metric_filter.exists?\n    describe aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace) do\n      it { should exist }\n      its ('alarm_actions') { should_not be_empty }\n    end\n\n    aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace).alarm_actions.each do |sns|\n      describe aws_sns_topic(sns) do\n        it { should exist }\n        its('confirmed_subscription_count') { should cmp >= 1 }\n      end\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-3.14.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-3.14"
    },
    {
      "title": "Ensure a log metric filter and alarm exist for S3 bucket policy changes",
      "desc": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for changes to S3 bucket policies.",
      "descriptions": {
        "default": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for changes to S3 bucket policies.",
        "rationale": "Monitoring changes to S3 bucket policies may reduce time to detect and correct permissive policies on sensitive S3 buckets.",
        "check": "Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \"IsMultiRegionTrail\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \"\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \"filterPattern\": \"{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \"SubscriptionArn\" with valid aws ARN.\n    ```\n    Example of valid \"SubscriptionArn\": \"arn:aws:sns::::\"\n    ```",
        "fix": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for S3 bucket policy changes and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-6",
          "AU-12"
        ],
        "notes": "Configuring log metric filter and alarm on Multi-region (global) CloudTrail\n  - ensures that activities from all regions (used as well as unused) are monitored\n  - ensures that activities on all supported global services are monitored\n  - ensures that all management events across all regions are monitored",
        "comment": null,
        "cis_controls": "TITLE:Controlled Access Based on the Need to Know CONTROL:14 DESCRIPTION:Controlled Access Based on the Need to Know;TITLE:Activate audit logging CONTROL:6.2 DESCRIPTION:Ensure that local logging has been enabled on all systems and networking devices.;",
        "ref": "https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html"
      },
      "code": "control \"aws-foundations-cis-3.8\" do\n  title \"Ensure a log metric filter and alarm exist for S3 bucket policy changes\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for changes to S3 bucket policies.\"\n  desc  \"rationale\", \"Monitoring changes to S3 bucket policies may reduce time to detect and correct permissive policies on sensitive S3 buckets.\"\n  desc  \"check\", \"Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \\\"IsMultiRegionTrail\\\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \\\"\\\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \\\"filterPattern\\\": \\\"{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }\\\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \\\"SubscriptionArn\\\" with valid aws ARN.\n    ```\n    Example of valid \\\"SubscriptionArn\\\": \\\"arn:aws:sns::::\\\"\n    ```\"\n  desc  \"fix\", \"Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for S3 bucket policy changes and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-6', 'AU-12']\n  tag notes: \"Configuring log metric filter and alarm on Multi-region (global) CloudTrail\n  - ensures that activities from all regions (used as well as unused) are monitored\n  - ensures that activities on all supported global services are monitored\n  - ensures that all management events across all regions are monitored\"\n  tag comment: nil\n  tag cis_controls: \"TITLE:Controlled Access Based on the Need to Know CONTROL:14 DESCRIPTION:Controlled Access Based on the Need to Know;TITLE:Activate audit logging CONTROL:6.2 DESCRIPTION:Ensure that local logging has been enabled on all systems and networking devices.;\"\n  tag ref: \"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html\"\n\n\n  pattern = '{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }'\n\n  describe aws_cloudwatch_log_metric_filter(pattern: pattern) do\n    it { should exist }\n  end\n\n  # Find the log_group_name associated with the aws_cloudwatch_log_metric_filter that has the pattern\n  log_group_name = aws_cloudwatch_log_metric_filter(pattern: pattern).log_group_name\n\n  # Find cloudtrails associated with with `log_group_name` parsed above\n  associated_trails = aws_cloudtrail_trails.names.select{ |x| aws_cloudtrail_trail(x).cloud_watch_logs_log_group_arn =~ /log-group:#{log_group_name}:/ }\n\n  # Ensure log_group is associated atleast one cloudtrail\n  describe \"Cloudtrails associated with log-group: #{log_group_name}\" do\n    subject { associated_trails }\n    it { should_not be_empty }\n  end\n\n  # Ensure atleast one of the associated cloudtrail meet the requirements.\n  describe.one do\n    associated_trails.each do |trail|\n      describe aws_cloudtrail_trail(trail) do\n        it { should be_multi_region_trail }\n        it { should have_event_selector_mgmt_events_rw_type_all }\n        it { should be_logging }\n      end\n    end\n  end\n\n  # Parse out `metric_name` and `metric_namespace` for the specified pattern.\n  associated_metric_filter = aws_cloudwatch_log_metric_filter(pattern: pattern, log_group_name: log_group_name)\n  metric_name = associated_metric_filter.metric_name\n  metric_namespace = associated_metric_filter.metric_namespace\n\n  # Ensure aws_cloudwatch_alarm for the specified pattern meets requirements.\n  if associated_metric_filter.exists?\n    describe aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace) do\n      it { should exist }\n      its ('alarm_actions') { should_not be_empty }\n    end\n\n    aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace).alarm_actions.each do |sns|\n      describe aws_sns_topic(sns) do\n        it { should exist }\n        its('confirmed_subscription_count') { should cmp >= 1 }\n      end\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-3.8.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-3.8"
    },
    {
      "title": "Ensure a log metric filter and alarm exist for AWS Config configuration changes",
      "desc": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.",
      "descriptions": {
        "default": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.",
        "rationale": "Monitoring changes to AWS Config configuration will help ensure sustained visibility of configuration items within the AWS account.",
        "check": "Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \"IsMultiRegionTrail\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \"\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \"filterPattern\": \"{ ($.eventSource = config.amazonaws.com) && (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.eventName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder)) }\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \"SubscriptionArn\" with valid aws ARN.\n    ```\n    Example of valid \"SubscriptionArn\": \"arn:aws:sns::::\"\n    ```",
        "fix": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for AWS Configuration changes and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = config.amazonaws.com) && (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.eventName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder)) }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Medium",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "CM-8(2)",
          "CM-8(6)",
          "CM-8"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Maintain Detailed Asset Inventory CONTROL:1.4 DESCRIPTION:Maintain an accurate and up-to-date inventory of all technology assets with the potential to store or process information. This inventory shall include all hardware assets, whether connected to the organization's network or not.;TITLE:Document Traffic Configuration Rules CONTROL:11.2 DESCRIPTION:All configuration rules that allow traffic to flow through network devices should be documented in a configuration management system with a specific business reason for each rule, a specific individual's name responsible for that business need, and an expected duration of the need.;TITLE:Maintain an Inventory of Authentication Systems CONTROL:16.1 DESCRIPTION:Maintain an inventory of each of the organization's authentication systems, including those located onsite or at a remote service provider.;",
        "ref": "CIS CSC v6.0 #5.4:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html"
      },
      "code": "control \"aws-foundations-cis-3.9\" do\n  title \"Ensure a log metric filter and alarm exist for AWS Config configuration changes\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.\"\n  desc  \"rationale\", \"Monitoring changes to AWS Config configuration will help ensure sustained visibility of configuration items within the AWS account.\"\n  desc  \"check\", \"Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \\\"IsMultiRegionTrail\\\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \\\"\\\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \\\"filterPattern\\\": \\\"{ ($.eventSource = config.amazonaws.com) && (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.eventName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder)) }\\\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \\\"SubscriptionArn\\\" with valid aws ARN.\n    ```\n    Example of valid \\\"SubscriptionArn\\\": \\\"arn:aws:sns::::\\\"\n    ```\"\n  desc  \"fix\", \"Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for AWS Configuration changes and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventSource = config.amazonaws.com) && (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.eventName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder)) }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```\"\n  impact 0.5\n  tag severity: \"Medium\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['CM-8(2)', 'CM-8(6)', 'CM-8']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Maintain Detailed Asset Inventory CONTROL:1.4 DESCRIPTION:Maintain an accurate and up-to-date inventory of all technology assets with the potential to store or process information. This inventory shall include all hardware assets, whether connected to the organization's network or not.;TITLE:Document Traffic Configuration Rules CONTROL:11.2 DESCRIPTION:All configuration rules that allow traffic to flow through network devices should be documented in a configuration management system with a specific business reason for each rule, a specific individual\\'s name responsible for that business need, and an expected duration of the need.;TITLE:Maintain an Inventory of Authentication Systems CONTROL:16.1 DESCRIPTION:Maintain an inventory of each of the organization's authentication systems, including those located onsite or at a remote service provider.;\"\n  tag ref: \"CIS CSC v6.0 #5.4:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html\"\n\n\n  pattern = '{ ($.eventSource = config.amazonaws.com) && (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.eventName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder)) }'\n\n  describe aws_cloudwatch_log_metric_filter(pattern: pattern) do\n    it { should exist }\n  end\n\n  # Find the log_group_name associated with the aws_cloudwatch_log_metric_filter that has the pattern\n  log_group_name = aws_cloudwatch_log_metric_filter(pattern: pattern).log_group_name\n\n  # Find cloudtrails associated with with `log_group_name` parsed above\n  associated_trails = aws_cloudtrail_trails.names.select{ |x| aws_cloudtrail_trail(x).cloud_watch_logs_log_group_arn =~ /log-group:#{log_group_name}:/ }\n\n  # Ensure log_group is associated atleast one cloudtrail\n  describe \"Cloudtrails associated with log-group: #{log_group_name}\" do\n    subject { associated_trails }\n    it { should_not be_empty }\n  end\n\n  # Ensure atleast one of the associated cloudtrail meet the requirements.\n  describe.one do\n    associated_trails.each do |trail|\n      describe aws_cloudtrail_trail(trail) do\n        it { should be_multi_region_trail }\n        it { should have_event_selector_mgmt_events_rw_type_all }\n        it { should be_logging }\n      end\n    end\n  end\n\n  # Parse out `metric_name` and `metric_namespace` for the specified pattern.\n  associated_metric_filter = aws_cloudwatch_log_metric_filter(pattern: pattern, log_group_name: log_group_name)\n  metric_name = associated_metric_filter.metric_name\n  metric_namespace = associated_metric_filter.metric_namespace\n\n  # Ensure aws_cloudwatch_alarm for the specified pattern meets requirements.\n  if associated_metric_filter.exists?\n    describe aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace) do\n      it { should exist }\n      its ('alarm_actions') { should_not be_empty }\n    end\n\n    aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace).alarm_actions.each do |sns|\n      describe aws_sns_topic(sns) do\n        it { should exist }\n        its('confirmed_subscription_count') { should cmp >= 1 }\n      end\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-3.9.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-3.9"
    },
    {
      "title": "Do not setup access keys during initial user setup for all IAM users that have a console password",
      "desc": "AWS console defaults the checkbox for creating access keys to enabled. This results in many access keys being generated unnecessarily. In addition to unnecessary credentials, it also generates unnecessary management work in auditing and rotating these keys.",
      "descriptions": {
        "default": "AWS console defaults the checkbox for creating access keys to enabled. This results in many access keys being generated unnecessarily. In addition to unnecessary credentials, it also generates unnecessary management work in auditing and rotating these keys.",
        "rationale": "Requiring that additional steps be taken by the user after their profile has been created will give a stronger indication of intent that access keys are [a] necessary for their work and [b] once the access key is established on an account, that the keys may be in use somewhere in the organization.\n\n    **Note**: Even if it is known the user will need access keys, require them to create the keys themselves or put in a support ticket to have the created as a separate step from user creation.",
        "check": "Perform the following to determine if access keys are rotated as prescribed:\n\n    1. Login to the AWS Management Console\n    2. Click `Services`\n    3. Click `IAM`\n    4. Click onA User\n    5. Compare the user creation date to the key 1 creation date.\n    6. For any that match, the key was created during initial user setup.\n\n    - - Keys that were created at the same time as the user profile and do not have a last used date should be deleted.\n\n    Via the CLI\n\n    1. Run the following command (OSX/Linux/UNIX) to generate a list of all IAM users along with their access keys utilization:\n    ```\n     aws iam generate-credential-report\n    ```\n    ```\n     aws iam get-credential-report --query 'Content' --output text | base64 -d | cut -d, -f1,4,9,11,14,16\n    ```\n    2. The output of this command will produce a table similar to the following:\n    ```\n  user,password_enabled,access_key_1_active,access_key_1_last_used_date,access_key_2_active,access_key_2_last_used_date\n     elise,false,true,2015-04-16T15:14:00+00:00,false,N/A\n     brandon,true,true,N/A,false,N/A\n     rakesh,false,false,N/A,false,N/A\n     helene,false,true,2015-11-18T17:47:00+00:00,false,N/A\n     paras,true,true,2016-08-28T12:04:00+00:00,true,2016-03-04T10:11:00+00:00\n     anitha,true,true,2016-06-08T11:43:00+00:00,true,N/A\n    ```\n    3. For any user having `access_key_last_used_date` set to `N/A` , ensure that access key is deleted `.`",
        "fix": "Perform the following to delete access keys that do not pass the audit:\n\n    1. Login to the AWS Management Console:\n    2. Click `Services`\n    3. Click `IAM`\n    4. Click on `Users`\n    5. Click on `Security Credentials`\n    6. As an Administrator\n     - Click on `Delete` for keys that were created at the same time as the user profile but have not been used.\n    7. As an IAM User\n     - Click on `Delete` for keys that were created at the same time as the user profile but have not been used.\n\n    Via CLI\n    ```\n    aws iam delete-access-key\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-2"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;"
      },
      "code": "control \"aws-foundations-cis-1.21\" do\n  title \"Do not setup access keys during initial user setup for all IAM users that have a console password\"\n  desc  \"AWS console defaults the checkbox for creating access keys to enabled. This results in many access keys being generated unnecessarily. In addition to unnecessary credentials, it also generates unnecessary management work in auditing and rotating these keys.\"\n  desc  \"rationale\", \"Requiring that additional steps be taken by the user after their profile has been created will give a stronger indication of intent that access keys are [a] necessary for their work and [b] once the access key is established on an account, that the keys may be in use somewhere in the organization.\n\n    **Note**: Even if it is known the user will need access keys, require them to create the keys themselves or put in a support ticket to have the created as a separate step from user creation.\"\n  desc  \"check\", \"Perform the following to determine if access keys are rotated as prescribed:\n\n    1. Login to the AWS Management Console\n    2. Click `Services`\n    3. Click `IAM`\n    4. Click onA User\n    5. Compare the user creation date to the key 1 creation date.\n    6. For any that match, the key was created during initial user setup.\n\n    - - Keys that were created at the same time as the user profile and do not have a last used date should be deleted.\n\n    Via the CLI\n\n    1. Run the following command (OSX/Linux/UNIX) to generate a list of all IAM users along with their access keys utilization:\n    ```\n     aws iam generate-credential-report\n    ```\n    ```\n     aws iam get-credential-report --query 'Content' --output text | base64 -d | cut -d, -f1,4,9,11,14,16\n    ```\n    2. The output of this command will produce a table similar to the following:\n    ```\n  user,password_enabled,access_key_1_active,access_key_1_last_used_date,access_key_2_active,access_key_2_last_used_date\n     elise,false,true,2015-04-16T15:14:00+00:00,false,N/A\n     brandon,true,true,N/A,false,N/A\n     rakesh,false,false,N/A,false,N/A\n     helene,false,true,2015-11-18T17:47:00+00:00,false,N/A\n     paras,true,true,2016-08-28T12:04:00+00:00,true,2016-03-04T10:11:00+00:00\n     anitha,true,true,2016-06-08T11:43:00+00:00,true,N/A\n    ```\n    3. For any user having `access_key_last_used_date` set to `N/A` , ensure that access key is deleted `.`\"\n  desc  \"fix\", \"Perform the following to delete access keys that do not pass the audit:\n\n    1. Login to the AWS Management Console:\n    2. Click `Services`\n    3. Click `IAM`\n    4. Click on `Users`\n    5. Click on `Security Credentials`\n    6. As an Administrator\n     - Click on `Delete` for keys that were created at the same time as the user profile but have not been used.\n    7. As an IAM User\n     - Click on `Delete` for keys that were created at the same time as the user profile but have not been used.\n\n    Via CLI\n    ```\n    aws iam delete-access-key\n    ```\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-2']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;\"\n\n  \n  if aws_iam_access_keys.where(active: true).entries.empty?\n    describe 'Control skipped because no iam access keys were found' do\n      skip 'This control is skipped since the aws_iam_access_keys resource returned an empty access key list'\n    end\n  else\n    aws_iam_access_keys.where(active: true).entries.each do |key|\n      describe key.username do\n        context key do\n          its('last_used_days_ago') { should_not be_nil }\n          its('created_with_user') { should be false }  \n        end\n      end\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.21.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.21"
    },
    {
      "title": "Ensure IAM password policy expires passwords within 90 days or less",
      "desc": "IAM password policies can require passwords to be rotated or expired after a given number of days. It is recommended that the password policy expire passwords after 90 days or less.",
      "descriptions": {
        "default": "IAM password policies can require passwords to be rotated or expired after a given number of days. It is recommended that the password policy expire passwords after 90 days or less.",
        "rationale": "Reducing the password lifetime increases account resiliency against brute force login attempts. Additionally, requiring regular password changes help in the following scenarios:\n\n    - Passwords can be stolen or compromised sometimes without your knowledge. This can happen via a system compromise, software vulnerability, or internal threat.\n    - Certain corporate and government web filters or proxy servers have the ability to intercept and record traffic even if it's encrypted.\n    - Many people use the same password for many systems such as work, email, and personal.\n    - Compromised end user workstations might have a keystroke logger.",
        "check": "Perform the following to ensure the password policy is configured as prescribed:\n\n    Via AWS Console:\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Ensure \"Enable password expiration\" is checked\n    5. Ensure \"Password expiration period (in days):\" is set to 90 or less\n\n    Via CLI\n    ```\n    aws iam get-account-password-policy\n    ```\n    Ensure the output of the above command includes \"MaxPasswordAge\": 90 or less",
        "fix": "Perform the following to set the password policy as prescribed:\n\n    Via AWS Console:\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Check \"Enable password expiration\"\n    5. Set \"Password expiration period (in days):\" to 90 or less\n\n     Via CLI\n    ```\n     aws iam update-account-password-policy --max-password-age 90\n    ```\n    Note: All commands starting with \"aws iam update-account-password-policy\" can be combined into a single command."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-2"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;"
      },
      "code": "control \"aws-foundations-cis-1.11\" do\n  title \"Ensure IAM password policy expires passwords within 90 days or less\"\n  desc  \"IAM password policies can require passwords to be rotated or expired after a given number of days. It is recommended that the password policy expire passwords after 90 days or less.\"\n  desc  \"rationale\", \"Reducing the password lifetime increases account resiliency against brute force login attempts. Additionally, requiring regular password changes help in the following scenarios:\n\n    - Passwords can be stolen or compromised sometimes without your knowledge. This can happen via a system compromise, software vulnerability, or internal threat.\n    - Certain corporate and government web filters or proxy servers have the ability to intercept and record traffic even if it's encrypted.\n    - Many people use the same password for many systems such as work, email, and personal.\n    - Compromised end user workstations might have a keystroke logger.\"\n  desc  \"check\", \"Perform the following to ensure the password policy is configured as prescribed:\n\n    Via AWS Console:\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Ensure \\\"Enable password expiration\\\" is checked\n    5. Ensure \\\"Password expiration period (in days):\\\" is set to 90 or less\n\n    Via CLI\n    ```\n    aws iam get-account-password-policy\n    ```\n    Ensure the output of the above command includes \\\"MaxPasswordAge\\\": 90 or less\"\n  desc  \"fix\", \"Perform the following to set the password policy as prescribed:\n\n    Via AWS Console:\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Check \\\"Enable password expiration\\\"\n    5. Set \\\"Password expiration period (in days):\\\" to 90 or less\n\n     Via CLI\n    ```\n     aws iam update-account-password-policy --max-password-age 90\n    ```\n    Note: All commands starting with \\\"aws iam update-account-password-policy\\\" can be combined into a single command.\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-2']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;\"\n  \n\n  describe aws_iam_password_policy do\n    it { should exist }\n    it { should expire_passwords }\n    its('max_password_age_in_days') { should cmp <= input(\"aws_cred_age\") }\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.11.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.11"
    },
    {
      "title": "Ensure a log metric filter and alarm exist for security group changes",
      "desc": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Groups are a stateful packet filter that controls ingress and egress traffic within a VPC. It is recommended that a metric filter and alarm be established changes to Security Groups.",
      "descriptions": {
        "default": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Groups are a stateful packet filter that controls ingress and egress traffic within a VPC. It is recommended that a metric filter and alarm be established changes to Security Groups.",
        "rationale": "Monitoring changes to security group will help ensure that resources and services are not unintentionally exposed.",
        "check": "Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \"IsMultiRegionTrail\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \"\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \"filterPattern\": \"{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup) }\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \"SubscriptionArn\" with valid aws ARN.\n    ```\n    Example of valid \"SubscriptionArn\": \"arn:aws:sns::::\"\n    ```",
        "fix": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for security groups changes and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup) }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Medium",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-2(4)"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Log and Alert on Changes to Administrative Group Membership CONTROL:4.8 DESCRIPTION:Configure systems to issue a log entry and alert when an account is added to or removed from any group assigned administrative privileges.;",
        "ref": "https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html"
      },
      "code": "control \"aws-foundations-cis-3.10\" do\n  title \"Ensure a log metric filter and alarm exist for security group changes\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Security Groups are a stateful packet filter that controls ingress and egress traffic within a VPC. It is recommended that a metric filter and alarm be established changes to Security Groups.\"\n  desc  \"rationale\", \"Monitoring changes to security group will help ensure that resources and services are not unintentionally exposed.\"\n  desc  \"check\", \"Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \\\"IsMultiRegionTrail\\\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \\\"\\\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \\\"filterPattern\\\": \\\"{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup) }\\\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \\\"SubscriptionArn\\\" with valid aws ARN.\n    ```\n    Example of valid \\\"SubscriptionArn\\\": \\\"arn:aws:sns::::\\\"\n    ```\"\n  desc  \"fix\", \"Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for security groups changes and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup) }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```\"\n  impact 0.5\n  tag severity: \"Medium\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-2(4)']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Log and Alert on Changes to Administrative Group Membership CONTROL:4.8 DESCRIPTION:Configure systems to issue a log entry and alert when an account is added to or removed from any group assigned administrative privileges.;\"\n  tag ref: \"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html\"\n\n\n  pattern = '{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup) }'\n\n  describe aws_cloudwatch_log_metric_filter(pattern: pattern) do\n    it { should exist }\n  end\n\n  # Find the log_group_name associated with the aws_cloudwatch_log_metric_filter that has the pattern\n  log_group_name = aws_cloudwatch_log_metric_filter(pattern: pattern).log_group_name\n\n  # Find cloudtrails associated with with `log_group_name` parsed above\n  associated_trails = aws_cloudtrail_trails.names.select{ |x| aws_cloudtrail_trail(x).cloud_watch_logs_log_group_arn =~ /log-group:#{log_group_name}:/ }\n\n  # Ensure log_group is associated atleast one cloudtrail\n  describe \"Cloudtrails associated with log-group: #{log_group_name}\" do\n    subject { associated_trails }\n    it { should_not be_empty }\n  end\n\n  # Ensure atleast one of the associated cloudtrail meet the requirements.\n  describe.one do\n    associated_trails.each do |trail|\n      describe aws_cloudtrail_trail(trail) do\n        it { should be_multi_region_trail }\n        it { should have_event_selector_mgmt_events_rw_type_all }\n        it { should be_logging }\n      end\n    end\n  end\n\n  # Parse out `metric_name` and `metric_namespace` for the specified pattern.\n  associated_metric_filter = aws_cloudwatch_log_metric_filter(pattern: pattern, log_group_name: log_group_name)\n  metric_name = associated_metric_filter.metric_name\n  metric_namespace = associated_metric_filter.metric_namespace\n\n  # Ensure aws_cloudwatch_alarm for the specified pattern meets requirements.\n  if associated_metric_filter.exists?\n    describe aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace) do\n      it { should exist }\n      its ('alarm_actions') { should_not be_empty }\n    end\n\n    aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace).alarm_actions.each do |sns|\n      describe aws_sns_topic(sns) do\n        it { should exist }\n        its('confirmed_subscription_count') { should cmp >= 1 }\n      end\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-3.10.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-3.10"
    },
    {
      "title": "Ensure hardware MFA is enabled for the \"root\" account",
      "desc": "The root account is the most privileged user in an AWS account. MFA adds an extra layer of protection on top of a user name and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device. For Level 2, it is recommended that the root account be protected with a hardware MFA.",
      "descriptions": {
        "default": "The root account is the most privileged user in an AWS account. MFA adds an extra layer of protection on top of a user name and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device. For Level 2, it is recommended that the root account be protected with a hardware MFA.",
        "rationale": "A hardware MFA has a smaller attack surface than a virtual MFA. For example, a hardware MFA does not suffer the attack surface introduced by the mobile smartphone on which a virtual MFA resides.\n\n    **Note**: Using hardware MFA for many, many AWS accounts may create a logistical device management issue. If this is the case, consider implementing this Level 2 recommendation selectively to the highest security AWS accounts and the Level 1 recommendation applied to the remaining accounts.\n\n    Link to order AWS compatible hardware MFA device: [http://onlinenoram.gemalto.com/](http://onlinenoram.gemalto.com/)",
        "check": "Perform the following to determine if the root account has a hardware MFA setup:\n\n1. Run the following command to determine if the root account has MFA setup:\n```\n aws iam get-account-summary | grep \"AccountMFAEnabled\"\n```\n\nThe `AccountMFAEnabled` property is set to `1` will ensure that root account has MFA (Virtual or Hardware) Enabled.\nIf `AccountMFAEnabled` property is set to `0` the account is not compliant with this recommendation.\n\n2. If `AccountMFAEnabled` property is set to `1`, determine root account has Hardware MFA enabled.\nRun the following command to list all virtual MFA devices:\n```\n aws iam list-virtual-mfa-devices\n```\nIf the output contains one MFA with the following Serial Number, it means the MFA is virtual, not hardware and the account is not compliant with this recommendation:\n\n `\"SerialNumber\": \"arn:aws:iam::__:mfa/root-account-mfa-device\"`",
        "fix": "Perform the following to establish a hardware MFA for the root account:\n\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).\n\n     Note: to manage MFA devices for the root AWS account, you must use your root account credentials to sign in to AWS. You cannot manage MFA devices for the root account using other credentials.\n    2. Choose `Dashboard` , and under `Security Status` , expand `Activate MFA` on your root account.\n    3. Choose `Activate MFA`\n    4. In the wizard, choose `A hardware MFA` device and then choose `Next Step` .\n    5. In the `Serial Number` box, enter the serial number that is found on the back of the MFA device.\n    6. In the `Authentication Code 1` box, enter the six-digit number displayed by the MFA device. You might need to press the button on the front of the device to display the number.\n    7. Wait 30 seconds while the device refreshes the code, and then enter the next six-digit number into the `Authentication Code 2` box. You might need to press the button on the front of the device again to display the second number.\n    8. Choose `Next Step` . The MFA device is now associated with the AWS account. The next time you use your AWS account credentials to sign in, you must type a code from the hardware MFA device."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Medium",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "IA-2(1)"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Use Multifactor Authentication For All Administrative Access CONTROL:4.5 DESCRIPTION:Use multi-factor authentication and encrypted channels for all administrative account access.;",
        "ref": "CIS CSC v6.0 #5.6, #11.4, #12.6, #16.11:Order Hardware MFA: http://onlinenoram.gemalto.com/:http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_virtual.html:http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_physical.html#enable-hw-mfa-for-root"
      },
      "code": "control \"aws-foundations-cis-1.14\" do\n  title \"Ensure hardware MFA is enabled for the \\\"root\\\" account\"\n  desc  \"The root account is the most privileged user in an AWS account. MFA adds an extra layer of protection on top of a user name and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device. For Level 2, it is recommended that the root account be protected with a hardware MFA.\"\n  desc  \"rationale\", \"A hardware MFA has a smaller attack surface than a virtual MFA. For example, a hardware MFA does not suffer the attack surface introduced by the mobile smartphone on which a virtual MFA resides.\n\n    **Note**: Using hardware MFA for many, many AWS accounts may create a logistical device management issue. If this is the case, consider implementing this Level 2 recommendation selectively to the highest security AWS accounts and the Level 1 recommendation applied to the remaining accounts.\n\n    Link to order AWS compatible hardware MFA device: [http://onlinenoram.gemalto.com/](http://onlinenoram.gemalto.com/)\"\n  desc  \"check\", \"\n    Perform the following to determine if the root account has a hardware MFA setup:\n\n    1. Run the following command to determine if the root account has MFA setup:\n    ```\n     aws iam get-account-summary | grep \\\"AccountMFAEnabled\\\"\n    ```\n\n    The `AccountMFAEnabled` property is set to `1` will ensure that root account has MFA (Virtual or Hardware) Enabled.\n    If `AccountMFAEnabled` property is set to `0` the account is not compliant with this recommendation.\n\n    2. If `AccountMFAEnabled` property is set to `1`, determine root account has Hardware MFA enabled.\n    Run the following command to list all virtual MFA devices:\n    ```\n     aws iam list-virtual-mfa-devices\n    ```\n    If the output contains one MFA with the following Serial Number, it means the MFA is virtual, not hardware and the account is not compliant with this recommendation:\n\n     `\\\"SerialNumber\\\": \\\"arn:aws:iam::__:mfa/root-account-mfa-device\\\"`\"\n  desc  \"fix\", \"Perform the following to establish a hardware MFA for the root account:\n\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).\n\n     Note: to manage MFA devices for the root AWS account, you must use your root account credentials to sign in to AWS. You cannot manage MFA devices for the root account using other credentials.\n    2. Choose `Dashboard` , and under `Security Status` , expand `Activate MFA` on your root account.\n    3. Choose `Activate MFA`\n    4. In the wizard, choose `A hardware MFA` device and then choose `Next Step` .\n    5. In the `Serial Number` box, enter the serial number that is found on the back of the MFA device.\n    6. In the `Authentication Code 1` box, enter the six-digit number displayed by the MFA device. You might need to press the button on the front of the device to display the number.\n    7. Wait 30 seconds while the device refreshes the code, and then enter the next six-digit number into the `Authentication Code 2` box. You might need to press the button on the front of the device again to display the second number.\n    8. Choose `Next Step` . The MFA device is now associated with the AWS account. The next time you use your AWS account credentials to sign in, you must type a code from the hardware MFA device.\"\n  impact 0.5\n  tag severity: \"Medium\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['IA-2(1)']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Use Multifactor Authentication For All Administrative Access CONTROL:4.5 DESCRIPTION:Use multi-factor authentication and encrypted channels for all administrative account access.;\"\n  tag ref: \"CIS CSC v6.0 #5.6, #11.4, #12.6, #16.11:Order Hardware MFA: http://onlinenoram.gemalto.com/:http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_virtual.html:http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_physical.html#enable-hw-mfa-for-root\"\n\n  \n  describe aws_iam_root_user do\n    it { should have_hardware_mfa_enabled }\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.14.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.14"
    },
    {
      "title": "Ensure a support role has been created to manage incidents with AWS Support",
      "desc": "AWS provides a support center that can be used for incident notification and response, as well as technical support and customer services. Create an IAM Role to allow authorized users to manage incidents with AWS Support.",
      "descriptions": {
        "default": "AWS provides a support center that can be used for incident notification and response, as well as technical support and customer services. Create an IAM Role to allow authorized users to manage incidents with AWS Support.",
        "rationale": "By implementing least privilege for access control, an IAM Role will require an appropriate IAM Policy to allow Support Center Access in order to manage Incidents with AWS Support.",
        "check": "Using the Amazon unified command line interface:\n\n    - List IAM policies, filter for the 'AWSSupportAccess' managed policy, and note the \"Arn\" element value:\n    ```\n     aws iam list-policies --query \"Policies[?PolicyName == 'AWSSupportAccess']\"\n    ```\n    - Check if the 'AWSSupportAccess' is attached to any IAM user, group or role:\n    ```\n     aws iam list-entities-for-policy --policy-arn\n    ```",
        "fix": "Using the Amazon unified command line interface:\n\n    - Create an IAM role for managing incidents with AWS:\n    - Create a trust relationship policy document that allows  to manage AWS incidents, and save it locally as /tmp/TrustPolicy.json:\n    ```\n     {\n     \"Version\": \"2012-10-17\",\n     \"Statement\": [\n     {\n     \"Effect\": \"Allow\",\n     \"Principal\": {\n     \"AWS\": \"\"\n     },\n     \"Action\": \"sts:AssumeRole\"\n     }\n     ]\n     }\n    ```\n    - - Create the IAM role using the above trust policy:\n    ```\n     aws iam create-role --role-name  --assume-role-policy-document file:///tmp/TrustPolicy.json\n    ```\n    - - Attach 'AWSSupportAccess' managed policy to the created IAM role:\n    ```\n     aws iam attach-role-policy --policy-arn  --role-name\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "IR-7"
        ],
        "notes": "We also need two recommendations in Identity Section of this 3 tier web app to have an admin group and create a policy that can open support tickets and do other admin things that cost money. Valentin worked on these new recommendations.",
        "comment": "All AWS Support plans include an unlimited number of account and billing support cases, with no long-term contracts. Support billing calculations are performed on a per-account basis for all plans. Enterprise Support plan customers have the option to include multiple enabled accounts in an aggregated monthly billing calculation. Monthly charges for the Business and Enterprise support plans are based on each month's AWS usage charges, subject to a monthly minimum, billed in advance.",
        "ref": "http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html:https://aws.amazon.com/premiumsupport/pricing/:http://docs.aws.amazon.com/cli/latest/reference/iam/list-policies.html:http://docs.aws.amazon.com/cli/latest/reference/iam/attach-role-policy.html:http://docs.aws.amazon.com/cli/latest/reference/iam/list-entities-for-policy.html"
      },
      "code": "control \"aws-foundations-cis-1.20\" do\n  title \"Ensure a support role has been created to manage incidents with AWS Support\"\n  desc  \"AWS provides a support center that can be used for incident notification and response, as well as technical support and customer services. Create an IAM Role to allow authorized users to manage incidents with AWS Support.\"\n  desc  \"rationale\", \"By implementing least privilege for access control, an IAM Role will require an appropriate IAM Policy to allow Support Center Access in order to manage Incidents with AWS Support.\"\n  desc  \"check\", \"Using the Amazon unified command line interface:\n\n    - List IAM policies, filter for the 'AWSSupportAccess' managed policy, and note the \\\"Arn\\\" element value:\n    ```\n     aws iam list-policies --query \\\"Policies[?PolicyName == 'AWSSupportAccess']\\\"\n    ```\n    - Check if the 'AWSSupportAccess' is attached to any IAM user, group or role:\n    ```\n     aws iam list-entities-for-policy --policy-arn\n    ```\"\n  desc  \"fix\", \"Using the Amazon unified command line interface:\n\n    - Create an IAM role for managing incidents with AWS:\n    - Create a trust relationship policy document that allows  to manage AWS incidents, and save it locally as /tmp/TrustPolicy.json:\n    ```\n     {\n     \\\"Version\\\": \\\"2012-10-17\\\",\n     \\\"Statement\\\": [\n     {\n     \\\"Effect\\\": \\\"Allow\\\",\n     \\\"Principal\\\": {\n     \\\"AWS\\\": \\\"\\\"\n     },\n     \\\"Action\\\": \\\"sts:AssumeRole\\\"\n     }\n     ]\n     }\n    ```\n    - - Create the IAM role using the above trust policy:\n    ```\n     aws iam create-role --role-name  --assume-role-policy-document file:///tmp/TrustPolicy.json\n    ```\n    - - Attach 'AWSSupportAccess' managed policy to the created IAM role:\n    ```\n     aws iam attach-role-policy --policy-arn  --role-name\n    ```\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['IR-7']\n  tag notes: \"We also need two recommendations in Identity Section of this 3 tier web app to have an admin group and create a policy that can open support tickets and do other admin things that cost money. Valentin worked on these new recommendations.\"\n  tag comment: \"All AWS Support plans include an unlimited number of account and billing support cases, with no long-term contracts. Support billing calculations are performed on a per-account basis for all plans. Enterprise Support plan customers have the option to include multiple enabled accounts in an aggregated monthly billing calculation. Monthly charges for the Business and Enterprise support plans are based on each month's AWS usage charges, subject to a monthly minimum, billed in advance.\"\n  tag ref: \"http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html:https://aws.amazon.com/premiumsupport/pricing/:http://docs.aws.amazon.com/cli/latest/reference/iam/list-policies.html:http://docs.aws.amazon.com/cli/latest/reference/iam/attach-role-policy.html:http://docs.aws.amazon.com/cli/latest/reference/iam/list-entities-for-policy.html\"\n\n  \n  describe aws_iam_policy('AWSSupportAccess') do\n    it { should be_attached }\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.20.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.20"
    },
    {
      "title": "Ensure IAM password policy require at least one lowercase letter",
      "desc": "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy require at least one lowercase letter.",
      "descriptions": {
        "default": "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy require at least one lowercase letter.",
        "rationale": "Setting a password complexity policy increases account resiliency against brute force login attempts.",
        "check": "Perform the following to ensure the password policy is configured as prescribed:\n\n    Via the AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Ensure \"Requires at least one lowercase letter\" is checked under \"Password Policy\"\n\n    Via CLI\n    ```\n    aws iam get-account-password-policy\n    ```\n    Ensure the output of the above command includes \"RequireLowercaseCharacters\": true",
        "fix": "Perform the following to set the password policy as prescribed:\n\n    Via the AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Check \"Requires at least one lowercase letter\"\n    5. Click \"Apply password policy\"\n\n    Via CLI\n    ```\n     aws iam update-account-password-policy --require-lowercase-characters\n    ```\n    Note: All commands starting with \"aws iam update-account-password-policy\" can be combined into a single command."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-2"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;"
      },
      "code": "control \"aws-foundations-cis-1.6\" do\n  title \"Ensure IAM password policy require at least one lowercase letter\"\n  desc  \"Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy require at least one lowercase letter.\"\n  desc  \"rationale\", \"Setting a password complexity policy increases account resiliency against brute force login attempts.\"\n  desc  \"check\", \"Perform the following to ensure the password policy is configured as prescribed:\n\n    Via the AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Ensure \\\"Requires at least one lowercase letter\\\" is checked under \\\"Password Policy\\\"\n\n    Via CLI\n    ```\n    aws iam get-account-password-policy\n    ```\n    Ensure the output of the above command includes \\\"RequireLowercaseCharacters\\\": true\"\n  desc  \"fix\", \"Perform the following to set the password policy as prescribed:\n\n    Via the AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Check \\\"Requires at least one lowercase letter\\\"\n    5. Click \\\"Apply password policy\\\"\n\n    Via CLI\n    ```\n     aws iam update-account-password-policy --require-lowercase-characters\n    ```\n    Note: All commands starting with \\\"aws iam update-account-password-policy\\\" can be combined into a single command.\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-2']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;\"\n\n \n  describe aws_iam_password_policy do\n    it { should exist }\n    it { should require_lowercase_characters }\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.6.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.6"
    },
    {
      "title": "Ensure IAM password policy requires at least one uppercase letter",
      "desc": "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy require at least one uppercase letter.",
      "descriptions": {
        "default": "Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy require at least one uppercase letter.",
        "rationale": "Setting a password complexity policy increases account resiliency against brute force login attempts.",
        "check": "Perform the following to ensure the password policy is configured as prescribed:\n\n    Via AWS Console\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Ensure \"Requires at least one uppercase letter\" is checked under \"Password Policy\"\n\n    Via CLI\n    ```\n    aws iam get-account-password-policy\n    ```\n    Ensure the output of the above command includes \"RequireUppercaseCharacters\": true",
        "fix": "Perform the following to set the password policy as prescribed:\n\n    Via AWS Console\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Check \"Requires at least one uppercase letter\"\n    5. Click \"Apply password policy\"\n\n    Via CLI\n    ```\n     aws iam update-account-password-policy --require-uppercase-characters\n    ```\n    Note: All commands starting with \"aws iam update-account-password-policy\" can be combined into a single command."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-2"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;"
      },
      "code": "control \"aws-foundations-cis-1.5\" do\n  title \"Ensure IAM password policy requires at least one uppercase letter\"\n  desc  \"Password policies are, in part, used to enforce password complexity requirements. IAM password policies can be used to ensure password are comprised of different character sets. It is recommended that the password policy require at least one uppercase letter.\"\n  desc  \"rationale\", \"Setting a password complexity policy increases account resiliency against brute force login attempts.\"\n  desc  \"check\", \"Perform the following to ensure the password policy is configured as prescribed:\n\n    Via AWS Console\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Ensure \\\"Requires at least one uppercase letter\\\" is checked under \\\"Password Policy\\\"\n\n    Via CLI\n    ```\n    aws iam get-account-password-policy\n    ```\n    Ensure the output of the above command includes \\\"RequireUppercaseCharacters\\\": true\"\n  desc  \"fix\", \"Perform the following to set the password policy as prescribed:\n\n    Via AWS Console\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Check \\\"Requires at least one uppercase letter\\\"\n    5. Click \\\"Apply password policy\\\"\n\n    Via CLI\n    ```\n     aws iam update-account-password-policy --require-uppercase-characters\n    ```\n    Note: All commands starting with \\\"aws iam update-account-password-policy\\\" can be combined into a single command.\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-2']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;\"\n\n\n  describe aws_iam_password_policy do\n    it { should exist }\n    it { should require_uppercase_characters }\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.5.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.5"
    },
    {
      "title": "Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL)",
      "desc": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. NACLs are used as a stateless packet filter to control ingress and egress traffic for subnets within a VPC. It is recommended that a metric filter and alarm be established for changes made to NACLs.",
      "descriptions": {
        "default": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. NACLs are used as a stateless packet filter to control ingress and egress traffic for subnets within a VPC. It is recommended that a metric filter and alarm be established for changes made to NACLs.",
        "rationale": "Monitoring changes to NACLs will help ensure that AWS resources and services are not unintentionally exposed.",
        "check": "Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \"IsMultiRegionTrail\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \"\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \"filterPattern\": \"{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \"SubscriptionArn\" with valid aws ARN.\n    ```\n    Example of valid \"SubscriptionArn\": \"arn:aws:sns::::\"\n    ```",
        "fix": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for NACL changes and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Medium",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "CM-6(2)"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Use Automated Tools to Verify Standard Device Configurations and Detect Changes CONTROL:11.3 DESCRIPTION:Compare all network device configuration against approved security configurations defined for each network device in use and alert when any deviations are discovered.;",
        "ref": "https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html"
      },
      "code": "control \"aws-foundations-cis-3.11\" do\n  title \"Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL)\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. NACLs are used as a stateless packet filter to control ingress and egress traffic for subnets within a VPC. It is recommended that a metric filter and alarm be established for changes made to NACLs.\"\n  desc  \"rationale\", \"Monitoring changes to NACLs will help ensure that AWS resources and services are not unintentionally exposed.\"\n  desc  \"check\", \"Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \\\"IsMultiRegionTrail\\\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \\\"\\\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \\\"filterPattern\\\": \\\"{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }\\\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \\\"SubscriptionArn\\\" with valid aws ARN.\n    ```\n    Example of valid \\\"SubscriptionArn\\\": \\\"arn:aws:sns::::\\\"\n    ```\"\n  desc  \"fix\", \"Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for NACL changes and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```\"\n  impact 0.5\n  tag severity: \"Medium\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['CM-6(2)']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Use Automated Tools to Verify Standard Device Configurations and Detect Changes CONTROL:11.3 DESCRIPTION:Compare all network device configuration against approved security configurations defined for each network device in use and alert when any deviations are discovered.;\"\n  tag ref: \"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html\"\n\n\n  pattern = '{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }'\n\n  describe aws_cloudwatch_log_metric_filter(pattern: pattern) do\n    it { should exist }\n  end\n\n  # Find the log_group_name associated with the aws_cloudwatch_log_metric_filter that has the pattern\n  log_group_name = aws_cloudwatch_log_metric_filter(pattern: pattern).log_group_name\n\n  # Find cloudtrails associated with with `log_group_name` parsed above\n  associated_trails = aws_cloudtrail_trails.names.select{ |x| aws_cloudtrail_trail(x).cloud_watch_logs_log_group_arn =~ /log-group:#{log_group_name}:/ }\n\n  # Ensure log_group is associated atleast one cloudtrail\n  describe \"Cloudtrails associated with log-group: #{log_group_name}\" do\n    subject { associated_trails }\n    it { should_not be_empty }\n  end\n\n  # Ensure atleast one of the associated cloudtrail meet the requirements.\n  describe.one do\n    associated_trails.each do |trail|\n      describe aws_cloudtrail_trail(trail) do\n        it { should be_multi_region_trail }\n        it { should have_event_selector_mgmt_events_rw_type_all }\n        it { should be_logging }\n      end\n    end\n  end\n\n  # Parse out `metric_name` and `metric_namespace` for the specified pattern.\n  associated_metric_filter = aws_cloudwatch_log_metric_filter(pattern: pattern, log_group_name: log_group_name)\n  metric_name = associated_metric_filter.metric_name\n  metric_namespace = associated_metric_filter.metric_namespace\n\n  # Ensure aws_cloudwatch_alarm for the specified pattern meets requirements.\n  if associated_metric_filter.exists?\n    describe aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace) do\n      it { should exist }\n      its ('alarm_actions') { should_not be_empty }\n    end\n\n    aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace).alarm_actions.each do |sns|\n      describe aws_sns_topic(sns) do\n        it { should exist }\n        its('confirmed_subscription_count') { should cmp >= 1 }\n      end\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-3.11.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-3.11"
    },
    {
      "title": "Ensure CloudTrail log file validation is enabled",
      "desc": "CloudTrail log file validation creates a digitally signed digest file containing a hash of each log that CloudTrail writes to S3. These digest files can be used to determine whether a log file was changed, deleted, or unchanged after CloudTrail delivered the log. It is recommended that file validation be enabled on all CloudTrails.",
      "descriptions": {
        "default": "CloudTrail log file validation creates a digitally signed digest file containing a hash of each log that CloudTrail writes to S3. These digest files can be used to determine whether a log file was changed, deleted, or unchanged after CloudTrail delivered the log. It is recommended that file validation be enabled on all CloudTrails.",
        "rationale": "Enabling log file validation will provide additional integrity checking of CloudTrail logs.",
        "check": "Perform the following on each trail to determine if log file validation is enabled:\n\n    Via the management Console\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/cloudtrail](https://console.aws.amazon.com/cloudtrail)\n    2. Click on `Trails` on the left navigation pane\n    3. For Every Trail:\n    - Click on a trail via the link in the _Name_ column\n    - Under the `S3` section, ensure `Enable log file validation` is set to `Yes`\n\n    Via CLI\n    ```\n    aws cloudtrail describe-trails\n    ```\n    Ensure `LogFileValidationEnabled` is set to `true` for each trail",
        "fix": "Perform the following to enable log file validation on a given trail:\n\n    Via the management Console\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/cloudtrail](https://console.aws.amazon.com/cloudtrail)\n    2. Click on `Trails` on the left navigation pane\n    3. Click on target trail\n    4. Within the `S3` section click on the edit icon (pencil)\n    5. Click `Advanced`\n    6. Click on the `Yes` radio button in section `Enable log file validation`\n    7. Click `Save`\n\n    Via CLI\n    ```\n    aws cloudtrail update-trail --name\n     --enable-log-file-validation\n    ```\n    Note that periodic validation of logs using these digests can be performed by running the following command:\n    ```\n    aws cloudtrail validate-logs --trail-arn\n     --start-time  --end-time\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Medium",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AU-6"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Maintenance, Monitoring and Analysis of Audit Logs CONTROL:6 DESCRIPTION:Maintenance, Monitoring and Analysis of Audit Logs;",
        "ref": "http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-log-file-validation-enabling.html:CIS CSC v6.0 #6.3"
      },
      "code": "control \"aws-foundations-cis-2.2\" do\n  title \"Ensure CloudTrail log file validation is enabled\"\n  desc  \"CloudTrail log file validation creates a digitally signed digest file containing a hash of each log that CloudTrail writes to S3. These digest files can be used to determine whether a log file was changed, deleted, or unchanged after CloudTrail delivered the log. It is recommended that file validation be enabled on all CloudTrails.\"\n  desc  \"rationale\", \"Enabling log file validation will provide additional integrity checking of CloudTrail logs.\"\n  desc  \"check\", \"Perform the following on each trail to determine if log file validation is enabled:\n\n    Via the management Console\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/cloudtrail](https://console.aws.amazon.com/cloudtrail)\n    2. Click on `Trails` on the left navigation pane\n    3. For Every Trail:\n    - Click on a trail via the link in the _Name_ column\n    - Under the `S3` section, ensure `Enable log file validation` is set to `Yes`\n\n    Via CLI\n    ```\n    aws cloudtrail describe-trails\n    ```\n    Ensure `LogFileValidationEnabled` is set to `true` for each trail\"\n  desc  \"fix\", \"Perform the following to enable log file validation on a given trail:\n\n    Via the management Console\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/cloudtrail](https://console.aws.amazon.com/cloudtrail)\n    2. Click on `Trails` on the left navigation pane\n    3. Click on target trail\n    4. Within the `S3` section click on the edit icon (pencil)\n    5. Click `Advanced`\n    6. Click on the `Yes` radio button in section `Enable log file validation`\n    7. Click `Save`\n\n    Via CLI\n    ```\n    aws cloudtrail update-trail --name\n     --enable-log-file-validation\n    ```\n    Note that periodic validation of logs using these digests can be performed by running the following command:\n    ```\n    aws cloudtrail validate-logs --trail-arn\n     --start-time  --end-time\n    ```\"\n  impact 0.5\n  tag severity: \"Medium\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AU-6']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Maintenance, Monitoring and Analysis of Audit Logs CONTROL:6 DESCRIPTION:Maintenance, Monitoring and Analysis of Audit Logs;\"\n  tag ref: \"http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-log-file-validation-enabling.html:CIS CSC v6.0 #6.3\"\n\n  describe aws_cloudtrail_trails do\n    it { should exist }\n  end\n\n  aws_cloudtrail_trails.trail_arns.each do |trail|\n    describe aws_cloudtrail_trail(trail) do\n      it { should be_log_file_validation_enabled }\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-2.2.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-2.2"
    },
    {
      "title": "Ensure AWS Config is enabled in all regions",
      "desc": "AWS Config is a web service that performs configuration management of supported AWS resources within your account and delivers log files to you. The recorded information includes the configuration item (AWS resource), relationships between configuration items (AWS resources), any configuration changes between resources. It is recommended to enable AWS Config be enabled in all regions.",
      "descriptions": {
        "default": "AWS Config is a web service that performs configuration management of supported AWS resources within your account and delivers log files to you. The recorded information includes the configuration item (AWS resource), relationships between configuration items (AWS resources), any configuration changes between resources. It is recommended to enable AWS Config be enabled in all regions.",
        "rationale": "The AWS configuration item history captured by AWS Config enables security analysis, resource change tracking, and compliance auditing.",
        "check": "Process to evaluate AWS Config configuration per region\n\n    Via AWS Management Console:\n    1. Sign in to the AWS Management Console and open the AWS Config console at [https://console.aws.amazon.com/config/](https://console.aws.amazon.com/config/).\n    2. On the top right of the console select target Region.\n    3. If presented with Setup AWS Config - follow remediation procedure:\n    4. On the Resource inventory page, Click on edit (the gear icon). The Set Up AWS Config page appears.\n    5. Ensure 1 or both check-boxes under \"All Resources\" is checked.\n     - Include global resources related to IAM resources - which needs to be enabled in 1 region only\n    6. Ensure the correct S3 bucket has been defined.\n    7. Ensure the correct SNS topic has been defined.\n    8. Repeat steps 2 to 7 for each region.\n\n    Via AWS Command Line Interface:\n    1. Run this command to show all AWS Config recorders and their properties:\n    ```\n    aws configservice describe-configuration-recorders\n    ```\n    2. Evaluate the output to ensure that there's at least one recorder for which `recordingGroup` object includes `\"allSupported\": true` AND `\"includeGlobalResourceTypes\": true`\n    Note: There is one more parameter \"ResourceTypes\" in recordingGroup object. We don't need to check the same as whenever we set \"allSupported\": true, AWS enforces resource types to be empty (\"ResourceTypes\":[])\n    Sample Output:\n    ```\n    {\n     \"ConfigurationRecorders\": [\n     {\n     \"recordingGroup\": {\n     \"allSupported\": true,\n     \"resourceTypes\": [],\n     \"includeGlobalResourceTypes\": true\n     },\n     \"roleARN\": \"arn:aws:iam:::role/service-role/\",\n     \"name\": \"default\"\n     }\n     ]\n    }\n    ```\n    3. Run this command to show the status for all AWS Config recorders:\n    ```\n    aws configservice describe-configuration-recorder-status\n    ```\n    4. In the output, find recorders with `name` key matching the recorders that met criteria in step 2. Ensure that at least one of them includes `\"recording\": true` and `\"lastStatus\": \"SUCCESS\"`",
        "fix": "To implement AWS Config configuration:\n\n    Via AWS Management Console:\n    1. Select the region you want to focus on in the top right of the console\n    2. Click `Services`\n    3. Click `Config`\n    4. Define which resources you want to record in the selected region\n    5. Choose to include global resources (IAM resources)\n    6. Specify an S3 bucket in the same account or in another managed AWS account\n    7. Create an SNS Topic from the same AWS account or another managed AWS account\n\n    Via AWS Command Line Interface:\n    1. Ensure there is an appropriate S3 bucket, SNS topic, and IAM role per the [AWS Config Service prerequisites](http://docs.aws.amazon.com/config/latest/developerguide/gs-cli-prereq.html).\n    2. Run this command to set up the configuration recorder\n    ```\n    aws configservice subscribe --s3-bucket my-config-bucket --sns-topic arn:aws:sns:us-east-1:012345678912:my-config-notice --iam-role arn:aws:iam::012345678912:role/myConfigRole\n    ```\n    3. Run this command to start the configuration recorder:\n    ```\n    start-configuration-recorder --configuration-recorder-name\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "CM-8(2)",
          "CM-8(6)",
          "CM-8"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Maintain Detailed Asset Inventory CONTROL:1.4 DESCRIPTION:Maintain an accurate and up-to-date inventory of all technology assets with the potential to store or process information. This inventory shall include all hardware assets, whether connected to the organization's network or not.;TITLE:Document Traffic Configuration Rules CONTROL:11.2 DESCRIPTION:All configuration rules that allow traffic to flow through network devices should be documented in a configuration management system with a specific business reason for each rule, a specific individual's name responsible for that business need, and an expected duration of the need.;TITLE:Maintain an Inventory of Authentication Systems CONTROL:16.1 DESCRIPTION:Maintain an inventory of each of the organization's authentication systems, including those located onsite or at a remote service provider.;",
        "ref": "CIS CSC v6.0 #1.1, #1.3, #1.4, #5.2, #11.1 - #11.3, #14.6:http://docs.aws.amazon.com/cli/latest/reference/configservice/describe-configuration-recorder-status.html"
      },
      "code": "control \"aws-foundations-cis-2.5\" do\n  title \"Ensure AWS Config is enabled in all regions\"\n  desc  \"AWS Config is a web service that performs configuration management of supported AWS resources within your account and delivers log files to you. The recorded information includes the configuration item (AWS resource), relationships between configuration items (AWS resources), any configuration changes between resources. It is recommended to enable AWS Config be enabled in all regions.\"\n  desc  \"rationale\", \"The AWS configuration item history captured by AWS Config enables security analysis, resource change tracking, and compliance auditing.\"\n  desc  \"check\", \"Process to evaluate AWS Config configuration per region\n\n    Via AWS Management Console:\n    1. Sign in to the AWS Management Console and open the AWS Config console at [https://console.aws.amazon.com/config/](https://console.aws.amazon.com/config/).\n    2. On the top right of the console select target Region.\n    3. If presented with Setup AWS Config - follow remediation procedure:\n    4. On the Resource inventory page, Click on edit (the gear icon). The Set Up AWS Config page appears.\n    5. Ensure 1 or both check-boxes under \\\"All Resources\\\" is checked.\n     - Include global resources related to IAM resources - which needs to be enabled in 1 region only\n    6. Ensure the correct S3 bucket has been defined.\n    7. Ensure the correct SNS topic has been defined.\n    8. Repeat steps 2 to 7 for each region.\n\n    Via AWS Command Line Interface:\n    1. Run this command to show all AWS Config recorders and their properties:\n    ```\n    aws configservice describe-configuration-recorders\n    ```\n    2. Evaluate the output to ensure that there's at least one recorder for which `recordingGroup` object includes `\\\"allSupported\\\": true` AND `\\\"includeGlobalResourceTypes\\\": true`\n    Note: There is one more parameter \\\"ResourceTypes\\\" in recordingGroup object. We don't need to check the same as whenever we set \\\"allSupported\\\": true, AWS enforces resource types to be empty (\\\"ResourceTypes\\\":[])\n    Sample Output:\n    ```\n    {\n     \\\"ConfigurationRecorders\\\": [\n     {\n     \\\"recordingGroup\\\": {\n     \\\"allSupported\\\": true,\n     \\\"resourceTypes\\\": [],\n     \\\"includeGlobalResourceTypes\\\": true\n     },\n     \\\"roleARN\\\": \\\"arn:aws:iam:::role/service-role/\\\",\n     \\\"name\\\": \\\"default\\\"\n     }\n     ]\n    }\n    ```\n    3. Run this command to show the status for all AWS Config recorders:\n    ```\n    aws configservice describe-configuration-recorder-status\n    ```\n    4. In the output, find recorders with `name` key matching the recorders that met criteria in step 2. Ensure that at least one of them includes `\\\"recording\\\": true` and `\\\"lastStatus\\\": \\\"SUCCESS\\\"`\"\n  desc  \"fix\", \"To implement AWS Config configuration:\n\n    Via AWS Management Console:\n    1. Select the region you want to focus on in the top right of the console\n    2. Click `Services`\n    3. Click `Config`\n    4. Define which resources you want to record in the selected region\n    5. Choose to include global resources (IAM resources)\n    6. Specify an S3 bucket in the same account or in another managed AWS account\n    7. Create an SNS Topic from the same AWS account or another managed AWS account\n\n    Via AWS Command Line Interface:\n    1. Ensure there is an appropriate S3 bucket, SNS topic, and IAM role per the [AWS Config Service prerequisites](http://docs.aws.amazon.com/config/latest/developerguide/gs-cli-prereq.html).\n    2. Run this command to set up the configuration recorder\n    ```\n    aws configservice subscribe --s3-bucket my-config-bucket --sns-topic arn:aws:sns:us-east-1:012345678912:my-config-notice --iam-role arn:aws:iam::012345678912:role/myConfigRole\n    ```\n    3. Run this command to start the configuration recorder:\n    ```\n    start-configuration-recorder --configuration-recorder-name\n    ```\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['CM-8(2)', 'CM-8(6)', 'CM-8']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Maintain Detailed Asset Inventory CONTROL:1.4 DESCRIPTION:Maintain an accurate and up-to-date inventory of all technology assets with the potential to store or process information. This inventory shall include all hardware assets, whether connected to the organization's network or not.;TITLE:Document Traffic Configuration Rules CONTROL:11.2 DESCRIPTION:All configuration rules that allow traffic to flow through network devices should be documented in a configuration management system with a specific business reason for each rule, a specific individual\\'s name responsible for that business need, and an expected duration of the need.;TITLE:Maintain an Inventory of Authentication Systems CONTROL:16.1 DESCRIPTION:Maintain an inventory of each of the organization's authentication systems, including those located onsite or at a remote service provider.;\"\n  tag ref: \"CIS CSC v6.0 #1.1, #1.3, #1.4, #5.2, #11.1 - #11.3, #14.6:http://docs.aws.amazon.com/cli/latest/reference/configservice/describe-configuration-recorder-status.html\"\n\n\n  config_delivery_channels = input('config_delivery_channels')\n\n  describe aws_config_recorder do\n    it { should exist }\n    it { should be_recording }\n    it { should be_recording_all_resource_types }\n    it { should be_recording_all_global_types }\n  end\n\n  describe aws_config_delivery_channel do\n    it { should exist }\n  end\n\n  if aws_config_delivery_channel.exists?\n    describe aws_config_delivery_channel do\n      its('s3_bucket_name') { should cmp config_delivery_channels[:\"#{input('default_aws_region')}\"][:'s3_bucket_name'] }\n      its('sns_topic_arn') { should cmp config_delivery_channels[:\"#{input('default_aws_region')}\"][:'sns_topic_arn'] }\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-2.5.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-2.5"
    },
    {
      "title": "Ensure rotation for customer created CMKs is enabled",
      "desc": "AWS Key Management Service (KMS) allows customers to rotate the backing key which is key material stored within the KMS which is tied to the key ID of the Customer Created customer master key (CMK). It is the backing key that is used to perform cryptographic operations such as encryption and decryption. Automated key rotation currently retains all prior backing keys so that decryption of encrypted data can take place transparently. It is recommended that CMK key rotation be enabled.",
      "descriptions": {
        "default": "AWS Key Management Service (KMS) allows customers to rotate the backing key which is key material stored within the KMS which is tied to the key ID of the Customer Created customer master key (CMK). It is the backing key that is used to perform cryptographic operations such as encryption and decryption. Automated key rotation currently retains all prior backing keys so that decryption of encrypted data can take place transparently. It is recommended that CMK key rotation be enabled.",
        "rationale": "Rotating encryption keys helps reduce the potential impact of a compromised key as data encrypted with a new key cannot be accessed with a previous key that may have been exposed.",
        "check": "Via the Management Console:\n\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam](https://console.aws.amazon.com/iam).\n    2. In the left navigation pane, choose `Encryption Keys` .\n    3. Select a customer created master key (CMK)\n    4. Under the `Key Policy` section, move down to `Key Rotation` _._\n    5. Ensure the `Rotate this key every year` checkbox is checked.\n\n    Via CLI\n    1. Run the following command to get a list of all keys and their associated `KeyIds`\n    ```\n     aws kms list-keys\n    ```\n    2. For each key, note the KeyId and run the following command\n    ```\n     aws kms get-key-rotation-status --key-id\n    ```\n    3. Ensure `KeyRotationEnabled` is set to `true`",
        "fix": "Via the Management Console:\n\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam](https://console.aws.amazon.com/iam).\n    2. In the left navigation pane, choose `Encryption Keys` .\n    3. Select a customer created master key (CMK)\n    4. Under the `Key Policy` section, move down to `Key Rotation` _._\n    5. Check the `Rotate this key every year` checkbox.\n\n    Via CLI\n    1. Run the following command to enable key rotation:\n    ```\n     aws kms enable-key-rotation --key-id\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Medium",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AU-6"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Maintenance, Monitoring and Analysis of Audit Logs CONTROL:6 DESCRIPTION:Maintenance, Monitoring and Analysis of Audit Logs;",
        "ref": "https://aws.amazon.com/kms/pricing/:http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57_part1_rev3_general.pdf"
      },
      "code": "control \"aws-foundations-cis-2.8\" do\n  title \"Ensure rotation for customer created CMKs is enabled\"\n  desc  \"AWS Key Management Service (KMS) allows customers to rotate the backing key which is key material stored within the KMS which is tied to the key ID of the Customer Created customer master key (CMK). It is the backing key that is used to perform cryptographic operations such as encryption and decryption. Automated key rotation currently retains all prior backing keys so that decryption of encrypted data can take place transparently. It is recommended that CMK key rotation be enabled.\"\n  desc  \"rationale\", \"Rotating encryption keys helps reduce the potential impact of a compromised key as data encrypted with a new key cannot be accessed with a previous key that may have been exposed.\"\n  desc  \"check\", \"Via the Management Console:\n\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam](https://console.aws.amazon.com/iam).\n    2. In the left navigation pane, choose `Encryption Keys` .\n    3. Select a customer created master key (CMK)\n    4. Under the `Key Policy` section, move down to `Key Rotation` _._\n    5. Ensure the `Rotate this key every year` checkbox is checked.\n\n    Via CLI\n    1. Run the following command to get a list of all keys and their associated `KeyIds`\n    ```\n     aws kms list-keys\n    ```\n    2. For each key, note the KeyId and run the following command\n    ```\n     aws kms get-key-rotation-status --key-id\n    ```\n    3. Ensure `KeyRotationEnabled` is set to `true`\"\n  desc  \"fix\", \"Via the Management Console:\n\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam](https://console.aws.amazon.com/iam).\n    2. In the left navigation pane, choose `Encryption Keys` .\n    3. Select a customer created master key (CMK)\n    4. Under the `Key Policy` section, move down to `Key Rotation` _._\n    5. Check the `Rotate this key every year` checkbox.\n\n    Via CLI\n    1. Run the following command to enable key rotation:\n    ```\n     aws kms enable-key-rotation --key-id\n    ```\"\n  impact 0.5\n  tag severity: \"Medium\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AU-6']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Maintenance, Monitoring and Analysis of Audit Logs CONTROL:6 DESCRIPTION:Maintenance, Monitoring and Analysis of Audit Logs;\"\n  tag ref: \"https://aws.amazon.com/kms/pricing/:http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57_part1_rev3_general.pdf\"\n\n\n  aws_kms_keys.key_arns.each do |key|\n    next unless aws_kms_key(key).enabled? && !aws_kms_key(key).managed_by_aws?\n    describe aws_kms_key(key) do\n      it { should have_rotation_enabled }\n    end\n  end\n\n  if aws_kms_keys.key_arns.none? { |key| aws_kms_key(key).enabled? && !aws_kms_key(key).managed_by_aws? }\n    describe 'Control skipped because no enabled kms keys were found' do\n      skip 'This control is skipped since the aws_kms_keys resource returned an empty coustomer managed and enabled kms key list'\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-2.8.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-2.8"
    },
    {
      "title": "Ensure the default security group of every VPC restricts all traffic",
      "desc": "A VPC comes with a default security group whose initial settings deny all inbound traffic, allow all outbound traffic, and allow all traffic between instances assigned to the security group. If you don't specify a security group when you launch an instance, the instance is automatically assigned to this default security group. Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that the default security group restrict all traffic.\n\n    The default VPC in every region should have its default security group updated to comply. Any newly created VPCs will automatically contain a default security group that will need remediation to comply with this recommendation.\n\n    **NOTE:** When implementing this recommendation, VPC flow logging is invaluable in determining the least privilege port access required by systems to work properly because it can log all packet acceptances and rejections occurring under the current security groups. This dramatically reduces the primary barrier to least privilege engineering - discovering the minimum ports required by systems in the environment. Even if the VPC flow logging recommendation in this benchmark is not adopted as a permanent security measure, it should be used during any period of discovery and engineering for least privileged security groups.",
      "descriptions": {
        "default": "A VPC comes with a default security group whose initial settings deny all inbound traffic, allow all outbound traffic, and allow all traffic between instances assigned to the security group. If you don't specify a security group when you launch an instance, the instance is automatically assigned to this default security group. Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that the default security group restrict all traffic.\n\n    The default VPC in every region should have its default security group updated to comply. Any newly created VPCs will automatically contain a default security group that will need remediation to comply with this recommendation.\n\n    **NOTE:** When implementing this recommendation, VPC flow logging is invaluable in determining the least privilege port access required by systems to work properly because it can log all packet acceptances and rejections occurring under the current security groups. This dramatically reduces the primary barrier to least privilege engineering - discovering the minimum ports required by systems in the environment. Even if the VPC flow logging recommendation in this benchmark is not adopted as a permanent security measure, it should be used during any period of discovery and engineering for least privileged security groups.",
        "rationale": "Configuring all VPC default security groups to restrict all traffic will encourage least privilege security group development and mindful placement of AWS resources into security groups which will in-turn reduce the exposure of those resources.",
        "check": "Perform the following to determine if the account is configured as prescribed:\n\n    Security Group State\n\n    1. Login to the AWS Management Console at [https://console.aws.amazon.com/vpc/home](https://console.aws.amazon.com/vpc/home)\n    2. Repeat the next steps for all VPCs - including the default VPC in each AWS region:\n    3. In the left pane, click `Security Groups`\n    4. For each default security group, perform the following:\n    1. Select the `default` security group\n    2. Click the `Inbound Rules` tab\n    3. Ensure no rule exist\n    4. Click the `Outbound Rules` tab\n    5. Ensure no rules exist\n\n    Security Group Members\n\n    1. Login to the AWS Management Console at [https://console.aws.amazon.com/vpc/home](https://console.aws.amazon.com/vpc/home)\n    2. Repeat the next steps for all default groups in all VPCs - including the default VPC in each AWS region:\n    3. In the left pane, click `Security Groups`\n    4. Copy the id of the default security group.\n    5. Change to the EC2 Management Console at https://console.aws.amazon.com/ec2/v2/home\n    6. In the filter column type 'Security Group ID : < security group id from #4 >'",
        "fix": "Security Group Members\n\n    Perform the following to implement the prescribed state:\n\n    1. Identify AWS resources that exist within the default security group\n    2. Create a set of least privilege security groups for those resources\n    3. Place the resources in those security groups\n    4. Remove the resources noted in #1 from the default security group\n\n    Security Group State\n\n    1. Login to the AWS Management Console at [https://console.aws.amazon.com/vpc/home](https://console.aws.amazon.com/vpc/home)\n    2. Repeat the next steps for all VPCs - including the default VPC in each AWS region:\n    3. In the left pane, click `Security Groups`\n    4. For each default security group, perform the following:\n    1. Select the `default` security group\n    2. Click the `Inbound Rules` tab\n    3. Remove any inbound rules\n    4. Click the `Outbound Rules` tab\n    5. Remove any inbound rules\n\n    Recommended:\n\n    IAM groups allow you to edit the \"name\" field. After remediating default groups rules for all VPCs in all regions, edit this field to add text similar to \"DO NOT USE. DO NOT ADD RULES\""
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Medium",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-3 (3)"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Protect Information through Access Control Lists CONTROL:14.6 DESCRIPTION:Protect all information stored on systems with file system, network share, claims, application, or database specific access control lists. These controls will enforce the principle that only authorized individuals should have access to the information based on their need to access the information as a part of their responsibilities.;",
        "ref": "http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html:CIS CSC v6.0 #9.2"
      },
      "code": "control \"aws-foundations-cis-4.3\" do\n  title \"Ensure the default security group of every VPC restricts all traffic\"\n  desc  \"A VPC comes with a default security group whose initial settings deny all inbound traffic, allow all outbound traffic, and allow all traffic between instances assigned to the security group. If you don't specify a security group when you launch an instance, the instance is automatically assigned to this default security group. Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that the default security group restrict all traffic.\n\n    The default VPC in every region should have its default security group updated to comply. Any newly created VPCs will automatically contain a default security group that will need remediation to comply with this recommendation.\n\n    **NOTE:** When implementing this recommendation, VPC flow logging is invaluable in determining the least privilege port access required by systems to work properly because it can log all packet acceptances and rejections occurring under the current security groups. This dramatically reduces the primary barrier to least privilege engineering - discovering the minimum ports required by systems in the environment. Even if the VPC flow logging recommendation in this benchmark is not adopted as a permanent security measure, it should be used during any period of discovery and engineering for least privileged security groups.\"\n  desc  \"rationale\", \"Configuring all VPC default security groups to restrict all traffic will encourage least privilege security group development and mindful placement of AWS resources into security groups which will in-turn reduce the exposure of those resources.\"\n  desc  \"check\", \"Perform the following to determine if the account is configured as prescribed:\n\n    Security Group State\n\n    1. Login to the AWS Management Console at [https://console.aws.amazon.com/vpc/home](https://console.aws.amazon.com/vpc/home)\n    2. Repeat the next steps for all VPCs - including the default VPC in each AWS region:\n    3. In the left pane, click `Security Groups`\n    4. For each default security group, perform the following:\n    1. Select the `default` security group\n    2. Click the `Inbound Rules` tab\n    3. Ensure no rule exist\n    4. Click the `Outbound Rules` tab\n    5. Ensure no rules exist\n\n    Security Group Members\n\n    1. Login to the AWS Management Console at [https://console.aws.amazon.com/vpc/home](https://console.aws.amazon.com/vpc/home)\n    2. Repeat the next steps for all default groups in all VPCs - including the default VPC in each AWS region:\n    3. In the left pane, click `Security Groups`\n    4. Copy the id of the default security group.\n    5. Change to the EC2 Management Console at https://console.aws.amazon.com/ec2/v2/home\n    6. In the filter column type 'Security Group ID : < security group id from #4 >'\"\n  desc  \"fix\", \"Security Group Members\n\n    Perform the following to implement the prescribed state:\n\n    1. Identify AWS resources that exist within the default security group\n    2. Create a set of least privilege security groups for those resources\n    3. Place the resources in those security groups\n    4. Remove the resources noted in #1 from the default security group\n\n    Security Group State\n\n    1. Login to the AWS Management Console at [https://console.aws.amazon.com/vpc/home](https://console.aws.amazon.com/vpc/home)\n    2. Repeat the next steps for all VPCs - including the default VPC in each AWS region:\n    3. In the left pane, click `Security Groups`\n    4. For each default security group, perform the following:\n    1. Select the `default` security group\n    2. Click the `Inbound Rules` tab\n    3. Remove any inbound rules\n    4. Click the `Outbound Rules` tab\n    5. Remove any inbound rules\n\n    Recommended:\n\n    IAM groups allow you to edit the \\\"name\\\" field. After remediating default groups rules for all VPCs in all regions, edit this field to add text similar to \\\"DO NOT USE. DO NOT ADD RULES\\\"\"\n  impact 0.5\n  tag severity: \"Medium\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-3 (3)']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Protect Information through Access Control Lists CONTROL:14.6 DESCRIPTION:Protect all information stored on systems with file system, network share, claims, application, or database specific access control lists. These controls will enforce the principle that only authorized individuals should have access to the information based on their need to access the information as a part of their responsibilities.;\"\n  tag ref: \"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html:CIS CSC v6.0 #9.2\"\n\n  \n  if aws_vpcs.vpc_ids.empty?\n    describe 'Control skipped because no vpcs were found' do\n      skip 'This control is skipped since the aws_vpcs resource returned an empty vpc list'\n    end\n  else\n    aws_vpcs.vpc_ids.each do |vpc|\n      describe aws_security_group(group_name: 'default', vpc_id: vpc) do\n        its('inbound_rules') { should be_empty }\n        its('outbound_rules') { should be_empty }\n      end\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-4.3.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-4.3"
    },
    {
      "title": "Ensure credentials unused for 90 days or greater are disabled",
      "desc": "AWS IAM users can access AWS resources using different types of credentials, such as passwords or access keys. It is recommended that all credentials that have been unused in 90 or greater days be removed or deactivated.",
      "descriptions": {
        "default": "AWS IAM users can access AWS resources using different types of credentials, such as passwords or access keys. It is recommended that all credentials that have been unused in 90 or greater days be removed or deactivated.",
        "rationale": "Disabling or removing unnecessary credentials will reduce the window of opportunity for credentials associated with a compromised or abandoned account to be used.",
        "check": "Perform the following to determine if unused credentials exist:\n\n    **Download Credential Report:**\n\n    Using Management Console:\n    1. Login to the AWS Management Console\n    2. Click `Services`\n    3. Click `IAM`\n    4. Click on `Credential Report`\n    5. This will download an `.xls` file which contains credential usage for all users within an AWS Account - open this file\n\n    Via CLI\n    1. Run the following commands:\n    ```\n     aws iam generate-credential-report\n     aws iam get-credential-report --query 'Content' --output text | base64 -d | cut -d, -f1,4,5,6,9,10,11,14,15,16\n    ```\n    **Ensure unused credentials does not exist:**\n    2. For each user having `password_enabled` set to `TRUE` , ensure `password_last_used_date` is less than `90` days ago.\n    - When `password_enabled` is set to `TRUE` and `password_last_used` is set to `No_Information` , ensure `password_last_changed` is less than 90 days ago.\n    3. For each user having an `access_key_1_active` or `access_key_2_active` to `TRUE` , ensure the corresponding `access_key_n_last_used_date` is less than `90` days ago.\n    - When a user having an `access_key_x_active` (where x is 1 or 2) to `TRUE` and corresponding access_key_x_last_used_date is set to `N/A', ensure `access_key_x_last_rotated` is less than 90 days ago.",
        "fix": "Perform the following to remove or deactivate credentials:\n\n    1. Login to the AWS Management Console:\n    2. Click `Services`\n    3. Click `IAM`\n    4. Click on `Users`\n    5. Click on `Security Credentials`\n    6. As an Administrator\n     - Click on `Make Inactive` for credentials that have not been used in `90` Days\n    7. As an IAM User\n     - Click on `Make` `Inactive` or `Delete` for credentials which have not been used in `90` Days"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-2"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Disable Dormant Accounts CONTROL:16.9 DESCRIPTION:Automatically disable dormant accounts after a set period of inactivity.;",
        "ref": "CIS CSC v6.0 #16.6"
      },
      "code": "control \"aws-foundations-cis-1.3\" do\n  title \"Ensure credentials unused for 90 days or greater are disabled\"\n  desc  \"AWS IAM users can access AWS resources using different types of credentials, such as passwords or access keys. It is recommended that all credentials that have been unused in 90 or greater days be removed or deactivated.\"\n  desc  \"rationale\", \"Disabling or removing unnecessary credentials will reduce the window of opportunity for credentials associated with a compromised or abandoned account to be used.\"\n  desc  \"check\", \"Perform the following to determine if unused credentials exist:\n\n    **Download Credential Report:**\n\n    Using Management Console:\n    1. Login to the AWS Management Console\n    2. Click `Services`\n    3. Click `IAM`\n    4. Click on `Credential Report`\n    5. This will download an `.xls` file which contains credential usage for all users within an AWS Account - open this file\n\n    Via CLI\n    1. Run the following commands:\n    ```\n     aws iam generate-credential-report\n     aws iam get-credential-report --query 'Content' --output text | base64 -d | cut -d, -f1,4,5,6,9,10,11,14,15,16\n    ```\n    **Ensure unused credentials does not exist:**\n    2. For each user having `password_enabled` set to `TRUE` , ensure `password_last_used_date` is less than `90` days ago.\n    - When `password_enabled` is set to `TRUE` and `password_last_used` is set to `No_Information` , ensure `password_last_changed` is less than 90 days ago.\n    3. For each user having an `access_key_1_active` or `access_key_2_active` to `TRUE` , ensure the corresponding `access_key_n_last_used_date` is less than `90` days ago.\n    - When a user having an `access_key_x_active` (where x is 1 or 2) to `TRUE` and corresponding access_key_x_last_used_date is set to `N/A', ensure `access_key_x_last_rotated` is less than 90 days ago.\"\n  desc  \"fix\", \"Perform the following to remove or deactivate credentials:\n\n    1. Login to the AWS Management Console:\n    2. Click `Services`\n    3. Click `IAM`\n    4. Click on `Users`\n    5. Click on `Security Credentials`\n    6. As an Administrator\n     - Click on `Make Inactive` for credentials that have not been used in `90` Days\n    7. As an IAM User\n     - Click on `Make` `Inactive` or `Delete` for credentials which have not been used in `90` Days\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-2']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Disable Dormant Accounts CONTROL:16.9 DESCRIPTION:Automatically disable dormant accounts after a set period of inactivity.;\"\n  tag ref: \"CIS CSC v6.0 #16.6\"\n\n  \n  # For each user having `password_enabled` set to `TRUE` , ensure `password_last_used_date` is less than `90` days ago.\n  aws_iam_users.where(has_console_password: true).where(password_ever_used?: true).entries.each do |user|\n    describe user.username do\n      subject { user }\n      its('password_last_used_days_ago') { should cmp < 90 }\n    end\n  end\n\n  # When `password_enabled` is set to `TRUE` and `password_last_used` is set to `No_Information` , ensure `password_last_changed` is less than 90 days ago.\n  # 'password_last_changed' property not exposed in AWS Ruby SDK: https://github.com/aws/aws-sdk-ruby/issues/2375\n\n  no_information_users = aws_iam_users.where(has_console_password: true).where(password_last_used_days_ago: -1).entries\n  unless no_information_users.empty?\n    no_information_users.each do |user|\n      describe \"Manually validate that the password has been changed less than 90 days ago for user: #{user.username}\" do\n        skip \"Manually validate that the password has been changed less than 90 days ago for user: #{user.username}\"\n      end\n    end\n  end\n  \n\n  # For each user having an `access_key_1_active` or `access_key_2_active` to `TRUE` , ensure the corresponding `access_key_n_last_used_date` is less than `90` days ago.\n  # When a user having an `access_key_x_active` (where x is 1 or 2) to `TRUE` and corresponding access_key_x_last_used_date is set to `N/A', ensure `access_key_x_last_rotated` is less than 90 days ago\n      \n  aws_iam_access_keys.where(active: true).entries.each do |key|\n    describe key.username do\n      if key.last_used_days_ago.nil?\n        describe key.username do\n          context key do\n            its('created_days_ago') { should cmp < 90 }\n          end\n        end\n      else\n        context key do\n          its('last_used_days_ago') { should cmp < 90 }\n        end\n      end\n    end\n  end\n\n  if aws_iam_access_keys.where(active: true).entries.empty?\n    describe 'Control skipped because no active iam access keys were found' do\n      skip 'This control is skipped since the aws_iam_access_keys resource returned an empty active access key list'\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.3.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.3"
    },
    {
      "title": "Ensure IAM instance roles are used for AWS resource access from instances",
      "desc": "AWS access from within AWS instances can be done by either encoding AWS keys into AWS API calls or by assigning the instance to a role which has an appropriate permissions policy for the required access. \"AWS Access\" means accessing the APIs of AWS in order to access AWS resources or manage AWS account resources.",
      "descriptions": {
        "default": "AWS access from within AWS instances can be done by either encoding AWS keys into AWS API calls or by assigning the instance to a role which has an appropriate permissions policy for the required access. \"AWS Access\" means accessing the APIs of AWS in order to access AWS resources or manage AWS account resources.",
        "rationale": "AWS IAM roles reduce the risks associated with sharing and rotating credentials that can be used outside of AWS itself. If credentials are compromised, they can be used from outside of the the AWS account they give access to. In contrast, in order to leverage role permissions an attacker would need to gain and maintain access to a specific instance to use the privileges associated with it.\n\n    Additionally, if credentials are encoded into compiled applications or other hard to change mechanisms, then they are even more unlikely to be properly rotated due to service disruption risks. As time goes on, credentials that cannot be rotated are more likely to be known by an increasing number of individuals who no longer work for the organization owning the credentials.",
        "check": "Whether an Instance Is Associated With a Role\n\n    For instances that are known to perform AWS actions, ensure that they belong to an instance role that has the necessary permissions:\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Open the EC2 Dashboard and choose \"Instances\"\n    3. Click the EC2 instance that performs AWS actions, in the lower pane details find \"IAM Role\"\n    4. If the Role is blank, the instance is not assigned to one.\n    5. If the Role is filled in, it does not mean the instance might not \\*also\\* have credentials encoded on it for some activities.\n\n    Whether an Instance Contains Embedded Credentials\n\n    On the instance that is known to perform AWS actions, audit all scripts and environment variables to ensure that none of them contain AWS credentials.\n\n    Whether an Instance Application Contains Embedded Credentials\n\n    Applications that run on an instance may also have credentials embedded. This is a bad practice, but even worse if the source code is stored in a public code repository such as github. When an application contains credentials can be determined by eliminating all other sources of credentials and if the application can still access AWS resources - it likely contains embedded credentials. Another method is to examine all source code and configuration files of the application.",
        "fix": "IAM roles can only be associated at the launch of an instance. To remediate an instance to add it to a role you must create a new instance.\n\n    If the instance has no external dependencies on its current private ip or public addresses are elastic IPs:\n\n    1. In AWS IAM create a new role. Assign a permissions policy if needed permissions are already known.\n    2. In the AWS console launch a new instance with identical settings to the existing instance, and ensure that the newly created role is selected.\n    3. Shutdown both the existing instance and the new instance.\n    4. Detach disks from both instances.\n    5. Attach the existing instance disks to the new instance.\n    6. Boot the new instance and you should have the same machine, but with the associated role.\n\n    Note: if your environment has dependencies on a dynamically assigned PRIVATE IP address you can create an AMI from the existing instance, destroy the old one and then when launching from the AMI, manually assign the previous private IP address.\n\n    Note: if your environment has dependencies on a dynamically assigned PUBLIC IP address there is not a way ensure the address is retained and assign an instance role. Dependencies on dynamically assigned public IP addresses are a bad practice and, if possible, you may wish to rebuild the instance with a new elastic IP address and make the investment to remediate affected systems while assigning the system to a role."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Medium",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "IR-1"
        ],
        "notes": null,
        "comment": null,
        "ref": "http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html:http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html:CIS CSC v6.0 #16.14 (someone please check the applicability of this for me)"
      },
      "code": "control \"aws-foundations-cis-1.19\" do\n  title \"Ensure IAM instance roles are used for AWS resource access from instances\"\n  desc  \"AWS access from within AWS instances can be done by either encoding AWS keys into AWS API calls or by assigning the instance to a role which has an appropriate permissions policy for the required access. \\\"AWS Access\\\" means accessing the APIs of AWS in order to access AWS resources or manage AWS account resources.\"\n  desc  \"rationale\", \"AWS IAM roles reduce the risks associated with sharing and rotating credentials that can be used outside of AWS itself. If credentials are compromised, they can be used from outside of the the AWS account they give access to. In contrast, in order to leverage role permissions an attacker would need to gain and maintain access to a specific instance to use the privileges associated with it.\n\n    Additionally, if credentials are encoded into compiled applications or other hard to change mechanisms, then they are even more unlikely to be properly rotated due to service disruption risks. As time goes on, credentials that cannot be rotated are more likely to be known by an increasing number of individuals who no longer work for the organization owning the credentials.\"\n  desc  \"check\", \"Whether an Instance Is Associated With a Role\n\n    For instances that are known to perform AWS actions, ensure that they belong to an instance role that has the necessary permissions:\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Open the EC2 Dashboard and choose \\\"Instances\\\"\n    3. Click the EC2 instance that performs AWS actions, in the lower pane details find \\\"IAM Role\\\"\n    4. If the Role is blank, the instance is not assigned to one.\n    5. If the Role is filled in, it does not mean the instance might not \\\\*also\\\\* have credentials encoded on it for some activities.\n\n    Whether an Instance Contains Embedded Credentials\n\n    On the instance that is known to perform AWS actions, audit all scripts and environment variables to ensure that none of them contain AWS credentials.\n\n    Whether an Instance Application Contains Embedded Credentials\n\n    Applications that run on an instance may also have credentials embedded. This is a bad practice, but even worse if the source code is stored in a public code repository such as github. When an application contains credentials can be determined by eliminating all other sources of credentials and if the application can still access AWS resources - it likely contains embedded credentials. Another method is to examine all source code and configuration files of the application.\"\n  desc  \"fix\", \"IAM roles can only be associated at the launch of an instance. To remediate an instance to add it to a role you must create a new instance.\n\n    If the instance has no external dependencies on its current private ip or public addresses are elastic IPs:\n\n    1. In AWS IAM create a new role. Assign a permissions policy if needed permissions are already known.\n    2. In the AWS console launch a new instance with identical settings to the existing instance, and ensure that the newly created role is selected.\n    3. Shutdown both the existing instance and the new instance.\n    4. Detach disks from both instances.\n    5. Attach the existing instance disks to the new instance.\n    6. Boot the new instance and you should have the same machine, but with the associated role.\n\n    Note: if your environment has dependencies on a dynamically assigned PRIVATE IP address you can create an AMI from the existing instance, destroy the old one and then when launching from the AMI, manually assign the previous private IP address.\n\n    Note: if your environment has dependencies on a dynamically assigned PUBLIC IP address there is not a way ensure the address is retained and assign an instance role. Dependencies on dynamically assigned public IP addresses are a bad practice and, if possible, you may wish to rebuild the instance with a new elastic IP address and make the investment to remediate affected systems while assigning the system to a role.\"\n  impact 0.5\n  tag severity: \"Medium\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['IR-1']\n  tag notes: nil\n  tag comment: nil\n  tag ref: \"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html:http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html:CIS CSC v6.0 #16.14 (someone please check the applicability of this for me)\"\n\n  \n  describe 'Control has to be tested manually' do\n    skip 'This control must be manually reviewed'\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.19.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.19"
    },
    {
      "title": "Ensure CloudTrail is enabled in all regions",
      "desc": "AWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).",
      "descriptions": {
        "default": "AWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).",
        "rationale": "The AWS API call history produced by CloudTrail enables security analysis, resource change tracking, and compliance auditing. Additionally,\n    - ensuring that a multi-regions trail exists will ensure that unexpected activity occurring in otherwise unused regions is detected\n    - ensuring that a multi-regions trail exists will ensure that `Global Service Logging` is enabled for a trail by default to capture recording of events generated on\n    AWS global services\n    - for a multi-regions trail, ensuring that management events configured for all type of Read/Writes ensures recording of management operations that are performed on all resources in an AWS account",
        "check": "Perform the following to determine if CloudTrail is enabled for all regions:\n\n    Via the management Console\n    1. Sign in to the AWS Management Console and open the CloudTrail console at [https://console.aws.amazon.com/cloudtrail](https://console.aws.amazon.com/cloudtrail)\n    2. Click on `Trails` on the left navigation pane\n     - You will be presented with a list of trails across all regions\n    3. Ensure at least one Trail has `All` specified in the `Region` column\n    4. Click on a trail via the link in the _Name_ column\n    5. Ensure `Logging` is set to `ON`\n    6. Ensure `Apply trail to all regions` is set to `Yes`\n    7. In section `Management Events` ensure `Read/Write Events` set to `ALL`\n\n    Via CLI\n    ```\n     aws cloudtrail describe-trails\n    ```\n    Ensure `IsMultiRegionTrail` is set to `true`\n    ```\n    aws cloudtrail get-trail-status --name\n    ```\n    Ensure `IsLogging` is set to `true`\n    ```\n    aws cloudtrail get-event-selectors --trail-name\n    ```\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`",
        "fix": "Perform the following to enable global (Multi-region) CloudTrail logging:\n\n    Via the management Console\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/cloudtrail](https://console.aws.amazon.com/cloudtrail)\n    2. Click on _Trails_ on the left navigation pane\n    3. Click `Get Started Now` , if presented\n     - Click `Add new trail`\n     - Enter a trail name in the `Trail name` box\n     - Set the `Apply trail to all regions` option to `Yes`\n     - Specify an S3 bucket name in the `S3 bucket` box\n     - Click `Create`\n    4. If 1 or more trails already exist, select the target trail to enable for global logging\n    5. Click the edit icon (pencil) next to `Apply trail to all regions` , Click `Yes` and Click `Save`.\n    6. Click the edit icon (pencil) next to `Management Events` click `All` for setting `Read/Write Events` and Click `Save`.\n\n    Via CLI\n    ```\n    aws cloudtrail create-trail --name\n     --bucket-name  --is-multi-region-trail\n    aws cloudtrail update-trail --name\n     --is-multi-region-trail\n    ```\n\n    Note: Creating CloudTrail via CLI without providing any overriding options configures `Management Events` to set `All` type of `Read/Writes` by default."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AU-12"
        ],
        "notes": null,
        "comment": "S3 lifecycle features can be used to manage the accumulation and management of logs over time. See the following AWS resource for more information on these features:\n  1. http://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html",
        "cis_controls": "TITLE:Activate audit logging CONTROL:6.2 DESCRIPTION:Ensure that local logging has been enabled on all systems and networking devices.;",
        "ref": "CIS CSC v6.0 #14.6:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html#cloudtrail-concepts-management-events:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-management-and-data-events-with-cloudtrail.html?icmpid=docs_cloudtrail_console#logging-management-events:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-supported-services.html#cloud-trail-supported-services-data-events"
      },
      "code": "control \"aws-foundations-cis-2.1\" do\n  title \"Ensure CloudTrail is enabled in all regions\"\n  desc  \"AWS CloudTrail is a web service that records AWS API calls for your account and delivers log files to you. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail provides a history of AWS API calls for an account, including API calls made via the Management Console, SDKs, command line tools, and higher-level AWS services (such as CloudFormation).\"\n  desc  \"rationale\", \"The AWS API call history produced by CloudTrail enables security analysis, resource change tracking, and compliance auditing. Additionally,\n    - ensuring that a multi-regions trail exists will ensure that unexpected activity occurring in otherwise unused regions is detected\n    - ensuring that a multi-regions trail exists will ensure that `Global Service Logging` is enabled for a trail by default to capture recording of events generated on\n    AWS global services\n    - for a multi-regions trail, ensuring that management events configured for all type of Read/Writes ensures recording of management operations that are performed on all resources in an AWS account\"\n  desc  \"check\", \"Perform the following to determine if CloudTrail is enabled for all regions:\n\n    Via the management Console\n    1. Sign in to the AWS Management Console and open the CloudTrail console at [https://console.aws.amazon.com/cloudtrail](https://console.aws.amazon.com/cloudtrail)\n    2. Click on `Trails` on the left navigation pane\n     - You will be presented with a list of trails across all regions\n    3. Ensure at least one Trail has `All` specified in the `Region` column\n    4. Click on a trail via the link in the _Name_ column\n    5. Ensure `Logging` is set to `ON`\n    6. Ensure `Apply trail to all regions` is set to `Yes`\n    7. In section `Management Events` ensure `Read/Write Events` set to `ALL`\n\n    Via CLI\n    ```\n     aws cloudtrail describe-trails\n    ```\n    Ensure `IsMultiRegionTrail` is set to `true`\n    ```\n    aws cloudtrail get-trail-status --name\n    ```\n    Ensure `IsLogging` is set to `true`\n    ```\n    aws cloudtrail get-event-selectors --trail-name\n    ```\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\"\n  desc  \"fix\", \"Perform the following to enable global (Multi-region) CloudTrail logging:\n\n    Via the management Console\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/cloudtrail](https://console.aws.amazon.com/cloudtrail)\n    2. Click on _Trails_ on the left navigation pane\n    3. Click `Get Started Now` , if presented\n     - Click `Add new trail`\n     - Enter a trail name in the `Trail name` box\n     - Set the `Apply trail to all regions` option to `Yes`\n     - Specify an S3 bucket name in the `S3 bucket` box\n     - Click `Create`\n    4. If 1 or more trails already exist, select the target trail to enable for global logging\n    5. Click the edit icon (pencil) next to `Apply trail to all regions` , Click `Yes` and Click `Save`.\n    6. Click the edit icon (pencil) next to `Management Events` click `All` for setting `Read/Write Events` and Click `Save`.\n\n    Via CLI\n    ```\n    aws cloudtrail create-trail --name\n     --bucket-name  --is-multi-region-trail\n    aws cloudtrail update-trail --name\n     --is-multi-region-trail\n    ```\n\n    Note: Creating CloudTrail via CLI without providing any overriding options configures `Management Events` to set `All` type of `Read/Writes` by default.\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AU-12']\n  tag notes: nil\n  tag comment: \"S3 lifecycle features can be used to manage the accumulation and management of logs over time. See the following AWS resource for more information on these features:\n  1. http://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html\"\n  tag cis_controls: \"TITLE:Activate audit logging CONTROL:6.2 DESCRIPTION:Ensure that local logging has been enabled on all systems and networking devices.;\"\n  tag ref: \"CIS CSC v6.0 #14.6:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html#cloudtrail-concepts-management-events:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-management-and-data-events-with-cloudtrail.html?icmpid=docs_cloudtrail_console#logging-management-events:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-supported-services.html#cloud-trail-supported-services-data-events\"\n\n  \n  describe aws_cloudtrail_trails do\n    it { should exist }\n  end\n\n  aws_cloudtrail_trails.names.each do |trail|\n    describe aws_cloudtrail_trail(trail) do\n      it { should be_multi_region_trail }\n      it { should be_logging }\n      it { should have_event_selector_mgmt_events_rw_type_all }\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-2.1.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-2.1"
    },
    {
      "title": "Ensure IAM policies are attached only to groups or roles",
      "desc": "By default, IAM users, groups, and roles have no access to AWS resources. IAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended that IAM policies be applied directly to groups and roles but not users.",
      "descriptions": {
        "default": "By default, IAM users, groups, and roles have no access to AWS resources. IAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended that IAM policies be applied directly to groups and roles but not users.",
        "rationale": "Assigning privileges at the group or role level reduces the complexity of access management as the number of users grow. Reducing access management complexity may in-turn reduce opportunity for a principal to inadvertently receive or retain excessive privileges.",
        "check": "Perform the following to determine if policies are attached directly to users:\n\n    1. Run the following to get a list of IAM users:\n    ```\n     aws iam list-users --query 'Users[*].UserName' --output text\n    ```\n    2. For each user returned, run the following command to determine if any policies are attached to them:\n    ```\n     aws iam list-attached-user-policies --user-name\n     aws iam list-user-policies --user-name\n    ```\n    3. If any policies are returned, the user has a direct policy attachment.",
        "fix": "Perform the following to create an IAM group and assign a policy to it:\n\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).\n    2. In the navigation pane, click `Groups` and then click `Create New Group`.\n    3. In the `Group Name` box, type the name of the group and then click `Next Step` .\n    4. In the list of policies, select the check box for each policy that you want to apply to all members of the group. Then click `Next Step` .\n    5. Click `Create Group`\n\n    Perform the following to add a user to a given group:\n\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).\n    2. In the navigation pane, click `Groups`\n    3. Select the group to add a user to\n    4. Click `Add Users To Group`\n    5. Select the users to be added to the group\n    6. Click `Add Users`\n\n    Perform the following to remove a direct association between a user and policy:\n\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).\n    2. In the left navigation pane, click on Users\n    3. For each user:\n     1. Select the user\n     2. Click on the `Permissions` tab\n     3. Expand `Managed Policies`\n     4. Click `Detach Policy` for each policy\n     5. Expand `Inline Policies`\n     6. Click `Remove Policy` for each policy"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-2"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;",
        "ref": "http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html:http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html"
      },
      "code": "control \"aws-foundations-cis-1.16\" do\n  title \"Ensure IAM policies are attached only to groups or roles\"\n  desc  \"By default, IAM users, groups, and roles have no access to AWS resources. IAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended that IAM policies be applied directly to groups and roles but not users.\"\n  desc  \"rationale\", \"Assigning privileges at the group or role level reduces the complexity of access management as the number of users grow. Reducing access management complexity may in-turn reduce opportunity for a principal to inadvertently receive or retain excessive privileges.\"\n  desc  \"check\", \"Perform the following to determine if policies are attached directly to users:\n\n    1. Run the following to get a list of IAM users:\n    ```\n     aws iam list-users --query 'Users[*].UserName' --output text\n    ```\n    2. For each user returned, run the following command to determine if any policies are attached to them:\n    ```\n     aws iam list-attached-user-policies --user-name\n     aws iam list-user-policies --user-name\n    ```\n    3. If any policies are returned, the user has a direct policy attachment.\"\n  desc  \"fix\", \"Perform the following to create an IAM group and assign a policy to it:\n\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).\n    2. In the navigation pane, click `Groups` and then click `Create New Group`.\n    3. In the `Group Name` box, type the name of the group and then click `Next Step` .\n    4. In the list of policies, select the check box for each policy that you want to apply to all members of the group. Then click `Next Step` .\n    5. Click `Create Group`\n\n    Perform the following to add a user to a given group:\n\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).\n    2. In the navigation pane, click `Groups`\n    3. Select the group to add a user to\n    4. Click `Add Users To Group`\n    5. Select the users to be added to the group\n    6. Click `Add Users`\n\n    Perform the following to remove a direct association between a user and policy:\n\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).\n    2. In the left navigation pane, click on Users\n    3. For each user:\n     1. Select the user\n     2. Click on the `Permissions` tab\n     3. Expand `Managed Policies`\n     4. Click `Detach Policy` for each policy\n     5. Expand `Inline Policies`\n     6. Click `Remove Policy` for each policy\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-2']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;\"\n  tag ref: \"http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html:http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html\"\n\n\n  if aws_iam_users.entries.empty?\n    describe 'Control skipped because no iam users were found' do\n      skip 'This control is skipped since the aws_iam_users resource returned an empty user list'\n    end\n  else\n    aws_iam_users.entries.each do |user|\n      describe aws_iam_user(user_name: user.username) do\n        its ('inline_policy_names') { should be_empty }\n        its ('attached_policy_names') { should be_empty }\n      end\n    end\n  end\nend\n",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.16.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.16"
    },
    {
      "title": "Ensure IAM policies that allow full \"*:*\" administrative privileges are not created",
      "desc": "IAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended and considered a standard security advice to grant _least privilege_ that is, granting only the permissions required to perform a task. Determine what users need to do and then craft policies for them that let the users perform _only_ those tasks, instead of allowing full administrative privileges.",
      "descriptions": {
        "default": "IAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended and considered a standard security advice to grant _least privilege_ that is, granting only the permissions required to perform a task. Determine what users need to do and then craft policies for them that let the users perform _only_ those tasks, instead of allowing full administrative privileges.",
        "rationale": "It's more secure to start with a minimum set of permissions and grant additional permissions as necessary, rather than starting with permissions that are too lenient and then trying to tighten them later.\n\n    Providing full administrative privileges instead of restricting to the minimum set of permissions that the user is required to do exposes the resources to potentially unwanted actions.\n\n    IAM policies that have a statement with \"Effect\": \"Allow\" with \"Action\": \"\\*\" over \"Resource\": \"\\*\" should be removed.",
        "check": "Perform the following to determine what policies are created:\n\n    1. Run the following to get a list of IAM policies:\n    ```\n     aws iam list-policies --output text\n    ```\n    2. For each policy returned, run the following command to determine if any policies is allowing full administrative privileges on the account:\n    ```\n     aws iam get-policy-version --policy-arn\n    \t --version-id\n    ```\n    3. In output ensure policy should not have any Statement block with `\"Effect\": \"Allow\"` and `Action` set to `\"*\"` and `Resource` set to `\"*\"`",
        "fix": "Using the GUI, perform the following to detach the policy that has full administrative privileges:\n\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).\n    2. In the navigation pane, click Policies and then search for the policy name found in the audit step.\n    3. Select the policy that needs to be deleted.\n    4. In the policy action menu, select first `Detach`\n    5. Select all Users, Groups, Roles that have this policy attached\n    6. Click `Detach Policy`\n    7. In the policy action menu, select `Detach`\n\n    Using the CLI, perform the following to detach the policy that has full administrative privileges as found in the audit step:\n\n    1\\. Lists all IAM users, groups, and roles that the specified managed policy is attached to.\n    ```\n     aws iam list-entities-for-policy --policy-arn\n    ```\n    2\\. Detach the policy from all IAM Users:\n    ```\n     aws iam detach-user-policy --user-name  --policy-arn\n    ```\n    3\\. Detach the policy from all IAM Groups:\n    ```\n     aws iam detach-group-policy --group-name  --policy-arn\n    ```\n    4\\. Detach the policy from all IAM Roles:\n    ```\n     aws iam detach-role-policy --role-name  --policy-arn\n    ```"
      },
      "impact": 0,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-6"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Controlled Use of Administrative Privileges CONTROL:4 DESCRIPTION:Controlled Use of Administrative Privileges;",
        "ref": "http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html:http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html:http://docs.aws.amazon.com/cli/latest/reference/iam/index.html#cli-aws-iam"
      },
      "code": "control \"aws-foundations-cis-1.22\" do\n  title \"Ensure IAM policies that allow full \\\"*:*\\\" administrative privileges are not created\"\n  desc  \"IAM policies are the means by which privileges are granted to users, groups, or roles. It is recommended and considered a standard security advice to grant _least privilege_ that is, granting only the permissions required to perform a task. Determine what users need to do and then craft policies for them that let the users perform _only_ those tasks, instead of allowing full administrative privileges.\"\n  desc  \"rationale\", \"It's more secure to start with a minimum set of permissions and grant additional permissions as necessary, rather than starting with permissions that are too lenient and then trying to tighten them later.\n\n    Providing full administrative privileges instead of restricting to the minimum set of permissions that the user is required to do exposes the resources to potentially unwanted actions.\n\n    IAM policies that have a statement with \\\"Effect\\\": \\\"Allow\\\" with \\\"Action\\\": \\\"\\\\*\\\" over \\\"Resource\\\": \\\"\\\\*\\\" should be removed.\"\n  desc  \"check\", \"Perform the following to determine what policies are created:\n\n    1. Run the following to get a list of IAM policies:\n    ```\n     aws iam list-policies --output text\n    ```\n    2. For each policy returned, run the following command to determine if any policies is allowing full administrative privileges on the account:\n    ```\n     aws iam get-policy-version --policy-arn\n    \\t --version-id\n    ```\n    3. In output ensure policy should not have any Statement block with `\\\"Effect\\\": \\\"Allow\\\"` and `Action` set to `\\\"*\\\"` and `Resource` set to `\\\"*\\\"`\"\n  desc  \"fix\", \"Using the GUI, perform the following to detach the policy that has full administrative privileges:\n\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).\n    2. In the navigation pane, click Policies and then search for the policy name found in the audit step.\n    3. Select the policy that needs to be deleted.\n    4. In the policy action menu, select first `Detach`\n    5. Select all Users, Groups, Roles that have this policy attached\n    6. Click `Detach Policy`\n    7. In the policy action menu, select `Detach`\n\n    Using the CLI, perform the following to detach the policy that has full administrative privileges as found in the audit step:\n\n    1\\\\. Lists all IAM users, groups, and roles that the specified managed policy is attached to.\n    ```\n     aws iam list-entities-for-policy --policy-arn\n    ```\n    2\\\\. Detach the policy from all IAM Users:\n    ```\n     aws iam detach-user-policy --user-name  --policy-arn\n    ```\n    3\\\\. Detach the policy from all IAM Groups:\n    ```\n     aws iam detach-group-policy --group-name  --policy-arn\n    ```\n    4\\\\. Detach the policy from all IAM Roles:\n    ```\n     aws iam detach-role-policy --role-name  --policy-arn\n    ```\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-6']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Controlled Use of Administrative Privileges CONTROL:4 DESCRIPTION:Controlled Use of Administrative Privileges;\"\n  tag ref: \"http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html:http://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html:http://docs.aws.amazon.com/cli/latest/reference/iam/index.html#cli-aws-iam\"\n  \n  \n  attached_policies = aws_iam_policies.where { attachment_count > 0 }.policy_names\n  \n  if attached_policies.empty? == true\n    impact 0.0\n    describe 'Control not applicable since no attached iam policies were detected' do\n      skip 'Not applicable since no policies are detected as attached to anything within this account.'\n    end\n  else\n    attached_policies.each do |policy|\n      describe \"Attached Policies #{policy} allows full '*:*' privileges?\" do\n        subject do\n          aws_iam_policy(policy).document.where(Effect: 'Allow').actions.flatten.include?('*') &&\n            aws_iam_policy(policy).document.where(Effect: 'Allow').resources.flatten.include?('*')\n        end\n        it { should be false }\n      end\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.22.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.22"
    },
    {
      "title": "Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs",
      "desc": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for customer created CMKs which have changed state to disabled or scheduled deletion.",
      "descriptions": {
        "default": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for customer created CMKs which have changed state to disabled or scheduled deletion.",
        "rationale": "Data encrypted with disabled or deleted keys will no longer be accessible.",
        "check": "Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \"IsMultiRegionTrail\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \"\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \"filterPattern\": \"{($.eventSource = kms.amazonaws.com) && (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion)) }\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \"SubscriptionArn\" with valid aws ARN.\n    ```\n    Example of valid \"SubscriptionArn\": \"arn:aws:sns::::\"\n    ```",
        "fix": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for disabled or scheduled for deletion CMK's and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{($.eventSource = kms.amazonaws.com) && (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion)) }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Medium",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-2"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;",
        "ref": "https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html"
      },
      "code": "control \"aws-foundations-cis-3.7\" do\n  title \"Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for customer created CMKs which have changed state to disabled or scheduled deletion.\"\n  desc  \"rationale\", \"Data encrypted with disabled or deleted keys will no longer be accessible.\"\n  desc  \"check\", \"Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \\\"IsMultiRegionTrail\\\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \\\"\\\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \\\"filterPattern\\\": \\\"{($.eventSource = kms.amazonaws.com) && (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion)) }\\\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \\\"SubscriptionArn\\\" with valid aws ARN.\n    ```\n    Example of valid \\\"SubscriptionArn\\\": \\\"arn:aws:sns::::\\\"\n    ```\"\n  desc  \"fix\", \"Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for disabled or scheduled for deletion CMK's and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{($.eventSource = kms.amazonaws.com) && (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion)) }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```\"\n  impact 0.5\n  tag severity: \"Medium\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-2']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;\"\n  tag ref: \"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html\"\n\n\n  pattern = '{ ($.eventSource = kms.amazonaws.com) && (($.eventName = DisableKey) || ($.eventName = ScheduleKeyDeletion)) }'\n\n  describe aws_cloudwatch_log_metric_filter(pattern: pattern) do\n    it { should exist }\n  end\n\n  # Find the log_group_name associated with the aws_cloudwatch_log_metric_filter that has the pattern\n  log_group_name = aws_cloudwatch_log_metric_filter(pattern: pattern).log_group_name\n\n  # Find cloudtrails associated with with `log_group_name` parsed above\n  associated_trails = aws_cloudtrail_trails.names.select{ |x| aws_cloudtrail_trail(x).cloud_watch_logs_log_group_arn =~ /log-group:#{log_group_name}:/ }\n\n  # Ensure log_group is associated atleast one cloudtrail\n  describe \"Cloudtrails associated with log-group: #{log_group_name}\" do\n    subject { associated_trails }\n    it { should_not be_empty }\n  end\n\n  # Ensure atleast one of the associated cloudtrail meet the requirements.\n  describe.one do\n    associated_trails.each do |trail|\n      describe aws_cloudtrail_trail(trail) do\n        it { should be_multi_region_trail }\n        it { should have_event_selector_mgmt_events_rw_type_all }\n        it { should be_logging }\n      end\n    end\n  end\n\n  # Parse out `metric_name` and `metric_namespace` for the specified pattern.\n  associated_metric_filter = aws_cloudwatch_log_metric_filter(pattern: pattern, log_group_name: log_group_name)\n  metric_name = associated_metric_filter.metric_name\n  metric_namespace = associated_metric_filter.metric_namespace\n\n  # Ensure aws_cloudwatch_alarm for the specified pattern meets requirements.\n  if associated_metric_filter.exists?\n    describe aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace) do\n      it { should exist }\n      its ('alarm_actions') { should_not be_empty }\n    end\n\n    aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace).alarm_actions.each do |sns|\n      describe aws_sns_topic(sns) do\n        it { should exist }\n        its('confirmed_subscription_count') { should cmp >= 1 }\n      end\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-3.7.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-3.7"
    },
    {
      "title": "Ensure security contact information is registered",
      "desc": "AWS provides customers with the option of specifying the contact information for account's security team. It is recommended that this information be provided.",
      "descriptions": {
        "default": "AWS provides customers with the option of specifying the contact information for account's security team. It is recommended that this information be provided.",
        "rationale": "Specifying security-specific contact information will help ensure that security advisories sent by AWS reach the team in your organization that is best equipped to respond to them.",
        "check": "Perform the following in the AWS Management Console to determine if security contact information is present:\n\n    1. Click on your account name at the top right corner of the console\n    2. From the drop-down menu Click `My Account`\n    3. Scroll down to the `Alternate Contacts` section\n    4. Ensure contact information is specified in the `Security` section",
        "fix": "Perform the following in the AWS Management Console to establish security contact information:\n\n    1. Click on your account name at the top right corner of the console.\n    2. From the drop-down menu Click `My Account`\n    3. Scroll down to the `Alternate Contacts` section\n    4. Enter contact information in the `Security` section\n\n    Note: Consider specifying an internal email distribution list to ensure emails are regularly monitored by more than one individual."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "IR-1"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Incident Response and Management CONTROL:19 DESCRIPTION:Incident Response and Management;"
      },
      "code": "control \"aws-foundations-cis-1.18\" do\n  title \"Ensure security contact information is registered\"\n  desc  \"AWS provides customers with the option of specifying the contact information for account's security team. It is recommended that this information be provided.\"\n  desc  \"rationale\", \"Specifying security-specific contact information will help ensure that security advisories sent by AWS reach the team in your organization that is best equipped to respond to them.\"\n  desc  \"check\", \"Perform the following in the AWS Management Console to determine if security contact information is present:\n\n    1. Click on your account name at the top right corner of the console\n    2. From the drop-down menu Click `My Account`\n    3. Scroll down to the `Alternate Contacts` section\n    4. Ensure contact information is specified in the `Security` section\"\n  desc  \"fix\", \"Perform the following in the AWS Management Console to establish security contact information:\n\n    1. Click on your account name at the top right corner of the console.\n    2. From the drop-down menu Click `My Account`\n    3. Scroll down to the `Alternate Contacts` section\n    4. Enter contact information in the `Security` section\n\n    Note: Consider specifying an internal email distribution list to ensure emails are regularly monitored by more than one individual.\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['IR-1']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Incident Response and Management CONTROL:19 DESCRIPTION:Incident Response and Management;\"\n\n  \n  describe 'Control has to be tested manually' do\n    skip 'This control must be manually reviewed'\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.18.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.18"
    },
    {
      "title": "Ensure CloudTrail trails are integrated with CloudWatch Logs",
      "desc": "AWS CloudTrail is a web service that records AWS API calls made in a given AWS account. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail uses Amazon S3 for log file storage and delivery, so log files are stored durably. In addition to capturing CloudTrail logs within a specified S3 bucket for long term analysis, realtime analysis can be performed by configuring CloudTrail to send logs to CloudWatch Logs. For a trail that is enabled in all regions in an account, CloudTrail sends log files from all those regions to a CloudWatch Logs log group. It is recommended that CloudTrail logs be sent to CloudWatch Logs.\n\n    Note: The intent of this recommendation is to ensure AWS account activity is being captured, monitored, and appropriately alarmed on. CloudWatch Logs is a native way to accomplish this using AWS services but does not preclude the use of an alternate solution.",
      "descriptions": {
        "default": "AWS CloudTrail is a web service that records AWS API calls made in a given AWS account. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail uses Amazon S3 for log file storage and delivery, so log files are stored durably. In addition to capturing CloudTrail logs within a specified S3 bucket for long term analysis, realtime analysis can be performed by configuring CloudTrail to send logs to CloudWatch Logs. For a trail that is enabled in all regions in an account, CloudTrail sends log files from all those regions to a CloudWatch Logs log group. It is recommended that CloudTrail logs be sent to CloudWatch Logs.\n\n    Note: The intent of this recommendation is to ensure AWS account activity is being captured, monitored, and appropriately alarmed on. CloudWatch Logs is a native way to accomplish this using AWS services but does not preclude the use of an alternate solution.",
        "rationale": "Sending CloudTrail logs to CloudWatch Logs will facilitate real-time and historic activity logging based on user, API, resource, and IP address, and provides opportunity to establish alarms and notifications for anomalous or sensitivity account activity.",
        "check": "Perform the following to ensure CloudTrail is configured as prescribed:\n\n    Via the AWS management Console\n    1. Sign in to the AWS Management Console and open the CloudTrail console at [https://console.aws.amazon.com/cloudtrail/](https://console.aws.amazon.com/cloudtrail/)\n    2. Under `All Buckets` , click on the target bucket you wish to evaluate\n    3. Click `Properties` on the top right of the console\n    4. Click `Trails` in the left menu\n    5. Ensure a `CloudWatch Logs` log group is configured and has a recent (~one day old) `Last log file delivered` timestamp.\n\n    Via CLI\n    1. Run the following command to get a listing of existing trails:\n    ```\n     aws cloudtrail describe-trails\n    ```\n    2. Ensure `CloudWatchLogsLogGroupArn` is not empty and note the value of the `Name` property.\n    3. Using the noted value of the `Name` property, run the following command:\n    ```\n     aws cloudtrail get-trail-status --name\n    ```\n    4. Ensure the `LatestcloudwatchLogdDeliveryTime` property is set to a recent (~one day old) timestamp.",
        "fix": "Perform the following to establish the prescribed state:\n\n    Via the AWS management Console\n    1. Sign in to the AWS Management Console and open the CloudTrail console at [https://console.aws.amazon.com/cloudtrail/](https://console.aws.amazon.com/cloudtrail/)\n    2. Under All Buckets, click on the target bucket you wish to evaluate\n    3. Click Properties on the top right of the console\n    4. Click `Trails` in the left menu\n    5. Click on each trail where no `CloudWatch Logs` are defined\n    6. Go to the `CloudWatch Logs` section and click on `Configure`\n    7. Define a new or select an existing log group\n    8. Click on `Continue`\n    9. Configure IAM Role which will deliver CloudTrail events to CloudWatch Logs\n     - Create/Select an `IAM Role` and `Policy Name`\n     - Click `Allow` to continue\n\n    Via CLI\n    ```\n    aws cloudtrail update-trail --name\n     --cloudwatch-logs-log-group-arn  --cloudwatch-logs-role-arn\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AU-12",
          "SI-4(2)"
        ],
        "notes": null,
        "comment": "Note: By default, CloudWatch Logs will store Logs indefinitely unless a specific retention period is defined for the log group. When choosing the number of days to retain, keep in mind the average days it takes an organization to realize they have been breached is 210 days (at the time of this writing). Since additional time is required to research a breach, a minimum 365 day retention policy allows time for detection and research. You may also wish to archive the logs to a cheaper storage service rather than simply deleting them. See the following AWS resource to manage CloudWatch Logs retention periods:\n  1. http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/SettingLogRetention.html",
        "cis_controls": "TITLE:Activate audit logging CONTROL:6.2 DESCRIPTION:Ensure that local logging has been enabled on all systems and networking devices.;TITLE:Central Log Management CONTROL:6.5 DESCRIPTION:Ensure that appropriate logs are being aggregated to a central log management system for analysis and review.;",
        "ref": "https://aws.amazon.com/cloudtrail/:CIS CSC v6.0 #6.6, #14.6"
      },
      "code": "control \"aws-foundations-cis-2.4\" do\n  title \"Ensure CloudTrail trails are integrated with CloudWatch Logs\"\n  desc  \"AWS CloudTrail is a web service that records AWS API calls made in a given AWS account. The recorded information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by the AWS service. CloudTrail uses Amazon S3 for log file storage and delivery, so log files are stored durably. In addition to capturing CloudTrail logs within a specified S3 bucket for long term analysis, realtime analysis can be performed by configuring CloudTrail to send logs to CloudWatch Logs. For a trail that is enabled in all regions in an account, CloudTrail sends log files from all those regions to a CloudWatch Logs log group. It is recommended that CloudTrail logs be sent to CloudWatch Logs.\n\n    Note: The intent of this recommendation is to ensure AWS account activity is being captured, monitored, and appropriately alarmed on. CloudWatch Logs is a native way to accomplish this using AWS services but does not preclude the use of an alternate solution.\"\n  desc  \"rationale\", \"Sending CloudTrail logs to CloudWatch Logs will facilitate real-time and historic activity logging based on user, API, resource, and IP address, and provides opportunity to establish alarms and notifications for anomalous or sensitivity account activity.\"\n  desc  \"check\", \"Perform the following to ensure CloudTrail is configured as prescribed:\n\n    Via the AWS management Console\n    1. Sign in to the AWS Management Console and open the CloudTrail console at [https://console.aws.amazon.com/cloudtrail/](https://console.aws.amazon.com/cloudtrail/)\n    2. Under `All Buckets` , click on the target bucket you wish to evaluate\n    3. Click `Properties` on the top right of the console\n    4. Click `Trails` in the left menu\n    5. Ensure a `CloudWatch Logs` log group is configured and has a recent (~one day old) `Last log file delivered` timestamp.\n\n    Via CLI\n    1. Run the following command to get a listing of existing trails:\n    ```\n     aws cloudtrail describe-trails\n    ```\n    2. Ensure `CloudWatchLogsLogGroupArn` is not empty and note the value of the `Name` property.\n    3. Using the noted value of the `Name` property, run the following command:\n    ```\n     aws cloudtrail get-trail-status --name\n    ```\n    4. Ensure the `LatestcloudwatchLogdDeliveryTime` property is set to a recent (~one day old) timestamp.\"\n  desc  \"fix\", \"Perform the following to establish the prescribed state:\n\n    Via the AWS management Console\n    1. Sign in to the AWS Management Console and open the CloudTrail console at [https://console.aws.amazon.com/cloudtrail/](https://console.aws.amazon.com/cloudtrail/)\n    2. Under All Buckets, click on the target bucket you wish to evaluate\n    3. Click Properties on the top right of the console\n    4. Click `Trails` in the left menu\n    5. Click on each trail where no `CloudWatch Logs` are defined\n    6. Go to the `CloudWatch Logs` section and click on `Configure`\n    7. Define a new or select an existing log group\n    8. Click on `Continue`\n    9. Configure IAM Role which will deliver CloudTrail events to CloudWatch Logs\n     - Create/Select an `IAM Role` and `Policy Name`\n     - Click `Allow` to continue\n\n    Via CLI\n    ```\n    aws cloudtrail update-trail --name\n     --cloudwatch-logs-log-group-arn  --cloudwatch-logs-role-arn\n    ```\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AU-12', 'SI-4(2)']\n  tag notes: nil\n  tag comment: \"Note: By default, CloudWatch Logs will store Logs indefinitely unless a specific retention period is defined for the log group. When choosing the number of days to retain, keep in mind the average days it takes an organization to realize they have been breached is 210 days (at the time of this writing). Since additional time is required to research a breach, a minimum 365 day retention policy allows time for detection and research. You may also wish to archive the logs to a cheaper storage service rather than simply deleting them. See the following AWS resource to manage CloudWatch Logs retention periods:\n  1. http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/SettingLogRetention.html\"\n  tag cis_controls: \"TITLE:Activate audit logging CONTROL:6.2 DESCRIPTION:Ensure that local logging has been enabled on all systems and networking devices.;TITLE:Central Log Management CONTROL:6.5 DESCRIPTION:Ensure that appropriate logs are being aggregated to a central log management system for analysis and review.;\"\n  tag ref: \"https://aws.amazon.com/cloudtrail/:CIS CSC v6.0 #6.6, #14.6\"\n\n  \n  describe aws_cloudtrail_trails do\n    it { should exist }\n  end\n\n  aws_cloudtrail_trails.trail_arns.each do |trail|\n    describe aws_cloudtrail_trail(trail) do\n      its('cloud_watch_logs_log_group_arn') { should_not be_nil }\n      its('delivered_logs_days_ago') { should cmp <= 1 }\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-2.4.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-2.4"
    },
    {
      "title": "Ensure a log metric filter and alarm exist for Management Console sign-in without MFA",
      "desc": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for console logins that are not protected by multi-factor authentication (MFA).",
      "descriptions": {
        "default": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for console logins that are not protected by multi-factor authentication (MFA).",
        "rationale": "Monitoring for single-factor console logins will increase visibility into accounts that are not protected by MFA.",
        "check": "Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \"IsMultiRegionTrail\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \"\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \"filterPattern\": \"{ ($.eventName = \"ConsoleLogin\") && ($.additionalEventData.MFAUsed != \"Yes\") }\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \"SubscriptionArn\" with valid aws ARN.\n    ```\n    Example of valid \"SubscriptionArn\": \"arn:aws:sns::::\"\n    ```",
        "fix": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for AWS Management Console sign-in without MFA and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = \"ConsoleLogin\") && ($.additionalEventData.MFAUsed != \"Yes\") }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-2"
        ],
        "notes": "Configuring log metric filter and alarm on Multi-region (global) CloudTrail\n  - ensures that activities from all regions (used as well as unused) are monitored\n  - ensures that activities on all supported global services are monitored\n  - ensures that all management events across all regions are monitored",
        "comment": null,
        "cis_controls": "TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;",
        "ref": "http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/viewing_metrics_with_cloudwatch.html:CIS CSC v6.0 #5.5:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html"
      },
      "code": "control \"aws-foundations-cis-3.2\" do\n  title \"Ensure a log metric filter and alarm exist for Management Console sign-in without MFA\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for console logins that are not protected by multi-factor authentication (MFA).\"\n  desc  \"rationale\", \"Monitoring for single-factor console logins will increase visibility into accounts that are not protected by MFA.\"\n  desc  \"check\", \"Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \\\"IsMultiRegionTrail\\\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \\\"\\\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \\\"filterPattern\\\": \\\"{ ($.eventName = \\\"ConsoleLogin\\\") && ($.additionalEventData.MFAUsed != \\\"Yes\\\") }\\\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \\\"SubscriptionArn\\\" with valid aws ARN.\n    ```\n    Example of valid \\\"SubscriptionArn\\\": \\\"arn:aws:sns::::\\\"\n    ```\"\n  desc  \"fix\", \"Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for AWS Management Console sign-in without MFA and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = \\\"ConsoleLogin\\\") && ($.additionalEventData.MFAUsed != \\\"Yes\\\") }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-2']\n  tag notes: \"Configuring log metric filter and alarm on Multi-region (global) CloudTrail\n  - ensures that activities from all regions (used as well as unused) are monitored\n  - ensures that activities on all supported global services are monitored\n  - ensures that all management events across all regions are monitored\"\n  tag comment: nil\n  tag cis_controls: \"TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;\"\n  tag ref: \"http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/viewing_metrics_with_cloudwatch.html:CIS CSC v6.0 #5.5:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html\"\n\n\n  pattern = '{ ($.eventName = \"ConsoleLogin\") && ($.additionalEventData.MFAUsed != \"Yes\") }'\n\n  describe aws_cloudwatch_log_metric_filter(pattern: pattern) do\n    it { should exist }\n  end\n\n  # Find the log_group_name associated with the aws_cloudwatch_log_metric_filter that has the pattern\n  log_group_name = aws_cloudwatch_log_metric_filter(pattern: pattern).log_group_name\n\n  # Find cloudtrails associated with with `log_group_name` parsed above\n  associated_trails = aws_cloudtrail_trails.names.select{ |x| aws_cloudtrail_trail(x).cloud_watch_logs_log_group_arn =~ /log-group:#{log_group_name}:/ }\n\n  # Ensure log_group is associated atleast one cloudtrail\n  describe \"Cloudtrails associated with log-group: #{log_group_name}\" do\n    subject { associated_trails }\n    it { should_not be_empty }\n  end\n\n  # Ensure atleast one of the associated cloudtrail meet the requirements.\n  describe.one do\n    associated_trails.each do |trail|\n      describe aws_cloudtrail_trail(trail) do\n        it { should be_multi_region_trail }\n        it { should have_event_selector_mgmt_events_rw_type_all }\n        it { should be_logging }\n      end\n    end\n  end\n\n  # Parse out `metric_name` and `metric_namespace` for the specified pattern.\n  associated_metric_filter = aws_cloudwatch_log_metric_filter(pattern: pattern, log_group_name: log_group_name)\n  metric_name = associated_metric_filter.metric_name\n  metric_namespace = associated_metric_filter.metric_namespace\n\n  # Ensure aws_cloudwatch_alarm for the specified pattern meets requirements.\n  if associated_metric_filter.exists?\n    describe aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace) do\n      it { should exist }\n      its ('alarm_actions') { should_not be_empty }\n    end\n\n    aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace).alarm_actions.each do |sns|\n      describe aws_sns_topic(sns) do\n        it { should exist }\n        its('confirmed_subscription_count') { should cmp >= 1 }\n      end\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-3.2.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-3.2"
    },
    {
      "title": "Ensure security questions are registered in the AWS account",
      "desc": "The AWS support portal allows account owners to establish security questions that can be used to authenticate individuals calling AWS customer service for support. It is recommended that security questions be established.",
      "descriptions": {
        "default": "The AWS support portal allows account owners to establish security questions that can be used to authenticate individuals calling AWS customer service for support. It is recommended that security questions be established.",
        "rationale": "When creating a new AWS account, a default super user is automatically created. This account is referred to as the \"root\" account. It is recommended that the use of this account be limited and highly controlled. During events in which the Root password is no longer accessible or the MFA token associated with root is lost/destroyed it is possible, through authentication using secret questions and associated answers, to recover root login access.",
        "check": "Perform the following in the AWS Management Console:\n\n    1. Login to the AWS account as root\n    2. On the top right you will see the __\n    3. Click on the __\n    4. From the drop-down menu Click `My Account`\n    5. In the `Configure Security Challenge Questions` section on the `Personal Information` page, configure three security challenge questions.\n    6. Click `Save questions` .",
        "fix": "Perform the following in the AWS Management Console:\n\n    1. Login to the AWS Account as root\n    2. Click on the __ from the top right of the console\n    3. From the drop-down menu Click _My Account_\n    4. Scroll down to the `Configure Security Questions` section\n    5. Click on `Edit`\n    6. Click on each `Question`\n     - From the drop-down select an appropriate question\n     - Click on the `Answer` section\n     - Enter an appropriate answer\n     - Follow process for all 3 questions\n    7. Click `Update` when complete\n    8. Place Questions and Answers and place in a secure physical location"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-2"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;"
      },
      "code": "control \"aws-foundations-cis-1.15\" do\n  title \"Ensure security questions are registered in the AWS account\"\n  desc  \"The AWS support portal allows account owners to establish security questions that can be used to authenticate individuals calling AWS customer service for support. It is recommended that security questions be established.\"\n  desc  \"rationale\", \"When creating a new AWS account, a default super user is automatically created. This account is referred to as the \\\"root\\\" account. It is recommended that the use of this account be limited and highly controlled. During events in which the Root password is no longer accessible or the MFA token associated with root is lost/destroyed it is possible, through authentication using secret questions and associated answers, to recover root login access.\"\n  desc  \"check\", \"Perform the following in the AWS Management Console:\n\n    1. Login to the AWS account as root\n    2. On the top right you will see the __\n    3. Click on the __\n    4. From the drop-down menu Click `My Account`\n    5. In the `Configure Security Challenge Questions` section on the `Personal Information` page, configure three security challenge questions.\n    6. Click `Save questions` .\"\n  desc  \"fix\", \"Perform the following in the AWS Management Console:\n\n    1. Login to the AWS Account as root\n    2. Click on the __ from the top right of the console\n    3. From the drop-down menu Click _My Account_\n    4. Scroll down to the `Configure Security Questions` section\n    5. Click on `Edit`\n    6. Click on each `Question`\n     - From the drop-down select an appropriate question\n     - Click on the `Answer` section\n     - Enter an appropriate answer\n     - Follow process for all 3 questions\n    7. Click `Update` when complete\n    8. Place Questions and Answers and place in a secure physical location\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-2']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;\"\n\n  \n  describe 'Control has to be tested manually' do\n    skip 'This control must be manually reviewed'\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.15.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.15"
    },
    {
      "title": "Ensure access keys are rotated every 90 days or less",
      "desc": "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.",
      "descriptions": {
        "default": "Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.",
        "rationale": "Rotating access keys will reduce the window of opportunity for an access key that is associated with a compromised or terminated account to be used.\n\n    Access keys should be rotated to ensure that data cannot be accessed with an old key which might have been lost, cracked, or stolen.",
        "check": "Perform the following to determine if access keys are rotated as prescribed:\n\n    1. Login to the AWS Management Console\n    2. Click `Services`\n    3. Click `IAM`\n    4. Click on `Credential Report`\n    5. This will download an `.xls` file which contains Access Key usage for all IAM users within an AWS Account - open this file\n    6. Focus on the following columns (where x = 1 or 2)\n     - `access_key_X_active`\n     - `access_key_X_last_rotated`\n    7. Ensure all active keys have been rotated within `90` days\n\n    Via CLI\n    ```\n    aws iam generate-credential-report\n    aws iam get-credential-report --query 'Content' --output text | base64 -d\n    ```",
        "fix": "Perform the following to rotate access keys:\n\n    1. Login to the AWS Management Console:\n    2. Click `Services`\n    3. Click `IAM`\n    4. Click on `Users`\n    5. Click on `Security Credentials`\n    6. As an Administrator\n     - Click on `Make Inactive` for keys that have not been rotated in `90` Days\n    7. As an IAM User\n     - Click on `Make` `Inactive` or `Delete` for keys which have not been rotated or used in `90` Days\n    8. Click on `` Create Access ` Key`\n    9. Update programmatic call with new Access Key credentials\n\n    Via CLI\n    ```\n    aws iam update-access-key\n    aws iam create-access-key\n    aws iam delete-access-key\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-2"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;"
      },
      "code": "control \"aws-foundations-cis-1.4\" do\n  title \"Ensure access keys are rotated every 90 days or less\"\n  desc  \"Access keys consist of an access key ID and secret access key, which are used to sign programmatic requests that you make to AWS. AWS users need their own access keys to make programmatic calls to AWS from the AWS Command Line Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct HTTP calls using the APIs for individual AWS services. It is recommended that all access keys be regularly rotated.\"\n  desc  \"rationale\", \"Rotating access keys will reduce the window of opportunity for an access key that is associated with a compromised or terminated account to be used.\n\n    Access keys should be rotated to ensure that data cannot be accessed with an old key which might have been lost, cracked, or stolen.\"\n  desc  \"check\", \"Perform the following to determine if access keys are rotated as prescribed:\n\n    1. Login to the AWS Management Console\n    2. Click `Services`\n    3. Click `IAM`\n    4. Click on `Credential Report`\n    5. This will download an `.xls` file which contains Access Key usage for all IAM users within an AWS Account - open this file\n    6. Focus on the following columns (where x = 1 or 2)\n     - `access_key_X_active`\n     - `access_key_X_last_rotated`\n    7. Ensure all active keys have been rotated within `90` days\n\n    Via CLI\n    ```\n    aws iam generate-credential-report\n    aws iam get-credential-report --query 'Content' --output text | base64 -d\n    ```\"\n  desc  \"fix\", \"Perform the following to rotate access keys:\n\n    1. Login to the AWS Management Console:\n    2. Click `Services`\n    3. Click `IAM`\n    4. Click on `Users`\n    5. Click on `Security Credentials`\n    6. As an Administrator\n     - Click on `Make Inactive` for keys that have not been rotated in `90` Days\n    7. As an IAM User\n     - Click on `Make` `Inactive` or `Delete` for keys which have not been rotated or used in `90` Days\n    8. Click on `` Create Access ` Key`\n    9. Update programmatic call with new Access Key credentials\n\n    Via CLI\n    ```\n    aws iam update-access-key\n    aws iam create-access-key\n    aws iam delete-access-key\n    ```\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-2']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Account Monitoring and Control CONTROL:16 DESCRIPTION:Account Monitoring and Control;\"\n\n\n  if aws_iam_access_keys.where(active: true).entries.empty?\n    describe 'Control skipped because no active iam access keys were found' do\n      skip 'This control is skipped since the aws_iam_access_keys resource returned an empty active access key list'\n    end\n  else\n    aws_iam_access_keys.where(active: true).entries.each do |key|\n      describe key.username do\n        context key do\n          its('created_days_ago') { should cmp <= input(\"aws_key_age\") }\n          its('ever_used') { should be true }\n        end\n      end\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.4.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.4"
    },
    {
      "title": "Ensure no root account access key exists",
      "desc": "The root account is the most privileged user in an AWS account. AWS Access Keys provide programmatic access to a given AWS account. It is recommended that all access keys associated with the root account be removed.",
      "descriptions": {
        "default": "The root account is the most privileged user in an AWS account. AWS Access Keys provide programmatic access to a given AWS account. It is recommended that all access keys associated with the root account be removed.",
        "rationale": "Removing access keys associated with the root account limits vectors by which the account can be compromised. Additionally, removing the root access keys encourages the creation and use of role based accounts that are least privileged.",
        "check": "Perform the following to determine if the root account has access keys:\n\n    Via the AWS Console\n\n    1. Login to the AWS Management Console\n    2. Click `Services`\n    3. Click `IAM`\n    4. Click on `Credential Report`\n    5. This will download an `.xls` file which contains credential usage for all IAM users within an AWS Account - open this file\n    6. For the `` user, ensure the `access_key_1_active` and `access_key_2_active` fields are set to `FALSE` .\n\n    Via CLI\n\n    1. Run the following commands:\n    ```\n     aws iam generate-credential-report\n     aws iam get-credential-report --query 'Content' --output text | base64 -d | cut -d, -f1,9,14 | grep -B1 ''\n    ```\n    2. For the `` user, ensure the `access_key_1_active` and `access_key_2_active` fields are set to `FALSE` .",
        "fix": "Perform the following to delete or disable active root access keys being\n\n    Via the AWS Console\n\n    1. Sign in to the AWS Management Console as Root and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).\n    2. Click on __ at the top right and select `Security Credentials` from the drop down list\n    3. On the pop out screen Click on `Continue to Security Credentials`\n    4. Click on `Access Keys` _(Access Key ID and Secret Access Key)_\n    5. Under the `Status` column if there are any Keys which are Active\n     1. Click on `Make Inactive` - (Temporarily disable Key - may be needed again)\n     2. Click `Delete` - (Deleted keys cannot be recovered)"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-6(9)"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Ensure the Use of Dedicated Administrative Accounts CONTROL:4.3 DESCRIPTION:Ensure that all users with administrative account access use a dedicated or secondary account for elevated activities. This account should only be used for administrative activities and not internet browsing, email, or similar activities.;",
        "ref": "http://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html:http://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html:http://docs.aws.amazon.com/IAM/latest/APIReference/API_GetAccountSummary.html:CIS CSC v6.0 #5.1"
      },
      "code": "control \"aws-foundations-cis-1.12\" do\n  title \"Ensure no root account access key exists\"\n  desc  \"The root account is the most privileged user in an AWS account. AWS Access Keys provide programmatic access to a given AWS account. It is recommended that all access keys associated with the root account be removed.\"\n  desc  \"rationale\", \"Removing access keys associated with the root account limits vectors by which the account can be compromised. Additionally, removing the root access keys encourages the creation and use of role based accounts that are least privileged.\"\n  desc  \"check\", \"Perform the following to determine if the root account has access keys:\n\n    Via the AWS Console\n\n    1. Login to the AWS Management Console\n    2. Click `Services`\n    3. Click `IAM`\n    4. Click on `Credential Report`\n    5. This will download an `.xls` file which contains credential usage for all IAM users within an AWS Account - open this file\n    6. For the `` user, ensure the `access_key_1_active` and `access_key_2_active` fields are set to `FALSE` .\n\n    Via CLI\n\n    1. Run the following commands:\n    ```\n     aws iam generate-credential-report\n     aws iam get-credential-report --query 'Content' --output text | base64 -d | cut -d, -f1,9,14 | grep -B1 ''\n    ```\n    2. For the `` user, ensure the `access_key_1_active` and `access_key_2_active` fields are set to `FALSE` .\"\n  desc  \"fix\", \"Perform the following to delete or disable active root access keys being\n\n    Via the AWS Console\n\n    1. Sign in to the AWS Management Console as Root and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).\n    2. Click on __ at the top right and select `Security Credentials` from the drop down list\n    3. On the pop out screen Click on `Continue to Security Credentials`\n    4. Click on `Access Keys` _(Access Key ID and Secret Access Key)_\n    5. Under the `Status` column if there are any Keys which are Active\n     1. Click on `Make Inactive` - (Temporarily disable Key - may be needed again)\n     2. Click `Delete` - (Deleted keys cannot be recovered)\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-6(9)']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Ensure the Use of Dedicated Administrative Accounts CONTROL:4.3 DESCRIPTION:Ensure that all users with administrative account access use a dedicated or secondary account for elevated activities. This account should only be used for administrative activities and not internet browsing, email, or similar activities.;\"\n  tag ref: \"http://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html:http://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html:http://docs.aws.amazon.com/IAM/latest/APIReference/API_GetAccountSummary.html:CIS CSC v6.0 #5.1\"\n\n  \n  describe aws_iam_root_user do\n    it { should_not have_access_key }\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.12.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.12"
    },
    {
      "title": "Ensure a log metric filter and alarm exist for unauthorized API calls",
      "desc": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.",
      "descriptions": {
        "default": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.",
        "rationale": "Monitoring unauthorized API calls will help reveal application errors and may reduce time to detect malicious activity.",
        "check": "Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \"IsMultiRegionTrail\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name ` ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name`\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \"\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \"filterPattern\": \"{ ($.errorCode = \"*UnauthorizedOperation\") || ($.errorCode = \"AccessDenied*\") }\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    atleast one subscription should have \"SubscriptionArn\" with valid aws ARN.\n    ```\n    Example of valid \"SubscriptionArn\": \"arn:aws:sns::::\"\n    ```",
        "fix": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n    1. Create a metric filter based on filter pattern provided which checks for unauthorized API calls and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.errorCode = \"*UnauthorizedOperation\") || ($.errorCode = \"AccessDenied*\") }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AU-6",
          "SI-4(2)"
        ],
        "notes": "Configuring log metric filter and alarm on Multi-region (global) CloudTrail\n  - ensures that activities from all regions (used as well as unused) are monitored\n  - ensures that activities on all supported global services are monitored\n  - ensures that all management events across all regions are monitored",
        "comment": "This alert may be triggered by normal read-only console activities that attempt to opportunistically gather optional information, but gracefully fail if they don't have permissions.\n  If an excessive number of alerts are being generated then an organization may wish to consider adding read access to the limited IAM user permissions simply to quiet the alerts.\n  In some cases doing this may allow the users to actually view some areas of the system - any additional access given should be reviewed for alignment with the original limited IAM user intent.",
        "cis_controls": "TITLE:Regularly Review Logs CONTROL:6.7 DESCRIPTION:On a regular basis, review logs to identify anomalies or abnormal events.;TITLE:Central Log Management CONTROL:6.5 DESCRIPTION:Ensure that appropriate logs are being aggregated to a central log management system for analysis and review.;",
        "ref": "https://aws.amazon.com/sns/:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html"
      },
      "code": "control \"aws-foundations-cis-3.1\" do\n  title \"Ensure a log metric filter and alarm exist for unauthorized API calls\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for unauthorized API calls.\"\n  desc  \"rationale\", \"Monitoring unauthorized API calls will help reveal application errors and may reduce time to detect malicious activity.\"\n  desc  \"check\", \"Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \\\"IsMultiRegionTrail\\\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name ` ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name`\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \\\"\\\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \\\"filterPattern\\\": \\\"{ ($.errorCode = \\\"*UnauthorizedOperation\\\") || ($.errorCode = \\\"AccessDenied*\\\") }\\\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    atleast one subscription should have \\\"SubscriptionArn\\\" with valid aws ARN.\n    ```\n    Example of valid \\\"SubscriptionArn\\\": \\\"arn:aws:sns::::\\\"\n    ```\"\n  desc  \"fix\", \"Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n\n    1. Create a metric filter based on filter pattern provided which checks for unauthorized API calls and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.errorCode = \\\"*UnauthorizedOperation\\\") || ($.errorCode = \\\"AccessDenied*\\\") }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AU-6', 'SI-4(2)']\n  tag notes: \"Configuring log metric filter and alarm on Multi-region (global) CloudTrail\n  - ensures that activities from all regions (used as well as unused) are monitored\n  - ensures that activities on all supported global services are monitored\n  - ensures that all management events across all regions are monitored\"\n  tag comment: \"This alert may be triggered by normal read-only console activities that attempt to opportunistically gather optional information, but gracefully fail if they don't have permissions.\n  If an excessive number of alerts are being generated then an organization may wish to consider adding read access to the limited IAM user permissions simply to quiet the alerts.\n  In some cases doing this may allow the users to actually view some areas of the system - any additional access given should be reviewed for alignment with the original limited IAM user intent.\"\n  tag cis_controls: \"TITLE:Regularly Review Logs CONTROL:6.7 DESCRIPTION:On a regular basis, review logs to identify anomalies or abnormal events.;TITLE:Central Log Management CONTROL:6.5 DESCRIPTION:Ensure that appropriate logs are being aggregated to a central log management system for analysis and review.;\"\n  tag ref: \"https://aws.amazon.com/sns/:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html\"\n\n  \n  pattern = '{ ($.errorCode = \"*UnauthorizedOperation\") || ($.errorCode = \"AccessDenied*\") }'\n\n  describe aws_cloudwatch_log_metric_filter(pattern: pattern) do\n    it { should exist }\n  end\n\n  # Find the log_group_name associated with the aws_cloudwatch_log_metric_filter that has the pattern\n  log_group_name = aws_cloudwatch_log_metric_filter(pattern: pattern).log_group_name\n\n  # Find cloudtrails associated with with `log_group_name` parsed above\n  associated_trails = aws_cloudtrail_trails.names.select{ |x| aws_cloudtrail_trail(x).cloud_watch_logs_log_group_arn =~ /log-group:#{log_group_name}:/ }\n\n  # Ensure log_group is associated atleast one cloudtrail\n  describe \"Cloudtrails associated with log-group: #{log_group_name}\" do\n    subject { associated_trails }\n    it { should_not be_empty }\n  end\n\n  # Ensure atleast one of the associated cloudtrail meet the requirements.\n  describe.one do\n    associated_trails.each do |trail|\n      describe aws_cloudtrail_trail(trail) do\n        it { should be_multi_region_trail }\n        it { should have_event_selector_mgmt_events_rw_type_all }\n        it { should be_logging }\n      end\n    end\n  end\n\n  # Parse out `metric_name` and `metric_namespace` for the specified pattern.\n  associated_metric_filter = aws_cloudwatch_log_metric_filter(pattern: pattern, log_group_name: log_group_name)\n  metric_name = associated_metric_filter.metric_name\n  metric_namespace = associated_metric_filter.metric_namespace\n\n  # Ensure aws_cloudwatch_alarm for the specified pattern meets requirements.\n  if associated_metric_filter.exists?\n    describe aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace) do\n      it { should exist }\n      its ('alarm_actions') { should_not be_empty }\n    end\n\n    aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace).alarm_actions.each do |sns|\n      describe aws_sns_topic(sns) do\n        it { should exist }\n        its('confirmed_subscription_count') { should cmp >= 1 }\n      end\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-3.1.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-3.1"
    },
    {
      "title": "Ensure no security groups allow ingress from 0.0.0.0/0 to port 3389",
      "desc": "Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to port `3389` .",
      "descriptions": {
        "default": "Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to port `3389` .",
        "rationale": "Removing unfettered connectivity to remote console services, such as RDP, reduces a server's exposure to risk.",
        "check": "Perform the following to determine if the account is configured as prescribed:\n\n    1. Login to the AWS Management Console at [https://console.aws.amazon.com/vpc/home](https://console.aws.amazon.com/vpc/home)\n    2. In the left pane, click `Security Groups`\n    3. For each security group, perform the following:\n    1. Select the security group\n    2. Click the `Inbound Rules` tab\n    3. Ensure no rule exists that has a port range that includes port `3389` and has a `Source` of `0.0.0.0/0`\n\n    Note: A `Port` value of `ALL` or a port range such as `1024-4098` are inclusive of port `3389` .",
        "fix": "Perform the following to implement the prescribed state:\n\n    1. Login to the AWS Management Console at [https://console.aws.amazon.com/vpc/home](https://console.aws.amazon.com/vpc/home)\n    2. In the left pane, click `Security Groups`\n    3. For each security group, perform the following:\n    1. Select the security group\n    2. Click the `Inbound Rules` tab\n    3. Identify the rules to be removed\n    4. Click the `x` in the `Remove` column\n    5. Click `Save`"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "CM-7(1)"
        ],
        "notes": null,
        "comment": "For updating an existing environment, care should be taken to ensure that administrators currently relying on an existing ingress from 0.0.0.0/0 have access to ports 22 and/or 3389 through another security group.",
        "cis_controls": "TITLE:Ensure Only Approved Ports, Protocols and Services Are Running CONTROL:9.2 DESCRIPTION:Ensure that only network ports, protocols, and services listening on a system with validated business needs, are running on each system.;"
      },
      "code": "control \"aws-foundations-cis-4.2\" do\n  title \"Ensure no security groups allow ingress from 0.0.0.0/0 to port 3389\"\n  desc  \"Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to port `3389` .\"\n  desc  \"rationale\", \"Removing unfettered connectivity to remote console services, such as RDP, reduces a server's exposure to risk.\"\n  desc  \"check\", \"Perform the following to determine if the account is configured as prescribed:\n\n    1. Login to the AWS Management Console at [https://console.aws.amazon.com/vpc/home](https://console.aws.amazon.com/vpc/home)\n    2. In the left pane, click `Security Groups`\n    3. For each security group, perform the following:\n    1. Select the security group\n    2. Click the `Inbound Rules` tab\n    3. Ensure no rule exists that has a port range that includes port `3389` and has a `Source` of `0.0.0.0/0`\n\n    Note: A `Port` value of `ALL` or a port range such as `1024-4098` are inclusive of port `3389` .\"\n  desc  \"fix\", \"Perform the following to implement the prescribed state:\n\n    1. Login to the AWS Management Console at [https://console.aws.amazon.com/vpc/home](https://console.aws.amazon.com/vpc/home)\n    2. In the left pane, click `Security Groups`\n    3. For each security group, perform the following:\n    1. Select the security group\n    2. Click the `Inbound Rules` tab\n    3. Identify the rules to be removed\n    4. Click the `x` in the `Remove` column\n    5. Click `Save`\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['CM-7(1)']\n  tag notes: nil\n  tag comment: \"For updating an existing environment, care should be taken to ensure that administrators currently relying on an existing ingress from 0.0.0.0/0 have access to ports 22 and/or 3389 through another security group.\"\n  tag cis_controls: \"TITLE:Ensure Only Approved Ports, Protocols and Services Are Running CONTROL:9.2 DESCRIPTION:Ensure that only network ports, protocols, and services listening on a system with validated business needs, are running on each system.;\"\n\n\n  exception_security_group_list = input('exception_security_group_list')\n\n  aws_security_groups.group_ids.each do |group_id|\n    if exception_security_group_list.include?(group_id)\n      describe 'Security Group not inspected because it is defined as an exception' do\n        skip \"Security Group:: #{group_id} not inspected because it is defined in exception_security_group_list.\"\n      end\n    end\n\n    next if exception_security_group_list.include?(group_id)\n\n    describe aws_security_group(group_id) do\n      it { should_not allow_in(port: 3389, ipv4_range: '0.0.0.0/0') }\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-4.2.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-4.2"
    },
    {
      "title": "Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password",
      "desc": "Multi-Factor Authentication (MFA) adds an extra layer of protection on top of a user name and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device. It is recommended that MFA be enabled for all accounts that have a console password.",
      "descriptions": {
        "default": "Multi-Factor Authentication (MFA) adds an extra layer of protection on top of a user name and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device. It is recommended that MFA be enabled for all accounts that have a console password.",
        "rationale": "Enabling MFA provides increased security for console access as it requires the authenticating principal to possess a device that emits a time-sensitive key and have knowledge of a credential.",
        "check": "Perform the following to determine if a MFA device is enabled for all IAM users having a console password:\n\n    Via Management Console\n\n    1. Open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).\n    2. In the left pane, select `Users`\n    3. If the `MFA Device` or `Password` columns are not visible in the table, click the gear icon at the upper right corner of the table and ensure a checkmark is next to both, then click `Close` .\n    4. Ensure each user having a checkmark in the `Password` column also has a value in the `MFA Device` column.\n\n    Via the CLI\n\n    1. Run the following command (OSX/Linux/UNIX) to generate a list of all IAM users along with their password and MFA status:\n    ```\n     aws iam generate-credential-report\n    ```\n    ```\n     aws iam get-credential-report --query 'Content' --output text | base64 -d | cut -d, -f1,4,8\n    ```\n    2. The output of this command will produce a table similar to the following:\n    ```\n     user,password_enabled,mfa_active\n     elise,false,false\n     brandon,true,true\n     rakesh,false,false\n     helene,false,false\n     paras,true,true\n     anitha,false,false\n    ```\n    3. For any column having `password_enabled` set to `true` , ensure `mfa_active` is also set to `true.`",
        "fix": "Perform the following to enable MFA:\n\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).\n    2. In the navigation pane, choose Users.\n    3. In the User Name list, choose the name of the intended MFA user.\n    4. Choose the Security Credentials tab, and then choose Manage MFA Device.\n    5. In the Manage MFA Device wizard, choose A virtual MFA device, and then choose Next Step.\n\n     IAM generates and displays configuration information for the virtual MFA device, including a QR code graphic. The graphic is a representation of the 'secret configuration key' that is available for manual entry on devices that do not support QR codes.\n      \n    6. Open your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see [Virtual MFA Applications](http://aws.amazon.com/iam/details/mfa/#Virtual_MFA_Applications).) If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device).\n    7. Determine whether the MFA app supports QR codes, and then do one of the following:\n\n     - Use the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code.\n     - In the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application.\n\n     When you are finished, the virtual MFA device starts generating one-time passwords.\n    8. In the Manage MFA Device wizard, in the Authentication Code 1 box, type the one-time password that currently appears in the virtual MFA device. Wait up to 30 seconds for the device to generate a new one-time password. Then type the second one-time password into the Authentication Code 2 box. Choose Active Virtual MFA.\n\n    **Forced IAM User Self-Service Remediation**\n\n    Amazon has published a pattern that forces users to self-service setup MFA before they have access to their complete permissions set. Until they complete this step, they cannot access their full permissions. This pattern can be used on new AWS accounts. It can also be used on existing accounts - it is recommended users are given instructions and a grace period to accomplish MFA enrollment before active enforcement on existing AWS accounts.\n\n    [How to Delegate Management of Multi-Factor Authentication to AWS IAM Users](http://blogs.aws.amazon.com/security/post/Tx2SJJYE082KBUK/How-to-Delegate-Management-of-Multi-Factor-Authentication-to-AWS-IAM-Users)"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "IA-2(1)"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Use Multifactor Authentication For All Administrative Access CONTROL:4.5 DESCRIPTION:Use multi-factor authentication and encrypted channels for all administrative account access.;",
        "ref": "http://tools.ietf.org/html/rfc6238:http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html:CIS CSC v6.0 #5.6, #11.4, #12.6, #16.11"
      },
      "code": "control \"aws-foundations-cis-1.2\" do\n  title \"Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password\"\n  desc  \"Multi-Factor Authentication (MFA) adds an extra layer of protection on top of a user name and password. With MFA enabled, when a user signs in to an AWS website, they will be prompted for their user name and password as well as for an authentication code from their AWS MFA device. It is recommended that MFA be enabled for all accounts that have a console password.\"\n  desc  \"rationale\", \"Enabling MFA provides increased security for console access as it requires the authenticating principal to possess a device that emits a time-sensitive key and have knowledge of a credential.\"\n  desc  \"check\", \"Perform the following to determine if a MFA device is enabled for all IAM users having a console password:\n\n    Via Management Console\n\n    1. Open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).\n    2. In the left pane, select `Users`\n    3. If the `MFA Device` or `Password` columns are not visible in the table, click the gear icon at the upper right corner of the table and ensure a checkmark is next to both, then click `Close` .\n    4. Ensure each user having a checkmark in the `Password` column also has a value in the `MFA Device` column.\n\n    Via the CLI\n\n    1. Run the following command (OSX/Linux/UNIX) to generate a list of all IAM users along with their password and MFA status:\n    ```\n     aws iam generate-credential-report\n    ```\n    ```\n     aws iam get-credential-report --query 'Content' --output text | base64 -d | cut -d, -f1,4,8\n    ```\n    2. The output of this command will produce a table similar to the following:\n    ```\n     user,password_enabled,mfa_active\n     elise,false,false\n     brandon,true,true\n     rakesh,false,false\n     helene,false,false\n     paras,true,true\n     anitha,false,false\n    ```\n    3. For any column having `password_enabled` set to `true` , ensure `mfa_active` is also set to `true.`\"\n  desc  \"fix\", \"Perform the following to enable MFA:\n\n    1. Sign in to the AWS Management Console and open the IAM console at [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).\n    2. In the navigation pane, choose Users.\n    3. In the User Name list, choose the name of the intended MFA user.\n    4. Choose the Security Credentials tab, and then choose Manage MFA Device.\n    5. In the Manage MFA Device wizard, choose A virtual MFA device, and then choose Next Step.\n\n     IAM generates and displays configuration information for the virtual MFA device, including a QR code graphic. The graphic is a representation of the 'secret configuration key' that is available for manual entry on devices that do not support QR codes.\n      \n    6. Open your virtual MFA application. (For a list of apps that you can use for hosting virtual MFA devices, see [Virtual MFA Applications](http://aws.amazon.com/iam/details/mfa/#Virtual_MFA_Applications).) If the virtual MFA application supports multiple accounts (multiple virtual MFA devices), choose the option to create a new account (a new virtual MFA device).\n    7. Determine whether the MFA app supports QR codes, and then do one of the following:\n\n     - Use the app to scan the QR code. For example, you might choose the camera icon or choose an option similar to Scan code, and then use the device's camera to scan the code.\n     - In the Manage MFA Device wizard, choose Show secret key for manual configuration, and then type the secret configuration key into your MFA application.\n\n     When you are finished, the virtual MFA device starts generating one-time passwords.\n    8. In the Manage MFA Device wizard, in the Authentication Code 1 box, type the one-time password that currently appears in the virtual MFA device. Wait up to 30 seconds for the device to generate a new one-time password. Then type the second one-time password into the Authentication Code 2 box. Choose Active Virtual MFA.\n\n    **Forced IAM User Self-Service Remediation**\n\n    Amazon has published a pattern that forces users to self-service setup MFA before they have access to their complete permissions set. Until they complete this step, they cannot access their full permissions. This pattern can be used on new AWS accounts. It can also be used on existing accounts - it is recommended users are given instructions and a grace period to accomplish MFA enrollment before active enforcement on existing AWS accounts.\n\n    [How to Delegate Management of Multi-Factor Authentication to AWS IAM Users](http://blogs.aws.amazon.com/security/post/Tx2SJJYE082KBUK/How-to-Delegate-Management-of-Multi-Factor-Authentication-to-AWS-IAM-Users)\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['IA-2(1)']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Use Multifactor Authentication For All Administrative Access CONTROL:4.5 DESCRIPTION:Use multi-factor authentication and encrypted channels for all administrative account access.;\"\n  tag ref: \"http://tools.ietf.org/html/rfc6238:http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html:CIS CSC v6.0 #5.6, #11.4, #12.6, #16.11\"\n\n  service_account_mfa_exceptions = input('service_account_mfa_exceptions')\n\n  users_without_mfa = aws_iam_users.where(has_console_password: true).where(has_mfa_enabled: false).usernames\n\n  if service_account_mfa_exceptions.compact.empty?\n    describe 'The active IAM users that do not have MFA enabled' do\n      subject { users_without_mfa }\n      it { should be_empty }\n    end\n  else\n    describe \"The active IAM users that do not have MFA enabled\n    (except for the documented service accounts: #{service_account_mfa_exceptions})\" do\n      subject { users_without_mfa - service_account_mfa_exceptions }\n      it { should be_empty }\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.2.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.2"
    },
    {
      "title": "Ensure IAM password policy prevents password reuse",
      "desc": "IAM password policies can prevent the reuse of a given password by the same user. It is recommended that the password policy prevent the reuse of passwords.",
      "descriptions": {
        "default": "IAM password policies can prevent the reuse of a given password by the same user. It is recommended that the password policy prevent the reuse of passwords.",
        "rationale": "Preventing password reuse increases account resiliency against brute force login attempts.",
        "check": "Perform the following to ensure the password policy is configured as prescribed:\n\n    Via AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Ensure \"Prevent password reuse\" is checked\n    5. Ensure \"Number of passwords to remember\" is set to 24\n\n    Via CLI\n    ```\n    aws iam get-account-password-policy\n    ```\n    Ensure the output of the above command includes \"PasswordReusePrevention\": 24",
        "fix": "Perform the following to set the password policy as prescribed:\n\n    Via AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Check \"Prevent password reuse\"\n    5. Set \"Number of passwords to remember\" is set to `24`\n\n     Via CLI\n    ```\n     aws iam update-account-password-policy --password-reuse-prevention 24\n    ```\n    Note: All commands starting with \"aws iam update-account-password-policy\" can be combined into a single command."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "IA-5(1)"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Use Unique Passwords CONTROL:4.4 DESCRIPTION:Where multi-factor authentication is not supported (such as local administrator, root, or service accounts), accounts will use passwords that are unique to that system.;"
      },
      "code": "control \"aws-foundations-cis-1.10\" do\n  title \"Ensure IAM password policy prevents password reuse\"\n  desc  \"IAM password policies can prevent the reuse of a given password by the same user. It is recommended that the password policy prevent the reuse of passwords.\"\n  desc  \"rationale\", \"Preventing password reuse increases account resiliency against brute force login attempts.\"\n  desc  \"check\", \"Perform the following to ensure the password policy is configured as prescribed:\n\n    Via AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Ensure \\\"Prevent password reuse\\\" is checked\n    5. Ensure \\\"Number of passwords to remember\\\" is set to 24\n\n    Via CLI\n    ```\n    aws iam get-account-password-policy\n    ```\n    Ensure the output of the above command includes \\\"PasswordReusePrevention\\\": 24\"\n  desc  \"fix\", \"Perform the following to set the password policy as prescribed:\n\n    Via AWS Console\n\n    1. Login to AWS Console (with appropriate permissions to View Identity Access Management Account Settings)\n    2. Go to IAM Service on the AWS Console\n    3. Click on Account Settings on the Left Pane\n    4. Check \\\"Prevent password reuse\\\"\n    5. Set \\\"Number of passwords to remember\\\" is set to `24`\n\n     Via CLI\n    ```\n     aws iam update-account-password-policy --password-reuse-prevention 24\n    ```\n    Note: All commands starting with \\\"aws iam update-account-password-policy\\\" can be combined into a single command.\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['IA-5(1)']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Use Unique Passwords CONTROL:4.4 DESCRIPTION:Where multi-factor authentication is not supported (such as local administrator, root, or service accounts), accounts will use passwords that are unique to that system.;\"\n\n\n  describe aws_iam_password_policy do\n    it { should exist }\n    it { should prevent_password_reuse }\n    its('number_of_passwords_to_remember') { should cmp == 24 }\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.10.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.10"
    },
    {
      "title": "Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket",
      "desc": "S3 Bucket Access Logging generates a log that contains access records for each request made to your S3 bucket. An access log record contains details about the request, such as the request type, the resources specified in the request worked, and the time and date the request was processed. It is recommended that bucket access logging be enabled on the CloudTrail S3 bucket.",
      "descriptions": {
        "default": "S3 Bucket Access Logging generates a log that contains access records for each request made to your S3 bucket. An access log record contains details about the request, such as the request type, the resources specified in the request worked, and the time and date the request was processed. It is recommended that bucket access logging be enabled on the CloudTrail S3 bucket.",
        "rationale": "By enabling S3 bucket logging on target S3 buckets, it is possible to capture all events which may affect objects within an target buckets. Configuring logs to be placed in a separate bucket allows access to log information which can be useful in security and incident response workflows.",
        "check": "Perform the following ensure the CloudTrail S3 bucket has access logging is enabled:\n\n    Via the management Console\n    1. Go to the Amazon CloudTrail console at [https://console.aws.amazon.com/cloudtrail/home](https://console.aws.amazon.com/cloudtrail/home)\n    2. In the API activity history pane on the left, click Trails\n    3. In the Trails pane, note the bucket names in the S3 bucket column\n    4. Sign in to the AWS Management Console and open the S3 console at [https://console.aws.amazon.com/s3](https://console.aws.amazon.com/s3).\n    5. Under `All Buckets` click on a target S3 bucket\n    6. Click on `Properties` in the top right of the console\n    7. Under `Bucket:` _ `` _ click on `Logging`\n    8. Ensure `Enabled` is checked.\n\n    Via CLI\n    1. Get the name of the S3 bucket that CloudTrail is logging to:\n    ```\n    aws cloudtrail describe-trails --query 'trailList[*].S3BucketName'\n    ```\n    2. Ensure Bucket Logging is enabled:\n    ```\n    aws s3api get-bucket-logging --bucket\n    ```\n    Ensure command does not returns empty output.\n    Sample Output for a bucket with logging enabled:\n    ```\n    {\n     \"LoggingEnabled\": {\n     \"TargetPrefix\": \"\t\",\n     \"TargetBucket\": \"\"\n     }\n    }\n    ```",
        "fix": "Perform the following to enable S3 bucket logging:\n\n    Via the Management Console\n    1. Sign in to the AWS Management Console and open the S3 console at [https://console.aws.amazon.com/s3](https://console.aws.amazon.com/s3).\n    2. Under `All Buckets` click on the target S3 bucket\n    3. Click on `Properties` in the top right of the console\n    4. Under `Bucket:`  click on `Logging`\n    5. Configure bucket logging\n     1. Click on `Enabled` checkbox\n     2. Select Target Bucket from list\n     3. Enter a Target Prefix\n    6. Click `Save`"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AU-12",
          "AU-2"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Activate audit logging CONTROL:6.2 DESCRIPTION:Ensure that local logging has been enabled on all systems and networking devices.;TITLE:Enforce Detail Logging for Access or Changes to Sensitive Data CONTROL:14.9 DESCRIPTION:Enforce detailed audit logging for access to sensitive data or changes to sensitive data (utilizing tools such as File Integrity Monitoring or Security Information and Event Monitoring).;",
        "ref": "CIS CSC v6.0 #14.6"
      },
      "code": "control \"aws-foundations-cis-2.6\" do\n  title \"Ensure S3 bucket access logging is enabled on the CloudTrail S3 bucket\"\n  desc  \"S3 Bucket Access Logging generates a log that contains access records for each request made to your S3 bucket. An access log record contains details about the request, such as the request type, the resources specified in the request worked, and the time and date the request was processed. It is recommended that bucket access logging be enabled on the CloudTrail S3 bucket.\"\n  desc  \"rationale\", \"By enabling S3 bucket logging on target S3 buckets, it is possible to capture all events which may affect objects within an target buckets. Configuring logs to be placed in a separate bucket allows access to log information which can be useful in security and incident response workflows.\"\n  desc  \"check\", \"Perform the following ensure the CloudTrail S3 bucket has access logging is enabled:\n\n    Via the management Console\n    1. Go to the Amazon CloudTrail console at [https://console.aws.amazon.com/cloudtrail/home](https://console.aws.amazon.com/cloudtrail/home)\n    2. In the API activity history pane on the left, click Trails\n    3. In the Trails pane, note the bucket names in the S3 bucket column\n    4. Sign in to the AWS Management Console and open the S3 console at [https://console.aws.amazon.com/s3](https://console.aws.amazon.com/s3).\n    5. Under `All Buckets` click on a target S3 bucket\n    6. Click on `Properties` in the top right of the console\n    7. Under `Bucket:` _ `` _ click on `Logging`\n    8. Ensure `Enabled` is checked.\n\n    Via CLI\n    1. Get the name of the S3 bucket that CloudTrail is logging to:\n    ```\n    aws cloudtrail describe-trails --query 'trailList[*].S3BucketName'\n    ```\n    2. Ensure Bucket Logging is enabled:\n    ```\n    aws s3api get-bucket-logging --bucket\n    ```\n    Ensure command does not returns empty output.\n    Sample Output for a bucket with logging enabled:\n    ```\n    {\n     \\\"LoggingEnabled\\\": {\n     \\\"TargetPrefix\\\": \\\"\\t\\\",\n     \\\"TargetBucket\\\": \\\"\\\"\n     }\n    }\n    ```\"\n  desc  \"fix\", \"Perform the following to enable S3 bucket logging:\n\n    Via the Management Console\n    1. Sign in to the AWS Management Console and open the S3 console at [https://console.aws.amazon.com/s3](https://console.aws.amazon.com/s3).\n    2. Under `All Buckets` click on the target S3 bucket\n    3. Click on `Properties` in the top right of the console\n    4. Under `Bucket:`  click on `Logging`\n    5. Configure bucket logging\n     1. Click on `Enabled` checkbox\n     2. Select Target Bucket from list\n     3. Enter a Target Prefix\n    6. Click `Save`\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AU-12', 'AU-2']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Activate audit logging CONTROL:6.2 DESCRIPTION:Ensure that local logging has been enabled on all systems and networking devices.;TITLE:Enforce Detail Logging for Access or Changes to Sensitive Data CONTROL:14.9 DESCRIPTION:Enforce detailed audit logging for access to sensitive data or changes to sensitive data (utilizing tools such as File Integrity Monitoring or Security Information and Event Monitoring).;\"\n  tag ref: \"CIS CSC v6.0 #14.6\"\n\n  \n  describe aws_cloudtrail_trails do\n    it { should exist }\n  end\n\n  aws_cloudtrail_trails.trail_arns.each do |trail|\n    bucket_name = aws_cloudtrail_trail(trail).s3_bucket_name\n    if input(\"exception_bucket_list\").include?(bucket_name)\n      describe 'Bucket not inspected because it is defined as an exception' do\n        skip \"Bucket: #{bucket_name} not inspected because it is defined in exception_bucket_list.\"\n      end\n    else\n      describe aws_s3_bucket(bucket_name) do\n        it { should have_access_logging_enabled }\n      end\n    end\n  end\n\n  # Use this after skeletal aws_cloudtrail_trails is enhanced to expose s3_bucket_name\n  # aws_cloudtrail_trails.s3_bucket_name.uniq.each do |bucket|\n  #   describe aws_s3_bucket( bucket ) do\n  #     it{ should be_logging_enabled }\n  #   end\n  # end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-2.6.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-2.6"
    },
    {
      "title": "Ensure no security groups allow ingress from 0.0.0.0/0 to port 22",
      "desc": "Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to port `22` .",
      "descriptions": {
        "default": "Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to port `22` .",
        "rationale": "Removing unfettered connectivity to remote console services, such as SSH, reduces a server's exposure to risk.",
        "check": "Perform the following to determine if the account is configured as prescribed:\n\n    1. Login to the AWS Management Console at [https://console.aws.amazon.com/vpc/home](https://console.aws.amazon.com/vpc/home)\n    2. In the left pane, click `Security Groups`\n    3. For each security group, perform the following:\n    1. Select the security group\n    2. Click the `Inbound Rules` tab\n    3. Ensure no rule exists that has a port range that includes port `22` and has a `Source` of `0.0.0.0/0`\n\n    Note: A Port value of `ALL` or a port range such as `0-1024` are inclusive of port `22` .",
        "fix": "Perform the following to implement the prescribed state:\n\n    1. Login to the AWS Management Console at [https://console.aws.amazon.com/vpc/home](https://console.aws.amazon.com/vpc/home)\n    2. In the left pane, click `Security Groups`\n    3. For each security group, perform the following:\n    1. Select the security group\n    2. Click the `Inbound Rules` tab\n    3. Identify the rules to be removed\n    4. Click the `x` in the `Remove` column\n    5. Click `Save`"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "CM-7(1)"
        ],
        "notes": null,
        "comment": "For updating an existing environment, care should be taken to ensure that administrators currently relying on an existing ingress from 0.0.0.0/0 have access to ports 22 and/or 3389 through another security group.",
        "cis_controls": "TITLE:Ensure Only Approved Ports, Protocols and Services Are Running CONTROL:9.2 DESCRIPTION:Ensure that only network ports, protocols, and services listening on a system with validated business needs, are running on each system.;"
      },
      "code": "control \"aws-foundations-cis-4.1\" do\n  title \"Ensure no security groups allow ingress from 0.0.0.0/0 to port 22\"\n  desc  \"Security groups provide stateful filtering of ingress/egress network traffic to AWS resources. It is recommended that no security group allows unrestricted ingress access to port `22` .\"\n  desc  \"rationale\", \"Removing unfettered connectivity to remote console services, such as SSH, reduces a server's exposure to risk.\"\n  desc  \"check\", \"Perform the following to determine if the account is configured as prescribed:\n\n    1. Login to the AWS Management Console at [https://console.aws.amazon.com/vpc/home](https://console.aws.amazon.com/vpc/home)\n    2. In the left pane, click `Security Groups`\n    3. For each security group, perform the following:\n    1. Select the security group\n    2. Click the `Inbound Rules` tab\n    3. Ensure no rule exists that has a port range that includes port `22` and has a `Source` of `0.0.0.0/0`\n\n    Note: A Port value of `ALL` or a port range such as `0-1024` are inclusive of port `22` .\"\n  desc  \"fix\", \"Perform the following to implement the prescribed state:\n\n    1. Login to the AWS Management Console at [https://console.aws.amazon.com/vpc/home](https://console.aws.amazon.com/vpc/home)\n    2. In the left pane, click `Security Groups`\n    3. For each security group, perform the following:\n    1. Select the security group\n    2. Click the `Inbound Rules` tab\n    3. Identify the rules to be removed\n    4. Click the `x` in the `Remove` column\n    5. Click `Save`\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['CM-7(1)']\n  tag notes: nil\n  tag comment: \"For updating an existing environment, care should be taken to ensure that administrators currently relying on an existing ingress from 0.0.0.0/0 have access to ports 22 and/or 3389 through another security group.\"\n  tag cis_controls: \"TITLE:Ensure Only Approved Ports, Protocols and Services Are Running CONTROL:9.2 DESCRIPTION:Ensure that only network ports, protocols, and services listening on a system with validated business needs, are running on each system.;\"\n\n\n  exception_security_group_list = input('exception_security_group_list')\n\n  aws_security_groups.group_ids.each do |group_id|\n    if exception_security_group_list.include?(group_id)\n      describe 'Security Group not inspected because it is defined as an exception' do\n        skip \"Security Group:: #{group_id} not inspected because it is defined in exception_security_group_list.\"\n      end\n    end\n\n    next if exception_security_group_list.include?(group_id)\n\n    describe aws_security_group(group_id) do\n      it { should_not allow_in(port: 22, ipv4_range: '0.0.0.0/0') }\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-4.1.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-4.1"
    },
    {
      "title": "Ensure routing tables for VPC peering are \"least access\"",
      "desc": "Once a VPC peering connection is estalished, routing tables must be updated to establish any connections between the peered VPCs. These routes can be as specific as desired - even peering a VPC to only a single host on the other side of the connection.",
      "descriptions": {
        "default": "Once a VPC peering connection is estalished, routing tables must be updated to establish any connections between the peered VPCs. These routes can be as specific as desired - even peering a VPC to only a single host on the other side of the connection.",
        "rationale": "Being highly selective in peering routing tables is a very effective way of minimizing the impact of breach as resources outside of these routes are inaccessible to the peered VPC.",
        "check": "Review routing tables of peered VPCs for whether they route all subnets of each VPC and whether that is necessary to accomplish the intended purposes for peering the VPCs.\n\n    Via CLI:\n    1. List all the route tables from a VPC and check if \"GatewayId\" is pointing to a __ (e.g. pcx-1a2b3c4d) and if \"DestinationCidrBlock\" is as specific as desired.\n    ```\n    aws ec2 describe-route-tables --filter \"Name=vpc-id,Values=\" --query \"RouteTables[*].{RouteTableId:RouteTableId, VpcId:VpcId, Routes:Routes, AssociatedSubnets:Associations[*].SubnetId}\"\n    ```",
        "fix": "Remove and add route table entries to ensure that the least number of subnets or hosts as is required to accomplish the purpose for peering are routable.\n\n    Via CLI:\n    1. For each __ containing routes non compliant with your routing policy (which grants more than desired \"least access\"), delete the non compliant route:\n    ```\n    aws ec2 delete-route --route-table-id  --destination-cidr-block\n    ```\n     2. Create a new compliant route:\n    ```\n    aws ec2 create-route --route-table-id  --destination-cidr-block --vpc-peering-connection-id\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Medium",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AC-3 (3)"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Protect Information through Access Control Lists CONTROL:14.6 DESCRIPTION:Protect all information stored on systems with file system, network share, claims, application, or database specific access control lists. These controls will enforce the principle that only authorized individuals should have access to the information based on their need to access the information as a part of their responsibilities.;",
        "ref": "http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/peering-configurations-partial-access.html"
      },
      "code": "control \"aws-foundations-cis-4.4\" do\n  title \"Ensure routing tables for VPC peering are \\\"least access\\\"\"\n  desc  \"Once a VPC peering connection is estalished, routing tables must be updated to establish any connections between the peered VPCs. These routes can be as specific as desired - even peering a VPC to only a single host on the other side of the connection.\"\n  desc  \"rationale\", \"Being highly selective in peering routing tables is a very effective way of minimizing the impact of breach as resources outside of these routes are inaccessible to the peered VPC.\"\n  desc  \"check\", \"Review routing tables of peered VPCs for whether they route all subnets of each VPC and whether that is necessary to accomplish the intended purposes for peering the VPCs.\n\n    Via CLI:\n    1. List all the route tables from a VPC and check if \\\"GatewayId\\\" is pointing to a __ (e.g. pcx-1a2b3c4d) and if \\\"DestinationCidrBlock\\\" is as specific as desired.\n    ```\n    aws ec2 describe-route-tables --filter \\\"Name=vpc-id,Values=\\\" --query \\\"RouteTables[*].{RouteTableId:RouteTableId, VpcId:VpcId, Routes:Routes, AssociatedSubnets:Associations[*].SubnetId}\\\"\n    ```\"\n  desc  \"fix\", \"Remove and add route table entries to ensure that the least number of subnets or hosts as is required to accomplish the purpose for peering are routable.\n\n    Via CLI:\n    1. For each __ containing routes non compliant with your routing policy (which grants more than desired \\\"least access\\\"), delete the non compliant route:\n    ```\n    aws ec2 delete-route --route-table-id  --destination-cidr-block\n    ```\n     2. Create a new compliant route:\n    ```\n    aws ec2 create-route --route-table-id  --destination-cidr-block --vpc-peering-connection-id\n    ```\"\n  impact 0.5\n  tag severity: \"Medium\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AC-3 (3)']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Protect Information through Access Control Lists CONTROL:14.6 DESCRIPTION:Protect all information stored on systems with file system, network share, claims, application, or database specific access control lists. These controls will enforce the principle that only authorized individuals should have access to the information based on their need to access the information as a part of their responsibilities.;\"\n  tag ref: \"http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/peering-configurations-partial-access.html\"\n\n\n  aws_route_tables.route_table_ids.each do |route_table_id|\n    aws_route_table(route_table_id).routes.each do |route|\n      next unless route.key?(:vpc_peering_connection_id)\n\n      describe route do\n        its([:destination_cidr_block]) { should_not be nil }\n      end\n    end\n    next unless aws_route_table(route_table_id).routes.none? { |route| route.key?(:vpc_peering_connection_id) }\n\n    describe 'No routes with peering connection were found for the route table' do\n      skip \"No routes with peering connection were found for the route_table #{route_table_id}\"\n    end\n  end\n  if aws_route_tables.route_table_ids.empty?\n    describe 'Control skipped because no route tables were found' do\n      skip 'This control is skipped since the aws_route_tables resource returned an empty route table list'\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-4.4.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-4.4"
    },
    {
      "title": "Ensure a log metric filter and alarm exist for CloudTrail configuration changes",
      "desc": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.",
      "descriptions": {
        "default": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.",
        "rationale": "Monitoring changes to CloudTrail's configuration will help ensure sustained visibility to activities performed in the AWS account.",
        "check": "Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \"IsMultiRegionTrail\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \"\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \"filterPattern\": \"{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \"SubscriptionArn\" with valid aws ARN.\n    ```\n    Example of valid \"SubscriptionArn\": \"arn:aws:sns::::\"\n    ```",
        "fix": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for cloudtrail configuration changes and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AU-6"
        ],
        "notes": "Configuring log metric filter and alarm on Multi-region (global) CloudTrail\n  - ensures that activities from all regions (used as well as unused) are monitored\n  - ensures that activities on all supported global services are monitored\n  - ensures that all management events across all regions are monitored",
        "comment": null,
        "cis_controls": "TITLE:Maintenance, Monitoring and Analysis of Audit Logs CONTROL:6 DESCRIPTION:Maintenance, Monitoring and Analysis of Audit Logs;",
        "ref": "https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html"
      },
      "code": "control \"aws-foundations-cis-3.5\" do\n  title \"Ensure a log metric filter and alarm exist for CloudTrail configuration changes\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. It is recommended that a metric filter and alarm be established for detecting changes to CloudTrail's configurations.\"\n  desc  \"rationale\", \"Monitoring changes to CloudTrail's configuration will help ensure sustained visibility to activities performed in the AWS account.\"\n  desc  \"check\", \"Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \\\"IsMultiRegionTrail\\\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \\\"\\\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \\\"filterPattern\\\": \\\"{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }\\\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \\\"SubscriptionArn\\\" with valid aws ARN.\n    ```\n    Example of valid \\\"SubscriptionArn\\\": \\\"arn:aws:sns::::\\\"\n    ```\"\n  desc  \"fix\", \"Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for cloudtrail configuration changes and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AU-6']\n  tag notes: \"Configuring log metric filter and alarm on Multi-region (global) CloudTrail\n  - ensures that activities from all regions (used as well as unused) are monitored\n  - ensures that activities on all supported global services are monitored\n  - ensures that all management events across all regions are monitored\"\n  tag comment: nil\n  tag cis_controls: \"TITLE:Maintenance, Monitoring and Analysis of Audit Logs CONTROL:6 DESCRIPTION:Maintenance, Monitoring and Analysis of Audit Logs;\"\n  tag ref: \"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html\"\n\n  \n  pattern = '{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }'\n\n  describe aws_cloudwatch_log_metric_filter(pattern: pattern) do\n    it { should exist }\n  end\n\n  # Find the log_group_name associated with the aws_cloudwatch_log_metric_filter that has the pattern\n  log_group_name = aws_cloudwatch_log_metric_filter(pattern: pattern).log_group_name\n\n  # Find cloudtrails associated with with `log_group_name` parsed above\n  associated_trails = aws_cloudtrail_trails.names.select{ |x| aws_cloudtrail_trail(x).cloud_watch_logs_log_group_arn =~ /log-group:#{log_group_name}:/ }\n\n  # Ensure log_group is associated atleast one cloudtrail\n  describe \"Cloudtrails associated with log-group: #{log_group_name}\" do\n    subject { associated_trails }\n    it { should_not be_empty }\n  end\n\n  # Ensure atleast one of the associated cloudtrail meet the requirements.\n  describe.one do\n    associated_trails.each do |trail|\n      describe aws_cloudtrail_trail(trail) do\n        it { should be_multi_region_trail }\n        it { should have_event_selector_mgmt_events_rw_type_all }\n        it { should be_logging }\n      end\n    end\n  end\n\n  # Parse out `metric_name` and `metric_namespace` for the specified pattern.\n  associated_metric_filter = aws_cloudwatch_log_metric_filter(pattern: pattern, log_group_name: log_group_name)\n  metric_name = associated_metric_filter.metric_name\n  metric_namespace = associated_metric_filter.metric_namespace\n\n  # Ensure aws_cloudwatch_alarm for the specified pattern meets requirements.\n  if associated_metric_filter.exists?\n    describe aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace) do\n      it { should exist }\n      its ('alarm_actions') { should_not be_empty }\n    end\n\n    aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace).alarm_actions.each do |sns|\n      describe aws_sns_topic(sns) do\n        it { should exist }\n        its('confirmed_subscription_count') { should cmp >= 1 }\n      end\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-3.5.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-3.5"
    },
    {
      "title": "Ensure a log metric filter and alarm exist for route table changes",
      "desc": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Routing tables are used to route network traffic between subnets and to network gateways. It is recommended that a metric filter and alarm be established for changes to route tables.",
      "descriptions": {
        "default": "Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Routing tables are used to route network traffic between subnets and to network gateways. It is recommended that a metric filter and alarm be established for changes to route tables.",
        "rationale": "Monitoring changes to route tables will help ensure that all VPC traffic flows through an expected path.",
        "check": "Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \"IsMultiRegionTrail\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \"\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \"filterPattern\": \"{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \"SubscriptionArn\" with valid aws ARN.\n    ```\n    Example of valid \"SubscriptionArn\": \"arn:aws:sns::::\"\n    ```",
        "fix": "Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for route table changes and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```"
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "CM-6(2)",
          "AU-12"
        ],
        "notes": "Configuring log metric filter and alarm on Multi-region (global) CloudTrail\n  - ensures that activities from all regions (used as well as unused) are monitored\n  - ensures that activities on all supported global services are monitored\n  - ensures that all management events across all regions are monitored",
        "comment": null,
        "cis_controls": "TITLE:Use Automated Tools to Verify Standard Device Configurations and Detect Changes CONTROL:11.3 DESCRIPTION:Compare all network device configuration against approved security configurations defined for each network device in use and alert when any deviations are discovered.;TITLE:Activate audit logging CONTROL:6.2 DESCRIPTION:Ensure that local logging has been enabled on all systems and networking devices.;",
        "ref": "https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html"
      },
      "code": "control \"aws-foundations-cis-3.13\" do\n  title \"Ensure a log metric filter and alarm exist for route table changes\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing CloudTrail Logs to CloudWatch Logs and establishing corresponding metric filters and alarms. Routing tables are used to route network traffic between subnets and to network gateways. It is recommended that a metric filter and alarm be established for changes to route tables.\"\n  desc  \"rationale\", \"Monitoring changes to route tables will help ensure that all VPC traffic flows through an expected path.\"\n  desc  \"check\", \"Perform the following to ensure that there is at least one active multi-region CloudTrail with prescribed metric filters and alarms configured:\n    1. Identify the log group name configured for use with active multi-region CloudTrail:\n    - List all CloudTrails:\n    `aws cloudtrail describe-trails`\n    - Identify Multi region Cloudtrails: `Trails with \\\"IsMultiRegionTrail\\\" set to true`\n    - From value associated with CloudWatchLogsLogGroupArn note ``\n    Example: for CloudWatchLogsLogGroupArn that looks like `arn:aws:logs:::log-group:NewGroup:*`, `` would be `NewGroup`\n    - Ensure Identified Multi region CloudTrail is active\n    `aws cloudtrail get-trail-status --name `\n    ensure `IsLogging` is set to `TRUE`\n    - Ensure identified Multi-region Cloudtrail captures all Management Events\n    `aws cloudtrail get-event-selectors --trail-name\n    `\n    Ensure there is at least one Event Selector for a Trail with `IncludeManagementEvents` set to `true` and `ReadWriteType` set to `All`\n    2. Get a list of all associated metric filters for this ``:\n    ```\n    aws logs describe-metric-filters --log-group-name \\\"\\\"\n    ```\n    3. Ensure the output from the above command contains the following:\n    ```\n    \\\"filterPattern\\\": \\\"{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }\\\"\n    ```\n    4. Note the `` value associated with the `filterPattern` found in step 3.\n    5. Get a list of CloudWatch alarms and filter on the `` captured in step 4.\n    ```\n    aws cloudwatch describe-alarms --query 'MetricAlarms[?MetricName== ``]'\n    ```\n    6. Note the `AlarmActions` value - this will provide the SNS topic ARN value.\n    7. Ensure there is at least one active subscriber to the SNS topic\n    ```\n    aws sns list-subscriptions-by-topic --topic-arn\n    ```\n    at least one subscription should have \\\"SubscriptionArn\\\" with valid aws ARN.\n    ```\n    Example of valid \\\"SubscriptionArn\\\": \\\"arn:aws:sns::::\\\"\n    ```\"\n  desc  \"fix\", \"Perform the following to setup the metric filter, alarm, SNS topic, and subscription:\n    1. Create a metric filter based on filter pattern provided which checks for route table changes and the `` taken from audit step 1.\n    ```\n    aws logs put-metric-filter --log-group-name  --filter-name `` --metric-transformations metricName= `` ,metricNamespace='CISBenchmark',metricValue=1 --filter-pattern '{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }'\n    ```\n    **Note**: You can choose your own metricName and metricNamespace strings. Using the same metricNamespace for all Foundations Benchmark metrics will group them together.\n    2. Create an SNS topic that the alarm will notify\n    ```\n    aws sns create-topic --name\n    ```\n    **Note**: you can execute this command once and then re-use the same topic for all monitoring alarms.\n    3. Create an SNS subscription to the topic created in step 2\n    ```\n    aws sns subscribe --topic-arn  --protocol `` --notification-endpoint ``\n    ```\n    **Note**: you can execute this command once and then re-use the SNS subscription for all monitoring alarms.\n    4. Create an alarm that is associated with the CloudWatch Logs Metric Filter created in step 1 and an SNS topic created in step 2\n    ```\n    aws cloudwatch put-metric-alarm --alarm-name `` --metric-name `` --statistic Sum --period 300 --threshold 1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark' --alarm-actions\n    ```\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['CM-6(2)', 'AU-12']\n  tag notes: \"Configuring log metric filter and alarm on Multi-region (global) CloudTrail\n  - ensures that activities from all regions (used as well as unused) are monitored\n  - ensures that activities on all supported global services are monitored\n  - ensures that all management events across all regions are monitored\"\n  tag comment: nil\n  tag cis_controls: \"TITLE:Use Automated Tools to Verify Standard Device Configurations and Detect Changes CONTROL:11.3 DESCRIPTION:Compare all network device configuration against approved security configurations defined for each network device in use and alert when any deviations are discovered.;TITLE:Activate audit logging CONTROL:6.2 DESCRIPTION:Ensure that local logging has been enabled on all systems and networking devices.;\"\n  tag ref: \"https://docs.aws.amazon.com/awscloudtrail/latest/userguide/receive-cloudtrail-log-files-from-multiple-regions.html:https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudwatch-alarms-for-cloudtrail.html:https://docs.aws.amazon.com/sns/latest/dg/SubscribeTopic.html\"\n\n\n  pattern = '{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }'\n\n  describe aws_cloudwatch_log_metric_filter(pattern: pattern) do\n    it { should exist }\n  end\n\n  # Find the log_group_name associated with the aws_cloudwatch_log_metric_filter that has the pattern\n  log_group_name = aws_cloudwatch_log_metric_filter(pattern: pattern).log_group_name\n\n  # Find cloudtrails associated with with `log_group_name` parsed above\n  associated_trails = aws_cloudtrail_trails.names.select{ |x| aws_cloudtrail_trail(x).cloud_watch_logs_log_group_arn =~ /log-group:#{log_group_name}:/ }\n\n  # Ensure log_group is associated atleast one cloudtrail\n  describe \"Cloudtrails associated with log-group: #{log_group_name}\" do\n    subject { associated_trails }\n    it { should_not be_empty }\n  end\n\n  # Ensure atleast one of the associated cloudtrail meet the requirements.\n  describe.one do\n    associated_trails.each do |trail|\n      describe aws_cloudtrail_trail(trail) do\n        it { should be_multi_region_trail }\n        it { should have_event_selector_mgmt_events_rw_type_all }\n        it { should be_logging }\n      end\n    end\n  end\n\n  # Parse out `metric_name` and `metric_namespace` for the specified pattern.\n  associated_metric_filter = aws_cloudwatch_log_metric_filter(pattern: pattern, log_group_name: log_group_name)\n  metric_name = associated_metric_filter.metric_name\n  metric_namespace = associated_metric_filter.metric_namespace\n\n  # Ensure aws_cloudwatch_alarm for the specified pattern meets requirements.\n  if associated_metric_filter.exists?\n    describe aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace) do\n      it { should exist }\n      its ('alarm_actions') { should_not be_empty }\n    end\n\n    aws_cloudwatch_alarm(metric_name: metric_name, metric_namespace: metric_namespace).alarm_actions.each do |sns|\n      describe aws_sns_topic(sns) do\n        it { should exist }\n        its('confirmed_subscription_count') { should cmp >= 1 }\n      end\n    end\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-3.13.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-3.13"
    },
    {
      "title": "Maintain current contact details",
      "desc": "Ensure contact email and telephone details for AWS accounts are current and map to more than one individual in your organisation.\n\n    An AWS account supports a number of contact details, and AWS will use these to contact the account owner if activity judged to be in breach of Acceptable Use Policy or indicative of likely security compromise is observed by the AWS Abuse team. Contact details should not be for a single individual, as circumstances may arise where that individual is unavailable. Email contact details should point to a mail alias which forwards email to multiple individuals within the organisation; where feasible, phone contact details should point to a PABX hunt group or other call-forwarding system.",
      "descriptions": {
        "default": "Ensure contact email and telephone details for AWS accounts are current and map to more than one individual in your organisation.\n\n    An AWS account supports a number of contact details, and AWS will use these to contact the account owner if activity judged to be in breach of Acceptable Use Policy or indicative of likely security compromise is observed by the AWS Abuse team. Contact details should not be for a single individual, as circumstances may arise where that individual is unavailable. Email contact details should point to a mail alias which forwards email to multiple individuals within the organisation; where feasible, phone contact details should point to a PABX hunt group or other call-forwarding system.",
        "rationale": "If an AWS account is observed to be behaving in a prohibited or suspicious manner, AWS will attempt to contact the account owner by email and phone using the contact details listed. If this is unsuccessful and the account behaviour needs urgent mitigation, proactive measures may be taken, including throttling of traffic between the account exhibiting suspicious behaviour and the AWS API endpoints and the Internet. This will result in impaired service to and from the account in question, so it is in both the customers and AWS best interests that prompt contact can be established. This is best achieved by setting AWS account contact details to point to resources which have multiple individuals as recipients, such as email aliases and PABX hunt groups.",
        "check": "This activity can only be performed via the AWS Console, with a user who has permission to read and write Billing information (aws-portal:\\*Billing ).\n\n    - Sign in to the AWS Management Console and open the Billing and Cost Management console at https://console.aws.amazon.com/billing/home#/.\n    - On the navigation bar, choose your account name, and then choose My Account.\n    - On the Account Settings page, review and verify the current details.\n    - Under Contact Information, review and verify the current details.",
        "fix": "This activity can only be performed via the AWS Console, with a user who has permission to read and write Billing information (aws-portal:\\*Billing ).\n\n    - Sign in to the AWS Management Console and open the Billing and Cost Management console at https://console.aws.amazon.com/billing/home#/.\n    - On the navigation bar, choose your account name, and then choose My Account.\n    - On the Account Settings page, next to Account Settings, choose Edit.\n    - Next to the field that you need to update, choose Edit.\n    - After you have entered your changes, choose Save changes.\n    - After you have made your changes, choose Done.\n    - To edit your contact information, under Contact Information, choose Edit.\n    - For the fields that you want to change, type your updated information, and then choose Update."
      },
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "Low",
        "gtitle": null,
        "gid": null,
        "rid": null,
        "stig_id": null,
        "fix_id": null,
        "cci": null,
        "nist": [
          "AU-3"
        ],
        "notes": null,
        "comment": null,
        "cis_controls": "TITLE:Enable Detailed Logging CONTROL:6.3 DESCRIPTION:Enable system logging to include detailed information such as a event source, date, user, timestamp, source addresses, destination addresses, and other useful elements.;",
        "ref": "https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/manage-account-payment.html#contact-info"
      },
      "code": "control \"aws-foundations-cis-1.17\" do\n  title \"Maintain current contact details\"\n  desc  \"Ensure contact email and telephone details for AWS accounts are current and map to more than one individual in your organisation.\n\n    An AWS account supports a number of contact details, and AWS will use these to contact the account owner if activity judged to be in breach of Acceptable Use Policy or indicative of likely security compromise is observed by the AWS Abuse team. Contact details should not be for a single individual, as circumstances may arise where that individual is unavailable. Email contact details should point to a mail alias which forwards email to multiple individuals within the organisation; where feasible, phone contact details should point to a PABX hunt group or other call-forwarding system.\"\n  desc  \"rationale\", \"If an AWS account is observed to be behaving in a prohibited or suspicious manner, AWS will attempt to contact the account owner by email and phone using the contact details listed. If this is unsuccessful and the account behaviour needs urgent mitigation, proactive measures may be taken, including throttling of traffic between the account exhibiting suspicious behaviour and the AWS API endpoints and the Internet. This will result in impaired service to and from the account in question, so it is in both the customers and AWS best interests that prompt contact can be established. This is best achieved by setting AWS account contact details to point to resources which have multiple individuals as recipients, such as email aliases and PABX hunt groups.\"\n  desc  \"check\", \"This activity can only be performed via the AWS Console, with a user who has permission to read and write Billing information (aws-portal:\\\\*Billing ).\n\n    - Sign in to the AWS Management Console and open the Billing and Cost Management console at https://console.aws.amazon.com/billing/home#/.\n    - On the navigation bar, choose your account name, and then choose My Account.\n    - On the Account Settings page, review and verify the current details.\n    - Under Contact Information, review and verify the current details.\"\n  desc  \"fix\", \"This activity can only be performed via the AWS Console, with a user who has permission to read and write Billing information (aws-portal:\\\\*Billing ).\n\n    - Sign in to the AWS Management Console and open the Billing and Cost Management console at https://console.aws.amazon.com/billing/home#/.\n    - On the navigation bar, choose your account name, and then choose My Account.\n    - On the Account Settings page, next to Account Settings, choose Edit.\n    - Next to the field that you need to update, choose Edit.\n    - After you have entered your changes, choose Save changes.\n    - After you have made your changes, choose Done.\n    - To edit your contact information, under Contact Information, choose Edit.\n    - For the fields that you want to change, type your updated information, and then choose Update.\"\n  impact 0.5\n  tag severity: \"Low\"\n  tag gtitle: nil\n  tag gid: nil\n  tag rid: nil\n  tag stig_id: nil\n  tag fix_id: nil\n  tag cci: nil\n  tag nist: ['AU-3']\n  tag notes: nil\n  tag comment: nil\n  tag cis_controls: \"TITLE:Enable Detailed Logging CONTROL:6.3 DESCRIPTION:Enable system logging to include detailed information such as a event source, date, user, timestamp, source addresses, destination addresses, and other useful elements.;\"\n  tag ref: \"https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/manage-account-payment.html#contact-info\"\n\n  \n  describe 'Control has to be tested manually' do\n    skip 'This control must be manually reviewed'\n  end\nend",
      "source_location": {
        "ref": "./AWS CIS/controls/aws-foundations-cis-1.17.rb",
        "line": 3
      },
      "id": "aws-foundations-cis-1.17"
    }
  ],
  "groups": [
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-2.7"
      ],
      "id": "controls/aws-foundations-cis-2.7.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.9"
      ],
      "id": "controls/aws-foundations-cis-1.9.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-3.12"
      ],
      "id": "controls/aws-foundations-cis-3.12.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.7"
      ],
      "id": "controls/aws-foundations-cis-1.7.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-3.4"
      ],
      "id": "controls/aws-foundations-cis-3.4.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.8"
      ],
      "id": "controls/aws-foundations-cis-1.8.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-2.9"
      ],
      "id": "controls/aws-foundations-cis-2.9.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-2.3"
      ],
      "id": "controls/aws-foundations-cis-2.3.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-3.3"
      ],
      "id": "controls/aws-foundations-cis-3.3.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-3.6"
      ],
      "id": "controls/aws-foundations-cis-3.6.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.1"
      ],
      "id": "controls/aws-foundations-cis-1.1.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.13"
      ],
      "id": "controls/aws-foundations-cis-1.13.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-3.14"
      ],
      "id": "controls/aws-foundations-cis-3.14.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-3.8"
      ],
      "id": "controls/aws-foundations-cis-3.8.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-3.9"
      ],
      "id": "controls/aws-foundations-cis-3.9.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.21"
      ],
      "id": "controls/aws-foundations-cis-1.21.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.11"
      ],
      "id": "controls/aws-foundations-cis-1.11.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-3.10"
      ],
      "id": "controls/aws-foundations-cis-3.10.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.14"
      ],
      "id": "controls/aws-foundations-cis-1.14.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.20"
      ],
      "id": "controls/aws-foundations-cis-1.20.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.6"
      ],
      "id": "controls/aws-foundations-cis-1.6.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.5"
      ],
      "id": "controls/aws-foundations-cis-1.5.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-3.11"
      ],
      "id": "controls/aws-foundations-cis-3.11.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-2.2"
      ],
      "id": "controls/aws-foundations-cis-2.2.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-2.5"
      ],
      "id": "controls/aws-foundations-cis-2.5.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-2.8"
      ],
      "id": "controls/aws-foundations-cis-2.8.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-4.3"
      ],
      "id": "controls/aws-foundations-cis-4.3.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.3"
      ],
      "id": "controls/aws-foundations-cis-1.3.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.19"
      ],
      "id": "controls/aws-foundations-cis-1.19.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-2.1"
      ],
      "id": "controls/aws-foundations-cis-2.1.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.16"
      ],
      "id": "controls/aws-foundations-cis-1.16.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.22"
      ],
      "id": "controls/aws-foundations-cis-1.22.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-3.7"
      ],
      "id": "controls/aws-foundations-cis-3.7.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.18"
      ],
      "id": "controls/aws-foundations-cis-1.18.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-2.4"
      ],
      "id": "controls/aws-foundations-cis-2.4.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-3.2"
      ],
      "id": "controls/aws-foundations-cis-3.2.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.15"
      ],
      "id": "controls/aws-foundations-cis-1.15.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.4"
      ],
      "id": "controls/aws-foundations-cis-1.4.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.12"
      ],
      "id": "controls/aws-foundations-cis-1.12.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-3.1"
      ],
      "id": "controls/aws-foundations-cis-3.1.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-4.2"
      ],
      "id": "controls/aws-foundations-cis-4.2.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.2"
      ],
      "id": "controls/aws-foundations-cis-1.2.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.10"
      ],
      "id": "controls/aws-foundations-cis-1.10.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-2.6"
      ],
      "id": "controls/aws-foundations-cis-2.6.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-4.1"
      ],
      "id": "controls/aws-foundations-cis-4.1.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-4.4"
      ],
      "id": "controls/aws-foundations-cis-4.4.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-3.5"
      ],
      "id": "controls/aws-foundations-cis-3.5.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-3.13"
      ],
      "id": "controls/aws-foundations-cis-3.13.rb"
    },
    {
      "title": null,
      "controls": [
        "aws-foundations-cis-1.17"
      ],
      "id": "controls/aws-foundations-cis-1.17.rb"
    }
  ],
  "sha256": "11bb147099d022bd96bed5918a97d6e1ee19add6f8398adda60d04e1f2b99577",
  "status_message": "",
  "status": "loaded",
  "generator": {
    "name": "inspec",
    "version": "4.33.1"
  }
}